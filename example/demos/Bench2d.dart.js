// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Bound closures
$$.BoundClosure$3 = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  }
};

$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$compare = {"": "Closure;call$2,$name"};

(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  var libraries = init.libraries;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var descriptor = data[1];
    var classes = [];
    var functions = [];
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property)) continue;
      var element = descriptor[property];
      if (typeof element === "function") {
        $[property] = element;
        functions.push(property);
      } else {
        $$[property] = element;
        classes.push(property);
        classes.push(element[""]);
      }
    }
    var uri = ".../library" + i + ".dart";
    libraries.push([name, uri, classes, functions]);
  }
})([
["Bench2d", {
Bench2d: {"": "Object;canvas,ctx,viewport,debugDraw,world",
  initialize$0: function() {
    var bd, ground, shape, fixDef, x, y, deltaX, deltaY, i, t1, t2, j, t3;
    bd = $.BodyDef$();
    ground = this.world.createBody$1(bd);
    shape = $.PolygonShape$();
    shape.setAsEdge$2(new $.Vector(-40, 0), new $.Vector(40, 0));
    fixDef = $.FixtureDef$();
    fixDef.shape = shape;
    fixDef.density = 0;
    ground.createFixture$1(fixDef);
    shape = $.PolygonShape$();
    shape.setAsBox$2(0.5, 0.5);
    fixDef = $.FixtureDef$();
    fixDef.shape = shape;
    fixDef.density = 5;
    x = new $.Vector(-7, 0.75);
    y = new $.Vector(0, 0);
    deltaX = new $.Vector(0.5625, 1);
    deltaY = new $.Vector(1.125, 0);
    for (i = 0; i < 20; ++i) {
      t1 = x.x;
      t2 = x.y;
      y.x = t1;
      y.y = t2;
      for (j = i; j < 20; ++j) {
        bd = $.BodyDef$();
        bd.type = 2;
        t1 = bd.position;
        t2 = y.x;
        t3 = y.y;
        t1.x = t2;
        t1.y = t3;
        this.world.createBody$1(bd).createFixture$1(fixDef);
        y.x = $.$add$ns(y.x, deltaY.x);
        y.y = $.$add$ns(y.y, deltaY.y);
      }
      x.x = $.$add$ns(x.x, deltaX.x);
      x.y = $.$add$ns(x.y, deltaX.y);
    }
  },
  warmup$0: function() {
    for (var i = 0; i < 256; ++i)
      this.world.step$3(0.016666666666666666, 10, 10);
  },
  bench$0: function() {
    var bench2d, t1, times, i, watch, total;
    bench2d = new $.Bench2d(null, null, null, null, null);
    t1 = new $.DefaultWorldPool(null, null, null);
    t1.distance = $.Distance$_construct();
    t1.collision = $.Collision$_construct(t1);
    t1.timeOfImpact = $.TimeOfImpact$_construct(t1);
    bench2d.world = $.World$(new $.Vector(0, -10), true, t1);
    times = $.List_List(256);
    for (i = 0; i < 256; ++i) {
      watch = new $.Stopwatch(null, null);
      watch.start$0();
      bench2d.world.step$3(0.016666666666666666, 10, 10);
      watch.stop$0();
      times[i] = $.JSNumber_methods.$tdiv(watch.get$elapsedTicks() * 1000000, 1000000);
      $.Primitives_printString($.toString$0(times[i]));
    }
    for (total = 0, i = 0; i < 256; ++i) {
      t1 = times[i];
      if (typeof t1 !== "number")
        throw $.iae(t1);
      total += t1;
    }
    $.Primitives_printString($.JSNumber_methods.toString$0(total));
  },
  Bench2d$0: function() {
    var t1 = new $.DefaultWorldPool(null, null, null);
    t1.distance = $.Distance$_construct();
    t1.collision = $.Collision$_construct(t1);
    t1.timeOfImpact = $.TimeOfImpact$_construct(t1);
    this.world = $.World$(new $.Vector(0, -10), true, t1);
  }
},

main: function() {
  var bench2d, t1;
  bench2d = new $.Bench2d(null, null, null, null, null);
  t1 = new $.DefaultWorldPool(null, null, null);
  t1.distance = $.Distance$_construct();
  t1.collision = $.Collision$_construct(t1);
  t1.timeOfImpact = $.TimeOfImpact$_construct(t1);
  bench2d.world = $.World$(new $.Vector(0, -10), true, t1);
  bench2d.initialize$0();
  bench2d.warmup$0();
  bench2d.bench$0();
}}],
["_interceptors", {
Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.Primitives_objectTypeName(receiver) + "'";
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  }
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  }
},

JSArray: {"": "List/Interceptor;",
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + newLength));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression(new $.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    receiver[index] = value;
  },
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $asList: function() { return [null]; }, $asIterable: function() { return [null]; }},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;"},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var t1, bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException(new $.ArgumentError(b));
    else
      b;
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      t1 = receiver === 0;
      if (t1) {
        bIsNegative = this.get$isNegative(b);
        if ((t1 ? 1 / receiver < 0 : receiver < 0) === bIsNegative)
          return 0;
        if (t1 ? 1 / receiver < 0 : receiver < 0)
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  ceilToDouble$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floorToDouble$0: function(receiver) {
    return Math.floor(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    var t1, truncated;
    t1 = receiver / other;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;", $isint: true, $isnum: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    if (typeof startIndex !== "number")
      $.throwExpression(new $.ArgumentError(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression(new $.ArgumentError(endIndex));
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0))
      throw $.wrapException(new $.RangeError("value " + $.S(startIndex)));
    if (t1.$gt(startIndex, endIndex))
      throw $.wrapException(new $.RangeError("value " + $.S(startIndex)));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.wrapException(new $.RangeError("value " + $.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $isString: true
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
}}],
["_js_helper", {
DartError: {"": "Object;",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.stack == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.stack);
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

Null: {"": "Object;"},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  return $.isJsIndexableSlow(object);
},

isJsIndexableSlow: function(object) {
  var record = $.getDispatchProperty(object);
  if (record == null)
    return false;
  record.x = false;
  return false;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException(new $.ArgumentError(value));
  return res;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = $.getRuntimeTypeInfo(object);
  return $.S($name) + $.joinArguments(t1, 0);
},

Primitives_numMicroseconds: function() {
  var performance, t1, truncated;
  if (typeof window != "undefined" && window !== null) {
    performance = window.performance;
    if (performance != null && typeof performance.webkitNow == "function") {
      t1 = Math.floor(1000 * performance.webkitNow());
      if (isNaN(t1))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t1 == Infinity || t1 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
      return truncated == -0.0 ? 0 : truncated;
    }
  }
  return 1000 * Date.now();
},

iae: function(argument) {
  throw $.wrapException(new $.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression(new $.ArgumentError(index));
  throw $.wrapException(new $.RangeError("value " + $.S(index)));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = new $.DartError();
  wrapper.dartException = ex;
  wrapper.toString = $.DartError_toStringWrapper$closure.call$0;
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

DartError_toStringWrapper: function() {
  return $.toString$0(this);
},

getRuntimeTypeInfo: function(target) {
  return target.$builtinTypeInfo;
},

runtimeTypeToString: function(type) {
  if (typeof type !== "string" && (typeof type !== "object" || type === null || type.constructor !== Array && !$.isJsIndexable(type, type[$.dispatchPropertyName])))
    return $.runtimeTypeToString$bailout(1, type);
  if (type.constructor === Array) {
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
},

runtimeTypeToString$bailout: function(state0, type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.$index$as(type, 0).builtin$cls + $.joinArguments(type, 1);
  else
    return type.builtin$cls;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, t1;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.isJsIndexable(types, types[$.dispatchPropertyName])))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    t1 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t1;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

joinArguments$bailout: function(state0, types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, argument, t2;
  t1 = $.getInterceptor(types);
  if (types == null)
    return "";
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  for (index = startIndex, firstArgument = true, allDynamic = true; index < t1.get$length(types); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    t2 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t2;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string") {
      $name;
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    } else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
}}],
["box2d", {
ContactFilter: {"": "Object;",
  shouldCollide$2: function(fixtureA, fixtureB) {
    var filterA, filterB, t1;
    filterA = fixtureA.filter;
    filterB = fixtureB.filter;
    t1 = filterA.groupIndex;
    if (t1 !== 0 && t1 === filterB.groupIndex)
      return t1 > 0;
    return (filterA.maskBits & filterB.categoryBits) >>> 0 !== 0 && (filterA.categoryBits & filterB.maskBits) >>> 0 !== 0;
  }
},

ContactImpulse: {"": "Object;normalImpulses,tangentImpulses"},

AxisAlignedBox: {"": "Object;lowerBound<,upperBound<",
  setFromCombination$2: function(boxOne, boxTwo) {
    this.lowerBound.x = $.min(boxOne.lowerBound.x, boxTwo.lowerBound.x);
    this.lowerBound.y = $.min(boxOne.lowerBound.y, boxTwo.lowerBound.y);
    this.upperBound.x = $.max(boxOne.upperBound.x, boxTwo.upperBound.x);
    this.upperBound.y = $.max(boxOne.upperBound.y, boxTwo.upperBound.y);
  },
  get$center: function() {
    var t1, c, t2, t3;
    t1 = this.lowerBound;
    c = new $.Vector(t1.x, t1.y);
    t1 = this.upperBound;
    t2 = c.x;
    if (typeof t2 !== "number")
      return this.get$center$bailout(1, t1, t2, c);
    t3 = t1.x;
    if (typeof t3 !== "number")
      return this.get$center$bailout(2, t1, t2, c, t3);
    c.x = t2 + t3;
    t3 = c.y;
    if (typeof t3 !== "number")
      return this.get$center$bailout(3, t1, 0, c, t3);
    t1 = t1.y;
    if (typeof t1 !== "number")
      return this.get$center$bailout(4, t1, 0, c, t3);
    c.y = t3 + t1;
    t1 = c.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    c.x = t1 * 0.5;
    t1 = c.y;
    if (typeof t1 !== "number")
      throw t1.$mul();
    c.y = t1 * 0.5;
    return c;
  },
  get$center$bailout: function(state0, t1, t2, c, t3) {
    switch (state0) {
      case 0:
        t1 = this.lowerBound;
        c = new $.Vector(t1.x, t1.y);
        t1 = this.upperBound;
        t2 = c.x;
      case 1:
        state0 = 0;
        t3 = t1.x;
      case 2:
        state0 = 0;
        c.x = $.$add$ns(t2, t3);
        t3 = c.y;
      case 3:
        state0 = 0;
        t1 = t1.y;
      case 4:
        state0 = 0;
        c.y = $.$add$ns(t3, t1);
        t1 = c.x;
        if (typeof t1 !== "number")
          throw t1.$mul();
        c.x = $.$mul$n(t1, 0.5);
        t1 = c.y;
        if (typeof t1 !== "number")
          throw t1.$mul();
        c.y = $.$mul$n(t1, 0.5);
        return c;
    }
  },
  contains$1: function(_, aabb) {
    var t1, t2, t3, t4;
    t1 = this.lowerBound;
    t2 = t1.x;
    t3 = aabb.lowerBound;
    t4 = t3.x;
    if (typeof t4 !== "number")
      return this.contains$1$bailout(1, aabb, t3, t4, t2, t1);
    if (typeof t2 !== "number")
      throw t2.$gt();
    if (t2 > t4) {
      t1 = t1.y;
      t3 = t3.y;
      if (typeof t3 !== "number")
        return this.contains$1$bailout(2, aabb, t3, 0, 0, t1);
      if (typeof t1 !== "number")
        throw t1.$gt();
      if (t1 > t3) {
        t1 = this.upperBound;
        t2 = t1.y;
        t3 = aabb.upperBound;
        t4 = t3.y;
        if (typeof t4 !== "number")
          return this.contains$1$bailout(3, 0, t3, t4, t2, t1);
        if (typeof t2 !== "number")
          throw t2.$lt();
        if (t2 < t4) {
          t1 = t1.x;
          t3 = t3.x;
          if (typeof t3 !== "number")
            return this.contains$1$bailout(4, 0, t3, 0, 0, t1);
          if (typeof t1 !== "number")
            throw t1.$lt();
          t3 = t1 < t3;
          t1 = t3;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  contains$1$bailout: function(state0, aabb, t3, t4, t2, t1) {
    switch (state0) {
      case 0:
        t1 = this.lowerBound;
        t2 = t1.x;
        t3 = aabb.lowerBound;
        t4 = t3.x;
      case 1:
        state0 = 0;
        if (typeof t2 !== "number")
          throw t2.$gt();
      default:
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && $.$gt$n(t2, t4))
          switch (state0) {
            case 0:
              t1 = t1.y;
              t3 = t3.y;
            case 2:
              state0 = 0;
              if (typeof t1 !== "number")
                throw t1.$gt();
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && $.$gt$n(t1, t3))
                switch (state0) {
                  case 0:
                    t1 = this.upperBound;
                    t2 = t1.y;
                    t3 = aabb.upperBound;
                    t4 = t3.y;
                  case 3:
                    state0 = 0;
                    if (typeof t2 !== "number")
                      throw t2.$lt();
                  case 4:
                    if (state0 === 4 || state0 === 0 && $.$lt$n(t2, t4))
                      switch (state0) {
                        case 0:
                          t1 = t1.x;
                          t3 = t3.x;
                        case 4:
                          state0 = 0;
                          if (typeof t1 !== "number")
                            throw t1.$lt();
                          t3 = $.$lt$n(t1, t3);
                          t1 = t3;
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.lowerBound;
    t2 = other.get$lowerBound();
    t1.setFrom$1;
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.upperBound;
    t1 = other.get$upperBound();
    t2.setFrom$1;
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
  },
  toString$0: function(_) {
    return $.S(this.lowerBound) + ", " + $.S(this.upperBound);
  },
  AxisAlignedBox$2: function(lowerBound, upperBound) {
    if (this.lowerBound == null)
      this.lowerBound = new $.Vector(0, 0);
    if (this.upperBound == null)
      this.upperBound = new $.Vector(0, 0);
  }
},

Collision: {"": "Object;_pool,cache,input,output,results1,results2,incidentEdge<,localTangent,localNormal<,planePoint,tangent,normal<,normal1,v11,v12,clipPoints1,clipPoints2",
  testOverlap$4: function(shapeA, shapeB, transformA, transformB) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.input;
    t1.proxyA.setFromShape$1(shapeA);
    t1.proxyB.setFromShape$1(shapeB);
    t2 = t1.transformA;
    t3 = t2.position;
    t4 = transformA.position;
    t5 = t4.x;
    t4 = t4.y;
    t3.x = t5;
    t3.y = t4;
    t2 = t2.rotation;
    t4 = transformA.rotation;
    t3 = t2.col1;
    t5 = t4.col1;
    t3.setFrom$1;
    t6 = t5.x;
    t5 = t5.y;
    t3.x = t6;
    t3.y = t5;
    t2 = t2.col2;
    t4 = t4.col2;
    t2.setFrom$1;
    t5 = t4.x;
    t4 = t4.y;
    t2.x = t5;
    t2.y = t4;
    t4 = t1.transformB;
    t2 = t4.position;
    t5 = transformB.position;
    t3 = t5.x;
    t5 = t5.y;
    t2.x = t3;
    t2.y = t5;
    t4 = t4.rotation;
    t5 = transformB.rotation;
    t2 = t4.col1;
    t3 = t5.col1;
    t2.setFrom$1;
    t6 = t3.x;
    t3 = t3.y;
    t2.x = t6;
    t2.y = t3;
    t4 = t4.col2;
    t5 = t5.col2;
    t4.setFrom$1;
    t3 = t5.x;
    t5 = t5.y;
    t4.x = t3;
    t4.y = t5;
    t1.useRadii = true;
    t5 = this.cache;
    t5.count = 0;
    t4 = this.output;
    this._pool.distance.distance$3(t4, t5, t1);
    return $.$lt$n(t4.distance, 0.000001192);
  },
  collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
    var v, t1, t2, t3, t4, t5, t6, t7, pAy, pAx, v1, pBy, dx, dy, radius;
    manifold.set$pointCount(0);
    v = circle1.get$position();
    t1 = xfA.position;
    t2 = t1.y;
    t3 = xfA.rotation;
    t4 = t3.col1;
    t5 = t4.y;
    t6 = v.get$x();
    t5 = $.$add$ns(t2, $.$mul$n(t5, t6));
    t3 = t3.col2;
    t2 = t3.y;
    t7 = v.get$y();
    pAy = $.$add$ns(t5, $.$mul$n(t2, t7));
    pAx = $.$add$ns($.$add$ns(t1.x, $.$mul$n(t4.x, t6)), $.$mul$n(t3.x, t7));
    v1 = circle2.get$position();
    t7 = xfB.position;
    t3 = t7.y;
    t6 = xfB.rotation;
    t4 = t6.col1;
    t1 = t4.y;
    t2 = v1.get$x();
    t1 = $.$add$ns(t3, $.$mul$n(t1, t2));
    t6 = t6.col2;
    t3 = t6.y;
    t5 = v1.get$y();
    pBy = $.$add$ns(t1, $.$mul$n(t3, t5));
    dx = $.$sub$n($.$add$ns($.$add$ns(t7.x, $.$mul$n(t4.x, t2)), $.$mul$n(t6.x, t5)), pAx);
    dy = $.$sub$n(pBy, pAy);
    radius = $.$add$ns(circle1.radius, circle2.radius);
    if (dx * dx + dy * dy > $.$mul$n(radius, radius))
      return;
    manifold.set$type(0);
    t1 = manifold.get$localPoint();
    t2 = circle1.get$position();
    t3 = t2.get$x();
    t2 = t2.get$y();
    t1.x = t3;
    t1.y = t2;
    t2 = manifold.get$localNormal();
    t2.x = 0;
    t2.y = 0;
    manifold.set$pointCount(1);
    t2 = manifold.get$points();
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = t2[0].get$localPoint();
    t1 = circle2.get$position();
    t3 = t1.get$x();
    t1 = t1.get$y();
    t2.x = t3;
    t2.y = t1;
    t1 = manifold.get$points();
    if (0 >= t1.length)
      throw $.ioore(0);
    t1 = t1[0].get$id().features;
    t1.referenceEdge = 0;
    t1.incidentEdge = 0;
    t1.incidentVertex = 0;
    t1.flip = 0;
  },
  collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
    var v, t1, t2, t3, t4, t5, t6, t7, cy, v1x, v1y, b, b1, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, norm, s, vertIndex2, v1, v2, mpoint, temp2X, temp2Y, tempX, tempY, temp3X, temp3Y, fcx, fcy;
    manifold.set$pointCount(0);
    v = circle.get$position();
    t1 = xfB.position;
    t2 = t1.y;
    t3 = xfB.rotation;
    t4 = t3.col1;
    t5 = t4.y;
    t6 = v.get$x();
    t5 = $.$add$ns(t2, $.$mul$n(t5, t6));
    t3 = t3.col2;
    t2 = t3.y;
    t7 = v.get$y();
    cy = $.$add$ns(t5, $.$mul$n(t2, t7));
    t2 = xfA.position;
    v1x = $.$sub$n($.$add$ns($.$add$ns(t1.x, $.$mul$n(t4.x, t6)), $.$mul$n(t3.x, t7)), t2.x);
    v1y = $.$sub$n(cy, t2.y);
    t2 = xfA.rotation;
    b = t2.col1;
    b1 = t2.col2;
    t2 = b1.x;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t7 = b1.y;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    cLocaly = v1x * t2 + v1y * t7;
    t7 = b.x;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t2 = b.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    cLocalx = v1x * t7 + v1y * t2;
    radius = $.$add$ns(polygon.radius, circle.radius);
    if (typeof radius !== "number")
      return this.collidePolygonAndCircle$5$bailout(1, manifold, polygon, radius, circle, cLocalx, cLocaly);
    vertexCount = polygon.vertexCount;
    vertices = polygon.vertices;
    normals = polygon.normals;
    for (t1 = vertices.length, t2 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      vertex = vertices[i];
      t3 = vertex.get$x();
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t4 = vertex.get$y();
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (i >= t2)
        throw $.ioore(i);
      norm = normals[i];
      s = $.$mul$n(norm.get$x(), cLocalx - t3) + $.$mul$n(norm.get$y(), cLocaly - t4);
      if (s > radius)
        return;
      if (s > separation) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    if (normalIndex < 0 || normalIndex >= t1)
      throw $.ioore(normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t1)
      throw $.ioore(vertIndex2);
    v2 = vertices[vertIndex2];
    if (separation < 1.192e-7) {
      manifold.set$pointCount(1);
      manifold.set$type(1);
      if (normalIndex >= t2)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      manifold.get$localNormal().x = norm.get$x();
      manifold.get$localNormal().y = norm.get$y();
      manifold.get$localPoint().x = $.$mul$n($.$add$ns(v1.get$x(), v2.get$x()), 0.5);
      manifold.get$localPoint().y = $.$mul$n($.$add$ns(v1.get$y(), v2.get$y()), 0.5);
      t1 = manifold.get$points();
      if (0 >= t1.length)
        throw $.ioore(0);
      mpoint = t1[0];
      mpoint.get$localPoint().x = circle.get$position().get$x();
      mpoint.get$localPoint().y = circle.get$position().get$y();
      t1 = mpoint.get$id().features;
      t1.referenceEdge = 0;
      t1.incidentEdge = 0;
      t1.incidentVertex = 0;
      t1.flip = 0;
      return;
    }
    t1 = v1.get$x();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t3 = v1.get$y();
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = v2.get$x();
    temp2X = $.$sub$n(t4, t1);
    t5 = v2.get$y();
    temp2Y = $.$sub$n(t5, t3);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    tempX = cLocalx - t1;
    tempY = cLocaly - t3;
    if (tempX * temp2X + tempY * temp2Y <= 0) {
      if (tempX * tempX + tempY * tempY > radius * radius)
        return;
      manifold.set$pointCount(1);
      manifold.set$type(1);
      t1 = manifold.get$localNormal();
      t2 = v1.get$x();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t1.x = cLocalx - t2;
      t2 = manifold.get$localNormal();
      t1 = v1.get$y();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2.y = cLocaly - t1;
      manifold.get$localNormal().normalize$0();
      t1 = manifold.get$localPoint();
      t2 = v1.get$x();
      t3 = v1.get$y();
      t1.x = t2;
      t1.y = t3;
      t3 = manifold.get$points();
      if (0 >= t3.length)
        throw $.ioore(0);
      t3 = t3[0].get$localPoint();
      t1 = circle.get$position();
      t2 = t1.get$x();
      t1 = t1.get$y();
      t3.x = t2;
      t3.y = t1;
      t1 = manifold.get$points();
      if (0 >= t1.length)
        throw $.ioore(0);
      t1 = t1[0].get$id().features;
      t1.referenceEdge = 0;
      t1.incidentEdge = 0;
      t1.incidentVertex = 0;
      t1.flip = 0;
    } else {
      temp3X = cLocalx - t4;
      temp3Y = cLocaly - t5;
      if (temp3X * (t1 - t4) + temp3Y * (t3 - t5) <= 0) {
        if (temp3X * temp3X + temp3Y * temp3Y > radius * radius)
          return;
        manifold.set$pointCount(1);
        manifold.set$type(1);
        t1 = manifold.get$localNormal();
        t2 = v2.get$x();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t1.x = cLocalx - t2;
        t2 = manifold.get$localNormal();
        t1 = v2.get$y();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t2.y = cLocaly - t1;
        manifold.get$localNormal().normalize$0();
        t1 = manifold.get$localPoint();
        t2 = v2.get$x();
        t3 = v2.get$y();
        t1.x = t2;
        t1.y = t3;
        t3 = manifold.get$points();
        if (0 >= t3.length)
          throw $.ioore(0);
        t3 = t3[0].get$localPoint();
        t1 = circle.get$position();
        t2 = t1.get$x();
        t1 = t1.get$y();
        t3.x = t2;
        t3.y = t1;
        t1 = manifold.get$points();
        if (0 >= t1.length)
          throw $.ioore(0);
        t1 = t1[0].get$id().features;
        t1.referenceEdge = 0;
        t1.incidentEdge = 0;
        t1.incidentVertex = 0;
        t1.flip = 0;
      } else {
        fcx = (t1 + t4) * 0.5;
        fcy = (t3 + t5) * 0.5;
        if (normalIndex >= t2)
          throw $.ioore(normalIndex);
        norm = normals[normalIndex];
        t1 = norm.get$x();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t2 = norm.get$y();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        if ((cLocalx - fcx) * t1 + (cLocaly - fcy) * t2 > radius)
          return;
        manifold.set$pointCount(1);
        manifold.set$type(1);
        t1 = manifold.get$localNormal();
        t2 = normals[normalIndex];
        t3 = t2.get$x();
        t2 = t2.get$y();
        t1.x = t3;
        t1.y = t2;
        manifold.get$localPoint().x = fcx;
        manifold.get$localPoint().y = fcy;
        t2 = manifold.get$points();
        if (0 >= t2.length)
          throw $.ioore(0);
        t2 = t2[0].get$localPoint();
        t1 = circle.get$position();
        t3 = t1.get$x();
        t1 = t1.get$y();
        t2.x = t3;
        t2.y = t1;
        t1 = manifold.get$points();
        if (0 >= t1.length)
          throw $.ioore(0);
        t1 = t1[0].get$id().features;
        t1.referenceEdge = 0;
        t1.incidentEdge = 0;
        t1.incidentVertex = 0;
        t1.flip = 0;
      }
    }
  },
  collidePolygonAndCircle$5$bailout: function(state0, manifold, polygon, radius, circle, cLocalx, cLocaly) {
    var vertexCount, vertices, normals, t1, t2, normalIndex, separation, i, vertex, t3, t4, norm, s, vertIndex2, v1, v2, mpoint, temp2X, t5, temp2Y, dx, dy, fcx, fcy;
    vertexCount = polygon.vertexCount;
    vertices = polygon.vertices;
    normals = polygon.normals;
    for (t1 = vertices.length, t2 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      vertex = vertices[i];
      t3 = vertex.get$x();
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t4 = vertex.get$y();
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (i >= t2)
        throw $.ioore(i);
      norm = normals[i];
      s = $.$mul$n(norm.get$x(), cLocalx - t3) + $.$mul$n(norm.get$y(), cLocaly - t4);
      if ($.JSNumber_methods.$gt(s, radius))
        return;
      if (s > separation) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    if (normalIndex < 0 || normalIndex >= t1)
      throw $.ioore(normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t1)
      throw $.ioore(vertIndex2);
    v2 = vertices[vertIndex2];
    if (separation < 1.192e-7) {
      manifold.set$pointCount(1);
      manifold.set$type(1);
      if (normalIndex >= t2)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      manifold.get$localNormal().x = norm.get$x();
      manifold.get$localNormal().y = norm.get$y();
      manifold.get$localPoint().x = $.$mul$n($.$add$ns(v1.get$x(), v2.get$x()), 0.5);
      manifold.get$localPoint().y = $.$mul$n($.$add$ns(v1.get$y(), v2.get$y()), 0.5);
      t1 = manifold.get$points();
      if (0 >= t1.length)
        throw $.ioore(0);
      mpoint = t1[0];
      mpoint.get$localPoint().x = circle.get$position().get$x();
      mpoint.get$localPoint().y = circle.get$position().get$y();
      t1 = mpoint.get$id().features;
      t1.referenceEdge = 0;
      t1.incidentEdge = 0;
      t1.incidentVertex = 0;
      t1.flip = 0;
      return;
    }
    t1 = v1.get$x();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t3 = v1.get$y();
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = v2.get$x();
    temp2X = $.$sub$n(t4, t1);
    t5 = v2.get$y();
    temp2Y = $.$sub$n(t5, t3);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    if ((cLocalx - t1) * temp2X + (cLocaly - t3) * temp2Y <= 0) {
      dx = cLocalx - t1;
      dy = cLocaly - t3;
      if (dx * dx + dy * dy > $.$mul$n(radius, radius))
        return;
      manifold.set$pointCount(1);
      manifold.set$type(1);
      t1 = manifold.get$localNormal();
      t2 = v1.get$x();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t1.x = cLocalx - t2;
      t2 = manifold.get$localNormal();
      t1 = v1.get$y();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2.y = cLocaly - t1;
      manifold.get$localNormal().normalize$0();
      t1 = manifold.get$localPoint();
      t2 = v1.get$x();
      t3 = v1.get$y();
      t1.x = t2;
      t1.y = t3;
      t3 = manifold.get$points();
      if (0 >= t3.length)
        throw $.ioore(0);
      t3 = t3[0].get$localPoint();
      t1 = circle.get$position();
      t2 = t1.get$x();
      t1 = t1.get$y();
      t3.x = t2;
      t3.y = t1;
      t1 = manifold.get$points();
      if (0 >= t1.length)
        throw $.ioore(0);
      t1 = t1[0].get$id().features;
      t1.referenceEdge = 0;
      t1.incidentEdge = 0;
      t1.incidentVertex = 0;
      t1.flip = 0;
    } else if ((cLocalx - t4) * (t1 - t4) + (cLocaly - t5) * (t3 - t5) <= 0) {
      dx = cLocalx - t4;
      dy = cLocaly - t5;
      if (dx * dx + dy * dy > $.$mul$n(radius, radius))
        return;
      manifold.set$pointCount(1);
      manifold.set$type(1);
      t1 = manifold.get$localNormal();
      t2 = v2.get$x();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t1.x = cLocalx - t2;
      t2 = manifold.get$localNormal();
      t1 = v2.get$y();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2.y = cLocaly - t1;
      manifold.get$localNormal().normalize$0();
      t1 = manifold.get$localPoint();
      t2 = v2.get$x();
      t3 = v2.get$y();
      t1.x = t2;
      t1.y = t3;
      t3 = manifold.get$points();
      if (0 >= t3.length)
        throw $.ioore(0);
      t3 = t3[0].get$localPoint();
      t1 = circle.get$position();
      t2 = t1.get$x();
      t1 = t1.get$y();
      t3.x = t2;
      t3.y = t1;
      t1 = manifold.get$points();
      if (0 >= t1.length)
        throw $.ioore(0);
      t1 = t1[0].get$id().features;
      t1.referenceEdge = 0;
      t1.incidentEdge = 0;
      t1.incidentVertex = 0;
      t1.flip = 0;
    } else {
      fcx = $.$mul$n(t1 + t4, 0.5);
      fcy = $.$mul$n(t3 + t5, 0.5);
      if (normalIndex >= t2)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t1 = norm.get$x();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2 = norm.get$y();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if ($.JSNumber_methods.$gt((cLocalx - fcx) * t1 + (cLocaly - fcy) * t2, radius))
        return;
      manifold.set$pointCount(1);
      manifold.set$type(1);
      t1 = manifold.get$localNormal();
      t2 = normals[normalIndex];
      t3 = t2.get$x();
      t2 = t2.get$y();
      t1.x = t3;
      t1.y = t2;
      manifold.get$localPoint().x = fcx;
      manifold.get$localPoint().y = fcy;
      t2 = manifold.get$points();
      if (0 >= t2.length)
        throw $.ioore(0);
      t2 = t2[0].get$localPoint();
      t1 = circle.get$position();
      t3 = t1.get$x();
      t1 = t1.get$y();
      t2.x = t3;
      t2.y = t1;
      t1 = manifold.get$points();
      if (0 >= t1.length)
        throw $.ioore(0);
      t1 = t1[0].get$id().features;
      t1.referenceEdge = 0;
      t1.incidentEdge = 0;
      t1.incidentVertex = 0;
      t1.flip = 0;
    }
  },
  edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
    var vertices1, normals1, count2, vertices2, R, v, t1, t2, t3, t4, t5, t6, t7, t8, t9, normal1Worldy, t10, normal1Worldx, R1, normal1x, t11, t12, normal1y, t13, index, minDot, i, a, t14, t15, dot, v3, t16, v1y, v1x, v4, v2y;
    poly1.vertexCount;
    vertices1 = poly1.vertices;
    normals1 = poly1.normals;
    count2 = poly2.vertexCount;
    vertices2 = poly2.vertices;
    R = xf1.rotation;
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    v = normals1[edge1];
    t1 = R.col1;
    t2 = t1.y;
    t3 = v.get$x();
    if (typeof t3 !== "number")
      return this.edgeSeparation$5$bailout(1, xf1, vertices1, edge1, xf2, vertices2, R, count2, v, t1, t2, t3);
    t4 = $.getInterceptor$n(t2);
    if (typeof t2 !== "number")
      throw t2.$mul();
    t5 = t2 * t3;
    t6 = R.col2;
    t7 = t6.y;
    t8 = v.get$y();
    if (typeof t8 !== "number")
      return this.edgeSeparation$5$bailout(2, xf1, vertices1, edge1, xf2, vertices2, 0, count2, 0, t1, t2, t3, t6, t7, t4, t5, t8);
    t9 = $.getInterceptor$n(t7);
    if (typeof t7 !== "number")
      throw t7.$mul();
    normal1Worldy = t5 + t7 * t8;
    t1 = t1.x;
    t5 = $.getInterceptor$n(t1);
    if (typeof t1 !== "number")
      throw t1.$mul();
    t6 = t6.x;
    t10 = $.getInterceptor$n(t6);
    if (typeof t6 !== "number")
      throw t6.$mul();
    normal1Worldx = t1 * t3 + t6 * t8;
    R1 = xf2.rotation;
    t8 = R1.col1;
    t3 = t8.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t8 = t8.y;
    if (typeof t8 !== "number")
      throw $.iae(t8);
    normal1x = normal1Worldx * t3 + normal1Worldy * t8;
    t11 = R1.col2;
    t12 = t11.x;
    if (typeof t12 !== "number")
      throw $.iae(t12);
    t11 = t11.y;
    if (typeof t11 !== "number")
      throw $.iae(t11);
    normal1y = normal1Worldx * t12 + normal1Worldy * t11;
    for (t13 = vertices2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t13)
        throw $.ioore(i);
      a = vertices2[i];
      t14 = a.get$x();
      if (typeof t14 !== "number")
        throw t14.$mul();
      t15 = a.get$y();
      if (typeof t15 !== "number")
        throw t15.$mul();
      dot = t14 * normal1x + t15 * normal1y;
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    if (edge1 >= vertices1.length)
      throw $.ioore(edge1);
    v3 = vertices1[edge1];
    t14 = xf1.position;
    t15 = t14.y;
    if (typeof t15 !== "number")
      return this.edgeSeparation$5$bailout(3, 0, 0, 0, xf2, vertices2, 0, 0, 0, t1, t2, t3, t6, t7, t4, t5, t8, normal1Worldx, normal1Worldy, t10, t13, v3, t15, index, t12, t9, t11, t14);
    t16 = v3.get$x();
    if (typeof t16 !== "number")
      return this.edgeSeparation$5$bailout(4, 0, 0, 0, xf2, vertices2, 0, 0, 0, t1, t2, t3, t6, t7, t4, t5, t8, normal1Worldx, normal1Worldy, t10, t13, v3, t15, index, t12, t9, t11, t14, t16);
    t2 = t15 + t2 * t16;
    t15 = v3.get$y();
    if (typeof t15 !== "number")
      return this.edgeSeparation$5$bailout(5, 0, 0, 0, xf2, vertices2, 0, 0, 0, t1, t2, t3, t6, t7, t15, t5, t8, normal1Worldx, normal1Worldy, t10, t13, 0, 0, index, t12, t9, t11, t14, t16);
    v1y = t2 + t7 * t15;
    t14 = t14.x;
    if (typeof t14 !== "number")
      return this.edgeSeparation$5$bailout(6, 0, 0, 0, xf2, vertices2, 0, 0, 0, t1, 0, t3, t6, 0, t15, t5, t8, normal1Worldx, normal1Worldy, t10, t13, 0, 0, index, t12, 0, t11, t14, t16, v1y);
    v1x = t14 + t1 * t16 + t6 * t15;
    if (index < 0 || index >= t13)
      throw $.ioore(index);
    v4 = vertices2[index];
    t13 = xf2.position;
    t15 = t13.y;
    if (typeof t15 !== "number")
      return this.edgeSeparation$5$bailout(7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, t15, 0, t8, normal1Worldx, normal1Worldy, 0, t13, 0, 0, 0, t12, 0, t11, 0, 0, v1y, v4, v1x);
    t6 = v4.get$x();
    if (typeof t6 !== "number")
      return this.edgeSeparation$5$bailout(8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, t6, 0, t15, 0, t8, normal1Worldx, normal1Worldy, 0, t13, 0, 0, 0, t12, 0, t11, 0, 0, v1y, v4, v1x);
    t8 = t15 + t8 * t6;
    t15 = v4.get$y();
    if (typeof t15 !== "number")
      return this.edgeSeparation$5$bailout(9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, t6, 0, t15, 0, t8, normal1Worldx, normal1Worldy, 0, t13, 0, 0, 0, t12, 0, t11, 0, 0, v1y, 0, v1x);
    v2y = t8 + t11 * t15 - v1y;
    t13 = t13.x;
    if (typeof t13 !== "number")
      return this.edgeSeparation$5$bailout(10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, t6, 0, t15, 0, 0, normal1Worldx, normal1Worldy, 0, t13, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, v1x, v2y);
    return (t13 + t3 * t6 + t12 * t15 - v1x) * normal1Worldx + v2y * normal1Worldy;
  },
  edgeSeparation$5$bailout: function(state0, xf1, vertices1, edge1, xf2, vertices2, R, count2, v, t1, t2, t3, t6, t7, t4, t5, t8, normal1Worldx, normal1Worldy, t10, t13, v3, t15, index, t12, t9, t11, t14, t16, v1y, v4, v1x, v2y) {
    switch (state0) {
      case 0:
        poly1.vertexCount;
        vertices1 = poly1.vertices;
        normals1 = poly1.normals;
        count2 = poly2.vertexCount;
        vertices2 = poly2.vertices;
        R = xf1.rotation;
        if (edge1 < 0 || edge1 >= normals1.length)
          throw $.ioore(edge1);
        v = normals1[edge1];
        t1 = R.col1;
        t2 = t1.y;
        t3 = v.get$x();
      case 1:
        state0 = 0;
        t4 = $.getInterceptor$n(t2);
        if (typeof t2 !== "number")
          throw t2.$mul();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t5 = t4.$mul(t2, t3);
        t6 = R.col2;
        t7 = t6.y;
        t8 = v.get$y();
      case 2:
        state0 = 0;
        t9 = $.getInterceptor$n(t7);
        if (typeof t7 !== "number")
          throw t7.$mul();
        if (typeof t8 !== "number")
          throw $.iae(t8);
        normal1Worldy = t5 + t9.$mul(t7, t8);
        t1 = t1.x;
        t5 = $.getInterceptor$n(t1);
        if (typeof t1 !== "number")
          throw t1.$mul();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t3 = t5.$mul(t1, t3);
        t6 = t6.x;
        t10 = $.getInterceptor$n(t6);
        if (typeof t6 !== "number")
          throw t6.$mul();
        if (typeof t8 !== "number")
          throw $.iae(t8);
        normal1Worldx = t3 + t10.$mul(t6, t8);
        R1 = xf2.rotation;
        t8 = R1.col1;
        t3 = t8.x;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t8 = t8.y;
        if (typeof t8 !== "number")
          throw $.iae(t8);
        normal1x = normal1Worldx * t3 + normal1Worldy * t8;
        t11 = R1.col2;
        t12 = t11.x;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t11 = t11.y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        normal1y = normal1Worldx * t12 + normal1Worldy * t11;
        for (t13 = vertices2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
          if (i >= t13)
            throw $.ioore(i);
          a = vertices2[i];
          t14 = a.get$x();
          if (typeof t14 !== "number")
            throw t14.$mul();
          t14 = $.$mul$n(t14, normal1x);
          t15 = a.get$y();
          if (typeof t15 !== "number")
            throw t15.$mul();
          dot = t14 + $.$mul$n(t15, normal1y);
          if (dot < minDot) {
            minDot = dot;
            index = i;
          }
        }
        if (edge1 >= vertices1.length)
          throw $.ioore(edge1);
        v3 = vertices1[edge1];
        t14 = xf1.position;
        t15 = t14.y;
      case 3:
        state0 = 0;
        t16 = v3.get$x();
      case 4:
        state0 = 0;
        if (typeof t16 !== "number")
          throw $.iae(t16);
        t2 = $.$add$ns(t15, t4.$mul(t2, t16));
        t4 = v3.get$y();
      case 5:
        state0 = 0;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        v1y = $.$add$ns(t2, t9.$mul(t7, t4));
        t14 = t14.x;
      case 6:
        state0 = 0;
        if (typeof t16 !== "number")
          throw $.iae(t16);
        t16 = $.$add$ns(t14, t5.$mul(t1, t16));
        if (typeof t4 !== "number")
          throw $.iae(t4);
        v1x = $.$add$ns(t16, t10.$mul(t6, t4));
        if (index < 0 || index >= t13)
          throw $.ioore(index);
        v4 = vertices2[index];
        t13 = xf2.position;
        t4 = t13.y;
      case 7:
        state0 = 0;
        t6 = v4.get$x();
      case 8:
        state0 = 0;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t8 = $.$add$ns(t4, $.JSNumber_methods.$mul(t8, t6));
        t4 = v4.get$y();
      case 9:
        state0 = 0;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        v2y = $.$sub$n($.$add$ns(t8, $.JSNumber_methods.$mul(t11, t4)), v1y);
        t13 = t13.x;
      case 10:
        var normals1, R1, normal1x, normal1y, minDot, i, a, dot;
        state0 = 0;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t6 = $.$add$ns(t13, $.JSNumber_methods.$mul(t3, t6));
        if (typeof t4 !== "number")
          throw $.iae(t4);
        return $.$sub$n($.$add$ns(t6, $.JSNumber_methods.$mul(t12, t4)), v1x) * normal1Worldx + v2y * normal1Worldy;
    }
  },
  findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
    var count1, normals1, v, t1, t2, t3, t4, t5, t6, t7, predy, predx, v1, t8, tempy, dx, dy, dLocal1x, dLocal1y, edge, maxDot, i, norm, dot, s, prevEdge, sPrev, nextEdge, sNext, bestSeparation, bestEdge, increment, edge0;
    count1 = poly1.vertexCount;
    normals1 = poly1.normals;
    v = poly2.centroid;
    t1 = xf2.position;
    t2 = t1.y;
    t3 = xf2.rotation;
    t4 = t3.col1;
    t5 = t4.y;
    t6 = v.x;
    t5 = $.$add$ns(t2, $.$mul$n(t5, t6));
    t3 = t3.col2;
    t2 = t3.y;
    t7 = v.y;
    predy = $.$add$ns(t5, $.$mul$n(t2, t7));
    predx = $.$add$ns($.$add$ns(t1.x, $.$mul$n(t4.x, t6)), $.$mul$n(t3.x, t7));
    v1 = poly1.centroid;
    t7 = xf1.position;
    t3 = t7.y;
    t6 = xf1.rotation;
    t4 = t6.col1;
    t1 = t4.y;
    t2 = v1.x;
    t3 = $.$add$ns(t3, $.$mul$n(t1, t2));
    t6 = t6.col2;
    t5 = t6.y;
    t8 = v1.y;
    tempy = $.$add$ns(t3, $.$mul$n(t5, t8));
    t7 = t7.x;
    t4 = t4.x;
    t2 = $.$add$ns(t7, $.$mul$n(t4, t2));
    t6 = t6.x;
    dx = $.$sub$n(predx, $.$add$ns(t2, $.$mul$n(t6, t8)));
    dy = $.$sub$n(predy, tempy);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    dLocal1x = dx * t4 + dy * t1;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    dLocal1y = dx * t6 + dy * t5;
    for (t1 = normals1.length, edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      norm = normals1[i];
      dot = $.$mul$n(norm.get$x(), dLocal1x) + $.$mul$n(norm.get$y(), dLocal1y);
      if (dot > maxDot) {
        maxDot = dot;
        edge = i;
      }
    }
    s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
    prevEdge = edge - 1;
    prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
    sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
    nextEdge = edge + 1;
    nextEdge = nextEdge < count1 ? nextEdge : 0;
    sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
    if (sPrev > s && sPrev > sNext) {
      bestSeparation = sPrev;
      bestEdge = prevEdge;
      increment = -1;
    } else {
      if (sNext > s)
        ;
      else {
        results.edgeIndex = edge;
        results.separation = s;
        return;
      }
      bestSeparation = sNext;
      bestEdge = nextEdge;
      increment = 1;
    }
    for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
      if (t1) {
        edge0 = bestEdge - 1;
        edge0 = edge0 >= 0 ? edge0 : edge;
      } else {
        edge0 = bestEdge + 1;
        edge0 = edge0 < count1 ? edge0 : 0;
      }
      s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
      if (s > bestSeparation)
        ;
      else
        break;
    }
    results.edgeIndex = bestEdge;
    results.separation = bestSeparation;
  },
  findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
    var normals1, count2, vertices2, normals2, t1, t2, t3, index, minDot, i, t4, t5, dot, i2;
    poly1.vertexCount;
    normals1 = poly1.normals;
    count2 = poly2.vertexCount;
    vertices2 = poly2.vertices;
    normals2 = poly2.normals;
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    t1 = this.normal1;
    $.Matrix22_mulMatrixAndVectorToOut(xf1.rotation, normals1[edge1], t1);
    $.Matrix22_mulTransMatrixAndVectorToOut(xf2.rotation, t1, t1);
    t2 = normals2.length;
    t3 = t1.x;
    if (typeof t3 !== "number")
      return this.findIncidentEdge$6$bailout(1, c, t2, count2, vertices2, normals2, xf2, edge1, t1, t3);
    t1 = t1.y;
    if (typeof t1 !== "number")
      return this.findIncidentEdge$6$bailout(2, c, t2, count2, vertices2, normals2, xf2, edge1, t1, t3, $.JSNumber_methods);
    index = 0;
    minDot = 99999999999999;
    i = 0;
    for (; i < count2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t4 = normals2[i];
      t5 = t4.get$x();
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = t4.get$y();
      if (typeof t4 !== "number")
        throw $.iae(t4);
      dot = t3 * t5 + t1 * t4;
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    i2 = index + 1;
    i2 = i2 < count2 ? i2 : 0;
    t1 = vertices2.length;
    if (index < 0 || index >= t1)
      throw $.ioore(index);
    t2 = vertices2[index];
    t3 = c.length;
    if (0 >= t3)
      throw $.ioore(0);
    $.Transform_mulToOut(xf2, t2, c[0].get$v());
    t2 = c[0];
    t2.get$id().features.referenceEdge = edge1;
    t2.get$id().features.incidentEdge = index;
    t2.get$id().features.incidentVertex = 0;
    if (i2 < 0 || i2 >= t1)
      throw $.ioore(i2);
    t1 = vertices2[i2];
    if (1 >= t3)
      throw $.ioore(1);
    $.Transform_mulToOut(xf2, t1, c[1].get$v());
    t1 = c[1];
    t1.get$id().features.referenceEdge = edge1;
    t1.get$id().features.incidentEdge = i2;
    t1.get$id().features.incidentVertex = 1;
  },
  findIncidentEdge$6$bailout: function(state0, c, t2, count2, vertices2, normals2, xf2, edge1, t1, t3, t4) {
    switch (state0) {
      case 0:
        poly1.vertexCount;
        normals1 = poly1.normals;
        count2 = poly2.vertexCount;
        vertices2 = poly2.vertices;
        normals2 = poly2.normals;
        if (edge1 < 0 || edge1 >= normals1.length)
          throw $.ioore(edge1);
        t1 = this.normal1;
        $.Matrix22_mulMatrixAndVectorToOut(xf1.rotation, normals1[edge1], t1);
        $.Matrix22_mulTransMatrixAndVectorToOut(xf2.rotation, t1, t1);
        t2 = normals2.length;
        t3 = t1.x;
      case 1:
        state0 = 0;
        t4 = $.getInterceptor$n(t3);
        t1 = t1.y;
      case 2:
        var normals1, t5, index, minDot, i, t6, dot, i2;
        state0 = 0;
        t5 = $.getInterceptor$n(t1);
        index = 0;
        minDot = 99999999999999;
        i = 0;
        for (; i < count2; ++i) {
          if (i >= t2)
            throw $.ioore(i);
          t6 = normals2[i];
          dot = t4.$mul(t3, t6.get$x()) + t5.$mul(t1, t6.get$y());
          if (dot < minDot) {
            minDot = dot;
            index = i;
          }
        }
        i2 = index + 1;
        i2 = i2 < count2 ? i2 : 0;
        t1 = vertices2.length;
        if (index < 0 || index >= t1)
          throw $.ioore(index);
        t2 = vertices2[index];
        t3 = c.length;
        if (0 >= t3)
          throw $.ioore(0);
        $.Transform_mulToOut(xf2, t2, c[0].get$v());
        t2 = c[0];
        t2.get$id().features.referenceEdge = edge1;
        t2.get$id().features.incidentEdge = index;
        t2.get$id().features.incidentVertex = 0;
        if (i2 < 0 || i2 >= t1)
          throw $.ioore(i2);
        t1 = vertices2[i2];
        if (1 >= t3)
          throw $.ioore(1);
        $.Transform_mulToOut(xf2, t1, c[1].get$v());
        t1 = c[1];
        t1.get$id().features.referenceEdge = edge1;
        t1.get$id().features.incidentEdge = i2;
        t1.get$id().features.incidentVertex = 1;
    }
  },
  collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
    var totalRadius, t1, t2, t3, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t4, t5, t6, t7, t8, t9, t10, frontOffset, t11, t12, t13, np, pointCount, i, cp;
    manifold.set$pointCount(0);
    totalRadius = $.$add$ns(polyA.radius, polyB.radius);
    t1 = this.results1;
    this.findMaxSeparation$5(t1, polyA, xfA, polyB, xfB);
    if ($.JSNumber_methods.$gt(t1.separation, totalRadius))
      return;
    t2 = this.results2;
    this.findMaxSeparation$5(t2, polyB, xfB, polyA, xfA);
    t3 = t2.separation;
    if ($.JSNumber_methods.$gt(t3, totalRadius))
      return;
    if (t3 > 0.98 * t1.separation + 0.001) {
      edge1 = t2.edgeIndex;
      manifold.set$type(2);
      xf2 = xfA;
      xf1 = xfB;
      poly2 = polyA;
      poly1 = polyB;
      flip = 1;
    } else {
      edge1 = t1.edgeIndex;
      manifold.set$type(1);
      xf2 = xfB;
      xf1 = xfA;
      poly2 = polyB;
      poly1 = polyA;
      flip = 0;
    }
    t1 = this.incidentEdge;
    this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
    count1 = poly1.vertexCount;
    vertices1 = poly1.vertices;
    t2 = this.v11;
    t3 = vertices1.length;
    if (edge1 < 0 || edge1 >= t3)
      throw $.ioore(edge1);
    t4 = vertices1[edge1];
    t5 = t4.get$x();
    t4 = t4.get$y();
    t2.x = t5;
    t2.y = t4;
    t4 = this.v12;
    t5 = edge1 + 1;
    if (t5 < count1) {
      if (t5 >= t3)
        throw $.ioore(t5);
      t3 = vertices1[t5];
    } else {
      if (0 >= t3)
        throw $.ioore(0);
      t3 = vertices1[0];
    }
    t5 = t3.get$x();
    t3 = t3.get$y();
    t4.x = t5;
    t4.y = t3;
    t3 = this.localTangent;
    t5 = t4.x;
    t6 = t4.y;
    t3.x = t5;
    t3.y = t6;
    t3.x = $.$sub$n(t3.x, t2.x);
    t3.y = $.$sub$n(t3.y, t2.y);
    t3.normalize$0();
    t6 = this.localNormal;
    t5 = t3.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t7 = t3.y;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t6.x = 1 * t7;
    t6.y = -1 * t5;
    t5 = this.planePoint;
    t7 = t2.x;
    t8 = t2.y;
    t5.x = t7;
    t5.y = t8;
    t5.x = $.$add$ns(t5.x, t4.x);
    t5.y = $.$add$ns(t5.y, t4.y);
    t5.x = $.$mul$n(t5.x, 0.5);
    t5.y = $.$mul$n(t5.y, 0.5);
    t8 = this.tangent;
    $.Matrix22_mulMatrixAndVectorToOut(xf1.rotation, t3, t8);
    t3 = this.normal;
    t7 = t8.x;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t9 = t8.y;
    if (typeof t9 !== "number")
      throw $.iae(t9);
    t3.x = 1 * t9;
    t3.y = -1 * t7;
    $.Transform_mulToOut(xf1, t2, t2);
    $.Transform_mulToOut(xf1, t4, t4);
    t7 = t3.x;
    t9 = t2.x;
    t7 = $.$mul$n(t7, t9);
    t10 = t3.y;
    t2 = t2.y;
    frontOffset = t7 + $.$mul$n(t10, t2);
    t10 = t8.x;
    t7 = $.getInterceptor$n(t10);
    t9 = t7.$mul(t10, t9);
    t11 = t8.y;
    t12 = $.getInterceptor$n(t11);
    t2 = t12.$mul(t11, t2);
    if (typeof totalRadius !== "number")
      throw $.iae(totalRadius);
    t13 = t7.$mul(t10, t4.x);
    t4 = t12.$mul(t11, t4.y);
    t8.x = t7.$negate(t10);
    t8.y = $.$negate$n(t8.y);
    t10 = this.clipPoints1;
    np = $.Collision_clipSegmentToLine(t10, t1, t8, -(t9 + t2) + totalRadius);
    t8.x = $.$negate$n(t8.x);
    t8.y = $.$negate$n(t8.y);
    if (np < 2)
      return;
    t1 = this.clipPoints2;
    if ($.Collision_clipSegmentToLine(t1, t10, t8, t13 + t4 + totalRadius) < 2)
      return;
    t2 = manifold.get$localNormal();
    t4 = t6.x;
    t6 = t6.y;
    t2.x = t4;
    t2.y = t6;
    t6 = manifold.get$localPoint();
    t2 = t5.x;
    t5 = t5.y;
    t6.x = t2;
    t6.y = t5;
    for (t2 = t1.length, pointCount = 0, i = 0; i < 2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t4 = t1[i];
      t5 = t4.get$v();
      if ($.$mul$n(t3.x, t5.x) + $.$mul$n(t3.y, t5.y) - frontOffset <= totalRadius) {
        t6 = manifold.get$points();
        if (pointCount >= t6.length)
          throw $.ioore(pointCount);
        cp = t6[pointCount];
        $.Transform_mulTransToOut(xf2, t5, cp.get$localPoint());
        t5 = cp.get$id();
        t5 = t5.features;
        t4 = t4.get$id().features;
        t5.referenceEdge = t4.referenceEdge;
        t5.incidentEdge = t4.incidentEdge;
        t5.incidentVertex = t4.incidentVertex;
        t5.flip = t4.flip;
        cp.get$id().features.flip = flip;
        ++pointCount;
      }
    }
    manifold.set$pointCount(pointCount);
  },
  Collision$_construct$1: function(pool) {
    var t1, t2;
    t1 = this.incidentEdge;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
    t1 = this.clipPoints1;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
    t1 = this.clipPoints2;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
  }
},

ClipVertex: {"": "Object;v<,id<",
  setFrom$1: function(cv) {
    var t1, t2, t3;
    t1 = this.v;
    t2 = cv.get$v();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.id.features;
    t1 = cv.get$id().features;
    t2.referenceEdge = t1.referenceEdge;
    t2.incidentEdge = t1.incidentEdge;
    t2.incidentVertex = t1.incidentVertex;
    t2.flip = t1.flip;
  }
},

EdgeResults: {"": "Object;separation,edgeIndex"},

ContactID: {"": "Object;features<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = other.get$features();
    return t1.$eq(t1, this.features);
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.features;
    t2 = other.get$features();
    t1.referenceEdge = t2.referenceEdge;
    t1.incidentEdge = t2.incidentEdge;
    t1.incidentVertex = t2.incidentVertex;
    t1.flip = t2.flip;
  }
},

Distance: {"": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal<",
  distance$3: function(output, cache, input) {
    var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, iter, saveCount, i, t12, t13, t14, t15, vertex, duplicate, rA, rB;
    this.calls = this.calls + 1;
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    transformA = input.get$transformA();
    transformB = input.get$transformB();
    t1 = this.simplex;
    t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
    vertices = t1.vertices;
    t2 = this.closestPoint;
    t1.getClosestPoint$1(t2);
    t3 = t2.x;
    $.$mul$n(t3, t3);
    t3 = t2.y;
    $.$mul$n(t3, t3);
    for (t3 = this.saveB, t4 = t3.length, t5 = this.saveA, t6 = t5.length, t7 = vertices.length, t8 = transformA.rotation, t9 = this.searchDirection, t10 = this.temp, t11 = transformB.rotation, iter = 0; iter < this.maxIters;) {
      saveCount = t1.count;
      for (i = 0; $.JSNumber_methods.$lt(i, saveCount); ++i) {
        if (i >= t7)
          throw $.ioore(i);
        t12 = vertices[i].get$indexA();
        if (i >= t6)
          throw $.ioore(i);
        t5[i] = t12;
        t12 = vertices[i].get$indexB();
        if (i >= t4)
          throw $.ioore(i);
        t3[i] = t12;
      }
      switch (saveCount) {
        case 1:
          break;
        case 2:
          t1.solve2$0();
          break;
        case 3:
          t1.solve3$0();
          break;
        default:
          return;
      }
      if ($.$eq(t1.count, 3))
        break;
      t1.getClosestPoint$1(t2);
      t12 = t2.x;
      $.$mul$n(t12, t12);
      t12 = t2.y;
      $.$mul$n(t12, t12);
      t1.getSearchDirection$1(t9);
      t12 = t9.x;
      t13 = $.getInterceptor$n(t12);
      t14 = t13.$mul(t12, t12);
      t15 = t9.y;
      if (t14 + $.$mul$n(t15, t15) < 1.4208639999999999e-14)
        break;
      t14 = t1.count;
      if (t14 >>> 0 !== t14 || t14 >= t7)
        throw $.ioore(t14);
      vertex = vertices[t14];
      t9.x = t13.$negate(t12);
      t9.y = $.$negate$n(t9.y);
      $.Matrix22_mulTransMatrixAndVectorToOut(t8, t9, t10);
      vertex.set$indexA(proxyA.getSupport$1(t10));
      t12 = proxyA.get$vertices();
      t13 = vertex.get$indexA();
      if (t13 >>> 0 !== t13 || t13 >= t12.length)
        throw $.ioore(t13);
      $.Transform_mulToOut(transformA, t12[t13], vertex.get$wA());
      t9.x = $.$negate$n(t9.x);
      t9.y = $.$negate$n(t9.y);
      $.Matrix22_mulTransMatrixAndVectorToOut(t11, t9, t10);
      vertex.set$indexB(proxyB.getSupport$1(t10));
      t13 = proxyB.get$vertices();
      t12 = vertex.get$indexB();
      if (t12 >>> 0 !== t12 || t12 >= t13.length)
        throw $.ioore(t12);
      $.Transform_mulToOut(transformB, t13[t12], vertex.get$wB());
      t12 = vertex.get$w();
      t13 = vertex.get$wB();
      t14 = t13.x;
      t13 = t13.y;
      t12.x = t14;
      t12.y = t13;
      t13 = vertex.get$wA();
      t12.x = $.$sub$n(t12.x, t13.x);
      t12.y = $.$sub$n(t12.y, t13.y);
      ++iter;
      this.iters = this.iters + 1;
      for (i = 0; duplicate = false, $.JSNumber_methods.$lt(i, saveCount); ++i) {
        t12 = vertex.get$indexA();
        if (i >= t6)
          throw $.ioore(i);
        if ($.$eq(t12, t5[i])) {
          t12 = vertex.get$indexB();
          if (i >= t4)
            throw $.ioore(i);
          t12 = $.$eq(t12, t3[i]);
        } else
          t12 = false;
        if (t12) {
          duplicate = true;
          break;
        }
      }
      if (duplicate)
        break;
      t1.count = $.$add$ns(t1.count, 1);
    }
    this.maxIters = $.max(this.maxIters, iter);
    t1.getWitnessPoints$2(output.get$pointA(), output.get$pointB());
    t2 = $.MathBox_distanceSquared(output.get$pointA(), output.get$pointB());
    output.set$distance(Math.sqrt(t2));
    output.set$iterations(iter);
    t1.writeCache$1(cache);
    if (input.get$useRadii()) {
      rA = proxyA.get$radius();
      rB = proxyB.get$radius();
      t1 = output.get$distance();
      t2 = $.getInterceptor$ns(rA);
      t3 = $.getInterceptor$n(t1);
      if (t3.$gt(t1, t2.$add(rA, rB)) && t3.$gt(t1, 1.192e-7)) {
        output.set$distance(t3.$sub(t1, t2.$add(rA, rB)));
        t1 = this.normal;
        t2 = output.get$pointB();
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = output.get$pointA();
        t1.x = $.$sub$n(t1.x, t2.x);
        t1.y = $.$sub$n(t1.y, t2.y);
        t1.normalize$0();
        t2 = t1.x;
        t3 = t1.y;
        t10.x = t2;
        t10.y = t3;
        t10.x = $.$mul$n(t10.x, rA);
        t10.y = $.$mul$n(t10.y, rA);
        t3 = output.get$pointA();
        t3.x = $.$add$ns(t3.x, t10.x);
        t3.y = $.$add$ns(t3.y, t10.y);
        t3 = t1.x;
        t1 = t1.y;
        t10.x = t3;
        t10.y = t1;
        t10.x = $.$mul$n(t10.x, rB);
        t10.y = $.$mul$n(t10.y, rB);
        t1 = output.get$pointB();
        t1.x = $.$sub$n(t1.x, t10.x);
        t1.y = $.$sub$n(t1.y, t10.y);
      } else {
        t1 = output.get$pointA();
        t2 = output.get$pointB();
        t1.x = $.$add$ns(t1.x, t2.x);
        t1.y = $.$add$ns(t1.y, t2.y);
        t1.x = $.$mul$n(t1.x, 0.5);
        t1.y = $.$mul$n(t1.y, 0.5);
        t1 = output.get$pointB();
        t2 = output.get$pointA();
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        output.set$distance(0);
      }
    }
  },
  get$distance: function() {
    return new $.BoundClosure$3(this, "distance$3");
  }
},

DistanceInput: {"": "Object;proxyA@,proxyB@,transformA<,transformB<,useRadii<"},

DistanceOutput: {"": "Object;pointA<,pointB<,distance@,iterations?"},

DistanceProxy: {"": "Object;vertices<,count@,radius@",
  setFromShape$1: function(shape) {
    var t1, t2, i, t3, t4;
    t1 = shape.type;
    if (typeof t1 !== "number")
      return this.setFromShape$1$bailout(1, shape, t1);
    if (t1 === 0) {
      t1 = this.vertices;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1[0].setFrom$1(shape.get$position());
      this.count = 1;
      this.radius = shape.radius;
    } else if (t1 === 1) {
      this.count = shape.vertexCount;
      this.radius = shape.radius;
      t1 = this.vertices;
      t2 = t1.length;
      i = 0;
      while (true) {
        t3 = this.count;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        if (!(i < t3))
          break;
        if (i >= t2)
          throw $.ioore(i);
        t3 = t1[i];
        t4 = shape.vertices;
        if (i >= t4.length)
          throw $.ioore(i);
        t3.setFrom$1(t4[i]);
        ++i;
      }
    }
  },
  setFromShape$1$bailout: function(state0, shape, t1) {
    switch (state0) {
      case 0:
        t1 = shape.type;
      case 1:
        state0 = 0;
      case 2:
        var t2, i, t3, t4;
        if (state0 === 0 && $.$eq(t1, 0)) {
          t1 = this.vertices;
          if (0 >= t1.length)
            throw $.ioore(0);
          t1[0].setFrom$1(shape.get$position());
          this.count = 1;
          this.radius = shape.radius;
        } else
          switch (state0) {
            case 0:
              t1 = shape.type;
            case 2:
              state0 = 0;
              if ($.$eq(t1, 1)) {
                this.count = shape.vertexCount;
                this.radius = shape.radius;
                t1 = this.vertices;
                t2 = t1.length;
                i = 0;
                while (true) {
                  t3 = this.count;
                  if (typeof t3 !== "number")
                    throw $.iae(t3);
                  if (!$.JSNumber_methods.$lt(i, t3))
                    break;
                  if (i >= t2)
                    throw $.ioore(i);
                  t3 = t1[i];
                  t4 = shape.vertices;
                  if (i >= t4.length)
                    throw $.ioore(i);
                  t3.setFrom$1(t4[i]);
                  ++i;
                }
              }
          }
    }
  },
  getSupport$1: function(direction) {
    var t1, t2, t3, t4, t5, t6, bestValue, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t3.get$x();
    t5 = direction.x;
    if (typeof t5 !== "number")
      return this.getSupport$1$bailout(1, direction, t4, t2, t1, t3, t5);
    t4 = $.$mul$n(t4, t5);
    t3 = t3.get$y();
    t6 = direction.y;
    if (typeof t6 !== "number")
      return this.getSupport$1$bailout(2, 0, t4, t2, t1, t3, t5, t6);
    bestValue = t4 + $.$mul$n(t3, t6);
    for (bestIndex = 0, i = 1; $.JSNumber_methods.$lt(i, this.count); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      value = $.$mul$n(t3.get$x(), t5) + $.$mul$n(t3.get$y(), t6);
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
    }
    return bestIndex;
  },
  getSupport$1$bailout: function(state0, direction, t4, t2, t1, t3, t5, t6) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t3 = t1[0];
        t4 = t3.get$x();
        t5 = direction.x;
      case 1:
        state0 = 0;
        t4 = $.$mul$n(t4, t5);
        t3 = t3.get$y();
        t6 = direction.y;
      case 2:
        var bestValue, bestIndex, i, value;
        state0 = 0;
        bestValue = t4 + $.$mul$n(t3, t6);
        for (bestIndex = 0, i = 1; $.JSNumber_methods.$lt(i, this.count); ++i) {
          if (i >= t2)
            throw $.ioore(i);
          t3 = t1[i];
          value = $.$mul$n(t3.get$x(), t5) + $.$mul$n(t3.get$y(), t6);
          if (value > bestValue) {
            bestValue = value;
            bestIndex = i;
          }
        }
        return bestIndex;
    }
  },
  DistanceProxy$0: function() {
    var t1, t2, i;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector(0, 0);
  }
},

Features: {"": "Object;referenceEdge<,incidentEdge<,incidentVertex<,flip<",
  setFrom$1: function(f) {
    this.referenceEdge = f.get$referenceEdge();
    this.incidentEdge = f.get$incidentEdge();
    this.incidentVertex = f.get$incidentVertex();
    this.flip = f.get$flip();
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return this.referenceEdge === other.get$referenceEdge() && this.incidentEdge === other.get$incidentEdge() && this.incidentVertex === other.get$incidentVertex() && this.flip === other.get$flip();
  },
  toString$0: function(_) {
    return "Features: (" + this.flip + ", " + $.S(this.incidentEdge) + ", " + this.incidentVertex + " " + this.referenceEdge + ")";
  }
},

Manifold: {"": "Object;points<,localNormal<,localPoint<,type@,pointCount@",
  setFrom$1: function(other) {
    var t1, t2, i, t3, t4;
    for (t1 = this.points, t2 = t1.length, i = 0; $.JSNumber_methods.$lt(i, other.get$pointCount()); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = other.get$points();
      if (i >= t4.length)
        throw $.ioore(i);
      t3.setFrom$1(t4[i]);
    }
    this.type = other.get$type();
    t1 = this.localNormal;
    t2 = other.get$localNormal();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.localPoint;
    t1 = other.get$localPoint();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    this.pointCount = other.get$pointCount();
  },
  Manifold$0: function() {
    var t1, t2, i;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = new $.ManifoldPoint(new $.Vector(0, 0), 0, 0, new $.ContactID(new $.Features(0, 0, 0, 0)));
    }
  }
},

ManifoldPoint: {"": "Object;localPoint<,normalImpulse@,tangentImpulse@,id<",
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.localPoint;
    t2 = other.get$localPoint();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    this.normalImpulse = other.get$normalImpulse();
    this.tangentImpulse = other.get$tangentImpulse();
    t2 = this.id.features;
    t1 = other.get$id().features;
    t2.referenceEdge = t1.referenceEdge;
    t2.incidentEdge = t1.incidentEdge;
    t2.incidentVertex = t1.incidentVertex;
    t2.flip = t1.flip;
  }
},

Simplex: {"": "Object;v1,v2,v3,vertices<,count@,e13,e23,e12,case2,case22,case3,case33",
  readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
    var t1, t2, i, t3, v, t4, wALocal, wBLocal, t5, metric1, metric2;
    this.count = cache.get$count();
    for (t1 = this.vertices, t2 = t1.length, i = 0; t3 = this.count, $.JSNumber_methods.$lt(i, t3); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      v = t1[i];
      v.set$indexA($.$index$as(cache.get$indexA(), i));
      v.set$indexB($.$index$as(cache.get$indexB(), i));
      t3 = proxyA.get$vertices();
      t4 = v.get$indexA();
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw $.ioore(t4);
      wALocal = t3[t4];
      t4 = proxyB.get$vertices();
      t3 = v.get$indexB();
      if (t3 >>> 0 !== t3 || t3 >= t4.length)
        throw $.ioore(t3);
      wBLocal = t4[t3];
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      t3 = v.get$w();
      t4 = v.get$wB();
      t5 = t4.x;
      t4 = t4.y;
      t3.x = t5;
      t3.y = t4;
      t4 = v.get$wA();
      t3.x = $.$sub$n(t3.x, t4.x);
      t3.y = $.$sub$n(t3.y, t4.y);
      v.set$a(0);
    }
    if ($.$gt$n(t3, 1)) {
      metric1 = cache.get$metric();
      metric2 = this.getMetric$0();
      if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < 1.192e-7)
        this.count = 0;
    }
    if ($.$eq(this.count, 0)) {
      if (0 >= t2)
        throw $.ioore(0);
      v = t1[0];
      v.set$indexA(0);
      v.set$indexB(0);
      t1 = proxyA.get$vertices();
      if (0 >= t1.length)
        throw $.ioore(0);
      wALocal = t1[0];
      t1 = proxyB.get$vertices();
      if (0 >= t1.length)
        throw $.ioore(0);
      wBLocal = t1[0];
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      t1 = v.get$w();
      t2 = v.get$wB();
      t3 = t2.x;
      t2 = t2.y;
      t1.x = t3;
      t1.y = t2;
      t2 = v.get$wA();
      t1.x = $.$sub$n(t1.x, t2.x);
      t1.y = $.$sub$n(t1.y, t2.y);
      this.count = 1;
    }
  },
  writeCache$1: function(cache) {
    var t1, t2, i, t3;
    cache.set$metric(this.getMetric$0());
    cache.set$count(this.count);
    for (t1 = this.vertices, t2 = t1.length, i = 0; $.JSNumber_methods.$lt(i, this.count); ++i) {
      t3 = cache.get$indexA();
      if (i >= t2)
        throw $.ioore(i);
      $.$indexSet$a(t3, i, t1[i].get$indexA());
      $.$indexSet$a(cache.get$indexB(), i, t1[i].get$indexB());
    }
  },
  getSearchDirection$1: function(out) {
    var t1, t2, t3;
    switch (this.count) {
      case 1:
        t1 = this.v1.w;
        t2 = t1.x;
        t1 = t1.y;
        out.x = t2;
        out.y = t1;
        out.x = $.$negate$n(out.x);
        out.y = $.$negate$n(out.y);
        return;
      case 2:
        t1 = this.e12;
        t2 = this.v2.w;
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.v1.w;
        t1.x = $.$sub$n(t1.x, t2.x);
        t1.y = $.$sub$n(t1.y, t2.y);
        t3 = t2.x;
        t2 = t2.y;
        out.x = t3;
        out.y = t2;
        out.x = $.$negate$n(out.x);
        out.y = $.$negate$n(out.y);
        t2 = t1.x;
        t3 = $.$mul$n(t2, out.y);
        t1 = t1.y;
        if (t3 - $.$mul$n(t1, out.x) > 0) {
          if (typeof t2 !== "number")
            throw $.iae(t2);
          if (typeof t1 !== "number")
            throw $.iae(t1);
          out.x = -1 * t1;
          out.y = 1 * t2;
        } else {
          if (typeof t2 !== "number")
            throw $.iae(t2);
          if (typeof t1 !== "number")
            throw $.iae(t1);
          out.x = 1 * t1;
          out.y = -1 * t2;
        }
        break;
      default:
        out.x = 0;
        out.y = 0;
        return;
    }
  },
  getClosestPoint$1: function(out) {
    var t1, t2, t3, t4, t5;
    switch (this.count) {
      case 0:
        out.x = 0;
        out.y = 0;
        return;
      case 1:
        t1 = this.v1.w;
        t2 = t1.x;
        t1 = t1.y;
        out.x = t2;
        out.y = t1;
        return;
      case 2:
        t1 = this.case22;
        t2 = this.v2;
        t3 = t2.w;
        t4 = t3.x;
        t3 = t3.y;
        t1.x = t4;
        t1.y = t3;
        t2 = t2.a;
        t1.x = $.$mul$n(t1.x, t2);
        t1.y = $.$mul$n(t1.y, t2);
        t2 = this.case2;
        t3 = this.v1;
        t4 = t3.w;
        t5 = t4.x;
        t4 = t4.y;
        t2.x = t5;
        t2.y = t4;
        t3 = t3.a;
        t2.x = $.$mul$n(t2.x, t3);
        t2.y = $.$mul$n(t2.y, t3);
        t2.x = $.$add$ns(t2.x, t1.x);
        t2.y = $.$add$ns(t2.y, t1.y);
        t1 = t2.x;
        t2 = t2.y;
        out.x = t1;
        out.y = t2;
        return;
      case 3:
        out.x = 0;
        out.y = 0;
        return;
      default:
        out.x = 0;
        out.y = 0;
        return;
    }
  },
  getWitnessPoints$2: function(pA, pB) {
    var t1, t2, t3, t4, t5;
    switch (this.count) {
      case 0:
        break;
      case 1:
        t1 = this.v1;
        t2 = t1.wA;
        t3 = t2.x;
        t2 = t2.y;
        pA.x = t3;
        pA.y = t2;
        t1 = t1.wB;
        t2 = t1.x;
        t1 = t1.y;
        pB.x = t2;
        pB.y = t1;
        break;
      case 2:
        t1 = this.case2;
        t2 = this.v1;
        t3 = t2.wA;
        t4 = t3.x;
        t3 = t3.y;
        t1.x = t4;
        t1.y = t3;
        t3 = t2.a;
        t1.x = $.$mul$n(t1.x, t3);
        t1.y = $.$mul$n(t1.y, t3);
        t3 = this.v2;
        t4 = t3.wA;
        t5 = t4.x;
        t4 = t4.y;
        pA.x = t5;
        pA.y = t4;
        t4 = t3.a;
        pA.x = $.$mul$n(pA.x, t4);
        pA.y = $.$mul$n(pA.y, t4);
        pA.x = $.$add$ns(pA.x, t1.x);
        pA.y = $.$add$ns(pA.y, t1.y);
        t4 = t2.wB;
        t5 = t4.x;
        t4 = t4.y;
        t1.x = t5;
        t1.y = t4;
        t2 = t2.a;
        t1.x = $.$mul$n(t1.x, t2);
        t1.y = $.$mul$n(t1.y, t2);
        t2 = t3.wB;
        t4 = t2.x;
        t2 = t2.y;
        pB.x = t4;
        pB.y = t2;
        t3 = t3.a;
        pB.x = $.$mul$n(pB.x, t3);
        pB.y = $.$mul$n(pB.y, t3);
        pB.x = $.$add$ns(pB.x, t1.x);
        pB.y = $.$add$ns(pB.y, t1.y);
        break;
      case 3:
        t1 = this.v1;
        t2 = t1.wA;
        t3 = t2.x;
        t2 = t2.y;
        pA.x = t3;
        pA.y = t2;
        t1 = t1.a;
        pA.x = $.$mul$n(pA.x, t1);
        pA.y = $.$mul$n(pA.y, t1);
        t1 = this.case3;
        t2 = this.v2;
        t3 = t2.wA;
        t4 = t3.x;
        t3 = t3.y;
        t1.x = t4;
        t1.y = t3;
        t2 = t2.a;
        t1.x = $.$mul$n(t1.x, t2);
        t1.y = $.$mul$n(t1.y, t2);
        t2 = this.case33;
        t3 = this.v3;
        t4 = t3.wA;
        t5 = t4.x;
        t4 = t4.y;
        t2.x = t5;
        t2.y = t4;
        t3 = t3.a;
        t2.x = $.$mul$n(t2.x, t3);
        t2.y = $.$mul$n(t2.y, t3);
        pA.x = $.$add$ns(pA.x, t1.x);
        pA.y = $.$add$ns(pA.y, t1.y);
        pA.x = $.$add$ns(pA.x, t2.x);
        pA.y = $.$add$ns(pA.y, t2.y);
        t2 = pA.x;
        t1 = pA.y;
        pB.x = t2;
        pB.y = t1;
        break;
      default:
        break;
    }
  },
  getMetric$0: function() {
    var t1, t2, t3, t4, t5;
    switch (this.count) {
      case 0:
        return 0;
      case 1:
        return 0;
      case 2:
        t1 = $.MathBox_distanceSquared(this.v1.w, this.v2.w);
        return Math.sqrt(t1);
      case 3:
        t1 = this.case3;
        t2 = this.v2.w;
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.v1.w;
        t1.x = $.$sub$n(t1.x, t2.x);
        t1.y = $.$sub$n(t1.y, t2.y);
        t3 = this.case33;
        t4 = this.v3.w;
        t5 = t4.x;
        t4 = t4.y;
        t3.x = t5;
        t3.y = t4;
        t3.x = $.$sub$n(t3.x, t2.x);
        t3.y = $.$sub$n(t3.y, t2.y);
        return $.$mul$n(t1.x, t3.y) - $.$mul$n(t1.y, t3.x);
      default:
        return 0;
    }
  },
  solve2$0: function() {
    var t1, w1, t2, w2, t3, t4, t5, t6, d12_2, d12_1, inv_d12;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.e12;
    t4 = w2.x;
    t5 = w2.y;
    t3.x = t4;
    t3.y = t5;
    t5 = t3.x;
    t4 = w1.x;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(1, t5, t4, t1, w1, t2, w2, t3);
    if (typeof t5 !== "number")
      throw t5.$sub();
    t3.x = t5 - t4;
    t4 = t3.y;
    t5 = w1.y;
    if (typeof t5 !== "number")
      return this.solve2$0$bailout(2, t5, t4, t1, w1, t2, w2, t3);
    if (typeof t4 !== "number")
      throw t4.$sub();
    t3.y = t4 - t5;
    t5 = w1.x;
    t4 = t3.x;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(3, t5, t4, t1, w1, t2, w2, t3);
    if (typeof t5 !== "number")
      throw t5.$mul();
    t5 *= t4;
    t6 = w1.y;
    t3 = t3.y;
    if (typeof t3 !== "number")
      return this.solve2$0$bailout(4, t5, t4, t1, 0, t2, w2, t3, t6);
    if (typeof t6 !== "number")
      throw t6.$mul();
    d12_2 = -(t5 + t6 * t3);
    if (d12_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    t5 = w2.x;
    if (typeof t5 !== "number")
      throw t5.$mul();
    t6 = w2.y;
    if (typeof t6 !== "number")
      throw t6.$mul();
    d12_1 = t5 * t4 + t6 * t3;
    if (d12_1 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    inv_d12 = 1 / (d12_1 + d12_2);
    t1.a = d12_1 * inv_d12;
    t2.a = d12_2 * inv_d12;
    this.count = 2;
  },
  solve2$0$bailout: function(state0, t5, t4, t1, w1, t2, w2, t3, t6) {
    switch (state0) {
      case 0:
        t1 = this.v1;
        w1 = t1.w;
        t2 = this.v2;
        w2 = t2.w;
        t3 = this.e12;
        t4 = w2.x;
        t5 = w2.y;
        t3.x = t4;
        t3.y = t5;
        t5 = t3.x;
        t4 = w1.x;
      case 1:
        state0 = 0;
        if (typeof t5 !== "number")
          throw t5.$sub();
        t3.x = $.$sub$n(t5, t4);
        t4 = t3.y;
        t5 = w1.y;
      case 2:
        state0 = 0;
        if (typeof t4 !== "number")
          throw t4.$sub();
        t3.y = $.$sub$n(t4, t5);
        t5 = w1.x;
        t4 = t3.x;
      case 3:
        state0 = 0;
        if (typeof t5 !== "number")
          throw t5.$mul();
        t5 = $.$mul$n(t5, t4);
        t6 = w1.y;
        t3 = t3.y;
      case 4:
        var d12_2, d12_1, inv_d12;
        state0 = 0;
        if (typeof t6 !== "number")
          throw t6.$mul();
        d12_2 = -(t5 + $.$mul$n(t6, t3));
        if (d12_2 <= 0) {
          t1.a = 1;
          this.count = 1;
          return;
        }
        t5 = w2.x;
        if (typeof t5 !== "number")
          throw t5.$mul();
        t4 = $.$mul$n(t5, t4);
        t5 = w2.y;
        if (typeof t5 !== "number")
          throw t5.$mul();
        d12_1 = t4 + $.$mul$n(t5, t3);
        if (d12_1 <= 0) {
          t2.a = 1;
          this.count = 1;
          t1.setFrom$1(t2);
          return;
        }
        inv_d12 = 1 / (d12_1 + d12_2);
        t1.a = d12_1 * inv_d12;
        t2.a = d12_2 * inv_d12;
        this.count = 2;
    }
  },
  solve3$0: function() {
    var t1, w1, t2, w2, t3, w3, t4, t5, t6, t7, t8, t9, t10, w2e12, d12_2, t11, w3e13, d13_2, t12, t13, t14, t15, t16, w3e23, d23_2, n123, d123_1, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.v3;
    w3 = t3.w;
    t4 = this.e12;
    t5 = w2.x;
    t6 = w2.y;
    t4.x = t5;
    t4.y = t6;
    t6 = t4.x;
    t5 = w1.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(1, t6, t5, t1, w1, t2, w2, t3, w3, t4);
    if (typeof t6 !== "number")
      throw t6.$sub();
    t4.x = t6 - t5;
    t5 = t4.y;
    t6 = w1.y;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(2, t6, t5, t1, w1, t2, w2, t3, w3, t4);
    if (typeof t5 !== "number")
      throw t5.$sub();
    t4.y = t5 - t6;
    t6 = w1.x;
    t5 = t4.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(3, t6, t5, t1, w1, t2, w2, t3, w3, t4);
    if (typeof t6 !== "number")
      throw t6.$mul();
    t6 *= t5;
    t7 = w1.y;
    t8 = t4.y;
    if (typeof t8 !== "number")
      return this.solve3$0$bailout(4, t6, t5, t1, w1, t2, w2, t3, w3, t4, t8, t7);
    if (typeof t7 !== "number")
      throw t7.$mul();
    t9 = w2.x;
    if (typeof t9 !== "number")
      throw t9.$mul();
    t10 = w2.y;
    if (typeof t10 !== "number")
      throw t10.$mul();
    w2e12 = t9 * t5 + t10 * t8;
    d12_2 = -(t6 + t7 * t8);
    t8 = this.e13;
    t7 = w3.x;
    t6 = w3.y;
    t8.x = t7;
    t8.y = t6;
    t6 = t8.x;
    t7 = w1.x;
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(5, t7, 0, t1, w1, t2, w2, t3, w3, t4, t6, t8, w2e12, d12_2);
    if (typeof t6 !== "number")
      throw t6.$sub();
    t8.x = t6 - t7;
    t7 = t8.y;
    t6 = w1.y;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(6, t7, 0, t1, w1, t2, w2, t3, w3, t4, t6, t8, w2e12, d12_2);
    if (typeof t7 !== "number")
      throw t7.$sub();
    t8.y = t7 - t6;
    t6 = w1.x;
    t7 = t8.x;
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(7, t7, 0, t1, w1, t2, w2, t3, w3, t4, t6, t8, w2e12, d12_2);
    if (typeof t6 !== "number")
      throw t6.$mul();
    t6 *= t7;
    t10 = w1.y;
    t5 = t8.y;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(8, t7, t5, t1, w1, t2, w2, t3, w3, t4, t6, t8, w2e12, d12_2, t10);
    if (typeof t10 !== "number")
      throw t10.$mul();
    t9 = w3.x;
    if (typeof t9 !== "number")
      throw t9.$mul();
    t11 = w3.y;
    if (typeof t11 !== "number")
      throw t11.$mul();
    w3e13 = t9 * t7 + t11 * t5;
    d13_2 = -(t6 + t10 * t5);
    t5 = this.e23;
    t5.x = t9;
    t5.y = t11;
    t11 = t5.x;
    t9 = w2.x;
    if (typeof t9 !== "number")
      return this.solve3$0$bailout(9, 0, 0, t1, w1, t2, w2, t3, w3, t4, 0, t8, w2e12, d12_2, t5, w3e13, d13_2, t11, t9);
    if (typeof t11 !== "number")
      throw t11.$sub();
    t5.x = t11 - t9;
    t9 = t5.y;
    t11 = w2.y;
    if (typeof t11 !== "number")
      return this.solve3$0$bailout(10, 0, 0, t1, w1, t2, w2, t3, w3, t4, 0, t8, w2e12, d12_2, t5, w3e13, d13_2, t11, t9);
    if (typeof t9 !== "number")
      throw t9.$sub();
    t5.y = t9 - t11;
    t11 = w2.x;
    t9 = t5.x;
    if (typeof t9 !== "number")
      return this.solve3$0$bailout(11, 0, 0, t1, w1, t2, w2, t3, w3, t4, 0, t8, w2e12, d12_2, t5, w3e13, d13_2, t11, t9);
    t10 = $.getInterceptor$n(t11);
    if (typeof t11 !== "number")
      throw t11.$mul();
    t6 = t11 * t9;
    t7 = w2.y;
    t5 = t5.y;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(12, t7, t6, t1, w1, t2, 0, t3, w3, t4, t10, t8, w2e12, d12_2, t5, w3e13, d13_2, t11, t9);
    t12 = $.getInterceptor$n(t7);
    if (typeof t7 !== "number")
      throw t7.$mul();
    t13 = w3.x;
    t14 = $.getInterceptor$n(t13);
    if (typeof t13 !== "number")
      throw t13.$mul();
    t15 = w3.y;
    t16 = $.getInterceptor$n(t15);
    if (typeof t15 !== "number")
      throw t15.$mul();
    w3e23 = t13 * t9 + t15 * t5;
    d23_2 = -(t6 + t7 * t5);
    t5 = t4.x;
    t6 = t8.y;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(13, t7, t6, t1, w1, t2, 0, t3, 0, t4, t10, t8, w2e12, d12_2, 0, w3e13, d13_2, t11, 0, t13, w3e23, d23_2, t5, t15, t12, t16, t14);
    if (typeof t5 !== "number")
      throw t5.$mul();
    t6 = t5 * t6;
    t4 = t4.y;
    t8 = t8.x;
    if (typeof t8 !== "number")
      return this.solve3$0$bailout(14, t7, t6, t1, w1, t2, 0, t3, 0, t4, t10, t8, w2e12, d12_2, 0, w3e13, d13_2, t11, 0, t13, w3e23, d23_2, 0, t15, t12, t16, t14);
    if (typeof t4 !== "number")
      throw t4.$mul();
    n123 = t6 - t4 * t8;
    d123_1 = n123 * (t11 * t15 - t7 * t13);
    t8 = w1.y;
    if (typeof t8 !== "number")
      return this.solve3$0$bailout(15, t7, 0, t1, w1, t2, 0, t3, 0, 0, 0, 0, w2e12, d12_2, 0, w3e13, d13_2, t11, 0, t13, w3e23, d23_2, 0, t15, t8, t16, t14, n123, d123_1);
    t13 *= t8;
    t14 = w1.x;
    if (typeof t14 !== "number")
      return this.solve3$0$bailout(16, t7, 0, t1, 0, t2, 0, t3, 0, 0, 0, 0, w2e12, d12_2, 0, w3e13, d13_2, t11, 0, t13, w3e23, d23_2, 0, t15, t8, t16, t14, n123, d123_1);
    d123_2 = n123 * (t13 - t15 * t14);
    d123_3 = n123 * (t14 * t7 - t8 * t11);
    if (d12_2 <= 0 && d13_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
      inv_d12 = 1 / (w2e12 + d12_2);
      t1.a = w2e12 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
      return;
    }
    if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
      inv_d13 = 1 / (w3e13 + d13_2);
      t1.a = w3e13 * inv_d13;
      t3.a = d13_2 * inv_d13;
      this.count = 2;
      t2.setFrom$1(t3);
      return;
    }
    if (w2e12 <= 0 && d23_2 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    if (w3e13 <= 0 && w3e23 <= 0) {
      t3.a = 1;
      this.count = 1;
      t1.setFrom$1(t3);
      return;
    }
    if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
      inv_d23 = 1 / (w3e23 + d23_2);
      t2.a = w3e23 * inv_d23;
      t3.a = d23_2 * inv_d23;
      this.count = 2;
      t1.setFrom$1(t3);
      return;
    }
    inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
    t1.a = d123_1 * inv_d123;
    t2.a = d123_2 * inv_d123;
    t3.a = d123_3 * inv_d123;
    this.count = 3;
  },
  solve3$0$bailout: function(state0, t6, t5, t1, w1, t2, w2, t3, w3, t4, t8, t7, w2e12, d12_2, t9, w3e13, d13_2, t11, t10, t14, w3e23, d23_2, t13, t16, t12, t17, t15, n123, d123_1) {
    switch (state0) {
      case 0:
        t1 = this.v1;
        w1 = t1.w;
        t2 = this.v2;
        w2 = t2.w;
        t3 = this.v3;
        w3 = t3.w;
        t4 = this.e12;
        t5 = w2.x;
        t6 = w2.y;
        t4.x = t5;
        t4.y = t6;
        t6 = t4.x;
        t5 = w1.x;
      case 1:
        state0 = 0;
        if (typeof t6 !== "number")
          throw t6.$sub();
        t4.x = $.$sub$n(t6, t5);
        t5 = t4.y;
        t6 = w1.y;
      case 2:
        state0 = 0;
        if (typeof t5 !== "number")
          throw t5.$sub();
        t4.y = $.$sub$n(t5, t6);
        t6 = w1.x;
        t5 = t4.x;
      case 3:
        state0 = 0;
        if (typeof t6 !== "number")
          throw t6.$mul();
        t6 = $.$mul$n(t6, t5);
        t7 = w1.y;
        t8 = t4.y;
      case 4:
        state0 = 0;
        if (typeof t7 !== "number")
          throw t7.$mul();
        t7 = $.$mul$n(t7, t8);
        t9 = w2.x;
        if (typeof t9 !== "number")
          throw t9.$mul();
        t5 = $.$mul$n(t9, t5);
        t9 = w2.y;
        if (typeof t9 !== "number")
          throw t9.$mul();
        w2e12 = t5 + $.$mul$n(t9, t8);
        d12_2 = -(t6 + t7);
        t7 = this.e13;
        t6 = w3.x;
        t8 = w3.y;
        t7.x = t6;
        t7.y = t8;
        t8 = t7.x;
        t6 = w1.x;
      case 5:
        state0 = 0;
        if (typeof t8 !== "number")
          throw t8.$sub();
        t7.x = $.$sub$n(t8, t6);
        t6 = t7.y;
        t8 = w1.y;
      case 6:
        state0 = 0;
        if (typeof t6 !== "number")
          throw t6.$sub();
        t7.y = $.$sub$n(t6, t8);
        t8 = w1.x;
        t6 = t7.x;
      case 7:
        state0 = 0;
        if (typeof t8 !== "number")
          throw t8.$mul();
        t8 = $.$mul$n(t8, t6);
        t9 = w1.y;
        t5 = t7.y;
      case 8:
        state0 = 0;
        if (typeof t9 !== "number")
          throw t9.$mul();
        t9 = $.$mul$n(t9, t5);
        t10 = w3.x;
        if (typeof t10 !== "number")
          throw t10.$mul();
        t6 = $.$mul$n(t10, t6);
        t11 = w3.y;
        if (typeof t11 !== "number")
          throw t11.$mul();
        w3e13 = t6 + $.$mul$n(t11, t5);
        d13_2 = -(t8 + t9);
        t9 = this.e23;
        t9.x = t10;
        t9.y = t11;
        t11 = t9.x;
        t10 = w2.x;
      case 9:
        state0 = 0;
        if (typeof t11 !== "number")
          throw t11.$sub();
        t9.x = $.$sub$n(t11, t10);
        t10 = t9.y;
        t11 = w2.y;
      case 10:
        state0 = 0;
        if (typeof t10 !== "number")
          throw t10.$sub();
        t9.y = $.$sub$n(t10, t11);
        t11 = w2.x;
        t10 = t9.x;
      case 11:
        state0 = 0;
        t8 = $.getInterceptor$n(t11);
        if (typeof t11 !== "number")
          throw t11.$mul();
        if (typeof t10 !== "number")
          throw $.iae(t10);
        t5 = t8.$mul(t11, t10);
        t6 = w2.y;
        t9 = t9.y;
      case 12:
        state0 = 0;
        t12 = $.getInterceptor$n(t6);
        if (typeof t6 !== "number")
          throw t6.$mul();
        if (typeof t9 !== "number")
          throw $.iae(t9);
        t13 = t12.$mul(t6, t9);
        t14 = w3.x;
        t15 = $.getInterceptor$n(t14);
        if (typeof t14 !== "number")
          throw t14.$mul();
        if (typeof t10 !== "number")
          throw $.iae(t10);
        t10 = t15.$mul(t14, t10);
        t16 = w3.y;
        t17 = $.getInterceptor$n(t16);
        if (typeof t16 !== "number")
          throw t16.$mul();
        if (typeof t9 !== "number")
          throw $.iae(t9);
        w3e23 = t10 + t17.$mul(t16, t9);
        d23_2 = -(t5 + t13);
        t13 = t4.x;
        t5 = t7.y;
      case 13:
        state0 = 0;
        if (typeof t13 !== "number")
          throw t13.$mul();
        t5 = $.$mul$n(t13, t5);
        t4 = t4.y;
        t7 = t7.x;
      case 14:
        state0 = 0;
        if (typeof t4 !== "number")
          throw t4.$mul();
        n123 = t5 - $.$mul$n(t4, t7);
        d123_1 = n123 * (t8.$mul(t11, t16) - t12.$mul(t6, t14));
        t12 = w1.y;
      case 15:
        state0 = 0;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t14 = t15.$mul(t14, t12);
        t15 = w1.x;
      case 16:
        var d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
        state0 = 0;
        if (typeof t15 !== "number")
          throw $.iae(t15);
        d123_2 = n123 * (t14 - t17.$mul(t16, t15));
        d123_3 = n123 * ($.$mul$n(t15, t6) - $.$mul$n(t12, t11));
        if (d12_2 <= 0 && d13_2 <= 0) {
          t1.a = 1;
          this.count = 1;
          return;
        }
        if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
          inv_d12 = 1 / (w2e12 + d12_2);
          t1.a = w2e12 * inv_d12;
          t2.a = d12_2 * inv_d12;
          this.count = 2;
          return;
        }
        if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
          inv_d13 = 1 / (w3e13 + d13_2);
          t1.a = w3e13 * inv_d13;
          t3.a = d13_2 * inv_d13;
          this.count = 2;
          t2.setFrom$1(t3);
          return;
        }
        if (w2e12 <= 0 && d23_2 <= 0) {
          t2.a = 1;
          this.count = 1;
          t1.setFrom$1(t2);
          return;
        }
        if (w3e13 <= 0 && w3e23 <= 0) {
          t3.a = 1;
          this.count = 1;
          t1.setFrom$1(t3);
          return;
        }
        if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
          inv_d23 = 1 / (w3e23 + d23_2);
          t2.a = w3e23 * inv_d23;
          t3.a = d23_2 * inv_d23;
          this.count = 2;
          t1.setFrom$1(t3);
          return;
        }
        inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
        t1.a = d123_1 * inv_d123;
        t2.a = d123_2 * inv_d123;
        t3.a = d123_3 * inv_d123;
        this.count = 3;
    }
  },
  Simplex$0: function() {
    var t1, t2;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = this.v1;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = this.v2;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = this.v3;
  }
},

SimplexCache: {"": "Object;metric@,count@,indexA<,indexB<",
  setFrom$1: function(sc) {
    var t1, t2;
    t1 = this.indexA;
    t2 = sc.get$indexA();
    if (!!t1.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(t1, 0, t1.length, t2, 0);
    t1 = this.indexB;
    t2 = sc.get$indexB();
    if (!!t1.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(t1, 0, t1.length, t2, 0);
    this.metric = sc.get$metric();
    this.count = sc.get$count();
  },
  SimplexCache$0: function() {
    var t1, t2, t3, t4, i;
    for (t1 = this.indexA, t2 = t1.length, t3 = this.indexB, t4 = t3.length, i = 0; i < 3; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = 2147483647;
      if (i >= t4)
        throw $.ioore(i);
      t3[i] = 2147483647;
    }
  }
},

SimplexVertex: {"": "Object;wA<,wB<,w<,a@,indexA@,indexB@",
  setFrom$1: function(sv) {
    var t1, t2, t3;
    t1 = this.wA;
    t2 = sv.get$wA();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.wB;
    t1 = sv.get$wB();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    t1 = this.w;
    t2 = sv.get$w();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    this.a = sv.get$a();
    this.indexA = sv.get$indexA();
    this.indexB = sv.get$indexB();
  },
  toString$0: function(_) {
    return "wA: " + $.S(this.wA) + ", wB: " + $.S(this.wB) + ", w: " + $.S(this.w);
  }
},

TimeOfImpact: {"": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA<,sweepB<,pool",
  timeOfImpact$2: function(output, input) {
    var t1, proxyA, proxyB, t2, t3, truncated, d, tMax, t4, target, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, iter, t15, t20, pushBackIter, done, s2, s1, a2, a1, rootIterCount, t, s;
    t1 = $.TimeOfImpact_toiCalls;
    if (typeof t1 !== "number")
      return this.timeOfImpact$2$bailout(1, output, input, t1);
    $.TimeOfImpact_toiCalls = t1 + 1;
    output.set$state(0);
    output.set$t(input.get$tMax());
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    t1 = this.sweepA;
    t1.setFrom$1(input.get$sweepA());
    t2 = this.sweepB;
    t2.setFrom$1(input.get$sweepB());
    t3 = t1.angleZero;
    if (typeof t3 !== "number")
      throw t3.$div();
    t3 = Math.floor(t3 / 6.283185307179586);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? $.JSNumber_methods.ceilToDouble$0(t3) : $.JSNumber_methods.floorToDouble$0(t3);
    d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
    t3 = t1.angleZero;
    if (typeof t3 !== "number")
      throw t3.$sub();
    t1.angleZero = t3 - d;
    t3 = t1.angle;
    if (typeof t3 !== "number")
      throw t3.$sub();
    t1.angle = t3 - d;
    t3 = t2.angleZero;
    if (typeof t3 !== "number")
      throw t3.$div();
    t3 = Math.floor(t3 / 6.283185307179586);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? $.JSNumber_methods.ceilToDouble$0(t3) : $.JSNumber_methods.floorToDouble$0(t3);
    d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
    t3 = t2.angleZero;
    if (typeof t3 !== "number")
      throw t3.$sub();
    t2.angleZero = t3 - d;
    t3 = t2.angle;
    if (typeof t3 !== "number")
      throw t3.$sub();
    t2.angle = t3 - d;
    tMax = input.get$tMax();
    if (typeof tMax !== "number")
      return this.timeOfImpact$2$bailout(2, output, input, t1, tMax, t2, proxyA, proxyB);
    t3 = proxyA.get$radius();
    if (typeof t3 !== "number")
      return this.timeOfImpact$2$bailout(3, output, input, t1, tMax, t2, proxyA, proxyB, t3);
    t4 = proxyB.get$radius();
    if (typeof t4 !== "number")
      return this.timeOfImpact$2$bailout(4, output, input, t1, tMax, t2, proxyA, proxyB, t3, t4);
    target = $.max(0.005, t3 + t4 - 0.015);
    t4 = this.cache;
    t4.count = 0;
    t3 = this.distanceInput;
    t3.proxyA = input.get$proxyA();
    t3.proxyB = input.get$proxyB();
    t3.useRadii = false;
    for (t5 = this.fcn, t6 = this.indexes, t7 = t6.length, t8 = target + 0.00125, t9 = target - 0.00125, t10 = this.distanceOutput, t11 = this.xfA, t12 = this.xfB, t13 = this.pool, t14 = 0, iter = 0; true;) {
      t1.getTransform$2(t11, t14);
      t2.getTransform$2(t12, t14);
      t3.transformA = t11;
      t3.transformB = t12;
      t13.distance.distance$3(t10, t4, t3);
      t15 = t10.distance;
      if (typeof t15 !== "number")
        throw t15.$le();
      if (t15 <= 0) {
        output.set$state(2);
        output.set$t(0);
        break;
      }
      if (t15 < t8) {
        output.set$state(3);
        output.set$t(t14);
        break;
      }
      t5.initialize$6(t4, proxyA, t1, proxyB, t2, t14);
      for (t20 = tMax, pushBackIter = 0; done = false, true;) {
        s2 = t5.findMinSeparation$2(t6, t20);
        if (s2 > t8) {
          output.set$state(4);
          output.set$t(tMax);
          done = true;
          break;
        }
        if (s2 > t9) {
          t14 = t20;
          done = false;
          break;
        }
        if (0 >= t7)
          throw $.ioore(0);
        t15 = t6[0];
        if (1 >= t7)
          throw $.ioore(1);
        s1 = t5.evaluate$3(t15, t6[1], t14);
        if (s1 < t9) {
          output.set$state(1);
          output.set$t(t14);
          done = true;
          break;
        }
        if (s1 <= t8) {
          output.set$state(3);
          output.set$t(t14);
          done = true;
          break;
        }
        for (a2 = t20, a1 = t14, rootIterCount = 0; true;) {
          t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
          s = t5.evaluate$3(t6[0], t6[1], t);
          if (Math.abs(s - target) < 0.00125) {
            t20 = t;
            break;
          }
          if (s > target) {
            a1 = t;
            s1 = s;
          } else {
            a2 = t;
            s2 = s;
          }
          ++rootIterCount;
          t15 = $.TimeOfImpact_toiRootIters;
          if (typeof t15 !== "number")
            return this.timeOfImpact$2$bailout(5, output, 0, t1, tMax, t2, proxyA, proxyB, t3, t4, t15, t11, t12, t7, t13, t10, target, t5, t6, t9, t8, t14, t20, iter, pushBackIter, rootIterCount, s2, s1, a1, a2);
          $.TimeOfImpact_toiRootIters = t15 + 1;
          if (rootIterCount === 50)
            break;
        }
        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
        ++pushBackIter;
        if (pushBackIter === 8) {
          done = false;
          break;
        }
      }
      ++iter;
      t15 = $.TimeOfImpact_toiIters;
      if (typeof t15 !== "number")
        return this.timeOfImpact$2$bailout(6, output, 0, t1, tMax, t2, proxyA, proxyB, t3, t4, t15, t11, t12, t7, t13, t10, target, t5, t6, t9, t8, t14, 0, iter, 0, 0, 0, 0, 0, 0, done);
      $.TimeOfImpact_toiIters = t15 + 1;
      if (done)
        break;
      if (iter === 1000) {
        output.set$state(1);
        output.set$t(t14);
        break;
      }
    }
    $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
  },
  timeOfImpact$2$bailout: function(state0, output, input, t1, tMax, t2, proxyA, proxyB, t3, t4, t15, t11, t12, t7, t13, t10, target, t5, t6, t9, t8, t14, t20, iter, pushBackIter, rootIterCount, s2, s1, a1, a2, done) {
    switch (state0) {
      case 0:
        t1 = $.TimeOfImpact_toiCalls;
      case 1:
        state0 = 0;
        $.TimeOfImpact_toiCalls = $.$add$ns(t1, 1);
        output.set$state(0);
        output.set$t(input.get$tMax());
        proxyA = input.get$proxyA();
        proxyB = input.get$proxyB();
        t1 = this.sweepA;
        t1.setFrom$1(input.get$sweepA());
        t2 = this.sweepB;
        t2.setFrom$1(input.get$sweepB());
        t3 = t1.angleZero;
        if (typeof t3 !== "number")
          throw t3.$div();
        t3 = Math.floor($.$div$n(t3, 6.283185307179586));
        if (isNaN(t3))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t3 == Infinity || t3 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t3 < 0 ? $.JSNumber_methods.ceilToDouble$0(t3) : $.JSNumber_methods.floorToDouble$0(t3);
        d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
        t3 = t1.angleZero;
        if (typeof t3 !== "number")
          throw t3.$sub();
        t1.angleZero = $.$sub$n(t3, d);
        t3 = t1.angle;
        if (typeof t3 !== "number")
          throw t3.$sub();
        t1.angle = $.$sub$n(t3, d);
        t3 = t2.angleZero;
        if (typeof t3 !== "number")
          throw t3.$div();
        t3 = Math.floor($.$div$n(t3, 6.283185307179586));
        if (isNaN(t3))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t3 == Infinity || t3 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t3 < 0 ? $.JSNumber_methods.ceilToDouble$0(t3) : $.JSNumber_methods.floorToDouble$0(t3);
        d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
        t3 = t2.angleZero;
        if (typeof t3 !== "number")
          throw t3.$sub();
        t2.angleZero = $.$sub$n(t3, d);
        t3 = t2.angle;
        if (typeof t3 !== "number")
          throw t3.$sub();
        t2.angle = $.$sub$n(t3, d);
        tMax = input.get$tMax();
      case 2:
        state0 = 0;
        t3 = proxyA.get$radius();
      case 3:
        state0 = 0;
        t4 = proxyB.get$radius();
      case 4:
        state0 = 0;
        target = $.max(0.005, $.$sub$n($.$add$ns(t3, t4), 0.015));
        t4 = this.cache;
        t4.count = 0;
        t3 = this.distanceInput;
        t3.proxyA = input.get$proxyA();
        t3.proxyB = input.get$proxyB();
        t3.useRadii = false;
        t5 = this.fcn;
        t6 = this.indexes;
        t7 = t6.length;
        t8 = target + 0.00125;
        t9 = target - 0.00125;
        t10 = this.distanceOutput;
        t11 = this.xfA;
        t12 = this.xfB;
        t13 = this.pool;
        t14 = 0;
        iter = 0;
      default:
        var truncated, d, t16, t, s;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1.getTransform$2(t11, t14);
                t2.getTransform$2(t12, t14);
                t3.transformA = t11;
                t3.transformB = t12;
                t13.distance.distance$3(t10, t4, t3);
                t15 = t10.distance;
                t16 = $.getInterceptor$n(t15);
                if (typeof t15 !== "number")
                  throw t15.$le();
                if (t16.$le(t15, 0)) {
                  output.set$state(2);
                  output.set$t(0);
                  break L0;
                }
                if (t16.$lt(t15, t8)) {
                  output.set$state(3);
                  output.set$t(t14);
                  break L0;
                }
                t5.initialize$6(t4, proxyA, t1, proxyB, t2, t14);
                t20 = tMax;
                pushBackIter = 0;
              case 5:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        done = false;
                        if (!true)
                          break L1;
                        s2 = t5.findMinSeparation$2(t6, t20);
                        if (s2 > t8) {
                          output.set$state(4);
                          output.set$t(tMax);
                          done = true;
                          break L1;
                        }
                        if (s2 > t9) {
                          t14 = t20;
                          done = false;
                          break L1;
                        }
                        if (0 >= t7)
                          throw $.ioore(0);
                        t15 = t6[0];
                        if (1 >= t7)
                          throw $.ioore(1);
                        s1 = t5.evaluate$3(t15, t6[1], t14);
                        if (s1 < t9) {
                          output.set$state(1);
                          output.set$t(t14);
                          done = true;
                          break L1;
                        }
                        if (s1 <= t8) {
                          output.set$state(3);
                          output.set$t(t14);
                          done = true;
                          break L1;
                        }
                        a2 = t20;
                        a1 = t14;
                        rootIterCount = 0;
                      case 5:
                        L2:
                          while (true)
                            switch (state0) {
                              case 0:
                                if (!true)
                                  break L2;
                                t15 = $.getInterceptor$ns(a1);
                                if ((rootIterCount & 1) === 1)
                                  t = t15.$add(a1, (target - s1) * $.$sub$n(a2, a1) / (s2 - s1));
                                else {
                                  t15 = t15.$add(a1, a2);
                                  if (typeof t15 !== "number")
                                    throw $.iae(t15);
                                  t = 0.5 * t15;
                                }
                                s = t5.evaluate$3(t6[0], t6[1], t);
                                if (Math.abs(s - target) < 0.00125) {
                                  t20 = t;
                                  break L2;
                                }
                                if (s > target) {
                                  a1 = t;
                                  s1 = s;
                                } else {
                                  a2 = t;
                                  s2 = s;
                                }
                                ++rootIterCount;
                                t15 = $.TimeOfImpact_toiRootIters;
                              case 5:
                                state0 = 0;
                                $.TimeOfImpact_toiRootIters = $.$add$ns(t15, 1);
                                if (rootIterCount === 50)
                                  break L2;
                            }
                        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
                        ++pushBackIter;
                        if (pushBackIter === 8) {
                          done = false;
                          break L1;
                        }
                    }
                ++iter;
                t15 = $.TimeOfImpact_toiIters;
              case 6:
                state0 = 0;
                $.TimeOfImpact_toiIters = $.$add$ns(t15, 1);
                if (done)
                  break L0;
                if (iter === 1000) {
                  output.set$state(1);
                  output.set$t(t14);
                  break L0;
                }
            }
        $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
    }
  },
  TimeOfImpact$_construct$1: function(argPool) {
    var t1, t2;
    t1 = this.indexes;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    $.TimeOfImpact_toiCalls = 0;
    $.TimeOfImpact_toiIters = 0;
    $.TimeOfImpact_toiMaxIters = 0;
    $.TimeOfImpact_toiRootIters = 0;
    $.TimeOfImpact_toiMaxRootIters = 0;
  }
},

SeparationFunction: {"": "Object;proxyA@,proxyB@,type@,localPoint<,axis,sweepA<,sweepB<,localPointA,localPointB,pointA<,pointB<,localPointA1,localPointA2,normal<,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
  initialize$6: function(cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
    var count, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, s;
    this.proxyA = argProxyA;
    this.proxyB = argProxyB;
    count = cache.count;
    if (typeof count !== "number")
      return this.initialize$6$bailout(1, cache, count, argSweepA, argSweepB, t1);
    this.sweepA = argSweepA;
    this.sweepB = argSweepB;
    t2 = this.xfa;
    this.sweepA.getTransform$2(t2, t1);
    t3 = this.xfb;
    this.sweepB.getTransform$2(t3, t1);
    if (count === 1) {
      this.type = 0;
      t1 = this.localPointA;
      t4 = this.proxyA.get$vertices();
      t5 = cache.indexA;
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      if (t5 >>> 0 !== t5 || t5 >= t4.length)
        throw $.ioore(t5);
      t5 = t4[t5];
      t4 = t5.get$x();
      t5 = t5.get$y();
      t1.x = t4;
      t1.y = t5;
      t5 = this.localPointB;
      t4 = this.proxyB.get$vertices();
      t6 = cache.indexB;
      if (0 >= t6.length)
        throw $.ioore(0);
      t6 = t6[0];
      if (t6 >>> 0 !== t6 || t6 >= t4.length)
        throw $.ioore(t6);
      t6 = t4[t6];
      t4 = t6.get$x();
      t6 = t6.get$y();
      t5.x = t4;
      t5.y = t6;
      t6 = this.pointA;
      $.Transform_mulToOut(t2, t1, t6);
      t1 = this.pointB;
      $.Transform_mulToOut(t3, t5, t1);
      t5 = this.axis;
      t3 = t1.x;
      t1 = t1.y;
      t5.x = t3;
      t5.y = t1;
      t1 = t5.x;
      t3 = t6.x;
      if (typeof t3 !== "number")
        return this.initialize$6$bailout(2, 0, 0, 0, 0, t1, t6, t5, t3);
      if (typeof t1 !== "number")
        throw t1.$sub();
      t5.x = t1 - t3;
      t3 = t5.y;
      t6 = t6.y;
      if (typeof t6 !== "number")
        return this.initialize$6$bailout(3, 0, 0, 0, 0, 0, t6, t5, t3);
      if (typeof t3 !== "number")
        throw t3.$sub();
      t5.y = t3 - t6;
      return t5.normalize$0();
    } else {
      t1 = cache.indexA;
      t4 = t1.length;
      if (0 >= t4)
        throw $.ioore(0);
      t5 = t1[0];
      if (1 >= t4)
        throw $.ioore(1);
      t4 = cache.indexB;
      t6 = this.pointA;
      t7 = this.localPoint;
      t8 = this.normal;
      t9 = this.axis;
      t10 = this.pointB;
      t11 = this.temp;
      t12 = t4.length;
      if ($.$eq(t5, t1[1])) {
        this.type = 2;
        t5 = this.localPointB1;
        t13 = this.proxyB.get$vertices();
        if (0 >= t12)
          throw $.ioore(0);
        t14 = t4[0];
        if (t14 >>> 0 !== t14 || t14 >= t13.length)
          throw $.ioore(t14);
        t14 = t13[t14];
        t13 = t14.get$x();
        t14 = t14.get$y();
        t5.x = t13;
        t5.y = t14;
        t14 = this.localPointB2;
        t13 = this.proxyB.get$vertices();
        if (1 >= t12)
          throw $.ioore(1);
        t4 = t4[1];
        if (t4 >>> 0 !== t4 || t4 >= t13.length)
          throw $.ioore(t4);
        t4 = t13[t4];
        t13 = t4.get$x();
        t4 = t4.get$y();
        t14.x = t13;
        t14.y = t4;
        t4 = t14.x;
        t13 = t14.y;
        t11.x = t4;
        t11.y = t13;
        t13 = t11.x;
        t4 = t5.x;
        if (typeof t4 !== "number")
          return this.initialize$6$bailout(4, 0, 0, 0, 0, t1, t6, t5, t3, t9, t10, t8, t7, t14, t11, t13, t4, t2);
        if (typeof t13 !== "number")
          throw t13.$sub();
        t11.x = t13 - t4;
        t4 = t11.y;
        t13 = t5.y;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(5, 0, 0, 0, 0, t1, t6, t5, t3, t9, t10, t8, t7, t14, t11, t13, t4, t2);
        if (typeof t4 !== "number")
          throw t4.$sub();
        t11.y = t4 - t13;
        t13 = t11.x;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t4 = t11.y;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t9.x = 1 * t4;
        t9.y = -1 * t13;
        t9.normalize$0();
        $.Matrix22_mulMatrixAndVectorToOut(t3.rotation, t9, t8);
        t13 = t5.x;
        t5 = t5.y;
        t7.x = t13;
        t7.y = t5;
        t5 = t7.x;
        if (typeof t5 !== "number")
          return this.initialize$6$bailout(6, 0, 0, 0, 0, t1, t6, t5, t3, t9, t10, t8, t7, t14, t11, 0, 0, t2);
        t13 = t14.x;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(7, 0, 0, 0, 0, t1, t6, t5, t3, t9, t10, t8, t7, t14, t11, t13, 0, t2);
        t7.x = t5 + t13;
        t13 = t7.y;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(8, 0, 0, 0, 0, t1, t6, 0, t3, t9, t10, t8, t7, t14, t11, t13, 0, t2);
        t14 = t14.y;
        if (typeof t14 !== "number")
          return this.initialize$6$bailout(9, 0, 0, 0, 0, t1, t6, 0, t3, t9, t10, t8, t7, t14, t11, t13, 0, t2);
        t7.y = t13 + t14;
        t14 = t7.x;
        if (typeof t14 !== "number")
          throw t14.$mul();
        t7.x = t14 * 0.5;
        t14 = t7.y;
        if (typeof t14 !== "number")
          throw t14.$mul();
        t7.y = t14 * 0.5;
        $.Transform_mulToOut(t3, t7, t10);
        t7 = this.localPointA;
        t3 = this.proxyA.get$vertices();
        t1 = t1[0];
        if (t1 >>> 0 !== t1 || t1 >= t3.length)
          throw $.ioore(t1);
        t1 = t3[t1];
        t3 = t1.get$x();
        t1 = t1.get$y();
        t7.x = t3;
        t7.y = t1;
        $.Transform_mulToOut(t2, t7, t6);
        t7 = t6.x;
        t6 = t6.y;
        t11.x = t7;
        t11.y = t6;
        t6 = t11.x;
        t7 = t10.x;
        if (typeof t7 !== "number")
          return this.initialize$6$bailout(10, 0, 0, 0, 0, 0, t6, 0, 0, t9, t10, t8, t7, 0, t11);
        if (typeof t6 !== "number")
          throw t6.$sub();
        t11.x = t6 - t7;
        t7 = t11.y;
        t10 = t10.y;
        if (typeof t10 !== "number")
          return this.initialize$6$bailout(11, 0, 0, 0, 0, 0, 0, 0, 0, t9, t10, t8, t7, 0, t11);
        if (typeof t7 !== "number")
          throw t7.$sub();
        t11.y = t7 - t10;
        t10 = t11.x;
        t7 = t8.x;
        if (typeof t7 !== "number")
          return this.initialize$6$bailout(12, 0, 0, 0, 0, 0, 0, 0, 0, t9, t10, t8, t7, 0, t11);
        if (typeof t10 !== "number")
          throw t10.$mul();
        t7 = t10 * t7;
        t11 = t11.y;
        t8 = t8.y;
        if (typeof t8 !== "number")
          return this.initialize$6$bailout(13, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0, t8, t7, 0, t11);
        if (typeof t11 !== "number")
          throw t11.$mul();
        s = t7 + t11 * t8;
        if (s < 0) {
          t1 = t9.x;
          if (typeof t1 !== "number")
            throw t1.$negate();
          t9.x = -t1;
          t1 = t9.y;
          if (typeof t1 !== "number")
            throw t1.$negate();
          t9.y = -t1;
          s = -s;
        }
        return s;
      } else {
        this.type = 1;
        t5 = this.localPointA1;
        t13 = this.proxyA.get$vertices();
        t14 = t1[0];
        if (t14 >>> 0 !== t14 || t14 >= t13.length)
          throw $.ioore(t14);
        t14 = t13[t14];
        t13 = t14.get$x();
        t14 = t14.get$y();
        t5.x = t13;
        t5.y = t14;
        t14 = this.localPointA2;
        t13 = this.proxyA.get$vertices();
        t1 = t1[1];
        if (t1 >>> 0 !== t1 || t1 >= t13.length)
          throw $.ioore(t1);
        t1 = t13[t1];
        t13 = t1.get$x();
        t1 = t1.get$y();
        t14.x = t13;
        t14.y = t1;
        t1 = t14.x;
        t13 = t14.y;
        t11.x = t1;
        t11.y = t13;
        t13 = t11.x;
        t1 = t5.x;
        if (typeof t1 !== "number")
          return this.initialize$6$bailout(14, 0, 0, 0, 0, t1, t6, t5, t3, t9, t10, t8, t7, 0, t11, t13, t4, t2, t14);
        if (typeof t13 !== "number")
          throw t13.$sub();
        t11.x = t13 - t1;
        t1 = t11.y;
        t13 = t5.y;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(15, 0, 0, 0, 0, t1, t6, t5, t3, t9, t10, t8, t7, 0, t11, t13, t4, t2, t14);
        if (typeof t1 !== "number")
          throw t1.$sub();
        t11.y = t1 - t13;
        t13 = t11.x;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t1 = t11.y;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t9.x = 1 * t1;
        t9.y = -1 * t13;
        t9.normalize$0();
        $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, t9, t8);
        t13 = t5.x;
        t5 = t5.y;
        t7.x = t13;
        t7.y = t5;
        t5 = t7.x;
        if (typeof t5 !== "number")
          return this.initialize$6$bailout(16, 0, 0, 0, 0, 0, t6, t5, t3, t9, t10, t8, t7, 0, t11, 0, t4, t2, t14);
        t13 = t14.x;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(17, 0, 0, 0, 0, 0, t6, t5, t3, t9, t10, t8, t7, 0, t11, t13, t4, t2, t14);
        t7.x = t5 + t13;
        t13 = t7.y;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(18, 0, 0, 0, 0, 0, t6, 0, t3, t9, t10, t8, t7, 0, t11, t13, t4, t2, t14);
        t14 = t14.y;
        if (typeof t14 !== "number")
          return this.initialize$6$bailout(19, 0, 0, 0, 0, 0, t6, 0, t3, t9, t10, t8, t7, 0, t11, t13, t4, t2, t14);
        t7.y = t13 + t14;
        t14 = t7.x;
        if (typeof t14 !== "number")
          throw t14.$mul();
        t7.x = t14 * 0.5;
        t14 = t7.y;
        if (typeof t14 !== "number")
          throw t14.$mul();
        t7.y = t14 * 0.5;
        $.Transform_mulToOut(t2, t7, t6);
        t7 = this.localPointB;
        t2 = this.proxyB.get$vertices();
        if (0 >= t12)
          throw $.ioore(0);
        t4 = t4[0];
        if (t4 >>> 0 !== t4 || t4 >= t2.length)
          throw $.ioore(t4);
        t4 = t2[t4];
        t2 = t4.get$x();
        t4 = t4.get$y();
        t7.x = t2;
        t7.y = t4;
        $.Transform_mulToOut(t3, t7, t10);
        t7 = t10.x;
        t10 = t10.y;
        t11.x = t7;
        t11.y = t10;
        t10 = t11.x;
        t7 = t6.x;
        if (typeof t7 !== "number")
          return this.initialize$6$bailout(20, 0, 0, 0, 0, 0, t6, 0, 0, t9, t10, t8, t7, 0, t11);
        if (typeof t10 !== "number")
          throw t10.$sub();
        t11.x = t10 - t7;
        t7 = t11.y;
        t6 = t6.y;
        if (typeof t6 !== "number")
          return this.initialize$6$bailout(21, 0, 0, 0, 0, 0, t6, 0, 0, t9, 0, t8, t7, 0, t11);
        if (typeof t7 !== "number")
          throw t7.$sub();
        t11.y = t7 - t6;
        t6 = t11.x;
        t7 = t8.x;
        if (typeof t7 !== "number")
          return this.initialize$6$bailout(22, 0, 0, 0, 0, 0, t6, 0, 0, t9, 0, t8, t7, 0, t11);
        if (typeof t6 !== "number")
          throw t6.$mul();
        t7 = t6 * t7;
        t11 = t11.y;
        t8 = t8.y;
        if (typeof t8 !== "number")
          return this.initialize$6$bailout(23, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0, t8, t7, 0, t11);
        if (typeof t11 !== "number")
          throw t11.$mul();
        s = t7 + t11 * t8;
        if (s < 0) {
          t1 = t9.x;
          if (typeof t1 !== "number")
            throw t1.$negate();
          t9.x = -t1;
          t1 = t9.y;
          if (typeof t1 !== "number")
            throw t1.$negate();
          t9.y = -t1;
          s = -s;
        }
        return s;
      }
    }
  },
  initialize$6$bailout: function(state0, cache, count, argSweepA, argSweepB, t1, t6, t5, t3, t9, t10, t8, t7, t14, t11, t12, t4, t2, t13) {
    switch (state0) {
      case 0:
        this.proxyA = argProxyA;
        this.proxyB = argProxyB;
        count = cache.count;
      case 1:
        state0 = 0;
        this.sweepA = argSweepA;
        this.sweepB = argSweepB;
        t2 = this.xfa;
        this.sweepA.getTransform$2(t2, t1);
        t3 = this.xfb;
        this.sweepB.getTransform$2(t3, t1);
      default:
        var s;
        if (state0 === 3 || state0 === 2 || state0 === 0 && $.$eq(count, 1))
          switch (state0) {
            case 0:
              this.type = 0;
              t1 = this.localPointA;
              t4 = this.proxyA.get$vertices();
              t5 = cache.indexA;
              if (0 >= t5.length)
                throw $.ioore(0);
              t5 = t5[0];
              if (t5 >>> 0 !== t5 || t5 >= t4.length)
                throw $.ioore(t5);
              t5 = t4[t5];
              t4 = t5.get$x();
              t5 = t5.get$y();
              t1.x = t4;
              t1.y = t5;
              t5 = this.localPointB;
              t4 = this.proxyB.get$vertices();
              t6 = cache.indexB;
              if (0 >= t6.length)
                throw $.ioore(0);
              t6 = t6[0];
              if (t6 >>> 0 !== t6 || t6 >= t4.length)
                throw $.ioore(t6);
              t6 = t4[t6];
              t4 = t6.get$x();
              t6 = t6.get$y();
              t5.x = t4;
              t5.y = t6;
              t6 = this.pointA;
              $.Transform_mulToOut(t2, t1, t6);
              t1 = this.pointB;
              $.Transform_mulToOut(t3, t5, t1);
              t5 = this.axis;
              t3 = t1.x;
              t1 = t1.y;
              t5.x = t3;
              t5.y = t1;
              t1 = t5.x;
              t3 = t6.x;
            case 2:
              state0 = 0;
              if (typeof t1 !== "number")
                throw t1.$sub();
              t5.x = $.$sub$n(t1, t3);
              t3 = t5.y;
              t6 = t6.y;
            case 3:
              state0 = 0;
              if (typeof t3 !== "number")
                throw t3.$sub();
              t5.y = $.$sub$n(t3, t6);
              return t5.normalize$0();
          }
        else
          switch (state0) {
            case 0:
              t1 = cache.indexA;
              t4 = t1.length;
              if (0 >= t4)
                throw $.ioore(0);
              t5 = t1[0];
              if (1 >= t4)
                throw $.ioore(1);
              t4 = cache.indexB;
              t6 = this.pointA;
              t7 = this.localPoint;
              t8 = this.normal;
              t9 = this.axis;
              t10 = this.pointB;
              t11 = this.temp;
            default:
              if (state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && $.$eq(t5, t1[1]))
                switch (state0) {
                  case 0:
                    this.type = 2;
                    t5 = this.localPointB1;
                    t12 = this.proxyB.get$vertices();
                    t13 = t4.length;
                    if (0 >= t13)
                      throw $.ioore(0);
                    t14 = t4[0];
                    if (t14 >>> 0 !== t14 || t14 >= t12.length)
                      throw $.ioore(t14);
                    t14 = t12[t14];
                    t12 = t14.get$x();
                    t14 = t14.get$y();
                    t5.x = t12;
                    t5.y = t14;
                    t14 = this.localPointB2;
                    t12 = this.proxyB.get$vertices();
                    if (1 >= t13)
                      throw $.ioore(1);
                    t4 = t4[1];
                    if (t4 >>> 0 !== t4 || t4 >= t12.length)
                      throw $.ioore(t4);
                    t4 = t12[t4];
                    t12 = t4.get$x();
                    t4 = t4.get$y();
                    t14.x = t12;
                    t14.y = t4;
                    t4 = t14.x;
                    t12 = t14.y;
                    t11.x = t4;
                    t11.y = t12;
                    t12 = t11.x;
                    t4 = t5.x;
                  case 4:
                    state0 = 0;
                    if (typeof t12 !== "number")
                      throw t12.$sub();
                    t11.x = $.$sub$n(t12, t4);
                    t4 = t11.y;
                    t12 = t5.y;
                  case 5:
                    state0 = 0;
                    if (typeof t4 !== "number")
                      throw t4.$sub();
                    t11.y = $.$sub$n(t4, t12);
                    t12 = t11.x;
                    if (typeof t12 !== "number")
                      throw $.iae(t12);
                    t4 = t11.y;
                    if (typeof t4 !== "number")
                      throw $.iae(t4);
                    t9.x = 1 * t4;
                    t9.y = -1 * t12;
                    t9.normalize$0();
                    $.Matrix22_mulMatrixAndVectorToOut(t3.rotation, t9, t8);
                    t12 = t5.x;
                    t5 = t5.y;
                    t7.x = t12;
                    t7.y = t5;
                    t5 = t7.x;
                  case 6:
                    state0 = 0;
                    t12 = t14.x;
                  case 7:
                    state0 = 0;
                    t7.x = $.$add$ns(t5, t12);
                    t12 = t7.y;
                  case 8:
                    state0 = 0;
                    t14 = t14.y;
                  case 9:
                    state0 = 0;
                    t7.y = $.$add$ns(t12, t14);
                    t14 = t7.x;
                    if (typeof t14 !== "number")
                      throw t14.$mul();
                    t7.x = $.$mul$n(t14, 0.5);
                    t14 = t7.y;
                    if (typeof t14 !== "number")
                      throw t14.$mul();
                    t7.y = $.$mul$n(t14, 0.5);
                    $.Transform_mulToOut(t3, t7, t10);
                    t7 = this.localPointA;
                    t3 = this.proxyA.get$vertices();
                    t1 = t1[0];
                    if (t1 >>> 0 !== t1 || t1 >= t3.length)
                      throw $.ioore(t1);
                    t1 = t3[t1];
                    t3 = t1.get$x();
                    t1 = t1.get$y();
                    t7.x = t3;
                    t7.y = t1;
                    $.Transform_mulToOut(t2, t7, t6);
                    t7 = t6.x;
                    t6 = t6.y;
                    t11.x = t7;
                    t11.y = t6;
                    t6 = t11.x;
                    t7 = t10.x;
                  case 10:
                    state0 = 0;
                    if (typeof t6 !== "number")
                      throw t6.$sub();
                    t11.x = $.$sub$n(t6, t7);
                    t7 = t11.y;
                    t10 = t10.y;
                  case 11:
                    state0 = 0;
                    if (typeof t7 !== "number")
                      throw t7.$sub();
                    t11.y = $.$sub$n(t7, t10);
                    t10 = t11.x;
                    t7 = t8.x;
                  case 12:
                    state0 = 0;
                    if (typeof t10 !== "number")
                      throw t10.$mul();
                    t7 = $.$mul$n(t10, t7);
                    t11 = t11.y;
                    t8 = t8.y;
                  case 13:
                    state0 = 0;
                    if (typeof t11 !== "number")
                      throw t11.$mul();
                    s = t7 + $.$mul$n(t11, t8);
                    if (s < 0) {
                      t1 = t9.x;
                      if (typeof t1 !== "number")
                        throw t1.$negate();
                      t9.x = $.$negate$n(t1);
                      t1 = t9.y;
                      if (typeof t1 !== "number")
                        throw t1.$negate();
                      t9.y = $.$negate$n(t1);
                      s = -s;
                    }
                    return s;
                }
              else
                switch (state0) {
                  case 0:
                    this.type = 1;
                    t5 = this.localPointA1;
                    t12 = this.proxyA.get$vertices();
                    t13 = t1[0];
                    if (t13 >>> 0 !== t13 || t13 >= t12.length)
                      throw $.ioore(t13);
                    t13 = t12[t13];
                    t12 = t13.get$x();
                    t13 = t13.get$y();
                    t5.x = t12;
                    t5.y = t13;
                    t13 = this.localPointA2;
                    t12 = this.proxyA.get$vertices();
                    t1 = t1[1];
                    if (t1 >>> 0 !== t1 || t1 >= t12.length)
                      throw $.ioore(t1);
                    t1 = t12[t1];
                    t12 = t1.get$x();
                    t1 = t1.get$y();
                    t13.x = t12;
                    t13.y = t1;
                    t1 = t13.x;
                    t12 = t13.y;
                    t11.x = t1;
                    t11.y = t12;
                    t12 = t11.x;
                    t1 = t5.x;
                  case 14:
                    state0 = 0;
                    if (typeof t12 !== "number")
                      throw t12.$sub();
                    t11.x = $.$sub$n(t12, t1);
                    t1 = t11.y;
                    t12 = t5.y;
                  case 15:
                    state0 = 0;
                    if (typeof t1 !== "number")
                      throw t1.$sub();
                    t11.y = $.$sub$n(t1, t12);
                    t12 = t11.x;
                    if (typeof t12 !== "number")
                      throw $.iae(t12);
                    t1 = t11.y;
                    if (typeof t1 !== "number")
                      throw $.iae(t1);
                    t9.x = 1 * t1;
                    t9.y = -1 * t12;
                    t9.normalize$0();
                    $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, t9, t8);
                    t12 = t5.x;
                    t5 = t5.y;
                    t7.x = t12;
                    t7.y = t5;
                    t5 = t7.x;
                  case 16:
                    state0 = 0;
                    t12 = t13.x;
                  case 17:
                    state0 = 0;
                    t7.x = $.$add$ns(t5, t12);
                    t12 = t7.y;
                  case 18:
                    state0 = 0;
                    t13 = t13.y;
                  case 19:
                    state0 = 0;
                    t7.y = $.$add$ns(t12, t13);
                    t13 = t7.x;
                    if (typeof t13 !== "number")
                      throw t13.$mul();
                    t7.x = $.$mul$n(t13, 0.5);
                    t13 = t7.y;
                    if (typeof t13 !== "number")
                      throw t13.$mul();
                    t7.y = $.$mul$n(t13, 0.5);
                    $.Transform_mulToOut(t2, t7, t6);
                    t7 = this.localPointB;
                    t2 = this.proxyB.get$vertices();
                    if (0 >= t4.length)
                      throw $.ioore(0);
                    t4 = t4[0];
                    if (t4 >>> 0 !== t4 || t4 >= t2.length)
                      throw $.ioore(t4);
                    t4 = t2[t4];
                    t2 = t4.get$x();
                    t4 = t4.get$y();
                    t7.x = t2;
                    t7.y = t4;
                    $.Transform_mulToOut(t3, t7, t10);
                    t7 = t10.x;
                    t10 = t10.y;
                    t11.x = t7;
                    t11.y = t10;
                    t10 = t11.x;
                    t7 = t6.x;
                  case 20:
                    state0 = 0;
                    if (typeof t10 !== "number")
                      throw t10.$sub();
                    t11.x = $.$sub$n(t10, t7);
                    t7 = t11.y;
                    t6 = t6.y;
                  case 21:
                    state0 = 0;
                    if (typeof t7 !== "number")
                      throw t7.$sub();
                    t11.y = $.$sub$n(t7, t6);
                    t6 = t11.x;
                    t7 = t8.x;
                  case 22:
                    state0 = 0;
                    if (typeof t6 !== "number")
                      throw t6.$mul();
                    t7 = $.$mul$n(t6, t7);
                    t11 = t11.y;
                    t8 = t8.y;
                  case 23:
                    state0 = 0;
                    if (typeof t11 !== "number")
                      throw t11.$mul();
                    s = t7 + $.$mul$n(t11, t8);
                    if (s < 0) {
                      t1 = t9.x;
                      if (typeof t1 !== "number")
                        throw t1.$negate();
                      t9.x = $.$negate$n(t1);
                      t1 = t9.y;
                      if (typeof t1 !== "number")
                        throw t1.$negate();
                      t9.y = $.$negate$n(t1);
                      s = -s;
                    }
                    return s;
                }
          }
    }
  },
  findMinSeparation$2: function(indexes, t) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    t3 = indexes.length;
    switch (this.type) {
      case 0:
        t4 = this.axis;
        t5 = this.axisA;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t4, t5);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        t6 = this.axisB;
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t4, t6);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        t7 = this.proxyA;
        t5 = t7.getSupport$1(t5);
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = t5;
        t6 = this.proxyB.getSupport$1(t6);
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = t6;
        t6 = this.localPointA;
        t7 = t7.get$vertices();
        t3 = indexes[0];
        if (t3 >>> 0 !== t3 || t3 >= t7.length)
          throw $.ioore(t3);
        t3 = t7[t3];
        t7 = t3.get$x();
        t3 = t3.get$y();
        t6.x = t7;
        t6.y = t3;
        t3 = this.localPointB;
        t7 = this.proxyB.get$vertices();
        t5 = indexes[1];
        if (t5 >>> 0 !== t5 || t5 >= t7.length)
          throw $.ioore(t5);
        t5 = t7[t5];
        t7 = t5.get$x();
        t5 = t5.get$y();
        t3.x = t7;
        t3.y = t5;
        t5 = this.pointA;
        $.Transform_mulToOut(t1, t6, t5);
        t6 = this.pointB;
        $.Transform_mulToOut(t2, t3, t6);
        t6.x = $.$sub$n(t6.x, t5.x);
        t6.y = $.$sub$n(t6.y, t5.y);
        return $.$mul$n(t6.x, t4.x) + $.$mul$n(t6.y, t4.y);
      case 1:
        t4 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1.rotation, this.axis, t4);
        t5 = this.pointA;
        $.Transform_mulToOut(t1, this.localPoint, t5);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        t1 = this.axisB;
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t4, t1);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = -1;
        t6 = this.proxyB;
        t1 = t6.getSupport$1(t1);
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = t1;
        t1 = this.localPointB;
        t6 = t6.get$vertices();
        t3 = indexes[1];
        if (t3 >>> 0 !== t3 || t3 >= t6.length)
          throw $.ioore(t3);
        t3 = t6[t3];
        t6 = t3.get$x();
        t3 = t3.get$y();
        t1.x = t6;
        t1.y = t3;
        t3 = this.pointB;
        $.Transform_mulToOut(t2, t1, t3);
        t3.x = $.$sub$n(t3.x, t5.x);
        t3.y = $.$sub$n(t3.y, t5.y);
        return $.$mul$n(t3.x, t4.x) + $.$mul$n(t3.y, t4.y);
      case 2:
        t4 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, this.axis, t4);
        t5 = this.pointB;
        $.Transform_mulToOut(t2, this.localPoint, t5);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        t2 = this.axisA;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t4, t2);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = -1;
        t3 = this.proxyA;
        indexes[0] = t3.getSupport$1(t2);
        t2 = this.localPointA;
        t3 = t3.get$vertices();
        t6 = indexes[0];
        if (t6 >>> 0 !== t6 || t6 >= t3.length)
          throw $.ioore(t6);
        t6 = t3[t6];
        t3 = t6.get$x();
        t6 = t6.get$y();
        t2.x = t3;
        t2.y = t6;
        t6 = this.pointA;
        $.Transform_mulToOut(t1, t2, t6);
        t6.x = $.$sub$n(t6.x, t5.x);
        t6.y = $.$sub$n(t6.y, t5.y);
        return $.$mul$n(t6.x, t4.x) + $.$mul$n(t6.y, t4.y);
      default:
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = -1;
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = -1;
        return 0;
    }
  },
  evaluate$3: function(indexA, indexB, t) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    switch (this.type) {
      case 0:
        t3 = this.axis;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t3, this.axisA);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t3, this.axisB);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        t4 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA >>> 0 !== indexA || indexA >= t5.length)
          throw $.ioore(indexA);
        t5 = t5[indexA];
        t6 = t5.get$x();
        t5 = t5.get$y();
        t4.x = t6;
        t4.y = t5;
        t5 = this.localPointB;
        t6 = this.proxyB.get$vertices();
        if (indexB >>> 0 !== indexB || indexB >= t6.length)
          throw $.ioore(indexB);
        t6 = t6[indexB];
        t7 = t6.get$x();
        t6 = t6.get$y();
        t5.x = t7;
        t5.y = t6;
        t6 = this.pointA;
        $.Transform_mulToOut(t1, t4, t6);
        t4 = this.pointB;
        $.Transform_mulToOut(t2, t5, t4);
        t4.x = $.$sub$n(t4.x, t6.x);
        t4.y = $.$sub$n(t4.y, t6.y);
        return $.$mul$n(t4.x, t3.x) + $.$mul$n(t4.y, t3.y);
      case 1:
        t3 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1.rotation, this.axis, t3);
        t4 = this.pointA;
        $.Transform_mulToOut(t1, this.localPoint, t4);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t3, this.axisB);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        t1 = this.localPointB;
        t5 = this.proxyB.get$vertices();
        if (indexB >>> 0 !== indexB || indexB >= t5.length)
          throw $.ioore(indexB);
        t5 = t5[indexB];
        t6 = t5.get$x();
        t5 = t5.get$y();
        t1.x = t6;
        t1.y = t5;
        t5 = this.pointB;
        $.Transform_mulToOut(t2, t1, t5);
        t5.x = $.$sub$n(t5.x, t4.x);
        t5.y = $.$sub$n(t5.y, t4.y);
        return $.$mul$n(t5.x, t3.x) + $.$mul$n(t5.y, t3.y);
      case 2:
        t3 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, this.axis, t3);
        t4 = this.pointB;
        $.Transform_mulToOut(t2, this.localPoint, t4);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t3, this.axisA);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        t2 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA >>> 0 !== indexA || indexA >= t5.length)
          throw $.ioore(indexA);
        t5 = t5[indexA];
        t6 = t5.get$x();
        t5 = t5.get$y();
        t2.x = t6;
        t2.y = t5;
        t5 = this.pointA;
        $.Transform_mulToOut(t1, t2, t5);
        t5.x = $.$sub$n(t5.x, t4.x);
        t5.y = $.$sub$n(t5.y, t4.y);
        return $.$mul$n(t5.x, t3.x) + $.$mul$n(t5.y, t3.y);
      default:
        return 0;
    }
  }
},

TimeOfImpactInput: {"": "Object;proxyA<,proxyB<,sweepA<,sweepB<,tMax<"},

TimeOfImpactOutput: {"": "Object;state?,t?"},

WorldManifold: {"": "Object;normal<,points<,pool3,pool4",
  initialize$5: function(manifold, xfA, radiusA, xfB, radiusB) {
    var pointA, pointB, t1, t2, t3, t4, t5, t6, t7, t8, t9, planePoint, clipPoint, i, t10, t11, t12, scalar, R, v;
    switch (manifold.get$type()) {
      case 0:
        pointA = this.pool3;
        pointB = this.pool4;
        t1 = this.normal;
        t1.x = 1;
        t1.y = 0;
        t2 = xfA.position;
        t3 = t2.x;
        t4 = xfA.rotation;
        t5 = t4.col1.x;
        t6 = manifold.get$localPoint();
        pointA.x = $.$add$ns($.$add$ns(t3, $.$mul$n(t5, t6.x)), $.$mul$n(t4.col2.x, t6.y));
        t2 = t2.y;
        t6 = t4.col1.y;
        t5 = manifold.get$localPoint();
        pointA.y = $.$add$ns($.$add$ns(t2, $.$mul$n(t6, t5.x)), $.$mul$n(t4.col2.y, t5.y));
        t5 = xfB.position;
        t4 = t5.x;
        t6 = xfB.rotation;
        t2 = t6.col1.x;
        t3 = manifold.get$points();
        if (0 >= t3.length)
          throw $.ioore(0);
        t3 = t3[0].get$localPoint();
        pointB.x = $.$add$ns($.$add$ns(t4, $.$mul$n(t2, t3.x)), $.$mul$n(t6.col2.x, t3.y));
        t5 = t5.y;
        t3 = t6.col1.y;
        t2 = manifold.get$points();
        if (0 >= t2.length)
          throw $.ioore(0);
        t2 = t2[0].get$localPoint();
        pointB.y = $.$add$ns($.$add$ns(t5, $.$mul$n(t3, t2.x)), $.$mul$n(t6.col2.y, t2.y));
        if ($.MathBox_distanceSquared(pointA, pointB) > 1.4208639999999999e-14) {
          t1.x = $.$sub$n(pointB.x, pointA.x);
          t1.y = $.$sub$n(pointB.y, pointA.y);
          t1.normalize$0();
        }
        t2 = t1.x;
        t3 = $.getInterceptor$n(t2);
        t4 = t3.$mul(t2, radiusA);
        t5 = pointA.x;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t1 = t1.y;
        t6 = $.getInterceptor$n(t1);
        t7 = t6.$mul(t1, radiusA);
        t8 = pointA.y;
        if (typeof t8 !== "number")
          throw $.iae(t8);
        t2 = t3.$negate(t2);
        if (typeof radiusB !== "number")
          throw $.iae(radiusB);
        t3 = pointB.x;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t1 = t6.$negate(t1);
        t6 = pointB.y;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t9 = this.points;
        if (0 >= t9.length)
          throw $.ioore(0);
        t9[0].set$x((t4 + t5 + (t2 * radiusB + t3)) * 0.5);
        t9[0].set$y((t7 + t8 + (t1 * radiusB + t6)) * 0.5);
        return;
      case 1:
        planePoint = this.pool3;
        t1 = this.normal;
        t2 = xfA.rotation;
        t3 = t2.col1.x;
        t4 = manifold.get$localNormal();
        t1.x = $.$mul$n(t3, t4.x) + $.$mul$n(t2.col2.x, t4.y);
        t4 = t2.col1.y;
        t3 = manifold.get$localNormal();
        t1.y = $.$mul$n(t4, t3.x) + $.$mul$n(t2.col2.y, t3.y);
        t3 = xfA.position;
        t4 = t3.x;
        t5 = t2.col1.x;
        t6 = manifold.get$localPoint();
        planePoint.x = $.$add$ns($.$add$ns(t4, $.$mul$n(t5, t6.x)), $.$mul$n(t2.col2.x, t6.y));
        t3 = t3.y;
        t6 = t2.col1.y;
        t5 = manifold.get$localPoint();
        planePoint.y = $.$add$ns($.$add$ns(t3, $.$mul$n(t6, t5.x)), $.$mul$n(t2.col2.y, t5.y));
        clipPoint = this.pool4;
        for (t2 = xfB.position, t3 = xfB.rotation, t4 = $.getInterceptor$n(radiusA), t5 = this.points, t6 = t5.length, i = 0; $.JSNumber_methods.$lt(i, manifold.get$pointCount()); ++i) {
          t7 = t2.x;
          t8 = t3.col1.x;
          t9 = manifold.get$points();
          if (i >= t9.length)
            throw $.ioore(i);
          t9 = t9[i].get$localPoint();
          clipPoint.x = $.$add$ns($.$add$ns(t7, $.$mul$n(t8, t9.x)), $.$mul$n(t3.col2.x, t9.y));
          t9 = t2.y;
          t8 = t3.col1.y;
          t7 = manifold.get$points();
          if (i >= t7.length)
            throw $.ioore(i);
          t7 = t7[i].get$localPoint();
          clipPoint.y = $.$add$ns($.$add$ns(t9, $.$mul$n(t8, t7.x)), $.$mul$n(t3.col2.y, t7.y));
          t7 = clipPoint.x;
          t8 = $.$sub$n(t7, planePoint.x);
          t9 = t1.x;
          if (typeof t9 !== "number")
            throw $.iae(t9);
          t10 = clipPoint.y;
          t11 = $.$sub$n(t10, planePoint.y);
          t12 = t1.y;
          if (typeof t12 !== "number")
            throw $.iae(t12);
          scalar = t4.$sub(radiusA, t8 * t9 + t11 * t12);
          if (typeof t7 !== "number")
            throw $.iae(t7);
          if (typeof t10 !== "number")
            throw $.iae(t10);
          if (typeof radiusB !== "number")
            throw $.iae(radiusB);
          if (i >= t6)
            throw $.ioore(i);
          t5[i].set$x((t9 * scalar + t7 + (-t9 * radiusB + t7)) * 0.5);
          t5[i].set$y((t12 * scalar + t10 + (-t12 * radiusB + t10)) * 0.5);
        }
        return;
      case 2:
        planePoint = this.pool3;
        R = xfB.rotation;
        t1 = this.normal;
        t2 = R.col1.x;
        t3 = manifold.get$localNormal();
        t1.x = $.$mul$n(t2, t3.x) + $.$mul$n(R.col2.x, t3.y);
        t3 = R.col1.y;
        t2 = manifold.get$localNormal();
        t1.y = $.$mul$n(t3, t2.x) + $.$mul$n(R.col2.y, t2.y);
        v = manifold.get$localPoint();
        t2 = xfB.position;
        planePoint.x = $.$add$ns($.$add$ns(t2.x, $.$mul$n(R.col1.x, v.x)), $.$mul$n(R.col2.x, v.y));
        planePoint.y = $.$add$ns($.$add$ns(t2.y, $.$mul$n(R.col1.y, v.x)), $.$mul$n(R.col2.y, v.y));
        clipPoint = this.pool4;
        for (t2 = xfA.position, t3 = xfA.rotation, t4 = $.getInterceptor$n(radiusB), t5 = this.points, t6 = t5.length, i = 0; $.JSNumber_methods.$lt(i, manifold.get$pointCount()); ++i) {
          t7 = t2.x;
          t8 = t3.col1.x;
          t9 = manifold.get$points();
          if (i >= t9.length)
            throw $.ioore(i);
          t9 = t9[i].get$localPoint();
          clipPoint.x = $.$add$ns($.$add$ns(t7, $.$mul$n(t8, t9.x)), $.$mul$n(t3.col2.x, t9.y));
          t9 = t2.y;
          t8 = t3.col1.y;
          t7 = manifold.get$points();
          if (i >= t7.length)
            throw $.ioore(i);
          t7 = t7[i].get$localPoint();
          clipPoint.y = $.$add$ns($.$add$ns(t9, $.$mul$n(t8, t7.x)), $.$mul$n(t3.col2.y, t7.y));
          t7 = clipPoint.x;
          t8 = $.$sub$n(t7, planePoint.x);
          t9 = t1.x;
          if (typeof t9 !== "number")
            throw $.iae(t9);
          t10 = clipPoint.y;
          t11 = $.$sub$n(t10, planePoint.y);
          t12 = t1.y;
          if (typeof t12 !== "number")
            throw $.iae(t12);
          scalar = t4.$sub(radiusB, t8 * t9 + t11 * t12);
          if (typeof t7 !== "number")
            throw $.iae(t7);
          if (typeof t10 !== "number")
            throw $.iae(t10);
          if (typeof radiusA !== "number")
            throw $.iae(radiusA);
          if (i >= t6)
            throw $.ioore(i);
          t5[i].set$x((-t9 * radiusA + t7 + (t9 * scalar + t7)) * 0.5);
          t5[i].set$y((-t12 * radiusA + t10 + (t12 * scalar + t10)) * 0.5);
        }
        t1.x = $.$negate$n(t1.x);
        t1.y = $.$negate$n(t1.y);
        break;
    }
  },
  WorldManifold$0: function() {
    var t1, t2, i;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = new $.Vector(0, 0);
    }
  }
},

BroadPhase: {"": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
  updatePairs$1: function(callback) {
    var t1, i, t2, t3, pairBuffer, compare, primaryPair, pair;
    this._pairCount = 0;
    for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
      this.queryProxy = t2[i];
      t2 = this.queryProxy;
      if (t2 == null)
        continue;
      t1._query$4(this, t2.get$box(), t1._root, 1);
    }
    this.moveBuffer = $.List_List($);
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    $.IterableMixinWorkaround__rangeCheck(t2, 0, t3);
    pairBuffer = $.List_List$from(new $.SubListIterable(t2, 0, t3), true);
    compare = new $.BroadPhase_updatePairs_closure();
    if (!!pairBuffer.immutable$list)
      $.throwExpression(new $.UnsupportedError("sort"));
    t2 = $.get$length$as(pairBuffer) - 1;
    if (t2 - 0 <= 32)
      $.Sort_insertionSort_(pairBuffer, 0, t2, compare);
    else
      $.Sort__dualPivotQuicksort(pairBuffer, 0, t2, compare);
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    if (!!t2.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(t2, 0, t3, pairBuffer, 0);
    for (i = 0; i < this._pairCount;) {
      t2 = this._pairBuffer;
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      primaryPair = t2[i];
      callback.addPair$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
      ++i;
      for (; i < this._pairCount;) {
        t2 = this._pairBuffer;
        if (i >= t2.length)
          throw $.ioore(i);
        pair = t2[i];
        if (!$.$eq(pair.get$proxyA(), primaryPair.get$proxyA()) || !$.$eq(pair.get$proxyB(), primaryPair.get$proxyB()))
          break;
        ++i;
      }
    }
    t1.rebalance$1(4);
  },
  treeCallback$1: function(proxy) {
    var t1, t2, oldBuffer, i, i0, t3, t4;
    if ($.$eq(proxy, this.queryProxy))
      return true;
    t1 = this._pairCount;
    t2 = this._pairCapacity;
    if (t1 === t2) {
      oldBuffer = this._pairBuffer;
      this._pairCapacity = t2 * 2;
      this._pairBuffer = $.List_List(this._pairCapacity);
      for (t1 = this._pairBuffer, i = oldBuffer.length, t2 = t1.length, i0 = 0; i0 < i; ++i0) {
        t3 = oldBuffer[i0];
        if (i0 >= t2)
          throw $.ioore(i0);
        t1[i0] = t3;
      }
      for (; i < this._pairCapacity; ++i) {
        if (i >= t2)
          throw $.ioore(i);
        t1[i] = new $.Pair(null, null);
      }
    }
    t1 = proxy.get$key();
    t2 = this.queryProxy;
    t1 = $.$lt$n(t1, t2.get$key());
    t3 = this._pairBuffer;
    t4 = this._pairCount;
    if (t1) {
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw $.ioore(t4);
      t3[t4].set$proxyA(proxy);
      t1 = this._pairBuffer;
      t2 = this._pairCount;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2].set$proxyB(this.queryProxy);
    } else {
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw $.ioore(t4);
      t3[t4].set$proxyA(t2);
      t1 = this._pairBuffer;
      t2 = this._pairCount;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2].set$proxyB(proxy);
    }
    this._pairCount = this._pairCount + 1;
    return true;
  },
  BroadPhase$0: function() {
    var t1, t2, i;
    this.moveBuffer = $.List_List($);
    this._pairBuffer = $.List_List(this._pairCapacity);
    for (t1 = this._pairBuffer, t2 = t1.length, i = 0; i < this._pairCapacity; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = new $.Pair(null, null);
    }
  }
},

BroadPhase_updatePairs_closure: {"": "Closure;",
  call$2: function(a, b) {
    return $.compareTo$1$ns(a, b);
  }
},

DynamicTree: {"": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center<,deltaOne,deltaTwo",
  createProxy$2: function(box, userData) {
    var proxy, iterationCount, height, tryCount;
    proxy = this._allocateNode$0();
    proxy.get$box().lowerBound.x = $.$sub$n(box.lowerBound.x, 0.1);
    proxy.get$box().lowerBound.y = $.$sub$n(box.lowerBound.y, 0.1);
    proxy.get$box().upperBound.x = $.$add$ns(box.upperBound.x, 0.1);
    proxy.get$box().upperBound.y = $.$add$ns(box.upperBound.y, 0.1);
    proxy.set$userData(userData);
    this._insertLeaf$1(proxy);
    iterationCount = $.JSNumber_methods.$shr(this._nodeCount, 4);
    height = this._computeHeight$1(this._root);
    tryCount = 0;
    while (true) {
      if (!(height > 64 && tryCount < 10))
        break;
      this.rebalance$1(iterationCount);
      height = this._computeHeight$1(this._root);
      ++tryCount;
    }
    return proxy;
  },
  moveProxy$3: function(argProxy, argBox, displacement) {
    var t1, t2, t3, t4;
    t1 = argProxy.get$box();
    if (t1.contains$1(t1, argBox))
      return false;
    this._removeLeaf$1(argProxy);
    t1 = argBox.lowerBound;
    t1.x = $.$sub$n(t1.x, 0.1);
    t1 = argBox.lowerBound;
    t1.y = $.$sub$n(t1.y, 0.1);
    t1 = argBox.upperBound;
    t1.x = $.$add$ns(t1.x, 0.1);
    t1 = argBox.upperBound;
    t1.y = $.$add$ns(t1.y, 0.1);
    t1 = this._tempVector;
    t2 = displacement.x;
    t3 = displacement.y;
    t1.x = t2;
    t1.y = t3;
    t1.x = $.$mul$n(t1.x, 2);
    t1.y = $.$mul$n(t1.y, 2);
    t2 = t1.x;
    if ($.$lt$n(t2, 0)) {
      t3 = argBox.lowerBound;
      t3.x = $.$add$ns(t3.x, t2);
    } else {
      t3 = argBox.upperBound;
      t3.x = $.$add$ns(t3.x, t2);
    }
    t1 = t1.y;
    if ($.$lt$n(t1, 0)) {
      t2 = argBox.lowerBound;
      t2.y = $.$add$ns(t2.y, t1);
    } else {
      t2 = argBox.upperBound;
      t2.y = $.$add$ns(t2.y, t1);
    }
    t1 = argProxy.get$box();
    t2 = t1.lowerBound;
    t3 = argBox.lowerBound;
    t2.setFrom$1;
    t4 = t3.x;
    t3 = t3.y;
    t2.x = t4;
    t2.y = t3;
    t1 = t1.upperBound;
    t3 = argBox.upperBound;
    t1.setFrom$1;
    t2 = t3.x;
    t3 = t3.y;
    t1.x = t2;
    t1.y = t3;
    this._insertLeaf$1(argProxy);
    return true;
  },
  _allocateNode$0: function() {
    var t1, i, t2, node;
    t1 = this._nodeStack;
    if (t1._head === t1._tail)
      for (i = 0; i < 6; ++i) {
        t2 = new $.AxisAlignedBox(null, null);
        if (t2.lowerBound == null)
          t2.lowerBound = new $.Vector(0, 0);
        if (t2.upperBound == null)
          t2.upperBound = new $.Vector(0, 0);
        t1.addFirst$1(new $.DynamicTreeNode(t2, null, null, null, null, null, null));
      }
    node = t1.removeFirst$0();
    node.set$parent(null);
    node.set$childOne(null);
    node.set$childTwo(null);
    node.set$userData(null);
    node.set$key(this._nodeCounter);
    this._nodeCounter = this._nodeCounter + 1;
    this._nodeCount = this._nodeCount + 1;
    return node;
  },
  _query$4: function(callback, argBox, node, count) {
    if (node == null)
      return true;
    if ($.AxisAlignedBox_testOverlap(argBox, node.get$box()))
      if (node.get$isLeaf()) {
        if (!callback.treeCallback$1(node))
          return false;
      } else {
        if (count < 64) {
          ++count;
          if (!this._query$4(callback, argBox, node.get$childOne(), count))
            return false;
        }
        if (count < 64)
          if (!this._query$4(callback, argBox, node.get$childTwo(), count + 1))
            return false;
      }
    return true;
  },
  _insertLeaf$1: function(node) {
    var t1, t2, t3, c, t4, sibling, childOne, childTwo, t5, t6, normOne, node1, node2, node10;
    this._insertionCount = this._insertionCount + 1;
    if (this._root == null) {
      this._root = node;
      node.set$parent(null);
      return;
    }
    t1 = this.center;
    t2 = node.get$box();
    t3 = t2.lowerBound;
    c = new $.Vector(t3.x, t3.y);
    t2 = t2.upperBound;
    t3 = c.x;
    if (typeof t3 !== "number")
      return this._insertLeaf$1$bailout(1, node, c, t2, t1, t3);
    t4 = t2.x;
    if (typeof t4 !== "number")
      return this._insertLeaf$1$bailout(2, node, c, t2, t1, t3, t4);
    c.x = t3 + t4;
    t4 = c.y;
    if (typeof t4 !== "number")
      return this._insertLeaf$1$bailout(3, node, c, t2, t1, 0, t4);
    t2 = t2.y;
    if (typeof t2 !== "number")
      return this._insertLeaf$1$bailout(4, node, c, t2, t1, 0, t4);
    c.y = t4 + t2;
    t2 = c.x;
    if (typeof t2 !== "number")
      throw t2.$mul();
    c.x = t2 * 0.5;
    t2 = c.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    c.y = t2 * 0.5;
    t2 = c.x;
    t4 = c.y;
    t1.x = t2;
    t1.y = t4;
    sibling = this._root;
    if (!sibling.get$isLeaf())
      do {
        childOne = sibling.get$childOne();
        childTwo = sibling.get$childTwo();
        t2 = this.deltaOne;
        t3 = childOne.get$box();
        t4 = t3.lowerBound;
        c = new $.Vector(t4.x, t4.y);
        t3 = t3.upperBound;
        t4 = c.x;
        if (typeof t4 !== "number")
          return this._insertLeaf$1$bailout(5, node, c, t2, t1, t3, t4, childOne, childTwo);
        t5 = t3.x;
        if (typeof t5 !== "number")
          return this._insertLeaf$1$bailout(6, node, c, t2, t1, t3, t4, childOne, childTwo, t5);
        c.x = t4 + t5;
        t5 = c.y;
        if (typeof t5 !== "number")
          return this._insertLeaf$1$bailout(7, node, c, t2, t1, t3, 0, childOne, childTwo, t5);
        t3 = t3.y;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(8, node, c, t2, t1, t3, 0, childOne, childTwo, t5);
        c.y = t5 + t3;
        t3 = c.x;
        if (typeof t3 !== "number")
          throw t3.$mul();
        c.x = t3 * 0.5;
        t3 = c.y;
        if (typeof t3 !== "number")
          throw t3.$mul();
        c.y = t3 * 0.5;
        t3 = c.x;
        t5 = c.y;
        t2.x = t3;
        t2.y = t5;
        t5 = this.deltaTwo;
        t3 = childTwo.get$box();
        t4 = t3.lowerBound;
        c = new $.Vector(t4.x, t4.y);
        t3 = t3.upperBound;
        t4 = c.x;
        if (typeof t4 !== "number")
          return this._insertLeaf$1$bailout(9, node, c, t2, t1, t3, t4, childOne, childTwo, t5);
        t6 = t3.x;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(10, node, c, t2, t1, t3, t4, childOne, childTwo, t5, t6);
        c.x = t4 + t6;
        t6 = c.y;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(11, node, c, t2, t1, t3, 0, childOne, childTwo, t5, t6);
        t3 = t3.y;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(12, node, c, t2, t1, t3, 0, childOne, childTwo, t5, t6);
        c.y = t6 + t3;
        t3 = c.x;
        if (typeof t3 !== "number")
          throw t3.$mul();
        c.x = t3 * 0.5;
        t3 = c.y;
        if (typeof t3 !== "number")
          throw t3.$mul();
        c.y = t3 * 0.5;
        t3 = c.x;
        t6 = c.y;
        t5.x = t3;
        t5.y = t6;
        t6 = t2.x;
        t3 = t1.x;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(13, node, 0, t2, t1, t3, 0, childOne, childTwo, t5, t6);
        if (typeof t6 !== "number")
          throw t6.$sub();
        t2.x = t6 - t3;
        t3 = t2.y;
        t6 = t1.y;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(14, node, 0, t2, t1, t3, 0, childOne, childTwo, t5, t6);
        if (typeof t3 !== "number")
          throw t3.$sub();
        t2.y = t3 - t6;
        t2.x = $.abs$0$n(t2.x);
        t2.y = $.abs$0$n(t2.y);
        t6 = t5.x;
        t3 = t1.x;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(15, node, 0, t2, t1, t3, 0, childOne, childTwo, t5, t6);
        if (typeof t6 !== "number")
          throw t6.$sub();
        t5.x = t6 - t3;
        t3 = t5.y;
        t6 = t1.y;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(16, node, 0, t2, 0, t3, 0, childOne, childTwo, t5, t6);
        if (typeof t3 !== "number")
          throw t3.$sub();
        t5.y = t3 - t6;
        t5.x = $.abs$0$n(t5.x);
        t5.y = $.abs$0$n(t5.y);
        t6 = t2.x;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(17, node, 0, t2, 0, 0, 0, childOne, childTwo, t5, t6);
        t2 = t2.y;
        if (typeof t2 !== "number")
          return this._insertLeaf$1$bailout(18, node, 0, t2, 0, 0, 0, childOne, childTwo, t5, t6);
        normOne = t6 + t2;
        t2 = t5.x;
        if (typeof t2 !== "number")
          return this._insertLeaf$1$bailout(19, node, 0, t2, 0, 0, 0, childOne, childTwo, t5, 0, normOne);
        t5 = t5.y;
        if (typeof t5 !== "number")
          return this._insertLeaf$1$bailout(20, node, 0, t2, 0, 0, 0, childOne, childTwo, t5, 0, normOne);
        sibling = normOne < t2 + t5 ? childOne : childTwo;
      } while (!sibling.get$isLeaf());
    node1 = sibling.get$parent();
    node2 = this._allocateNode$0();
    node2.set$parent(node1);
    node2.set$userData(null);
    node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
    if (node1 != null) {
      if ($.$eq(sibling.get$parent().get$childOne(), sibling))
        node1.set$childOne(node2);
      else
        node1.set$childTwo(node2);
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      sibling.set$parent(node2);
      node.set$parent(node2);
      do {
        t1 = node1.get$box();
        if (t1.contains$1(t1, node2.get$box()))
          break;
        t1.setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        node10 = node1.get$parent();
        if (node10 != null) {
          node2 = node1;
          node1 = node10;
          continue;
        } else
          break;
      } while (true);
    } else {
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      sibling.set$parent(node2);
      node.set$parent(node2);
      this._root = node2;
    }
  },
  _insertLeaf$1$bailout: function(state0, node, c, t2, t1, t3, t4, childOne, childTwo, t5, t6, normOne) {
    switch (state0) {
      case 0:
        this._insertionCount = this._insertionCount + 1;
        if (this._root == null) {
          this._root = node;
          node.set$parent(null);
          return;
        }
        t1 = this.center;
        t2 = node.get$box();
        t3 = t2.lowerBound;
        c = new $.Vector(t3.x, t3.y);
        t2 = t2.upperBound;
        t3 = c.x;
      case 1:
        state0 = 0;
        t4 = t2.x;
      case 2:
        state0 = 0;
        c.x = $.$add$ns(t3, t4);
        t4 = c.y;
      case 3:
        state0 = 0;
        t2 = t2.y;
      case 4:
        state0 = 0;
        c.y = $.$add$ns(t4, t2);
        t2 = c.x;
        if (typeof t2 !== "number")
          throw t2.$mul();
        c.x = $.$mul$n(t2, 0.5);
        t2 = c.y;
        if (typeof t2 !== "number")
          throw t2.$mul();
        c.y = $.$mul$n(t2, 0.5);
        t2 = c.x;
        t4 = c.y;
        t1.x = t2;
        t1.y = t4;
        sibling = this._root;
      default:
        var sibling, node1, node2, node10;
        if (state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && !sibling.get$isLeaf())
          switch (state0) {
            case 0:
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      childOne = sibling.get$childOne();
                      childTwo = sibling.get$childTwo();
                      t2 = this.deltaOne;
                      t3 = childOne.get$box();
                      t4 = t3.lowerBound;
                      c = new $.Vector(t4.x, t4.y);
                      t3 = t3.upperBound;
                      t4 = c.x;
                    case 5:
                      state0 = 0;
                      t5 = t3.x;
                    case 6:
                      state0 = 0;
                      c.x = $.$add$ns(t4, t5);
                      t5 = c.y;
                    case 7:
                      state0 = 0;
                      t3 = t3.y;
                    case 8:
                      state0 = 0;
                      c.y = $.$add$ns(t5, t3);
                      t3 = c.x;
                      if (typeof t3 !== "number")
                        throw t3.$mul();
                      c.x = $.$mul$n(t3, 0.5);
                      t3 = c.y;
                      if (typeof t3 !== "number")
                        throw t3.$mul();
                      c.y = $.$mul$n(t3, 0.5);
                      t3 = c.x;
                      t5 = c.y;
                      t2.x = t3;
                      t2.y = t5;
                      t5 = this.deltaTwo;
                      t3 = childTwo.get$box();
                      t4 = t3.lowerBound;
                      c = new $.Vector(t4.x, t4.y);
                      t3 = t3.upperBound;
                      t4 = c.x;
                    case 9:
                      state0 = 0;
                      t6 = t3.x;
                    case 10:
                      state0 = 0;
                      c.x = $.$add$ns(t4, t6);
                      t6 = c.y;
                    case 11:
                      state0 = 0;
                      t3 = t3.y;
                    case 12:
                      state0 = 0;
                      c.y = $.$add$ns(t6, t3);
                      t3 = c.x;
                      if (typeof t3 !== "number")
                        throw t3.$mul();
                      c.x = $.$mul$n(t3, 0.5);
                      t3 = c.y;
                      if (typeof t3 !== "number")
                        throw t3.$mul();
                      c.y = $.$mul$n(t3, 0.5);
                      t3 = c.x;
                      t6 = c.y;
                      t5.x = t3;
                      t5.y = t6;
                      t6 = t2.x;
                      t3 = t1.x;
                    case 13:
                      state0 = 0;
                      if (typeof t6 !== "number")
                        throw t6.$sub();
                      t2.x = $.$sub$n(t6, t3);
                      t3 = t2.y;
                      t6 = t1.y;
                    case 14:
                      state0 = 0;
                      if (typeof t3 !== "number")
                        throw t3.$sub();
                      t2.y = $.$sub$n(t3, t6);
                      t2.x = $.abs$0$n(t2.x);
                      t2.y = $.abs$0$n(t2.y);
                      t6 = t5.x;
                      t3 = t1.x;
                    case 15:
                      state0 = 0;
                      if (typeof t6 !== "number")
                        throw t6.$sub();
                      t5.x = $.$sub$n(t6, t3);
                      t3 = t5.y;
                      t6 = t1.y;
                    case 16:
                      state0 = 0;
                      if (typeof t3 !== "number")
                        throw t3.$sub();
                      t5.y = $.$sub$n(t3, t6);
                      t5.x = $.abs$0$n(t5.x);
                      t5.y = $.abs$0$n(t5.y);
                      t6 = t2.x;
                    case 17:
                      state0 = 0;
                      t2 = t2.y;
                    case 18:
                      state0 = 0;
                      normOne = $.$add$ns(t6, t2);
                      t2 = t5.x;
                    case 19:
                      state0 = 0;
                      t5 = t5.y;
                    case 20:
                      state0 = 0;
                      sibling = $.$lt$n(normOne, $.$add$ns(t2, t5)) ? childOne : childTwo;
                      if (!!sibling.get$isLeaf())
                        break L0;
                  }
          }
        node1 = sibling.get$parent();
        node2 = this._allocateNode$0();
        node2.set$parent(node1);
        node2.set$userData(null);
        node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
        if (node1 != null) {
          if ($.$eq(sibling.get$parent().get$childOne(), sibling))
            node1.set$childOne(node2);
          else
            node1.set$childTwo(node2);
          node2.set$childOne(sibling);
          node2.set$childTwo(node);
          sibling.set$parent(node2);
          node.set$parent(node2);
          do {
            t1 = node1.get$box();
            if (t1.contains$1(t1, node2.get$box()))
              break;
            t1.setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
            node10 = node1.get$parent();
            if (node10 != null) {
              node2 = node1;
              node1 = node10;
              continue;
            } else
              break;
          } while (true);
        } else {
          node2.set$childOne(sibling);
          node2.set$childTwo(node);
          sibling.set$parent(node2);
          node.set$parent(node2);
          this._root = node2;
        }
    }
  },
  _removeLeaf$1: function(argNode) {
    var node2, node1, sibling, t1, t2, t3, t4, t5;
    if ($.$eq(argNode, this._root)) {
      this._root = null;
      if ($.$eq(this._lastLeaf, argNode))
        this._lastLeaf = null;
      return;
    }
    node2 = argNode.get$parent();
    node1 = node2.get$parent();
    sibling = $.$eq(node2.get$childOne(), argNode) ? node2.get$childTwo() : node2.get$childOne();
    if (node1 != null) {
      if ($.$eq(node1.get$childOne(), node2))
        node1.set$childOne(sibling);
      else
        node1.set$childTwo(sibling);
      sibling.set$parent(node1);
      this._nodeStack.addFirst$1(node2);
      this._nodeCount = this._nodeCount - 1;
      for (t1 = this._tempBox; node1 != null;) {
        t2 = node1.get$box();
        t3 = t1.lowerBound;
        t4 = t2.lowerBound;
        t3.setFrom$1;
        t5 = t4.x;
        t4 = t4.y;
        t3.x = t5;
        t3.y = t4;
        t4 = t1.upperBound;
        t2 = t2.upperBound;
        t4.setFrom$1;
        t3 = t2.x;
        t2 = t2.y;
        t4.x = t3;
        t4.y = t2;
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        if (t1.contains$1(t1, node1.get$box()))
          break;
        node1 = node1.get$parent();
      }
    } else {
      this._root = sibling;
      sibling.set$parent(null);
      this._nodeStack.addFirst$1(node2);
      this._nodeCount = this._nodeCount - 1;
    }
    if ($.$eq(this._lastLeaf, argNode))
      this._lastLeaf = this._root;
  },
  _computeHeight$1: function(node) {
    if (node == null)
      return 0;
    return 1 + $.max(this._computeHeight$1(node.get$childOne()), this._computeHeight$1(node.get$childTwo()));
  },
  rebalance$1: function(iterations) {
    var i, current, bit, t1, t2;
    if (this._root == null)
      return;
    for (i = 0; i < iterations; ++i) {
      current = this._root;
      for (bit = 0; t1 = current.get$isLeaf(), t2 = this._path, !t1;) {
        current = ($.JSNumber_methods.$shr(t2, bit) & 1) === 0 ? current.get$childOne() : current.get$childTwo();
        bit = bit + 1 & 31;
      }
      this._path = t2 + 1;
      this._removeLeaf$1(current);
      this._insertLeaf$1(current);
    }
  },
  DynamicTree$0: function() {
    var t1, t2, i;
    for (t1 = this._drawVectors, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector(0, 0);
  }
},

DynamicTreeNode: {"": "Object;box<,parent@,next@,childOne@,childTwo@,userData@,key@",
  get$isLeaf: function() {
    return this.childOne == null;
  },
  toString$0: function(_) {
    var t1 = this.box;
    return $.S(t1.lowerBound) + ", " + $.S(t1.upperBound);
  }
},

Pair: {"": "Object;proxyA@,proxyB@",
  compareTo$1: function(_, pair2) {
    var t1, t2;
    t1 = this.proxyA.get$key();
    t2 = pair2.get$proxyA().get$key();
    if ($.$lt$n(t1, t2))
      return -1;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.proxyB.get$key();
      t2 = pair2.get$proxyB().get$key();
      if ($.$lt$n(t1, t2))
        t1 = -1;
      else
        t1 = (t1 == null ? t2 == null : t1 === t2) ? 0 : 1;
      return t1;
    }
    return 1;
  }
},

MassData: {"": "Object;mass<,center<,inertia<",
  setFrom$1: function(md) {
    var t1, t2, t3;
    this.mass = md.get$mass();
    this.inertia = md.get$inertia();
    t1 = this.center;
    t2 = md.get$center();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
  }
},

PolygonShape: {"": "Shape;centroid,vertices<,normals,vertexCount,type,radius",
  getSupport$1: function(d) {
    var t1, t2, t3, t4, t5, t6, bestValue, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t3.get$x();
    t5 = d.x;
    if (typeof t5 !== "number")
      return this.getSupport$1$bailout(1, d, t4, t1, t2, t3, t5);
    t4 = $.$mul$n(t4, t5);
    t3 = t3.get$y();
    t6 = d.y;
    if (typeof t6 !== "number")
      return this.getSupport$1$bailout(2, 0, t4, t1, t2, t3, t5, t6);
    bestValue = t4 + $.$mul$n(t3, t6);
    for (bestIndex = 0, i = 1; i < this.vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      value = $.$mul$n(t3.get$x(), t5) + $.$mul$n(t3.get$y(), t6);
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
    }
    return bestIndex;
  },
  getSupport$1$bailout: function(state0, d, t4, t1, t2, t3, t5, t6) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t3 = t1[0];
        t4 = t3.get$x();
        t5 = d.x;
      case 1:
        state0 = 0;
        t4 = $.$mul$n(t4, t5);
        t3 = t3.get$y();
        t6 = d.y;
      case 2:
        var bestValue, bestIndex, i, value;
        state0 = 0;
        bestValue = t4 + $.$mul$n(t3, t6);
        for (bestIndex = 0, i = 1; i < this.vertexCount; ++i) {
          if (i >= t2)
            throw $.ioore(i);
          t3 = t1[i];
          value = $.$mul$n(t3.get$x(), t5) + $.$mul$n(t3.get$y(), t6);
          if (value > bestValue) {
            bestValue = value;
            bestIndex = i;
          }
        }
        return bestIndex;
    }
  },
  setAsBox$2: function(hx, hy) {
    var t1, t2, t3, t4;
    this.vertexCount = 4;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = -hx;
    t4 = -hy;
    t1[0].setCoords$2(t3, t4);
    if (1 >= t2)
      throw $.ioore(1);
    t1[1].setCoords$2(hx, t4);
    if (2 >= t2)
      throw $.ioore(2);
    t1[2].setCoords$2(hx, hy);
    if (3 >= t2)
      throw $.ioore(3);
    t1[3].setCoords$2(t3, hy);
    t3 = this.normals;
    t1 = t3.length;
    if (0 >= t1)
      throw $.ioore(0);
    t3[0].setCoords$2(0, -1);
    if (1 >= t1)
      throw $.ioore(1);
    t3[1].setCoords$2(1, 0);
    if (2 >= t1)
      throw $.ioore(2);
    t3[2].setCoords$2(0, 1);
    if (3 >= t1)
      throw $.ioore(3);
    t3[3].setCoords$2(-1, 0);
    t3 = this.centroid;
    t3.x = 0;
    t3.y = 0;
  },
  setAsEdge$2: function(v1, v2) {
    var t1, t2, t3, t4, t5;
    this.vertexCount = 2;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0].setFrom$1(v1);
    if (1 >= t2)
      throw $.ioore(1);
    t1[1].setFrom$1(v2);
    t1 = this.centroid;
    t2 = v1.x;
    t3 = v1.y;
    t1.x = t2;
    t1.y = t3;
    t1.x = $.$add$ns(t1.x, v2.x);
    t1.y = $.$add$ns(t1.y, v2.y);
    t1.x = $.$mul$n(t1.x, 0.5);
    t1.y = $.$mul$n(t1.y, 0.5);
    t1 = this.normals;
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t2 = t1[0].setFrom$1(v2);
    t2.subLocal$1;
    t2.x = $.$sub$n(t2.x, v1.x);
    t2.y = $.$sub$n(t2.y, v1.y);
    t2 = t1[0];
    t4 = t2.get$x();
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = t2.get$y();
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t2.set$x(1 * t5);
    t2.set$y(-1 * t4);
    t1[0].normalize$0();
    if (1 >= t3)
      throw $.ioore(1);
    t1 = t1[1].setFrom$1(t1[0]);
    t1.negateLocal$0;
    t1.x = $.$negate$n(t1.x);
    t1.y = $.$negate$n(t1.y);
  },
  computeAxisAlignedBox$2: function(argAabb, argXf) {
    var lower, upper, v, t1, t2, t3, t4, i;
    lower = new $.Vector(0, 0);
    upper = new $.Vector(0, 0);
    v = new $.Vector(0, 0);
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    $.Transform_mulToOut(argXf, t1[0], lower);
    t3 = lower.x;
    t4 = lower.y;
    upper.x = t3;
    upper.y = t4;
    for (i = 1; i < this.vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      $.Transform_mulToOut(argXf, t1[i], v);
      $.Vector_minToOut(lower, v, lower);
      $.Vector_maxToOut(upper, v, upper);
    }
    argAabb.lowerBound.x = $.$sub$n(lower.x, this.radius);
    argAabb.lowerBound.y = $.$sub$n(lower.y, this.radius);
    argAabb.upperBound.x = $.$add$ns(upper.x, this.radius);
    argAabb.upperBound.y = $.$add$ns(upper.y, this.radius);
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, t4, t5, center, pRef, e1, e2, p3, area, I, i, p2, p30, D, triangleArea, px, py, ex1, ey1, ex2, ey2, t6, t7, t8, t9, t10, t11, t12;
    if (this.vertexCount === 2) {
      t1 = massData.center;
      t2 = this.vertices;
      t3 = t2.length;
      if (0 >= t3)
        throw $.ioore(0);
      t4 = t2[0];
      t5 = t4.get$x();
      t4 = t4.get$y();
      t1.x = t5;
      t1.y = t4;
      if (1 >= t3)
        throw $.ioore(1);
      t2 = t2[1];
      t1.x = $.$add$ns(t1.x, t2.get$x());
      t1.y = $.$add$ns(t1.y, t2.get$y());
      t1.x = $.$mul$n(t1.x, 0.5);
      t1.y = $.$mul$n(t1.y, 0.5);
      massData.mass = 0;
      massData.inertia = 0;
      return;
    }
    center = new $.Vector(0, 0);
    center.x = 0;
    center.y = 0;
    pRef = new $.Vector(0, 0);
    pRef.x = 0;
    pRef.y = 0;
    e1 = new $.Vector(0, 0);
    e2 = new $.Vector(0, 0);
    for (t1 = this.vertices, t2 = t1.length, p3 = t1[0], area = 0, I = 0, i = 0; t3 = this.vertexCount, i < t3;) {
      if (i >= t2)
        throw $.ioore(i);
      p2 = t1[i];
      ++i;
      if (i < t3) {
        if (i >= t2)
          throw $.ioore(i);
        p30 = t1[i];
      } else {
        if (0 >= t2)
          throw $.ioore(0);
        p30 = p3;
      }
      t3 = p2.get$x();
      t4 = p2.get$y();
      e1.x = t3;
      e1.y = t4;
      e1.x = $.$sub$n(e1.x, pRef.x);
      e1.y = $.$sub$n(e1.y, pRef.y);
      t4 = p30.get$x();
      t3 = p30.get$y();
      e2.x = t4;
      e2.y = t3;
      e2.x = $.$sub$n(e2.x, pRef.x);
      e2.y = $.$sub$n(e2.y, pRef.y);
      D = $.$mul$n(e1.x, e2.y) - $.$mul$n(e1.y, e2.x);
      triangleArea = 0.5 * D;
      area += triangleArea;
      t3 = center.x;
      t4 = triangleArea * 0.3333333333333333;
      t5 = $.$add$ns($.$add$ns(pRef.x, p2.get$x()), p30.get$x());
      if (typeof t5 !== "number")
        throw $.iae(t5);
      center.x = $.$add$ns(t3, t4 * t5);
      t5 = center.y;
      t3 = $.$add$ns($.$add$ns(pRef.y, p2.get$y()), p30.get$y());
      if (typeof t3 !== "number")
        throw $.iae(t3);
      center.y = $.$add$ns(t5, t4 * t3);
      px = pRef.x;
      py = pRef.y;
      ex1 = e1.x;
      ey1 = e1.y;
      ex2 = e2.x;
      ey2 = e2.y;
      t3 = $.$mul$n(ex1, ex1);
      t4 = $.getInterceptor$n(ex2);
      t5 = t4.$mul(ex2, ex1);
      t4 = t4.$mul(ex2, ex2);
      t6 = $.getInterceptor$n(px);
      t7 = t6.$mul(px, ex1);
      t6 = t6.$mul(px, ex2);
      if (typeof px !== "number")
        throw $.iae(px);
      t8 = $.$mul$n(ey1, ey1);
      t9 = $.getInterceptor$n(ey2);
      t10 = t9.$mul(ey2, ey1);
      t9 = t9.$mul(ey2, ey2);
      t11 = $.getInterceptor$n(py);
      t12 = t11.$mul(py, ey1);
      t11 = t11.$mul(py, ey2);
      if (typeof py !== "number")
        throw $.iae(py);
      I += D * (0.3333333333333333 * (0.25 * (t3 + t5 + t4) + (t7 + t6)) + 0.5 * px * px + (0.3333333333333333 * (0.25 * (t8 + t10 + t9) + (t12 + t11)) + 0.5 * py * py));
    }
    massData.mass = $.$mul$n(density, area);
    t1 = 1 / area;
    center.x = $.$mul$n(center.x, t1);
    center.y = $.$mul$n(center.y, t1);
    t1 = massData.center;
    t2 = center.x;
    t3 = center.y;
    t1.x = t2;
    t1.y = t3;
    if (typeof density !== "number")
      throw $.iae(density);
    massData.inertia = I * density;
  },
  PolygonShape$0: function() {
    var t1, t2, i;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector(0, 0);
    for (t1 = this.normals, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector(0, 0);
  },
  PolygonShape$copy$1: function(other) {
    var t1, t2, t3, t4, i, t5, t6;
    for (t1 = this.vertices, t2 = other.vertices, t3 = t2.length, t4 = t1.length, i = 0; i < t3; ++i) {
      t5 = t2[i];
      t6 = t5.get$x();
      t5 = t5.get$y();
      if (i >= t4)
        throw $.ioore(i);
      t1[i] = new $.Vector(t6, t5);
    }
    for (t1 = this.normals, t2 = other.normals, t3 = t2.length, t4 = t1.length, i = 0; i < t3; ++i) {
      t5 = t2[i];
      t6 = t5.get$x();
      t5 = t5.get$y();
      if (i >= t4)
        throw $.ioore(i);
      t1[i] = new $.Vector(t6, t5);
    }
  }
},

Shape: {"": "Object;type@,radius@"},

Matrix22: {"": "Object;col1<,col2<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isMatrix22)
      t1 = $.$eq(this.col1, other.col1) && $.$eq(this.col2, other.col2);
    else
      t1 = false;
    return t1;
  },
  setAngle$1: function(angle) {
    var t1, cosin, sin;
    t1 = typeof angle !== "number";
    if (t1)
      $.throwExpression(new $.ArgumentError(angle));
    cosin = Math.cos(angle);
    if (t1)
      $.throwExpression(new $.ArgumentError(angle));
    sin = Math.sin(angle);
    t1 = this.col1;
    t1.setCoords$2;
    t1.x = cosin;
    t1.y = sin;
    t1 = this.col2;
    t1.setCoords$2;
    t1.x = -sin;
    t1.y = cosin;
  },
  setFrom$1: function(matrix) {
    var t1, t2, t3;
    t1 = this.col1;
    t2 = matrix.get$col1();
    t1.setFrom$1;
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.col2;
    t1 = matrix.get$col2();
    t2.setFrom$1;
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
  },
  invertLocal$0: function() {
    var t1, a, t2, b, c, d, det;
    t1 = this.col1;
    a = t1.x;
    t2 = this.col2;
    b = t2.x;
    c = t1.y;
    if (typeof c !== "number")
      return this.invertLocal$0$bailout(1, c, t1, a, t2, b);
    d = t2.y;
    if (typeof d !== "number")
      return this.invertLocal$0$bailout(2, c, t1, a, 0, b, d);
    if (typeof a !== "number")
      throw a.$mul();
    if (typeof b !== "number")
      throw b.$mul();
    det = a * d - b * c;
    if (det !== 0)
      det = 1 / det;
    t1.x = det * d;
    t1 = -det;
    this.col2.x = t1 * b;
    this.col1.y = t1 * c;
    this.col2.y = det * a;
    return this;
  },
  invertLocal$0$bailout: function(state0, c, t1, a, t2, b, d) {
    switch (state0) {
      case 0:
        t1 = this.col1;
        a = t1.x;
        t2 = this.col2;
        b = t2.x;
        c = t1.y;
      case 1:
        state0 = 0;
        d = t2.y;
      case 2:
        var det;
        state0 = 0;
        if (typeof a !== "number")
          throw a.$mul();
        t2 = $.$mul$n(a, d);
        if (typeof b !== "number")
          throw b.$mul();
        det = t2 - $.$mul$n(b, c);
        if (det !== 0)
          det = 1 / det;
        if (typeof d !== "number")
          throw $.iae(d);
        t1.x = det * d;
        t1 = this.col2;
        t2 = -det;
        if (typeof b !== "number")
          throw $.iae(b);
        t1.x = t2 * b;
        t1 = this.col1;
        if (typeof c !== "number")
          throw $.iae(c);
        t1.y = t2 * c;
        t2 = this.col2;
        if (typeof a !== "number")
          throw $.iae(a);
        t2.y = det * a;
        return this;
    }
  },
  toString$0: function(_) {
    return $.S(this.col1) + ", " + $.S(this.col2);
  },
  Matrix22$2: function(c1, c2) {
    if (c1 == null)
      c1 = new $.Vector(0, 0);
    if (c2 == null)
      c2 = new $.Vector(0, 0);
    this.col1 = c1;
    this.col2 = c2;
  },
  $isMatrix22: true
},

Sweep: {"": "Object;localCenter<,centerZero<,center<,angleZero<,angle<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.localCenter;
    if (t1.$eq(t1, other.get$localCenter())) {
      t1 = this.centerZero;
      if (t1.$eq(t1, other.get$centerZero())) {
        t1 = this.center;
        t1 = t1.$eq(t1, other.get$center()) && $.$eq(this.angleZero, other.get$angleZero()) && $.$eq(this.angle, other.get$angle());
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.localCenter;
    t2 = other.get$localCenter();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.centerZero;
    t1 = other.get$centerZero();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    t1 = this.center;
    t2 = other.get$center();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    this.angleZero = other.get$angleZero();
    this.angle = other.get$angle();
  },
  normalize$0: function() {
    var t1, truncated, d;
    t1 = Math.floor($.$div$n(this.angleZero, 6.283185307179586));
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
    this.angleZero = $.$sub$n(this.angleZero, d);
    this.angle = $.$sub$n(this.angle, d);
  },
  getTransform$2: function(xf, alpha) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = xf.position;
    if (typeof alpha !== "number")
      throw $.iae(alpha);
    t2 = 1 - alpha;
    t3 = this.centerZero;
    t4 = t3.x;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = this.center;
    t6 = t5.x;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t1.x = t2 * t4 + alpha * t6;
    t3 = t3.y;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t5 = t5.y;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t1.y = t2 * t3 + alpha * t5;
    t5 = xf.rotation;
    t3 = this.angleZero;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t6 = this.angle;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t5.setAngle$1(t2 * t3 + alpha * t6);
    t6 = t1.x;
    t3 = t5.col1.x;
    t2 = this.localCenter;
    t4 = t2.x;
    if (typeof t4 !== "number")
      return this.getTransform$2$bailout(1, t4, t1, t6, t2, t3, t5);
    if (typeof t3 !== "number")
      throw t3.$mul();
    t4 = t3 * t4;
    t3 = t5.col2.x;
    t7 = t2.y;
    if (typeof t7 !== "number")
      return this.getTransform$2$bailout(2, t4, t1, t6, t2, t3, t5, t7);
    if (typeof t3 !== "number")
      throw t3.$mul();
    if (typeof t6 !== "number")
      throw t6.$sub();
    t1.x = t6 - (t4 + t3 * t7);
    t7 = t1.y;
    t3 = t5.col1.y;
    t4 = t2.x;
    if (typeof t4 !== "number")
      return this.getTransform$2$bailout(3, t3, t1, t4, t2, 0, t5, t7);
    if (typeof t3 !== "number")
      throw t3.$mul();
    t4 = t3 * t4;
    t5 = t5.col2.y;
    t2 = t2.y;
    if (typeof t2 !== "number")
      return this.getTransform$2$bailout(4, 0, t1, t4, t2, 0, t5, t7);
    if (typeof t5 !== "number")
      throw t5.$mul();
    if (typeof t7 !== "number")
      throw t7.$sub();
    t1.y = t7 - (t4 + t5 * t2);
  },
  getTransform$2$bailout: function(state0, t4, t1, t6, t2, t3, t5, t7) {
    switch (state0) {
      case 0:
        t1 = xf.position;
        if (typeof alpha !== "number")
          throw $.iae(alpha);
        t2 = 1 - alpha;
        t3 = this.centerZero;
        t4 = t3.x;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t5 = this.center;
        t6 = t5.x;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t1.x = t2 * t4 + alpha * t6;
        t3 = t3.y;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t5 = t5.y;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t1.y = t2 * t3 + alpha * t5;
        t5 = xf.rotation;
        t3 = this.angleZero;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t6 = this.angle;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t5.setAngle$1(t2 * t3 + alpha * t6);
        t6 = t1.x;
        t3 = t5.col1.x;
        t2 = this.localCenter;
        t4 = t2.x;
      case 1:
        state0 = 0;
        if (typeof t3 !== "number")
          throw t3.$mul();
        t4 = $.$mul$n(t3, t4);
        t3 = t5.col2.x;
        t7 = t2.y;
      case 2:
        state0 = 0;
        if (typeof t3 !== "number")
          throw t3.$mul();
        t7 = $.$mul$n(t3, t7);
        if (typeof t6 !== "number")
          throw t6.$sub();
        t1.x = $.$sub$n(t6, t4 + t7);
        t7 = t1.y;
        t4 = t5.col1.y;
        t6 = t2.x;
      case 3:
        state0 = 0;
        if (typeof t4 !== "number")
          throw t4.$mul();
        t6 = $.$mul$n(t4, t6);
        t5 = t5.col2.y;
        t2 = t2.y;
      case 4:
        state0 = 0;
        if (typeof t5 !== "number")
          throw t5.$mul();
        t2 = $.$mul$n(t5, t2);
        if (typeof t7 !== "number")
          throw t7.$sub();
        t1.y = $.$sub$n(t7, t6 + t2);
    }
  },
  advance$1: function(time) {
    var t1, t2, t3, t4, t5;
    t1 = this.centerZero;
    if (typeof time !== "number")
      throw $.iae(time);
    t2 = 1 - time;
    t3 = t1.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = this.center;
    t5 = t4.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t1.x = t2 * t3 + time * t5;
    t5 = t1.y;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t4 = t4.y;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t1.y = t2 * t5 + time * t4;
    t4 = this.angleZero;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = this.angle;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    this.angleZero = t2 * t4 + time * t5;
  }
},

Transform: {"": "Object;position<,rotation<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.position;
    if (t1.$eq(t1, other.get$position())) {
      t1 = this.rotation;
      t1 = t1.$eq(t1, other.get$rotation());
    } else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.position;
    t2 = other.get$position();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.rotation;
    t1 = other.get$rotation();
    t3 = t2.col1;
    t4 = t1.col1;
    t3.setFrom$1;
    t5 = t4.x;
    t4 = t4.y;
    t3.x = t5;
    t3.y = t4;
    t2 = t2.col2;
    t1 = t1.col2;
    t2.setFrom$1;
    t4 = t1.x;
    t1 = t1.y;
    t2.x = t4;
    t2.y = t1;
  }
},

Vector: {"": "Object;x@,y@",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return $.$eq(this.x, other.get$x()) && $.$eq(this.y, other.get$y());
  },
  setCoords$2: function(xCoord, yCoord) {
    this.x = xCoord;
    this.y = yCoord;
    return this;
  },
  setFrom$1: function(v) {
    var t1, t2;
    t1 = v.get$x();
    t2 = v.get$y();
    this.x = t1;
    this.y = t2;
    return this;
  },
  get$length: function(_) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t2 = t1 * t1 + t2 * t2;
    return Math.sqrt(t2);
  },
  normalize$0: function() {
    var t1, t2, len, invLength;
    t1 = this.x;
    t1 = $.$mul$n(t1, t1);
    t2 = this.y;
    t2 = t1 + $.$mul$n(t2, t2);
    len = Math.sqrt(t2);
    if (len < 1.192e-7)
      return 0;
    invLength = 1 / len;
    this.x = $.$mul$n(this.x, invLength);
    this.y = $.$mul$n(this.y, invLength);
    return len;
  },
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  }
},

Body: {"": "Object;world,flags@,contactList<,sleepTime@,userData@,_linearVelocity,_angularVelocity,mass<,invMass<,next@,prev@,fixtureList,fixtureCount,jointList<,_force<,_torque@,_inertia,invInertia<,linearDamping<,angularDamping<,_type,islandIndex?,originTransform,sweep<,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
  createFixture$1: function(def) {
    var fixture, broadPhase, t1, node;
    fixture = $.Fixture$();
    fixture.create$2(this, def);
    if ((this.flags & 32) === 32) {
      broadPhase = this.world._contactManager.broadPhase;
      t1 = fixture.box;
      fixture.shape.computeAxisAlignedBox$2(t1, this.originTransform);
      node = broadPhase._tree.createProxy$2(t1, fixture);
      broadPhase.proxyCount = broadPhase.proxyCount + 1;
      broadPhase.moveBuffer.push(node);
      fixture.proxy = node;
    }
    fixture.next = this.fixtureList;
    this.fixtureList = fixture;
    this.fixtureCount = this.fixtureCount + 1;
    fixture.body = this;
    t1 = fixture.density;
    if (t1 !== (t1 | 0))
      return this.createFixture$1$bailout(1, t1, fixture);
    if (t1 > 0)
      this.resetMassData$0();
    t1 = this.world;
    t1._flags = (t1._flags | 1) >>> 0;
    return fixture;
  },
  createFixture$1$bailout: function(state0, t1, fixture) {
    if ($.$gt$n(t1, 0))
      this.resetMassData$0();
    t1 = this.world;
    t1._flags = (t1._flags | 1) >>> 0;
    return fixture;
  },
  get$position: function() {
    return this.originTransform.position;
  },
  get$angle: function() {
    return this.sweep.angle;
  },
  get$localCenter: function() {
    return this.sweep.localCenter;
  },
  get$linearVelocity: function() {
    return this._linearVelocity;
  },
  get$angularVelocity: function() {
    return this._angularVelocity;
  },
  set$angularVelocity: function(w) {
    if (!$.$eq(this._type, 0)) {
      if ($.$mul$n(w, w) > 0)
        this.set$awake(true);
      this._angularVelocity = w;
    }
  },
  get$inertia: function() {
    var t1, t2, t3, t4;
    t1 = this._inertia;
    t2 = this.mass;
    t3 = this.sweep.localCenter;
    t4 = t3.x;
    t4 = $.$mul$n(t4, t4);
    t3 = t3.y;
    return t1 + t2 * (t4 + $.$mul$n(t3, t3));
  },
  getMassData$1: function(data) {
    var lc, t1, t2, t3, t4;
    data.mass = this.mass;
    lc = this.sweep.localCenter;
    t1 = this._inertia;
    t2 = this.mass;
    t3 = lc.x;
    t3 = $.$mul$n(t3, t3);
    t4 = lc.y;
    data.inertia = t1 + t2 * (t3 + $.$mul$n(t4, t4));
    t4 = data.center;
    t4.x = lc.x;
    t4.y = lc.y;
  },
  resetMassData$0: function() {
    var t1, t2, t3, t4, t5, massData, f, temp, t6, t7, tempY;
    this.mass = 0;
    this.invMass = 0;
    this._inertia = 0;
    this.invInertia = 0;
    t1 = this.sweep;
    t2 = t1.localCenter;
    t2.x = 0;
    t2.y = 0;
    if ($.$eq(this._type, 0) || $.$eq(this._type, 1)) {
      t2 = t1.center;
      t3 = this.originTransform.position;
      t4 = t3.x;
      t5 = t3.y;
      t2.x = t4;
      t2.y = t5;
      t1 = t1.centerZero;
      t5 = t3.x;
      t3 = t3.y;
      t1.x = t5;
      t1.y = t3;
      return;
    }
    t3 = this.tempCenter;
    t3.x = 0;
    t3.y = 0;
    massData = this._pmd;
    for (f = this.fixtureList, t4 = massData.center; f != null; f = f.get$next()) {
      if (f.get$density() === 0)
        continue;
      f.getMassData$1(massData);
      this.mass = this.mass + massData.mass;
      temp = new $.Vector(t4.x, t4.y);
      t5 = massData.mass;
      temp.x = $.$mul$n(temp.x, t5);
      temp.y = $.$mul$n(temp.y, t5);
      t3.x = $.$add$ns(t3.x, temp.x);
      t3.y = $.$add$ns(t3.y, temp.y);
      this._inertia = this._inertia + massData.inertia;
    }
    t4 = this.mass;
    if (t4 > 0) {
      this.invMass = 1 / t4;
      t4 = this.invMass;
      t3.x = $.$mul$n(t3.x, t4);
      t3.y = $.$mul$n(t3.y, t4);
    } else {
      this.mass = 1;
      this.invMass = 1;
    }
    t4 = this._inertia;
    if (t4 > 0 && (this.flags & 16) === 0) {
      t5 = this.mass;
      t6 = t3.x;
      t6 = $.$mul$n(t6, t6);
      t7 = t3.y;
      this._inertia = t4 - t5 * (t6 + $.$mul$n(t7, t7));
      this.invInertia = 1 / this._inertia;
    } else {
      this._inertia = 0;
      this.invInertia = 0;
    }
    t4 = this.oldCenter;
    t5 = t1.center;
    t6 = t5.x;
    t7 = t5.y;
    t4.x = t6;
    t4.y = t7;
    t7 = t3.x;
    t3 = t3.y;
    t2.x = t7;
    t2.y = t3;
    t1 = t1.centerZero;
    $.Transform_mulToOut(this.originTransform, t2, t1);
    t2 = t1.x;
    t1 = t1.y;
    t5.x = t2;
    t5.y = t1;
    temp = new $.Vector(t5.x, t5.y);
    temp.x = $.$sub$n(temp.x, t4.x);
    temp.y = $.$sub$n(temp.y, t4.y);
    t4 = this._angularVelocity;
    t5 = $.getInterceptor$n(t4);
    tempY = t5.$mul(t4, temp.x);
    t4 = t5.$negate(t4);
    t5 = temp.y;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    temp.x = t4 * t5;
    temp.y = tempY;
    t5 = this._linearVelocity;
    t5.x = $.$add$ns(t5.x, temp.x);
    t5.y = $.$add$ns(t5.y, temp.y);
  },
  getWorldPoint$1: function(localPoint) {
    var v = new $.Vector(0, 0);
    $.Transform_mulToOut(this.originTransform, localPoint, v);
    return v;
  },
  getWorldPointToOut$2: function(localPoint, out) {
    $.Transform_mulToOut(this.originTransform, localPoint, out);
  },
  getWorldVector$1: function(localVector) {
    var out = new $.Vector(0, 0);
    $.Matrix22_mulMatrixAndVectorToOut(this.originTransform.rotation, localVector, out);
    return out;
  },
  getWorldVectorToOut$2: function(localVector, out) {
    $.Matrix22_mulMatrixAndVectorToOut(this.originTransform.rotation, localVector, out);
  },
  get$type: function() {
    return this._type;
  },
  set$type: function(otherType) {
    var t1, ce;
    if ($.$eq(this._type, otherType))
      return;
    this._type = otherType;
    this.resetMassData$0();
    if ($.$eq(this._type, 0)) {
      t1 = this._linearVelocity;
      t1.x = 0;
      t1.y = 0;
      this._angularVelocity = 0;
    }
    this.set$awake(true);
    t1 = this._force;
    t1.x = 0;
    t1.y = 0;
    this._torque = 0;
    for (ce = this.contactList; ce != null; ce = ce.get$next())
      ce.get$contact().flagForFiltering$0();
  },
  get$bullet: function() {
    return (this.flags & 8) === 8;
  },
  set$awake: function(flag) {
    var t1;
    if (flag) {
      t1 = this.flags;
      if ((t1 & 2) === 0) {
        this.flags = (t1 | 2) >>> 0;
        this.sleepTime = 0;
      }
    } else {
      this.flags = (this.flags & 4294967293) >>> 0;
      this.sleepTime = 0;
      t1 = this._linearVelocity;
      t1.x = 0;
      t1.y = 0;
      this._angularVelocity = 0;
      t1 = this._force;
      t1.x = 0;
      t1.y = 0;
      this._torque = 0;
    }
  },
  get$awake: function() {
    return (this.flags & 2) === 2;
  },
  get$active: function() {
    return (this.flags & 32) === 32;
  },
  synchronizeFixtures$0: function() {
    var xf1, t1, t2, t3, t4, broadPhase, f;
    xf1 = this._pxf;
    t1 = xf1.rotation;
    t2 = this.sweep;
    t1.setAngle$1(t2.angleZero);
    t3 = xf1.position;
    $.Matrix22_mulMatrixAndVectorToOut(t1, t2.localCenter, t3);
    t1 = t3.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    t3.x = t1 * -1;
    t1 = t3.y;
    if (typeof t1 !== "number")
      throw t1.$mul();
    t3.y = t1 * -1;
    t2 = t2.centerZero;
    t1 = t3.x;
    if (typeof t1 !== "number")
      return this.synchronizeFixtures$0$bailout(1, t3, t2, xf1, t1);
    t4 = t2.x;
    if (typeof t4 !== "number")
      return this.synchronizeFixtures$0$bailout(2, t3, t2, xf1, t1, t4);
    t3.x = t1 + t4;
    t4 = t3.y;
    if (typeof t4 !== "number")
      return this.synchronizeFixtures$0$bailout(3, t3, t2, xf1, 0, t4);
    t2 = t2.y;
    if (typeof t2 !== "number")
      return this.synchronizeFixtures$0$bailout(4, t3, t2, xf1, 0, t4);
    t3.y = t4 + t2;
    broadPhase = this.world._contactManager.broadPhase;
    for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.get$next())
      f.synchronize$3(broadPhase, xf1, t1);
  },
  synchronizeFixtures$0$bailout: function(state0, t3, t2, xf1, t1, t4) {
    switch (state0) {
      case 0:
        xf1 = this._pxf;
        t1 = xf1.rotation;
        t2 = this.sweep;
        t1.setAngle$1(t2.angleZero);
        t3 = xf1.position;
        $.Matrix22_mulMatrixAndVectorToOut(t1, t2.localCenter, t3);
        t1 = t3.x;
        if (typeof t1 !== "number")
          throw t1.$mul();
        t3.x = $.$mul$n(t1, -1);
        t1 = t3.y;
        if (typeof t1 !== "number")
          throw t1.$mul();
        t3.y = $.$mul$n(t1, -1);
        t2 = t2.centerZero;
        t1 = t3.x;
      case 1:
        state0 = 0;
        t4 = t2.x;
      case 2:
        state0 = 0;
        t3.x = $.$add$ns(t1, t4);
        t4 = t3.y;
      case 3:
        state0 = 0;
        t2 = t2.y;
      case 4:
        var broadPhase, f;
        state0 = 0;
        t3.y = $.$add$ns(t4, t2);
        broadPhase = this.world._contactManager.broadPhase;
        for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.get$next())
          f.synchronize$3(broadPhase, xf1, t1);
    }
  },
  synchronizeTransform$0: function() {
    var t1, t2, c, s, t, r, p, t3, t4, t5;
    t1 = this.sweep;
    t2 = t1.angle;
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    c = Math.cos(t2);
    t2 = t1.angle;
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    s = Math.sin(t2);
    t = this.originTransform;
    r = t.rotation;
    p = t.position;
    r.col1.x = c;
    r.col2.x = -s;
    r.col1.y = s;
    r.col2.y = c;
    t2 = t1.localCenter;
    t3 = $.$mul$n(r.col1.x, t2.x);
    t4 = $.$mul$n(r.col2.x, t2.y);
    t1 = t1.center;
    t5 = t1.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    p.x = (t3 + t4) * -1 + t5;
    t5 = $.$mul$n(r.col1.y, t2.x);
    t2 = $.$mul$n(r.col2.y, t2.y);
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    p.y = (t5 + t2) * -1 + t1;
  },
  advance$1: function(t) {
    var t1, t2, t3, t4;
    t1 = this.sweep;
    t1.advance$1(t);
    t2 = t1.center;
    t3 = t1.centerZero;
    t4 = t3.x;
    t3 = t3.y;
    t2.x = t4;
    t2.y = t3;
    t1.angle = t1.angleZero;
    this.synchronizeTransform$0();
  },
  Body$2: function(bd, world) {
    var t1, t2, t3, t4;
    if (bd.bullet)
      this.flags = (this.flags | 8) >>> 0;
    if (bd.fixedRotation)
      this.flags = (this.flags | 16) >>> 0;
    if (bd.allowSleep)
      this.flags = (this.flags | 4) >>> 0;
    if (bd.awake)
      this.flags = (this.flags | 2) >>> 0;
    if (bd.active)
      this.flags = (this.flags | 32) >>> 0;
    t1 = this.originTransform;
    t2 = t1.position;
    t3 = bd.position;
    t4 = t3.x;
    t3 = t3.y;
    t2.x = t4;
    t2.y = t3;
    t1.rotation.setAngle$1(bd.angle);
    t3 = this.sweep;
    t2 = t3.localCenter;
    t2.x = 0;
    t2.y = 0;
    t4 = t3.centerZero;
    $.Transform_mulToOut(t1, t2, t4);
    t2 = t3.center;
    t1 = t4.x;
    t4 = t4.y;
    t2.x = t1;
    t2.y = t4;
    t3.angle = bd.angle;
    t3.angleZero = bd.angle;
    if ($.$eq(this._type, 2)) {
      this.mass = 1;
      this.invMass = 1;
    } else {
      this.mass = 0;
      this.invMass = 0;
    }
  }
},

BodyDef: {"": "Object;type@,angle<,userData@,position<,linearVelocity<,angularVelocity@,fixedRotation,isSleeping,bullet<,allowSleep,linearDamping<,angularDamping<,awake@,active<"},

ContactManager: {"": "Object;broadPhase,contactList<,contactCount,contactFilter,contactListener,pool",
  addPair$2: function(fixtureA, fixtureB) {
    var bodyA, bodyB, edge, t1, fA, fB, c;
    bodyA = fixtureA.body;
    bodyB = fixtureB.body;
    if (bodyA == null ? bodyB == null : bodyA === bodyB)
      return;
    edge = bodyB.contactList;
    for (; edge != null;) {
      t1 = edge.get$other();
      if (t1 == null ? bodyA == null : t1 === bodyA) {
        t1 = edge.get$contact();
        fA = t1.get$fixtureA();
        fB = t1.get$fixtureB();
        if ((fA == null ? fixtureA == null : fA === fixtureA) && (fB == null ? fixtureB == null : fB === fixtureB))
          return;
        if ((fA == null ? fixtureB == null : fA === fixtureB) && (fB == null ? fixtureA == null : fB === fixtureA))
          return;
      }
      edge = edge.get$next();
    }
    bodyB.shouldCollide$1;
    t1 = bodyB._type;
    if (typeof t1 !== "number")
      return this.addPair$2$bailout(1, fixtureA, fixtureB, t1, bodyA);
    if (t1 !== 2) {
      t1 = bodyA._type;
      if (typeof t1 !== "number")
        return this.addPair$2$bailout(2, fixtureA, fixtureB, t1);
      t1 = t1 !== 2;
    } else
      t1 = false;
    if (t1)
      return;
    if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
      return;
    c = this.pool.popContact$2(fixtureA, fixtureB);
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = fixtureA.body;
    bodyB = fixtureB.body;
    c.set$prev(null);
    c.set$next(this.contactList);
    t1 = this.contactList;
    if (t1 != null)
      t1.set$prev(c);
    this.contactList = c;
    c.get$edge1().contact = c;
    c.get$edge1().other = bodyB;
    c.get$edge1().prev = null;
    c.get$edge1().next = bodyA.contactList;
    t1 = bodyA.contactList;
    if (t1 != null)
      t1.set$prev(c.get$edge1());
    bodyA.contactList = c.get$edge1();
    c.get$edge2().contact = c;
    c.get$edge2().other = bodyA;
    c.get$edge2().prev = null;
    c.get$edge2().next = bodyB.contactList;
    t1 = bodyB.contactList;
    if (t1 != null)
      t1.set$prev(c.get$edge2());
    bodyB.contactList = c.get$edge2();
    this.contactCount = this.contactCount + 1;
  },
  addPair$2$bailout: function(state0, fixtureA, fixtureB, t1, bodyA) {
    switch (state0) {
      case 0:
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        if (bodyA == null ? bodyB == null : bodyA === bodyB)
          return;
        edge = bodyB.contactList;
        for (; edge != null;) {
          t1 = edge.get$other();
          if (t1 == null ? bodyA == null : t1 === bodyA) {
            t1 = edge.get$contact();
            fA = t1.get$fixtureA();
            fB = t1.get$fixtureB();
            if ((fA == null ? fixtureA == null : fA === fixtureA) && (fB == null ? fixtureB == null : fB === fixtureB))
              return;
            if ((fA == null ? fixtureB == null : fA === fixtureB) && (fB == null ? fixtureA == null : fB === fixtureA))
              return;
          }
          edge = edge.get$next();
        }
        bodyB.shouldCollide$1;
        t1 = bodyB._type;
      case 1:
        state0 = 0;
      case 2:
        var bodyB, edge, fA, fB, c;
        if (state0 === 2 || state0 === 0 && !$.$eq(t1, 2))
          switch (state0) {
            case 0:
              t1 = bodyA._type;
            case 2:
              state0 = 0;
              t1 = !$.$eq(t1, 2);
          }
        else
          t1 = false;
        if (t1)
          return;
        if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
          return;
        c = this.pool.popContact$2(fixtureA, fixtureB);
        fixtureA = c.get$fixtureA();
        fixtureB = c.get$fixtureB();
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        c.set$prev(null);
        c.set$next(this.contactList);
        t1 = this.contactList;
        if (t1 != null)
          t1.set$prev(c);
        this.contactList = c;
        c.get$edge1().contact = c;
        c.get$edge1().other = bodyB;
        c.get$edge1().prev = null;
        c.get$edge1().next = bodyA.contactList;
        t1 = bodyA.contactList;
        if (t1 != null)
          t1.set$prev(c.get$edge1());
        bodyA.contactList = c.get$edge1();
        c.get$edge2().contact = c;
        c.get$edge2().other = bodyA;
        c.get$edge2().prev = null;
        c.get$edge2().next = bodyB.contactList;
        t1 = bodyB.contactList;
        if (t1 != null)
          t1.set$prev(c.get$edge2());
        bodyB.contactList = c.get$edge2();
        this.contactCount = this.contactCount + 1;
    }
  },
  destroy$1: function(c) {
    var fixtureA, fixtureB, bodyA, bodyB, t1, t2;
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = fixtureA.body;
    bodyB = fixtureB.body;
    t1 = this.contactListener;
    if (t1 != null && c.get$touching())
      t1.endContact$1(c);
    t1 = c.get$prev();
    if (t1 != null)
      t1.set$next(c.get$next());
    t1 = c.get$next();
    if (t1 != null)
      t1.set$prev(c.get$prev());
    if ($.$eq(c, this.contactList))
      this.contactList = c.get$next();
    t1 = c.get$edge1();
    t2 = t1.prev;
    if (t2 != null)
      t2.set$next(t1.next);
    t1 = c.get$edge1();
    t2 = t1.next;
    if (t2 != null)
      t2.set$prev(t1.prev);
    t1 = c.get$edge1();
    if (t1 === bodyA.contactList)
      bodyA.contactList = t1.next;
    t1 = c.get$edge2();
    t2 = t1.prev;
    if (t2 != null)
      t2.set$next(t1.next);
    t1 = c.get$edge2();
    t2 = t1.next;
    if (t2 != null)
      t2.set$prev(t1.prev);
    t1 = c.get$edge2();
    if (t1 === bodyB.contactList)
      bodyB.contactList = t1.next;
    this.pool.pushContact$1(c);
    this.contactCount = this.contactCount - 1;
  },
  collide$0: function() {
    var c, t1, t2, fixtureA, fixtureB, bodyA, bodyB, t3, c0, proxyIdA, proxyIdB;
    c = this.contactList;
    for (t1 = this.contactFilter, t2 = this.contactListener; c != null;) {
      fixtureA = c.get$fixtureA();
      fixtureB = c.get$fixtureB();
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      bodyA.get$awake;
      if ((bodyA.flags & 2) !== 2) {
        bodyB.get$awake;
        t3 = (bodyB.flags & 2) !== 2;
      } else
        t3 = false;
      if (t3) {
        c = c.get$next();
        continue;
      }
      if ($.$and$n(c.get$flags(), 8) === 8) {
        bodyB.shouldCollide$1;
        if (!$.$eq(bodyB._type, 2) && !$.$eq(bodyA._type, 2)) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        if (!t1.shouldCollide$2(fixtureA, fixtureB)) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        c.set$flags($.$and$n(c.get$flags(), 4294967287));
      }
      proxyIdA = fixtureA.proxy;
      proxyIdB = fixtureB.proxy;
      if (!$.AxisAlignedBox_testOverlap(proxyIdA.get$box(), proxyIdB.get$box())) {
        c0 = c.get$next();
        this.destroy$1(c);
        c = c0;
        continue;
      }
      c.update$1(t2);
      c = c.get$next();
    }
  }
},

Filter: {"": "Object;categoryBits<,maskBits<,groupIndex<",
  setFrom$1: function(other) {
    this.categoryBits = other.get$categoryBits();
    this.maskBits = other.get$maskBits();
    this.groupIndex = other.get$groupIndex();
  }
},

Fixture: {"": "Object;box<,density<,next@,body,shape,friction@,restitution@,proxy,filter,isSensor,userData@,_poolOne,_poolTwo",
  create$2: function(b, def) {
    var t1, t2;
    this.userData = def.userData;
    this.friction = def.friction;
    this.restitution = def.restitution;
    this.body = b;
    this.next = null;
    t1 = this.filter;
    t2 = def.filter;
    t1.categoryBits = t2.categoryBits;
    t1.maskBits = t2.maskBits;
    t1.groupIndex = t2.groupIndex;
    this.isSensor = def.isSensor;
    t2 = def.shape;
    t2.clone$0;
    this.shape = $.PolygonShape$copy(t2);
    this.density = def.density;
  },
  synchronize$3: function(broadPhase, transformOne, transformTwo) {
    var t1, t2, t3, t4, t5, t6, disp;
    if (this.proxy == null)
      return;
    t1 = this._poolOne;
    this.shape.computeAxisAlignedBox$2(t1, transformOne);
    t2 = this._poolTwo;
    this.shape.computeAxisAlignedBox$2(t2, transformTwo);
    t3 = this.box;
    t4 = t3.lowerBound;
    t5 = t1.lowerBound.x;
    t6 = t2.lowerBound.x;
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(1, broadPhase, t1, transformTwo, t2, t3, t4, transformOne, t5, t6);
    if (typeof t5 !== "number")
      throw t5.$lt();
    if (t5 < t6)
      ;
    else
      t5 = t6;
    t4.x = t5;
    t5 = t3.lowerBound;
    t4 = t1.lowerBound.y;
    t6 = t2.lowerBound.y;
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(2, broadPhase, t1, transformTwo, t2, t3, t4, transformOne, t5, t6);
    if (typeof t4 !== "number")
      throw t4.$lt();
    if (t4 < t6)
      ;
    else
      t4 = t6;
    t5.y = t4;
    t4 = t3.upperBound;
    t5 = t1.upperBound.x;
    t6 = t2.upperBound.x;
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(3, broadPhase, t1, transformTwo, t2, t3, t4, transformOne, t5, t6);
    if (typeof t5 !== "number")
      throw t5.$gt();
    if (t5 > t6)
      ;
    else
      t5 = t6;
    t4.x = t5;
    t5 = t3.upperBound;
    t4 = t1.upperBound.y;
    t2 = t2.upperBound.y;
    if (typeof t2 !== "number")
      return this.synchronize$3$bailout(4, broadPhase, t1, transformTwo, t2, t3, t4, transformOne, t5);
    if (typeof t4 !== "number")
      throw t4.$gt();
    if (t4 > t2)
      t2 = t4;
    t5.y = t2;
    disp = t1.lowerBound;
    t1 = transformTwo.position;
    t2 = t1.x;
    t5 = transformOne.position;
    t4 = t5.x;
    if (typeof t4 !== "number")
      return this.synchronize$3$bailout(5, broadPhase, t1, 0, t2, t3, t4, 0, t5, 0, disp);
    if (typeof t2 !== "number")
      throw t2.$sub();
    disp.x = t2 - t4;
    t1 = t1.y;
    t5 = t5.y;
    if (typeof t5 !== "number")
      return this.synchronize$3$bailout(6, broadPhase, t1, 0, 0, t3, 0, 0, t5, 0, disp);
    if (typeof t1 !== "number")
      throw t1.$sub();
    disp.y = t1 - t5;
    t5 = this.proxy;
    if (broadPhase._tree.moveProxy$3(t5, t3, disp))
      broadPhase.moveBuffer.push(t5);
  },
  synchronize$3$bailout: function(state0, broadPhase, t1, transformTwo, t2, t3, t4, transformOne, t5, t6, disp) {
    switch (state0) {
      case 0:
        if (this.proxy == null)
          return;
        t1 = this._poolOne;
        this.shape.computeAxisAlignedBox$2(t1, transformOne);
        t2 = this._poolTwo;
        this.shape.computeAxisAlignedBox$2(t2, transformTwo);
        t3 = this.box;
        t4 = t3.lowerBound;
        t5 = t1.lowerBound.x;
        t6 = t2.lowerBound.x;
      case 1:
        state0 = 0;
        if (typeof t5 !== "number")
          throw t5.$lt();
        if ($.$lt$n(t5, t6))
          ;
        else
          t5 = t6;
        t4.x = t5;
        t5 = t3.lowerBound;
        t4 = t1.lowerBound.y;
        t6 = t2.lowerBound.y;
      case 2:
        state0 = 0;
        if (typeof t4 !== "number")
          throw t4.$lt();
        if ($.$lt$n(t4, t6))
          ;
        else
          t4 = t6;
        t5.y = t4;
        t4 = t3.upperBound;
        t5 = t1.upperBound.x;
        t6 = t2.upperBound.x;
      case 3:
        state0 = 0;
        if (typeof t5 !== "number")
          throw t5.$gt();
        if ($.$gt$n(t5, t6))
          ;
        else
          t5 = t6;
        t4.x = t5;
        t5 = t3.upperBound;
        t4 = t1.upperBound.y;
        t2 = t2.upperBound.y;
      case 4:
        state0 = 0;
        if (typeof t4 !== "number")
          throw t4.$gt();
        if ($.$gt$n(t4, t2))
          t2 = t4;
        t5.y = t2;
        disp = t1.lowerBound;
        t1 = transformTwo.position;
        t2 = t1.x;
        t5 = transformOne.position;
        t4 = t5.x;
      case 5:
        state0 = 0;
        if (typeof t2 !== "number")
          throw t2.$sub();
        disp.x = $.$sub$n(t2, t4);
        t1 = t1.y;
        t5 = t5.y;
      case 6:
        state0 = 0;
        if (typeof t1 !== "number")
          throw t1.$sub();
        disp.y = $.$sub$n(t1, t5);
        t5 = this.proxy;
        if (broadPhase._tree.moveProxy$3(t5, t3, disp))
          broadPhase.moveBuffer.push(t5);
    }
  },
  getMassData$1: function(massData) {
    this.shape.computeMass$2(massData, this.density);
  },
  get$type: function() {
    return this.shape.type;
  }
},

FixtureDef: {"": "Object;shape,userData@,friction@,restitution@,density<,isSensor,filter",
  FixtureDef$0: function() {
    var t1 = this.filter;
    t1.categoryBits = 1;
    t1.maskBits = 65535;
    t1.groupIndex = 0;
  }
},

Island: {"": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
  init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
    var t1, old, t2, i;
    this.bodyCapacity = argBodyCapacity;
    this.contactCapacity = argContactCapacity;
    this.jointCapacity = argJointCapacity;
    this.bodyCount = 0;
    this.contactCount = 0;
    this.listener = argListener;
    t1 = this.bodies;
    if (t1 == null || $.$gt$n(this.bodyCapacity, t1.length))
      this.bodies = $.List_List(this.bodyCapacity);
    t1 = this.contacts;
    if (t1 == null || $.$gt$n(this.contactCapacity, t1.length))
      this.contacts = $.List_List(this.contactCapacity);
    t1 = this.joints;
    if (t1 == null || $.$gt$n(this.jointCapacity, t1.length))
      this.joints = $.List_List(this.jointCapacity);
    old = this.velocities;
    t1 = old == null;
    if (t1 || $.$gt$n(this.bodyCapacity, old.length)) {
      if (t1)
        old = $.List_List(0);
      this.velocities = $.List_List(this.bodyCapacity);
      t1 = this.velocities;
      t2 = old.length;
      t1.setRange$4;
      if (!!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, t2, old, 0);
      for (i = old.length; t1 = this.velocities, i < t1.length; ++i) {
        t2 = new $.Velocity(null, null);
        t2.v = new $.Vector(0, 0);
        t2.a = 0;
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    old = this.positions;
    t1 = old == null;
    if (t1 || $.$gt$n(this.bodyCapacity, old.length)) {
      if (t1)
        old = $.List_List(0);
      this.positions = $.List_List(this.bodyCapacity);
      t1 = this.positions;
      t2 = old.length;
      t1.setRange$4;
      if (!!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, t2, old, 0);
      for (i = old.length; t1 = this.positions, i < t1.length; ++i) {
        t2 = new $.Position(null, null);
        t2.x = new $.Vector(0, 0);
        t2.a = 0;
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
  },
  solve$3: function(step, gravity, allowSleep) {
    var i, t1, b, t2, t3, t4, t5, t6, velocityDelta, a, a1, a2, b1, i1, i2, fixtureA, fixtureB, bodyA, bodyB, nonStatic, temp, j, ratio, rotation, contactsOkay, jointsOkay, jointOkay, minSleepTime;
    i = 0;
    while (true) {
      t1 = this.bodyCount;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      c$0: {
        t1 = this.bodies;
        if (i >= t1.length)
          throw $.ioore(i);
        b = t1[i];
        t1 = b.get$type();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(1, step, gravity, allowSleep, i, b, t1);
        if (t1 !== 2)
          break c$0;
        t1 = b.get$_force();
        t2 = t1.x;
        t3 = b.get$invMass();
        if (typeof t2 !== "number")
          throw t2.$mul();
        t4 = gravity.x;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t5 = step.dt;
        t1 = t1.y;
        if (typeof t1 !== "number")
          throw t1.$mul();
        t6 = gravity.y;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        velocityDelta = new $.Vector((t2 * t3 + t4) * t5, (t1 * t3 + t6) * t5);
        t5 = b.get$linearVelocity();
        t6 = t5.x;
        if (typeof t6 !== "number")
          return this.solve$3$bailout(2, step, gravity, allowSleep, i, b, t6, velocityDelta, t5);
        t3 = velocityDelta.x;
        if (typeof t3 !== "number")
          return this.solve$3$bailout(3, step, gravity, allowSleep, i, b, t6, velocityDelta, t5, t3);
        t5.x = t6 + t3;
        t3 = t5.y;
        if (typeof t3 !== "number")
          return this.solve$3$bailout(4, step, gravity, allowSleep, i, b, 0, velocityDelta, t5, t3);
        t6 = velocityDelta.y;
        if (typeof t6 !== "number")
          return this.solve$3$bailout(5, step, gravity, allowSleep, i, b, t6, 0, t5, t3);
        t5.y = t3 + t6;
        t6 = b.get$angularVelocity();
        if (typeof t6 !== "number")
          return this.solve$3$bailout(6, step, gravity, allowSleep, i, b, t6);
        b.set$angularVelocity(t6 + step.dt * b.get$invInertia() * b.get$_torque());
        a = 1 - step.dt * b.get$linearDamping();
        t1 = a < 1;
        if (0 > (t1 ? a : 1))
          a1 = 0;
        else
          a1 = t1 ? a : 1;
        t1 = b.get$linearVelocity();
        t2 = t1.x;
        if (typeof t2 !== "number")
          throw t2.$mul();
        t1.x = t2 * a1;
        t2 = t1.y;
        if (typeof t2 !== "number")
          throw t2.$mul();
        t1.y = t2 * a1;
        a2 = 1 - step.dt * b.get$angularDamping();
        b1 = a2 < 1 ? a2 : 1;
        t1 = b.get$angularVelocity();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(7, step, gravity, allowSleep, i, b, t1, 0, 0, 0, b1);
        b.set$angularVelocity(t1 * (0 > b1 ? 0 : b1));
      }
      ++i;
    }
    t1 = this.contacts;
    i1 = -1;
    i2 = 0;
    while (true) {
      t2 = this.contactCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i2 < t2))
        break;
      t2 = t1.length;
      if (i2 >= t2)
        throw $.ioore(i2);
      t3 = t1[i2];
      fixtureA = t3.get$fixtureA();
      fixtureB = t3.get$fixtureB();
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      bodyA.get$type;
      t4 = bodyA._type;
      if (typeof t4 !== "number")
        return this.solve$3$bailout(8, step, 0, allowSleep, 0, 0, t4, 0, 0, 0, 0, i2, bodyB, i1);
      if (t4 !== 0) {
        bodyB.get$type;
        t4 = bodyB._type;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(9, step, 0, allowSleep, 0, 0, t4, 0, 0, 0, 0, i2, 0, i1);
        nonStatic = t4 !== 0;
      } else
        nonStatic = false;
      if (nonStatic) {
        ++i1;
        if (i1 >= t2)
          throw $.ioore(i1);
        temp = t1[i1];
        t1[i1] = t3;
        t1[i2] = temp;
      }
      ++i2;
    }
    t3 = this._contactSolver;
    t3.init$3(t1, t2, step.dtRatio);
    t3.warmStart$0();
    t1 = this.joints;
    i = 0;
    while (true) {
      t2 = this.jointCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].initVelocityConstraints$1(step);
      ++i;
    }
    for (i = 0; i < step.velocityIterations; ++i) {
      t1 = this.joints;
      j = 0;
      while (true) {
        t2 = this.jointCount;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        if (!(j < t2))
          break;
        if (j >= t1.length)
          throw $.ioore(j);
        t1[j].solveVelocityConstraints$1(step);
        ++j;
      }
      t3.solveVelocityConstraints$0();
    }
    t3.storeImpulses$0();
    temp = new $.Vector(0, 0);
    t1 = this._translation;
    i = 0;
    while (true) {
      t2 = this.bodyCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      c$0: {
        t2 = this.bodies;
        if (i >= t2.length)
          throw $.ioore(i);
        b = t2[i];
        t2 = b.get$type();
        if (typeof t2 !== "number")
          return this.solve$3$bailout(10, step, 0, allowSleep, i, b, t1, 0, 0, t2, 0, 0, 0, 0, t3, temp);
        if (t2 === 0)
          break c$0;
        t2 = b.get$linearVelocity();
        t4 = t2.x;
        t2 = t2.y;
        t1.x = t4;
        t1.y = t2;
        t2 = step.dt;
        t4 = t1.x;
        if (typeof t4 !== "number")
          throw t4.$mul();
        t1.x = t4 * t2;
        t4 = t1.y;
        if (typeof t4 !== "number")
          throw t4.$mul();
        t1.y = t4 * t2;
        t2 = t1.x;
        if (typeof t2 !== "number")
          throw t2.$mul();
        t4 = t1.y;
        if (typeof t4 !== "number")
          throw t4.$mul();
        t4 = t2 * t2 + t4 * t4;
        if (t4 > 4) {
          ratio = 2 / Math.sqrt(t4);
          t2 = b.get$linearVelocity();
          t4 = t2.x;
          if (typeof t4 !== "number")
            throw t4.$mul();
          t2.x = t4 * ratio;
          t4 = t2.y;
          if (typeof t4 !== "number")
            throw t4.$mul();
          t2.y = t4 * ratio;
        }
        t2 = step.dt;
        t4 = b.get$angularVelocity();
        if (typeof t4 !== "number")
          throw $.iae(t4);
        rotation = t2 * t4;
        if (rotation * rotation > 2.4674011002723395) {
          t2 = Math.abs(rotation);
          t4 = b.get$angularVelocity();
          if (typeof t4 !== "number")
            throw t4.$mul();
          b.set$angularVelocity(t4 * (1.5707963267948966 / t2));
        }
        t2 = b.get$sweep();
        t4 = t2.centerZero;
        t2 = t2.center;
        t5 = t2.x;
        t2 = t2.y;
        t4.x = t5;
        t4.y = t2;
        t2 = b.get$sweep();
        t2.angleZero = t2.angle;
        t2 = b.get$linearVelocity();
        t4 = t2.x;
        t2 = t2.y;
        temp.x = t4;
        temp.y = t2;
        t2 = step.dt;
        t4 = temp.x;
        if (typeof t4 !== "number")
          throw t4.$mul();
        temp.x = t4 * t2;
        t4 = temp.y;
        if (typeof t4 !== "number")
          throw t4.$mul();
        temp.y = t4 * t2;
        t2 = b.get$sweep().center;
        t4 = t2.x;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(11, step, 0, allowSleep, i, b, t1, 0, 0, t2, 0, 0, 0, 0, t3, temp, t4);
        t5 = temp.x;
        if (typeof t5 !== "number")
          return this.solve$3$bailout(12, step, 0, allowSleep, i, b, t1, 0, t5, t2, 0, 0, 0, 0, t3, temp, t4);
        t2.x = t4 + t5;
        t5 = t2.y;
        if (typeof t5 !== "number")
          return this.solve$3$bailout(13, step, 0, allowSleep, i, b, t1, 0, t5, t2, 0, 0, 0, 0, t3, temp);
        t4 = temp.y;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(14, step, 0, allowSleep, i, b, t1, 0, t5, t2, 0, 0, 0, 0, t3, temp, t4);
        t2.y = t5 + t4;
        t4 = b.get$sweep();
        t5 = t4.angle;
        if (typeof t5 !== "number")
          return this.solve$3$bailout(15, step, 0, allowSleep, i, b, t1, 0, t5, 0, 0, 0, 0, 0, t3, temp, t4);
        t2 = step.dt;
        t6 = b.get$angularVelocity();
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t4.angle = t5 + t2 * t6;
        b.synchronizeTransform$0();
      }
      ++i;
    }
    for (i = 0; i < step.positionIterations; ++i) {
      contactsOkay = t3.solvePositionConstraints$1(0.2);
      jointsOkay = true;
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (j >= t1.length)
          throw $.ioore(j);
        jointOkay = t1[j].solvePositionConstraints$1(0.2);
        jointsOkay = jointsOkay && jointOkay;
        ++j;
      }
      if (contactsOkay && jointsOkay)
        break;
    }
    this.report$1(t3.constraints);
    if (allowSleep) {
      minSleepTime = 99999999999999;
      i = 0;
      while (true) {
        t1 = this.bodyCount;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        if (!(i < t1))
          break;
        c$0: {
          t1 = this.bodies;
          if (i >= t1.length)
            throw $.ioore(i);
          b = t1[i];
          t1 = b.get$type();
          if (typeof t1 !== "number")
            return this.solve$3$bailout(16, step, 0, 0, i, b, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if (t1 === 0)
            break c$0;
          t1 = b.get$flags();
          if (t1 !== (t1 | 0))
            return this.solve$3$bailout(17, step, 0, 0, i, b, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) === 0) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          }
          t1 = b.get$flags();
          if (t1 !== (t1 | 0))
            return this.solve$3$bailout(19, step, 0, 0, i, b, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) !== 0) {
            t1 = b.get$angularVelocity();
            t2 = b.get$angularVelocity();
            if (typeof t2 !== "number")
              return this.solve$3$bailout(20, step, 0, 0, i, b, t1, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, minSleepTime);
            if (typeof t1 !== "number")
              throw t1.$mul();
            if (!(t1 * t2 > 0.0012184696791468343)) {
              t1 = b.get$linearVelocity();
              t2 = b.get$linearVelocity();
              t3 = t1.x;
              t4 = t2.x;
              if (typeof t4 !== "number")
                return this.solve$3$bailout(21, step, 0, 0, i, b, t1, 0, 0, t3, 0, 0, 0, 0, t2, 0, t4, minSleepTime);
              if (typeof t3 !== "number")
                throw t3.$mul();
              t4 = t3 * t4;
              t1 = t1.y;
              t2 = t2.y;
              if (typeof t2 !== "number")
                return this.solve$3$bailout(22, step, 0, 0, i, b, t1, 0, 0, 0, 0, 0, 0, 0, t2, 0, t4, minSleepTime);
              if (typeof t1 !== "number")
                throw t1.$mul();
              t2 = t4 + t1 * t2 > 0.0001;
              t1 = t2;
            } else
              t1 = true;
          } else
            t1 = true;
          if (t1) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          } else {
            b.set$sleepTime(b.get$sleepTime() + step.dt);
            minSleepTime = $.min(minSleepTime, b.get$sleepTime());
          }
        }
        ++i;
      }
      if (minSleepTime >= 0.5) {
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (typeof t1 !== "number")
            throw $.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.bodies;
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].set$awake(false);
          ++i;
        }
      }
    }
  },
  solve$3$bailout: function(state0, step, gravity, allowSleep, i, b, t1, velocityDelta, t5, t3, b1, i2, bodyB, i1, t2, temp, t4, minSleepTime) {
    switch (state0) {
      case 0:
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.bodyCount;
                if (typeof t1 !== "number")
                  throw $.iae(t1);
                if (!$.JSNumber_methods.$lt(i, t1))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t1 = this.bodies;
                      if (i >= t1.length)
                        throw $.ioore(i);
                      b = t1[i];
                      t1 = b.get$type();
                    case 1:
                      state0 = 0;
                      if (!$.$eq(t1, 2))
                        break c$0;
                      t1 = b.get$_force();
                      t2 = t1.x;
                      t3 = b.get$invMass();
                      if (typeof t2 !== "number")
                        throw t2.$mul();
                      t2 = $.$mul$n(t2, t3);
                      t4 = gravity.x;
                      if (typeof t4 !== "number")
                        throw $.iae(t4);
                      t5 = step.dt;
                      t1 = t1.y;
                      if (typeof t1 !== "number")
                        throw t1.$mul();
                      t3 = $.$mul$n(t1, t3);
                      t1 = gravity.y;
                      if (typeof t1 !== "number")
                        throw $.iae(t1);
                      velocityDelta = new $.Vector((t2 + t4) * t5, (t3 + t1) * t5);
                      t5 = b.get$linearVelocity();
                      t1 = t5.x;
                    case 2:
                      state0 = 0;
                      t3 = velocityDelta.x;
                    case 3:
                      state0 = 0;
                      t5.x = $.$add$ns(t1, t3);
                      t3 = t5.y;
                    case 4:
                      state0 = 0;
                      t1 = velocityDelta.y;
                    case 5:
                      state0 = 0;
                      t5.y = $.$add$ns(t3, t1);
                      t1 = b.get$angularVelocity();
                    case 6:
                      state0 = 0;
                      b.set$angularVelocity($.$add$ns(t1, step.dt * b.get$invInertia() * b.get$_torque()));
                      a = 1 - step.dt * b.get$linearDamping();
                      t1 = a < 1;
                      if (0 > (t1 ? a : 1))
                        a1 = 0;
                      else
                        a1 = t1 ? a : 1;
                      t1 = b.get$linearVelocity();
                      t2 = t1.x;
                      if (typeof t2 !== "number")
                        throw t2.$mul();
                      t1.x = $.$mul$n(t2, a1);
                      t2 = t1.y;
                      if (typeof t2 !== "number")
                        throw t2.$mul();
                      t1.y = $.$mul$n(t2, a1);
                      a2 = 1 - step.dt * b.get$angularDamping();
                      b1 = a2 < 1 ? a2 : 1;
                      t1 = b.get$angularVelocity();
                    case 7:
                      state0 = 0;
                      b.set$angularVelocity($.$mul$n(t1, 0 > b1 ? 0 : b1));
                  }
                }
                ++i;
            }
        i1 = -1;
        i2 = 0;
      case 8:
      case 9:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.contactCount;
                if (typeof t1 !== "number")
                  throw $.iae(t1);
                t2 = $.JSNumber_methods.$lt(i2, t1);
                t3 = this.contacts;
                if (!t2)
                  break L1;
                if (i2 >= t3.length)
                  throw $.ioore(i2);
                t1 = t3[i2];
                fixtureA = t1.get$fixtureA();
                fixtureB = t1.get$fixtureB();
                bodyA = fixtureA.body;
                bodyB = fixtureB.body;
                bodyA.get$type;
                t1 = bodyA._type;
              case 8:
                state0 = 0;
              case 9:
                if (state0 === 9 || state0 === 0 && !$.$eq(t1, 0))
                  switch (state0) {
                    case 0:
                      bodyB.get$type;
                      t1 = bodyB._type;
                    case 9:
                      state0 = 0;
                      nonStatic = !$.$eq(t1, 0);
                  }
                else
                  nonStatic = false;
                if (nonStatic) {
                  ++i1;
                  t1 = this.contacts;
                  t2 = t1.length;
                  if (i1 >= t2)
                    throw $.ioore(i1);
                  temp = t1[i1];
                  if (i2 >= t2)
                    throw $.ioore(i2);
                  t1[i1] = t1[i2];
                  t1[i2] = temp;
                }
                ++i2;
            }
        t2 = this._contactSolver;
        t2.init$3(t3, t1, step.dtRatio);
        t2.warmStart$0();
        t1 = this.joints;
        i = 0;
        while (true) {
          t3 = this.jointCount;
          if (typeof t3 !== "number")
            throw $.iae(t3);
          if (!$.JSNumber_methods.$lt(i, t3))
            break;
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].initVelocityConstraints$1(step);
          ++i;
        }
        for (i = 0; i < step.velocityIterations; ++i) {
          t1 = this.joints;
          j = 0;
          while (true) {
            t3 = this.jointCount;
            if (typeof t3 !== "number")
              throw $.iae(t3);
            if (!$.JSNumber_methods.$lt(j, t3))
              break;
            if (j >= t1.length)
              throw $.ioore(j);
            t1[j].solveVelocityConstraints$1(step);
            ++j;
          }
          t2.solveVelocityConstraints$0();
        }
        t2.storeImpulses$0();
        temp = new $.Vector(0, 0);
        t1 = this._translation;
        i = 0;
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        L2:
          while (true)
            switch (state0) {
              case 0:
                t3 = this.bodyCount;
                if (typeof t3 !== "number")
                  throw $.iae(t3);
                if (!$.JSNumber_methods.$lt(i, t3))
                  break L2;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t3 = this.bodies;
                      if (i >= t3.length)
                        throw $.ioore(i);
                      b = t3[i];
                      t3 = b.get$type();
                    case 10:
                      state0 = 0;
                      if ($.$eq(t3, 0))
                        break c$0;
                      t3 = b.get$linearVelocity();
                      t4 = t3.x;
                      t3 = t3.y;
                      t1.x = t4;
                      t1.y = t3;
                      t3 = step.dt;
                      t4 = t1.x;
                      if (typeof t4 !== "number")
                        throw t4.$mul();
                      t1.x = $.$mul$n(t4, t3);
                      t4 = t1.y;
                      if (typeof t4 !== "number")
                        throw t4.$mul();
                      t1.y = $.$mul$n(t4, t3);
                      t3 = t1.x;
                      t4 = $.getInterceptor$n(t3);
                      if (typeof t3 !== "number")
                        throw t3.$mul();
                      t5 = t4.$mul(t3, t3);
                      t6 = t1.y;
                      t7 = $.getInterceptor$n(t6);
                      if (typeof t6 !== "number")
                        throw t6.$mul();
                      if (t5 + t7.$mul(t6, t6) > 4) {
                        t3 = t4.$mul(t3, t3) + t7.$mul(t6, t6);
                        ratio = 2 / Math.sqrt(t3);
                        t3 = b.get$linearVelocity();
                        t4 = t3.x;
                        if (typeof t4 !== "number")
                          throw t4.$mul();
                        t3.x = $.$mul$n(t4, ratio);
                        t4 = t3.y;
                        if (typeof t4 !== "number")
                          throw t4.$mul();
                        t3.y = $.$mul$n(t4, ratio);
                      }
                      t3 = step.dt;
                      t4 = b.get$angularVelocity();
                      if (typeof t4 !== "number")
                        throw $.iae(t4);
                      rotation = t3 * t4;
                      if (rotation * rotation > 2.4674011002723395) {
                        t3 = Math.abs(rotation);
                        t4 = b.get$angularVelocity();
                        if (typeof t4 !== "number")
                          throw t4.$mul();
                        b.set$angularVelocity($.$mul$n(t4, 1.5707963267948966 / t3));
                      }
                      t3 = b.get$sweep();
                      t4 = t3.centerZero;
                      t3 = t3.center;
                      t5 = t3.x;
                      t3 = t3.y;
                      t4.x = t5;
                      t4.y = t3;
                      t3 = b.get$sweep();
                      t3.angleZero = t3.angle;
                      t3 = b.get$linearVelocity();
                      t4 = t3.x;
                      t3 = t3.y;
                      temp.x = t4;
                      temp.y = t3;
                      t3 = step.dt;
                      t4 = temp.x;
                      if (typeof t4 !== "number")
                        throw t4.$mul();
                      temp.x = $.$mul$n(t4, t3);
                      t4 = temp.y;
                      if (typeof t4 !== "number")
                        throw t4.$mul();
                      temp.y = $.$mul$n(t4, t3);
                      t3 = b.get$sweep().center;
                      t4 = t3.x;
                    case 11:
                      state0 = 0;
                      t5 = temp.x;
                    case 12:
                      state0 = 0;
                      t3.x = $.$add$ns(t4, t5);
                      t5 = t3.y;
                    case 13:
                      state0 = 0;
                      t4 = temp.y;
                    case 14:
                      state0 = 0;
                      t3.y = $.$add$ns(t5, t4);
                      t4 = b.get$sweep();
                      t5 = t4.angle;
                    case 15:
                      state0 = 0;
                      t3 = step.dt;
                      t6 = b.get$angularVelocity();
                      if (typeof t6 !== "number")
                        throw $.iae(t6);
                      t4.angle = $.$add$ns(t5, t3 * t6);
                      b.synchronizeTransform$0();
                  }
                }
                ++i;
            }
        for (i = 0; i < step.positionIterations; ++i) {
          contactsOkay = t2.solvePositionConstraints$1(0.2);
          jointsOkay = true;
          j = 0;
          while (true) {
            t1 = this.jointCount;
            if (typeof t1 !== "number")
              throw $.iae(t1);
            if (!$.JSNumber_methods.$lt(j, t1))
              break;
            t1 = this.joints;
            if (j >= t1.length)
              throw $.ioore(j);
            jointOkay = t1[j].solvePositionConstraints$1(0.2);
            jointsOkay = jointsOkay && jointOkay;
            ++j;
          }
          if (contactsOkay && jointsOkay)
            break;
        }
        this.report$1(t2.constraints);
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
        var a, a1, a2, fixtureA, fixtureB, bodyA, nonStatic, j, t6, t7, ratio, rotation, contactsOkay, jointsOkay, jointOkay;
        if (state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 0 && allowSleep)
          switch (state0) {
            case 0:
              minSleepTime = 99999999999999;
              i = 0;
            default:
              L3:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = this.bodyCount;
                      if (typeof t1 !== "number")
                        throw $.iae(t1);
                      if (!$.JSNumber_methods.$lt(i, t1))
                        break L3;
                    default:
                      c$0: {
                        switch (state0) {
                          case 0:
                            t1 = this.bodies;
                            if (i >= t1.length)
                              throw $.ioore(i);
                            b = t1[i];
                            t1 = b.get$type();
                          case 16:
                            state0 = 0;
                            if ($.$eq(t1, 0))
                              break c$0;
                            t1 = b.get$flags();
                          case 17:
                            state0 = 0;
                            if ($.$and$n(t1, 4) === 0) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            }
                          case 18:
                            state0 = 0;
                            t1 = b.get$flags();
                          case 19:
                            state0 = 0;
                          default:
                            if (state0 === 22 || state0 === 21 || state0 === 20 || state0 === 0 && $.$and$n(t1, 4) !== 0)
                              switch (state0) {
                                case 0:
                                  t1 = b.get$angularVelocity();
                                  t2 = b.get$angularVelocity();
                                case 20:
                                  state0 = 0;
                                  if (typeof t1 !== "number")
                                    throw t1.$mul();
                                default:
                                  if (state0 === 22 || state0 === 21 || state0 === 0 && !($.$mul$n(t1, t2) > 0.0012184696791468343))
                                    switch (state0) {
                                      case 0:
                                        t1 = b.get$linearVelocity();
                                        t2 = b.get$linearVelocity();
                                        t3 = t1.x;
                                        t4 = t2.x;
                                      case 21:
                                        state0 = 0;
                                        if (typeof t3 !== "number")
                                          throw t3.$mul();
                                        t4 = $.$mul$n(t3, t4);
                                        t1 = t1.y;
                                        t2 = t2.y;
                                      case 22:
                                        state0 = 0;
                                        if (typeof t1 !== "number")
                                          throw t1.$mul();
                                        t2 = t4 + $.$mul$n(t1, t2) > 0.0001;
                                        t1 = t2;
                                    }
                                  else
                                    t1 = true;
                              }
                            else
                              t1 = true;
                            if (t1) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            } else {
                              b.set$sleepTime(b.get$sleepTime() + step.dt);
                              minSleepTime = $.min(minSleepTime, b.get$sleepTime());
                            }
                        }
                      }
                      ++i;
                  }
              if (minSleepTime >= 0.5) {
                i = 0;
                while (true) {
                  t1 = this.bodyCount;
                  if (typeof t1 !== "number")
                    throw $.iae(t1);
                  if (!$.JSNumber_methods.$lt(i, t1))
                    break;
                  t1 = this.bodies;
                  if (i >= t1.length)
                    throw $.ioore(i);
                  t1[i].set$awake(false);
                  ++i;
                }
              }
          }
    }
  },
  report$1: function(constraints) {
    var t1, t2, t3, t4, t5, t6, t7, t8, i, c, cc, j, t9;
    t1 = this.listener;
    if (t1 == null)
      return;
    for (t2 = this.impulse, t3 = t2.normalImpulses, t4 = t3.length, t5 = t2.tangentImpulses, t6 = t5.length, t7 = this.contacts, t8 = constraints.length, i = 0; $.JSNumber_methods.$lt(i, this.contactCount); ++i) {
      if (i >= t7.length)
        throw $.ioore(i);
      c = t7[i];
      if (i >= t8)
        throw $.ioore(i);
      cc = constraints[i];
      for (j = 0; $.JSNumber_methods.$lt(j, cc.get$pointCount()); ++j) {
        t9 = cc.get$points();
        if (j >= t9.length)
          throw $.ioore(j);
        t9 = t9[j].get$normalImpulse();
        if (j >= t4)
          throw $.ioore(j);
        t3[j] = t9;
        t9 = cc.get$points();
        if (j >= t9.length)
          throw $.ioore(j);
        t9 = t9[j].get$tangentImpulse();
        if (j >= t6)
          throw $.ioore(j);
        t5[j] = t9;
      }
      t1.postSolve$2(c, t2);
    }
  }
},

Position: {"": "Object;x@,a@",
  Position$0: function() {
    this.x = new $.Vector(0, 0);
    this.a = 0;
  }
},

Velocity: {"": "Object;v<,a@",
  Velocity$0: function() {
    this.v = new $.Vector(0, 0);
    this.a = 0;
  }
},

TimeStep: {"": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting"},

World: {"": "Object;_flags,_contactManager,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center<,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
  _addType$3: function(creatorStack, type1, type2) {
    var register, t1, t2, register2;
    register = new $.ContactRegister(null, false);
    register.creator = creatorStack;
    register.primary = true;
    t1 = this._contactStacks;
    t2 = t1.length;
    if (type1 < 0 || type1 >= t2)
      throw $.ioore(type1);
    $.$indexSet$a(t1[type1], type2, register);
    if (type1 !== type2) {
      register2 = new $.ContactRegister(null, false);
      register2.creator = creatorStack;
      register2.primary = false;
      if (type2 < 0 || type2 >= t2)
        throw $.ioore(type2);
      $.$indexSet$a(t1[type2], type1, register2);
    }
  },
  _initializeRegisters$0: function() {
    var t1 = this._pool;
    this._addType$3(t1.getCircleContactStack$0(), 0, 0);
    this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
    this._addType$3(t1.getPolyContactStack$0(), 1, 1);
  },
  popContact$2: function(fixtureA, fixtureB) {
    var type1, type2, t1, reg, creator, c;
    fixtureA.get$type;
    type1 = fixtureA.shape.type;
    fixtureB.get$type;
    type2 = fixtureB.shape.type;
    t1 = this._contactStacks;
    if (type1 >>> 0 !== type1 || type1 >= t1.length)
      throw $.ioore(type1);
    reg = $.$index$as(t1[type1], type2);
    creator = reg.get$creator();
    if (creator != null) {
      creator.get$isEmpty;
      if (creator._head === creator._tail)
        creator = this._getFreshContactStack$2(type1, type2);
      if (reg.get$primary()) {
        c = creator.removeFirst$0();
        c.init$2(fixtureA, fixtureB);
        return c;
      } else {
        c = creator.removeFirst$0();
        c.init$2(fixtureB, fixtureA);
        return c;
      }
    } else
      return;
  },
  _getFreshContactStack$2: function(type1, type2) {
    var t1, t2;
    if (type1 === 0 && $.$eq(type2, 0))
      return this._pool.getCircleContactStack$0();
    else {
      t1 = type1 === 1 && $.$eq(type2, 1);
      t2 = this._pool;
      if (t1)
        return t2.getPolyContactStack$0();
      else
        return t2.getPolyCircleContactStack$0();
    }
  },
  pushContact$1: function(contact) {
    var t1, type1, type2;
    if ($.$gt$n(contact.get$manifold().get$pointCount(), 0)) {
      contact.get$fixtureA().body.set$awake(true);
      contact.get$fixtureB().body.set$awake(true);
    }
    t1 = contact.get$fixtureA();
    t1.get$type;
    type1 = t1.shape.type;
    t1 = contact.get$fixtureB();
    t1.get$type;
    type2 = t1.shape.type;
    t1 = this._contactStacks;
    if (type1 >>> 0 !== type1 || type1 >= t1.length)
      throw $.ioore(type1);
    $.$index$as(t1[type1], type2).get$creator().addFirst$1(contact);
  },
  createBody$1: function(def) {
    var b, t1;
    if ((this._flags & 2) === 2)
      return;
    b = $.Body$(def, this);
    b.prev = null;
    b.next = this._bodyList;
    t1 = this._bodyList;
    if (t1 != null)
      t1.prev = b;
    this._bodyList = b;
    this._bodyCount = this._bodyCount + 1;
    return b;
  },
  step$3: function(dt, velocityIterations, positionIterations) {
    var t1;
    if ((this._flags & 1) === 1) {
      t1 = this._contactManager;
      t1.findNewContacts$0;
      t1.broadPhase.updatePairs$1(t1);
      this._flags = (this._flags & 4294967294) >>> 0;
    }
    this._flags = (this._flags | 2) >>> 0;
    t1 = this.timestep;
    t1.dt = dt;
    t1.velocityIterations = velocityIterations;
    t1.positionIterations = positionIterations;
    if (dt > 0)
      t1.inv_dt = 1 / dt;
    else
      t1.inv_dt = 0;
    t1.dtRatio = this._inverseTimestep * dt;
    t1.warmStarting = this._warmStarting;
    this._contactManager.collide$0();
    if (t1.dt > 0)
      this.solve$1(t1);
    if (this._continuousPhysics && t1.dt > 0)
      this.solveTimeOfImpact$0();
    if (t1.dt > 0)
      this._inverseTimestep = t1.inv_dt;
    if ((this._flags & 4) === 4)
      this.clearForces$0();
    this._flags = (this._flags & 4294967293) >>> 0;
  },
  clearForces$0: function() {
    var body, t1;
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = body.get$_force();
      t1.x = 0;
      t1.y = 0;
      body.set$_torque(0);
    }
  },
  get$contactList: function() {
    return this._contactManager.contactList;
  },
  get$jointList: function() {
    return this._jointList;
  },
  solve$1: function(timeStep) {
    var t1, t2, t3, b, c, j, stackSize, seed, t4, stackCount, t5, ce, contact, sensorA, sensorB, other, stackCount0, je, t6, i;
    t1 = this.island;
    t2 = this._bodyCount;
    t3 = this._contactManager;
    t1.init$4(t2, t3.contactCount, this._jointCount, t3.contactListener);
    for (b = this._bodyList; b != null; b = b.get$next())
      b.set$flags($.$and$n(b.get$flags(), 4294967294));
    for (c = this._contactManager.contactList; c != null; c = c.get$next())
      c.set$flags($.$and$n(c.get$flags(), 4294967294));
    for (j = this._jointList; j != null; j = j.get$_next())
      j.set$islandFlag(false);
    stackSize = this._bodyCount;
    if (this.stack.length < stackSize)
      this.stack = $.List_List(stackSize);
    for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; seed != null; seed = seed.get$next()) {
      if ($.$and$n(seed.get$flags(), 1) === 1)
        continue;
      if (!seed.get$awake() || !seed.get$active())
        continue;
      if ($.$eq(seed.get$type(), 0))
        continue;
      t1.bodyCount = 0;
      t1.contactCount = 0;
      t1.jointCount = 0;
      t4 = this.stack;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = seed;
      seed.set$flags($.$or$n(seed.get$flags(), 1));
      for (stackCount = 1; stackCount > 0;) {
        t4 = this.stack;
        --stackCount;
        if (stackCount >= t4.length)
          throw $.ioore(stackCount);
        b = t4[stackCount];
        b.set$islandIndex(t1.bodyCount);
        t4 = t1.bodies;
        t5 = t1.bodyCount;
        t1.bodyCount = $.$add$ns(t5, 1);
        if (t5 >>> 0 !== t5 || t5 >= t4.length)
          throw $.ioore(t5);
        t4[t5] = b;
        b.set$awake(true);
        if ($.$eq(b.get$type(), 0))
          continue;
        for (ce = b.get$contactList(); ce != null; ce = ce.get$next()) {
          contact = ce.get$contact();
          if ($.$and$n(contact.get$flags(), 1) === 1)
            continue;
          if (!contact.get$enabled() || !contact.get$touching())
            continue;
          sensorA = contact.get$fixtureA().isSensor;
          sensorB = contact.get$fixtureB().isSensor;
          if (sensorA === true || sensorB === true)
            continue;
          t4 = t1.contacts;
          t5 = t1.contactCount;
          t1.contactCount = $.$add$ns(t5, 1);
          if (t5 >>> 0 !== t5 || t5 >= t4.length)
            throw $.ioore(t5);
          t4[t5] = contact;
          contact.set$flags($.$or$n(contact.get$flags(), 1));
          other = ce.get$other();
          t4 = other.flags;
          if ((t4 & 1) === 1)
            continue;
          t5 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t5.length)
            throw $.ioore(stackCount);
          t5[stackCount] = other;
          other.flags = (t4 | 1) >>> 0;
          stackCount = stackCount0;
        }
        for (je = b.get$jointList(); je != null; je = je.get$next()) {
          if ($.$eq(je.get$joint().get$islandFlag(), true))
            continue;
          other = je.get$other();
          other.get$active;
          if ((other.flags & 32) !== 32)
            continue;
          t4 = je.get$joint();
          t5 = t1.joints;
          t6 = t1.jointCount;
          t1.jointCount = $.$add$ns(t6, 1);
          if (t6 >>> 0 !== t6 || t6 >= t5.length)
            throw $.ioore(t6);
          t5[t6] = t4;
          je.get$joint().set$islandFlag(true);
          t4 = other.flags;
          if ((t4 & 1) === 1)
            continue;
          t5 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t5.length)
            throw $.ioore(stackCount);
          t5[stackCount] = other;
          other.flags = (t4 | 1) >>> 0;
          stackCount = stackCount0;
        }
      }
      t1.solve$3(timeStep, t2, t3);
      for (i = 0; $.JSNumber_methods.$lt(i, t1.bodyCount); ++i) {
        t4 = t1.bodies;
        if (i >= t4.length)
          throw $.ioore(i);
        b = t4[i];
        if ($.$eq(b.get$type(), 0))
          b.set$flags($.$and$n(b.get$flags(), 4294967294));
      }
    }
    for (b = this._bodyList; b != null; b = b.get$next()) {
      if ($.$and$n(b.get$flags(), 1) === 0)
        continue;
      if ($.$eq(b.get$type(), 0))
        continue;
      b.synchronizeFixtures$0();
    }
    t1 = this._contactManager;
    t1.findNewContacts$0;
    t1.broadPhase.updatePairs$1(t1);
  },
  solveTimeOfImpact$0: function() {
    var c, body, t1, t2;
    for (c = this._contactManager.contactList; c != null; c = c.get$next()) {
      c.set$flags($.$or$n(c.get$flags(), 4));
      c.set$toiCount(0);
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = $.$and$n(body.get$flags(), 1) === 0 || $.$eq(body.get$type(), 1) || $.$eq(body.get$type(), 0);
      t2 = body.get$flags();
      if (t1)
        body.set$flags($.$or$n(t2, 64));
      else
        body.set$flags($.$and$n(t2, 4294967231));
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      if ($.$and$n(body.get$flags(), 64) === 64)
        continue;
      if (body.get$bullet())
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      body.set$flags($.$or$n(body.get$flags(), 64));
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      if ($.$and$n(body.get$flags(), 64) === 64)
        continue;
      if (!body.get$bullet())
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      body.set$flags($.$or$n(body.get$flags(), 64));
    }
  },
  solveTimeOfImpactGivenBody$1: function(body) {
    var bullet, t1, t2, t3, t4, t5, t6, t7, toiContact, toi, toiOther, iter, ce, found, count, other, type, t8, contact, fixtureA, fixtureB, bodyA, bodyB, i;
    bullet = body.get$bullet();
    t1 = this.toiOutput;
    t2 = this.toiInput;
    t3 = t2.proxyA;
    t4 = t2.proxyB;
    t5 = t2.sweepA;
    t6 = t2.sweepB;
    t7 = this._pool;
    toiContact = null;
    toi = 1;
    toiOther = null;
    iter = 0;
    do {
      for (ce = body.get$contactList(), found = false, count = 0; ce != null; ce = ce.get$next()) {
        if ($.$eq(ce.get$contact(), toiContact))
          continue;
        other = ce.get$other();
        other.get$type;
        type = other._type;
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(1, body, t1, bullet, other, iter, t2, t3, t4, t5, toiContact, t6, toiOther, found, count, t7, toi, ce, type);
        if (bullet) {
          if ((other.flags & 64) === 0)
            continue;
          if (type !== 0) {
            t8 = ce.get$contact().get$flags();
            if (t8 !== (t8 | 0))
              return this.solveTimeOfImpactGivenBody$1$bailout(2, body, t1, bullet, other, iter, t2, t3, t4, t5, toiContact, t6, toiOther, found, count, t7, toi, ce, 0, t8);
            t8 = (t8 & 16) !== 0;
          } else
            t8 = false;
          if (t8)
            continue;
        } else if (type === 2)
          continue;
        contact = ce.get$contact();
        if (!contact.get$enabled())
          continue;
        t8 = contact.get$toiCount();
        if (typeof t8 !== "number")
          throw t8.$gt();
        if (t8 > 10)
          continue;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.isSensor === true || fixtureB.isSensor === true)
          continue;
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        t3.setFromShape$1(fixtureA.shape);
        t4.setFromShape$1(fixtureB.shape);
        t5.setFrom$1(bodyA.sweep);
        t6.setFrom$1(bodyB.sweep);
        t2.tMax = toi;
        t7.timeOfImpact.timeOfImpact$2(t1, t2);
        if (t1.state === 3) {
          t8 = t1.t;
          if (typeof t8 !== "number")
            throw t8.$lt();
          t8 = t8 < toi;
        } else
          t8 = false;
        if (t8) {
          toi = t1.t;
          if (typeof toi !== "number")
            return this.solveTimeOfImpactGivenBody$1$bailout(3, body, t1, bullet, other, iter, t2, t3, t4, t5, 0, t6, 0, 0, count, t7, toi, ce, 0, 0, contact);
          toiOther = other;
          toiContact = contact;
          found = true;
        }
        ++count;
      }
      ++iter;
    } while (found && count > 1 && iter < 50);
    if (toiContact == null) {
      body.advance$1(1);
      return;
    }
    t1 = this.backup;
    t1.setFrom$1(body.get$sweep());
    body.advance$1(toi);
    toiContact.update$1(this._contactManager.contactListener);
    if (!toiContact.get$enabled()) {
      body.get$sweep().setFrom$1(t1);
      this.solveTimeOfImpactGivenBody$1(body);
    }
    t1 = toiContact.get$toiCount();
    if (typeof t1 !== "number")
      throw t1.$add();
    toiContact.set$toiCount(t1 + 1);
    t1 = this.contacts;
    if (t1.length < 32)
      this.contacts = $.List_List(32);
    ce = body.get$contactList();
    count = 0;
    while (true) {
      if (!(ce != null && count < 32))
        break;
      c$0: {
        other = ce.get$other();
        other.get$type;
        type = other._type;
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(5, body, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, 0, ce, type);
        if (type === 2)
          break c$0;
        contact = ce.get$contact();
        if (!contact.get$enabled())
          break c$0;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.isSensor === true || fixtureB.isSensor === true)
          break c$0;
        if (!$.$eq(contact, toiContact))
          contact.update$1(this._contactManager.contactListener);
        if (!contact.get$enabled())
          break c$0;
        if (!contact.get$touching())
          break c$0;
        t1 = this.contacts;
        if (count >= t1.length)
          throw $.ioore(count);
        t1[count] = contact;
        ++count;
      }
      ce = ce.get$next();
    }
    t1 = this.toiSolver;
    t1.initialize$3(this.contacts, count, body);
    for (i = 0; i < 20; ++i)
      if (t1.solve$1(0.75))
        break;
    toiOther.get$type;
    t1 = toiOther._type;
    if (typeof t1 !== "number")
      return this.solveTimeOfImpactGivenBody$1$bailout(6, 0, t1, 0, 0, 0, 0, 0, 0, 0, toiContact);
    if (t1 !== 0) {
      t1 = toiContact.get$flags();
      if (typeof t1 !== "number")
        throw t1.$or();
      toiContact.set$flags((t1 | 16) >>> 0);
    }
  },
  solveTimeOfImpactGivenBody$1$bailout: function(state0, body, t1, bullet, other, iter, t2, t3, t4, t5, toiContact, t6, toiOther, found, count, t7, toi, ce, type, t8, contact) {
    switch (state0) {
      case 0:
        bullet = body.get$bullet();
        t1 = this.toiOutput;
        t2 = this.toiInput;
        t3 = t2.proxyA;
        t4 = t2.proxyB;
        t5 = t2.sweepA;
        t6 = t2.sweepB;
        t7 = this._pool;
        toiContact = null;
        toi = 1;
        toiOther = null;
        iter = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                ce = body.get$contactList();
                found = false;
                count = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(ce != null))
                          break L1;
                      default:
                        c$1: {
                          switch (state0) {
                            case 0:
                              if ($.$eq(ce.get$contact(), toiContact))
                                break c$1;
                              other = ce.get$other();
                              other.get$type;
                              type = other._type;
                            case 1:
                              state0 = 0;
                            case 2:
                              if (state0 === 2 || state0 === 0 && bullet)
                                switch (state0) {
                                  case 0:
                                    if ((other.flags & 64) === 0)
                                      break c$1;
                                  case 2:
                                    if (state0 === 2 || state0 === 0 && !$.$eq(type, 0))
                                      switch (state0) {
                                        case 0:
                                          t8 = ce.get$contact().get$flags();
                                        case 2:
                                          state0 = 0;
                                          t8 = $.$and$n(t8, 16) !== 0;
                                      }
                                    else
                                      t8 = false;
                                    if (t8)
                                      break c$1;
                                }
                              else if ($.$eq(type, 2))
                                break c$1;
                              contact = ce.get$contact();
                              if (!contact.get$enabled())
                                break c$1;
                              t8 = contact.get$toiCount();
                              if (typeof t8 !== "number")
                                throw t8.$gt();
                              if ($.$gt$n(t8, 10))
                                break c$1;
                              fixtureA = contact.get$fixtureA();
                              fixtureB = contact.get$fixtureB();
                              if (fixtureA.isSensor === true || fixtureB.isSensor === true)
                                break c$1;
                              bodyA = fixtureA.body;
                              bodyB = fixtureB.body;
                              t3.setFromShape$1(fixtureA.shape);
                              t4.setFromShape$1(fixtureB.shape);
                              t5.setFrom$1(bodyA.sweep);
                              t6.setFrom$1(bodyB.sweep);
                              t2.tMax = toi;
                              t7.timeOfImpact.timeOfImpact$2(t1, t2);
                              if (t1.state === 3) {
                                t8 = t1.t;
                                if (typeof t8 !== "number")
                                  throw t8.$lt();
                                t8 = $.$lt$n(t8, toi);
                              } else
                                t8 = false;
                            case 3:
                              if (state0 === 3 || state0 === 0 && t8)
                                switch (state0) {
                                  case 0:
                                    toi = t1.t;
                                  case 3:
                                    state0 = 0;
                                    toiOther = other;
                                    toiContact = contact;
                                    found = true;
                                }
                              ++count;
                          }
                        }
                        ce = ce.get$next();
                    }
                ++iter;
                if (!(found && count > 1 && iter < 50))
                  break L0;
            }
        if (toiContact == null) {
          body.advance$1(1);
          return;
        }
        t1 = this.backup;
        t1.setFrom$1(body.get$sweep());
        body.advance$1(toi);
        toiContact.update$1(this._contactManager.contactListener);
        t2 = toiContact.get$enabled();
      case 4:
        state0 = 0;
        if (!t2) {
          body.get$sweep().setFrom$1(t1);
          this.solveTimeOfImpactGivenBody$1(body);
        }
        t1 = toiContact.get$toiCount();
        if (typeof t1 !== "number")
          throw t1.$add();
        toiContact.set$toiCount($.$add$ns(t1, 1));
        t1 = this.contacts;
        if (t1.length < 32)
          this.contacts = $.List_List(32);
        ce = body.get$contactList();
        count = 0;
      case 5:
        L2:
          while (true)
            switch (state0) {
              case 0:
                if (!(ce != null && count < 32))
                  break L2;
              case 5:
                c$0: {
                  switch (state0) {
                    case 0:
                      other = ce.get$other();
                      other.get$type;
                      type = other._type;
                    case 5:
                      state0 = 0;
                      if ($.$eq(type, 2))
                        break c$0;
                      contact = ce.get$contact();
                      if (!contact.get$enabled())
                        break c$0;
                      fixtureA = contact.get$fixtureA();
                      fixtureB = contact.get$fixtureB();
                      if (fixtureA.isSensor === true || fixtureB.isSensor === true)
                        break c$0;
                      if (!$.$eq(contact, toiContact))
                        contact.update$1(this._contactManager.contactListener);
                      if (!contact.get$enabled())
                        break c$0;
                      if (!contact.get$touching())
                        break c$0;
                      t1 = this.contacts;
                      if (count >= t1.length)
                        throw $.ioore(count);
                      t1[count] = contact;
                      ++count;
                  }
                }
                ce = ce.get$next();
            }
        t1 = this.toiSolver;
        t1.initialize$3(this.contacts, count, body);
        for (i = 0; i < 20; ++i)
          if (t1.solve$1(0.75))
            break;
        toiOther.get$type;
        t1 = toiOther._type;
      case 6:
        var fixtureA, fixtureB, bodyA, bodyB, i;
        state0 = 0;
        if (!$.$eq(t1, 0)) {
          t1 = toiContact.get$flags();
          if (typeof t1 !== "number")
            throw t1.$or();
          toiContact.set$flags($.$or$n(t1, 16));
        }
    }
  },
  World$3: function(gravity, doSleep, argPool) {
    var t1, t2, i;
    this._contactManager = new $.ContactManager($.BroadPhase$(), null, 0, new $.ContactFilter(), null, this);
    for (t1 = this._contactStacks, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = $.List_List(2);
    this._initializeRegisters$0();
  }
},

WorldQueryWrapper: {"": "Object;broadPhase,callback"},

CircleContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collideCircles$5(argManifold, this.fixtureA.shape, xfA, this.fixtureB.shape, xfB);
  }
},

Contact: {"": "Object;flags@,prev@,next@,edge1<,edge2<,fixtureA<,fixtureB<,manifold@,toiCount@",
  init$2: function(fixA, fixB) {
    var t1;
    this.flags = 0;
    this.fixtureA = fixA;
    this.fixtureB = fixB;
    this.manifold.set$pointCount(0);
    this.prev = null;
    this.next = null;
    t1 = this.edge1;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    t1 = this.edge2;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    this.toiCount = 0;
  },
  get$touching: function() {
    return $.$and$n(this.flags, 2) === 2;
  },
  get$enabled: function() {
    return $.$and$n(this.flags, 4) === 4;
  },
  flagForFiltering$0: function() {
    this.flags = $.$or$n(this.flags, 8);
  },
  update$1: function(listener) {
    var t1, wasTouching, t2, sensorA, t3, sensorB, sensor, bodyA, bodyB, xfA, xfB, shapeA, shapeB, touching, i, t4, mp2, j, mp1;
    t1 = this._oldManifold;
    t1.setFrom$1(this.manifold);
    this.flags = $.$or$n(this.flags, 4);
    wasTouching = $.$and$n(this.flags, 2) === 2;
    t2 = this.fixtureA;
    sensorA = t2.isSensor;
    t3 = this.fixtureB;
    sensorB = t3.isSensor;
    sensor = sensorA === true || sensorB === true;
    bodyA = t2.body;
    bodyB = t3.body;
    xfA = bodyA.originTransform;
    xfB = bodyB.originTransform;
    if (sensor) {
      shapeA = t2.shape;
      shapeB = t3.shape;
      touching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
      this.manifold.set$pointCount(0);
    } else {
      this.evaluate$3(this.manifold, xfA, xfB);
      touching = $.$gt$n(this.manifold.get$pointCount(), 0);
      for (t2 = t1.points, t3 = t2.length, i = 0; t4 = this.manifold, $.JSNumber_methods.$lt(i, t4.get$pointCount()); ++i) {
        t4 = t4.get$points();
        if (i >= t4.length)
          throw $.ioore(i);
        mp2 = t4[i];
        mp2.set$normalImpulse(0);
        mp2.set$tangentImpulse(0);
        for (t4 = mp2.get$id().features, j = 0; $.JSNumber_methods.$lt(j, t1.pointCount); ++j) {
          if (j >= t3)
            throw $.ioore(j);
          mp1 = t2[j];
          if (t4.$eq(t4, mp1.get$id().features)) {
            mp2.set$normalImpulse(mp1.get$normalImpulse());
            mp2.set$tangentImpulse(mp1.get$tangentImpulse());
            break;
          }
        }
      }
      if (touching !== wasTouching) {
        bodyA.set$awake(true);
        bodyB.set$awake(true);
      }
    }
    t2 = this.flags;
    if (touching)
      this.flags = $.$or$n(t2, 2);
    else
      this.flags = $.$and$n(t2, 4294967293);
    if (listener == null)
      return;
    if (!wasTouching && touching)
      listener.beginContact$1(this);
    if (wasTouching && !touching)
      listener.endContact$1(this);
    if (!sensor && touching)
      listener.preSolve$2(this, t1);
  }
},

ContactConstraint: {"": "Object;points<,localNormal<,localPoint<,normal<,normalMass<,K<,bodyA@,bodyB@,type@,radius@,friction@,restitution@,pointCount@,manifold@",
  setFrom$1: function(cp) {
    var t1, t2, t3, t4, t5, i;
    this.pointCount = cp.get$pointCount();
    t1 = this.localNormal;
    t2 = cp.get$localNormal();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.localPoint;
    t1 = cp.get$localPoint();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    t1 = this.normal;
    t2 = cp.get$normal();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.normalMass;
    t1 = cp.get$normalMass();
    t3 = t2.col1;
    t4 = t1.get$col1();
    t3.setFrom$1;
    t5 = t4.x;
    t4 = t4.y;
    t3.x = t5;
    t3.y = t4;
    t2 = t2.col2;
    t1 = t1.get$col2();
    t2.setFrom$1;
    t4 = t1.x;
    t1 = t1.y;
    t2.x = t4;
    t2.y = t1;
    t1 = this.K;
    t2 = cp.get$K();
    t4 = t1.col1;
    t3 = t2.col1;
    t4.setFrom$1;
    t5 = t3.x;
    t3 = t3.y;
    t4.x = t5;
    t4.y = t3;
    t1 = t1.col2;
    t2 = t2.col2;
    t1.setFrom$1;
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    this.bodyA = cp.get$bodyA();
    this.bodyB = cp.get$bodyB();
    this.type = cp.get$type();
    this.radius = cp.get$radius();
    this.friction = cp.get$friction();
    this.restitution = cp.get$restitution();
    this.manifold = cp.get$manifold();
    for (t1 = this.points, t2 = t1.length, i = 0; $.JSNumber_methods.$lt(i, cp.get$pointCount()); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = cp.get$points();
      if (i >= t4.length)
        throw $.ioore(i);
      t3.setFrom$1(t4[i]);
    }
  },
  toString$0: function(_) {
    return "localNormal: \"" + $.S(this.localNormal) + "\", localPoint: \"" + $.S(this.localPoint) + "\" normal: \"" + $.S(this.normal) + "\", radius: \"" + $.S(this.radius) + "\" friction: \"" + $.S(this.friction) + "\" restitution: \"" + $.S(this.restitution) + "\", pointCount: \"" + $.S(this.pointCount) + "\"";
  },
  ContactConstraint$0: function() {
    var t1, t2, i, t3;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      t3 = $.ContactConstraintPoint$();
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = t3;
    }
  }
},

ContactConstraintPoint: {"": "Object;localPoint<,rA<,rB<,normalImpulse@,tangentImpulse@,normalMass@,tangentMass@,velocityBias@",
  setFrom$1: function(cp) {
    var t1, t2, t3;
    t1 = this.localPoint;
    t2 = cp.get$localPoint();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.rA;
    t1 = cp.get$rA();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    t1 = this.rB;
    t2 = cp.get$rB();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    this.normalImpulse = cp.get$normalImpulse();
    this.tangentImpulse = cp.get$tangentImpulse();
    this.normalMass = cp.get$normalMass();
    this.tangentMass = cp.get$tangentMass();
    this.velocityBias = cp.get$velocityBias();
  },
  toString$0: function(_) {
    return "normal impulse: " + $.S(this.normalImpulse) + ", tangentImpulse: " + $.S(this.tangentImpulse) + ", normalMass: " + $.S(this.normalMass) + ", tangentMass: " + $.S(this.tangentMass) + ", velocityBias: " + $.S(this.velocityBias) + ", localPoint: " + $.S(this.localPoint) + ", rA: " + $.S(this.rA) + ", rB: " + $.S(this.rB);
  }
},

ContactEdge: {"": "Object;other<,contact<,prev@,next@"},

ContactRegister: {"": "Object;creator<,primary<"},

ContactSolver: {"": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x<,d,P1,P2,psolver,rA<,rB<",
  init$3: function(contacts, contactCount, impulseRatio) {
    var t1, i, t2, t3, t4, t5, t6, t7, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, t8, friction, restitution, restitution0, vA, vB, wA, wB, cc, t9, t10, j, t11, cp, ccp, t12, t13, t14, rnA, rnB, rtA, rtB, a, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
    this.constraintCount = contactCount;
    t1 = this.constraints;
    i = t1.length;
    if (i < contactCount) {
      this.constraints = $.List_List($.max(i * 2, this.constraintCount));
      t2 = this.constraints;
      if (!!t2.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t2, 0, i, t1, 0);
      for (; t1 = this.constraints, i < t1.length; ++i)
        t1[i] = $.ContactConstraint$();
    }
    for (t1 = this.worldManifold, t2 = t1.points, t3 = t2.length, t4 = this.tangent, t5 = this.temp2, t6 = this.temp1, t7 = t1.normal, i = 0; $.JSNumber_methods.$lt(i, this.constraintCount); ++i) {
      if (i >= contacts.length)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      shapeA = fixtureA.shape;
      shapeB = fixtureB.shape;
      radiusA = shapeA.radius;
      radiusB = shapeB.radius;
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      manifold = contact.get$manifold();
      t8 = $.$mul$n(fixtureA.friction, fixtureB.friction);
      friction = Math.sqrt(t8);
      restitution = fixtureA.restitution;
      restitution0 = fixtureB.restitution;
      restitution = $.$gt$n(restitution, restitution0) ? restitution : restitution0;
      if (typeof restitution !== "number")
        return this.init$3$bailout(1, contacts, impulseRatio, t5, friction, radiusA, t7, radiusB, bodyA, i, t6, t1, t2, t3, bodyB, restitution, manifold, t4);
      bodyA.get$linearVelocity;
      vA = bodyA._linearVelocity;
      bodyB.get$linearVelocity;
      vB = bodyB._linearVelocity;
      bodyA.get$angularVelocity;
      wA = bodyA._angularVelocity;
      if (typeof wA !== "number")
        return this.init$3$bailout(2, contacts, impulseRatio, t5, friction, radiusA, t7, radiusB, bodyA, i, t6, t1, t2, t3, bodyB, restitution, manifold, t4, vA, vB, wA);
      bodyB.get$angularVelocity;
      wB = bodyB._angularVelocity;
      if (typeof wB !== "number")
        return this.init$3$bailout(3, contacts, impulseRatio, t5, friction, radiusA, t7, radiusB, bodyA, i, t6, t1, t2, t3, bodyB, restitution, manifold, t4, vA, vB, wA, wB);
      t1.initialize$5(manifold, bodyA.originTransform, radiusA, bodyB.originTransform, radiusB);
      t8 = this.constraints;
      if (i >= t8.length)
        throw $.ioore(i);
      cc = t8[i];
      cc.set$bodyA(bodyA);
      cc.set$bodyB(bodyB);
      cc.set$manifold(manifold);
      cc.get$normal().x = t7.x;
      cc.get$normal().y = t7.y;
      cc.set$pointCount(manifold.get$pointCount());
      cc.set$friction(friction);
      cc.set$restitution(restitution);
      cc.get$localNormal().x = manifold.get$localNormal().x;
      cc.get$localNormal().y = manifold.get$localNormal().y;
      cc.get$localPoint().x = manifold.get$localPoint().x;
      cc.get$localPoint().y = manifold.get$localPoint().y;
      cc.set$radius($.$add$ns(radiusA, radiusB));
      cc.set$type(manifold.get$type());
      for (t8 = -restitution, t9 = -wA, t10 = -wB, j = 0; t11 = cc.get$pointCount(), $.JSNumber_methods.$lt(j, t11); ++j) {
        t11 = manifold.get$points();
        if (j >= t11.length)
          throw $.ioore(j);
        cp = t11[j];
        t11 = cc.get$points();
        if (j >= t11.length)
          throw $.ioore(j);
        ccp = t11[j];
        t11 = cp.get$normalImpulse();
        if (typeof t11 !== "number")
          throw $.iae(t11);
        ccp.set$normalImpulse(impulseRatio * t11);
        t11 = cp.get$tangentImpulse();
        if (typeof t11 !== "number")
          throw $.iae(t11);
        ccp.set$tangentImpulse(impulseRatio * t11);
        ccp.get$localPoint().x = cp.get$localPoint().x;
        ccp.get$localPoint().y = cp.get$localPoint().y;
        t11 = ccp.get$rA();
        if (j >= t3)
          throw $.ioore(j);
        t12 = t2[j];
        t13 = bodyA.sweep.center;
        t11.x = $.$sub$n(t12.get$x(), t13.x);
        ccp.get$rA().y = $.$sub$n(t12.get$y(), t13.y);
        t13 = bodyB.sweep.center;
        ccp.get$rB().x = $.$sub$n(t12.get$x(), t13.x);
        ccp.get$rB().y = $.$sub$n(t12.get$y(), t13.y);
        t13 = ccp.get$rA();
        t12 = t13.x;
        t11 = cc.get$normal();
        t14 = t11.y;
        t12 = $.$mul$n(t12, t14);
        t13 = t13.y;
        t11 = t11.x;
        rnA = t12 - $.$mul$n(t13, t11);
        t13 = ccp.get$rB();
        rnB = $.$mul$n(t13.x, t14) - $.$mul$n(t13.y, t11);
        ccp.set$normalMass(1 / (bodyA.invMass + bodyB.invMass + bodyA.invInertia * (rnA * rnA) + bodyB.invInertia * (rnB * rnB)));
        t11 = cc.get$normal().y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t4.x = 1 * t11;
        t11 = cc.get$normal().x;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t4.y = -1 * t11;
        t11 = ccp.get$rA();
        t13 = t11.x;
        t14 = t4.y;
        t13 = $.$mul$n(t13, t14);
        t11 = t11.y;
        t12 = t4.x;
        rtA = t13 - $.$mul$n(t11, t12);
        t11 = ccp.get$rB();
        rtB = $.$mul$n(t11.x, t14) - $.$mul$n(t11.y, t12);
        ccp.set$tangentMass(1 / (bodyA.invMass + bodyB.invMass + bodyA.invInertia * (rtA * rtA) + bodyB.invInertia * (rtB * rtB)));
        ccp.set$velocityBias(0);
        t12 = ccp.get$rA().y;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t5.x = t9 * t12;
        t12 = ccp.get$rA().x;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t5.y = wA * t12;
        t12 = ccp.get$rB().y;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t11 = vB.x;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t14 = vA.x;
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t13 = t5.x;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t6.x = t10 * t12 + t11 - t14 - t13;
        t13 = ccp.get$rB().x;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t14 = vB.y;
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t11 = vA.y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t12 = t5.y;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t6.y = wB * t13 + t14 - t11 - t12;
        a = cc.get$normal();
        vRel = $.$mul$n(a.x, t6.x) + $.$mul$n(a.y, t6.y);
        if (vRel < -1)
          ccp.set$velocityBias(t8 * vRel);
      }
      if ($.$eq(t11, 2)) {
        t8 = cc.get$points();
        t9 = t8.length;
        if (0 >= t9)
          throw $.ioore(0);
        ccp1 = t8[0];
        if (1 >= t9)
          throw $.ioore(1);
        ccp2 = t8[1];
        invMassA = bodyA.invMass;
        invIA = bodyA.invInertia;
        invMassB = bodyB.invMass;
        invIB = bodyB.invInertia;
        t8 = ccp1.get$rA();
        t9 = cc.get$normal();
        t10 = t8.x;
        t11 = t9.y;
        t10 = $.$mul$n(t10, t11);
        t8 = t8.y;
        t9 = t9.x;
        rn1A = t10 - $.$mul$n(t8, t9);
        t8 = ccp1.get$rB();
        rn1B = $.$mul$n(t8.x, t11) - $.$mul$n(t8.y, t9);
        t8 = ccp2.get$rA();
        rn2A = $.$mul$n(t8.x, t11) - $.$mul$n(t8.y, t9);
        t8 = ccp2.get$rB();
        rn2B = $.$mul$n(t8.x, t11) - $.$mul$n(t8.y, t9);
        t9 = invMassA + invMassB;
        t8 = invIA * rn1A;
        t11 = invIB * rn1B;
        k11 = t9 + t8 * rn1A + t11 * rn1B;
        k22 = t9 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
        k12 = t9 + t8 * rn2A + t11 * rn2B;
        if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
          cc.get$K().col1.x = k11;
          cc.get$K().col1.y = k12;
          cc.get$K().col2.x = k12;
          cc.get$K().col2.y = k22;
          cc.get$normalMass().get$col1().x = cc.get$K().col1.x;
          cc.get$normalMass().get$col1().y = cc.get$K().col1.y;
          cc.get$normalMass().get$col2().x = cc.get$K().col2.x;
          cc.get$normalMass().get$col2().y = cc.get$K().col2.y;
          cc.get$normalMass().invertLocal$0();
        } else
          cc.set$pointCount(1);
      }
    }
  },
  init$3$bailout: function(state0, contacts, impulseRatio, t5, friction, radiusA, t7, radiusB, bodyA, i, t6, t1, t2, t3, bodyB, restitution, manifold, t4, vA, vB, wA, wB) {
    switch (state0) {
      case 0:
        this.constraintCount = contactCount;
        t1 = this.constraints;
        i = t1.length;
        if (i < contactCount) {
          this.constraints = $.List_List($.max(i * 2, this.constraintCount));
          t2 = this.constraints;
          if (!!t2.immutable$list)
            $.throwExpression(new $.UnsupportedError("set range"));
          $.IterableMixinWorkaround_setRangeList(t2, 0, i, t1, 0);
          for (; t1 = this.constraints, i < t1.length; ++i)
            t1[i] = $.ContactConstraint$();
        }
        t1 = this.worldManifold;
        t2 = t1.points;
        t3 = t2.length;
        t4 = this.tangent;
        t5 = this.temp2;
        t6 = this.temp1;
        t7 = t1.normal;
        i = 0;
      default:
        var contact, fixtureA, fixtureB, shapeA, shapeB, t8, restitution0, cc, t9, t10, j, t11, cp, ccp, t12, t13, t14, rnA, rnB, rtA, rtB, t15, a, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.JSNumber_methods.$lt(i, this.constraintCount))
                  break L0;
                if (i >= contacts.length)
                  throw $.ioore(i);
                contact = contacts[i];
                fixtureA = contact.get$fixtureA();
                fixtureB = contact.get$fixtureB();
                shapeA = fixtureA.shape;
                shapeB = fixtureB.shape;
                radiusA = shapeA.radius;
                radiusB = shapeB.radius;
                bodyA = fixtureA.body;
                bodyB = fixtureB.body;
                manifold = contact.get$manifold();
                t8 = $.$mul$n(fixtureA.friction, fixtureB.friction);
                friction = Math.sqrt(t8);
                restitution = fixtureA.restitution;
                restitution0 = fixtureB.restitution;
                restitution = $.$gt$n(restitution, restitution0) ? restitution : restitution0;
              case 1:
                state0 = 0;
                bodyA.get$linearVelocity;
                vA = bodyA._linearVelocity;
                bodyB.get$linearVelocity;
                vB = bodyB._linearVelocity;
                bodyA.get$angularVelocity;
                wA = bodyA._angularVelocity;
              case 2:
                state0 = 0;
                bodyB.get$angularVelocity;
                wB = bodyB._angularVelocity;
              case 3:
                state0 = 0;
                t1.initialize$5(manifold, bodyA.originTransform, radiusA, bodyB.originTransform, radiusB);
                t8 = this.constraints;
                if (i >= t8.length)
                  throw $.ioore(i);
                cc = t8[i];
                cc.set$bodyA(bodyA);
                cc.set$bodyB(bodyB);
                cc.set$manifold(manifold);
                cc.get$normal().x = t7.x;
                cc.get$normal().y = t7.y;
                cc.set$pointCount(manifold.get$pointCount());
                cc.set$friction(friction);
                cc.set$restitution(restitution);
                cc.get$localNormal().x = manifold.get$localNormal().x;
                cc.get$localNormal().y = manifold.get$localNormal().y;
                cc.get$localPoint().x = manifold.get$localPoint().x;
                cc.get$localPoint().y = manifold.get$localPoint().y;
                cc.set$radius($.$add$ns(radiusA, radiusB));
                cc.set$type(manifold.get$type());
                for (t8 = $.getInterceptor$n(restitution), t9 = $.getInterceptor$n(wA), t10 = $.getInterceptor$n(wB), j = 0; t11 = cc.get$pointCount(), $.JSNumber_methods.$lt(j, t11); ++j) {
                  t11 = manifold.get$points();
                  if (j >= t11.length)
                    throw $.ioore(j);
                  cp = t11[j];
                  t11 = cc.get$points();
                  if (j >= t11.length)
                    throw $.ioore(j);
                  ccp = t11[j];
                  t11 = cp.get$normalImpulse();
                  if (typeof t11 !== "number")
                    throw $.iae(t11);
                  ccp.set$normalImpulse(impulseRatio * t11);
                  t11 = cp.get$tangentImpulse();
                  if (typeof t11 !== "number")
                    throw $.iae(t11);
                  ccp.set$tangentImpulse(impulseRatio * t11);
                  ccp.get$localPoint().x = cp.get$localPoint().x;
                  ccp.get$localPoint().y = cp.get$localPoint().y;
                  t11 = ccp.get$rA();
                  if (j >= t3)
                    throw $.ioore(j);
                  t12 = t2[j];
                  t13 = bodyA.sweep.center;
                  t11.x = $.$sub$n(t12.get$x(), t13.x);
                  ccp.get$rA().y = $.$sub$n(t12.get$y(), t13.y);
                  t13 = bodyB.sweep.center;
                  ccp.get$rB().x = $.$sub$n(t12.get$x(), t13.x);
                  ccp.get$rB().y = $.$sub$n(t12.get$y(), t13.y);
                  t13 = ccp.get$rA();
                  t12 = t13.x;
                  t11 = cc.get$normal();
                  t14 = t11.y;
                  t12 = $.$mul$n(t12, t14);
                  t13 = t13.y;
                  t11 = t11.x;
                  rnA = t12 - $.$mul$n(t13, t11);
                  t13 = ccp.get$rB();
                  rnB = $.$mul$n(t13.x, t14) - $.$mul$n(t13.y, t11);
                  ccp.set$normalMass(1 / (bodyA.invMass + bodyB.invMass + bodyA.invInertia * (rnA * rnA) + bodyB.invInertia * (rnB * rnB)));
                  t11 = cc.get$normal().y;
                  if (typeof t11 !== "number")
                    throw $.iae(t11);
                  t4.x = 1 * t11;
                  t11 = cc.get$normal().x;
                  if (typeof t11 !== "number")
                    throw $.iae(t11);
                  t4.y = -1 * t11;
                  t11 = ccp.get$rA();
                  t13 = t11.x;
                  t14 = t4.y;
                  t13 = $.$mul$n(t13, t14);
                  t11 = t11.y;
                  t12 = t4.x;
                  rtA = t13 - $.$mul$n(t11, t12);
                  t11 = ccp.get$rB();
                  rtB = $.$mul$n(t11.x, t14) - $.$mul$n(t11.y, t12);
                  ccp.set$tangentMass(1 / (bodyA.invMass + bodyB.invMass + bodyA.invInertia * (rtA * rtA) + bodyB.invInertia * (rtB * rtB)));
                  ccp.set$velocityBias(0);
                  t12 = t9.$negate(wA);
                  t11 = ccp.get$rA().y;
                  if (typeof t11 !== "number")
                    throw $.iae(t11);
                  t5.x = t12 * t11;
                  t5.y = t9.$mul(wA, ccp.get$rA().x);
                  t11 = t10.$negate(wB);
                  t12 = ccp.get$rB().y;
                  if (typeof t12 !== "number")
                    throw $.iae(t12);
                  t14 = vB.x;
                  if (typeof t14 !== "number")
                    throw $.iae(t14);
                  t13 = vA.x;
                  if (typeof t13 !== "number")
                    throw $.iae(t13);
                  t15 = t5.x;
                  if (typeof t15 !== "number")
                    throw $.iae(t15);
                  t6.x = t11 * t12 + t14 - t13 - t15;
                  t15 = t10.$mul(wB, ccp.get$rB().x);
                  t13 = vB.y;
                  if (typeof t13 !== "number")
                    throw $.iae(t13);
                  t14 = vA.y;
                  if (typeof t14 !== "number")
                    throw $.iae(t14);
                  t12 = t5.y;
                  if (typeof t12 !== "number")
                    throw $.iae(t12);
                  t6.y = t15 + t13 - t14 - t12;
                  a = cc.get$normal();
                  vRel = $.$mul$n(a.x, t6.x) + $.$mul$n(a.y, t6.y);
                  if (vRel < -1)
                    ccp.set$velocityBias(t8.$negate(restitution) * vRel);
                }
                if ($.$eq(t11, 2)) {
                  t8 = cc.get$points();
                  t9 = t8.length;
                  if (0 >= t9)
                    throw $.ioore(0);
                  ccp1 = t8[0];
                  if (1 >= t9)
                    throw $.ioore(1);
                  ccp2 = t8[1];
                  invMassA = bodyA.invMass;
                  invIA = bodyA.invInertia;
                  invMassB = bodyB.invMass;
                  invIB = bodyB.invInertia;
                  t8 = ccp1.get$rA();
                  t9 = cc.get$normal();
                  t10 = t8.x;
                  t11 = t9.y;
                  t10 = $.$mul$n(t10, t11);
                  t8 = t8.y;
                  t9 = t9.x;
                  rn1A = t10 - $.$mul$n(t8, t9);
                  t8 = ccp1.get$rB();
                  rn1B = $.$mul$n(t8.x, t11) - $.$mul$n(t8.y, t9);
                  t8 = ccp2.get$rA();
                  rn2A = $.$mul$n(t8.x, t11) - $.$mul$n(t8.y, t9);
                  t8 = ccp2.get$rB();
                  rn2B = $.$mul$n(t8.x, t11) - $.$mul$n(t8.y, t9);
                  t9 = invMassA + invMassB;
                  t8 = invIA * rn1A;
                  t11 = invIB * rn1B;
                  k11 = t9 + t8 * rn1A + t11 * rn1B;
                  k22 = t9 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
                  k12 = t9 + t8 * rn2A + t11 * rn2B;
                  if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
                    cc.get$K().col1.x = k11;
                    cc.get$K().col1.y = k12;
                    cc.get$K().col2.x = k12;
                    cc.get$K().col2.y = k22;
                    cc.get$normalMass().get$col1().x = cc.get$K().col1.x;
                    cc.get$normalMass().get$col1().y = cc.get$K().col1.y;
                    cc.get$normalMass().get$col2().x = cc.get$K().col2.x;
                    cc.get$normalMass().get$col2().y = cc.get$K().col2.y;
                    cc.get$normalMass().invertLocal$0();
                  } else
                    cc.set$pointCount(1);
                }
                ++i;
            }
    }
  },
  warmStart$0: function() {
    var t1, i, t2, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, normal, t3, j, ccp, t4, t5, t6, Px, Py;
    for (t1 = this.tangent, i = 0; $.JSNumber_methods.$lt(i, this.constraintCount); ++i) {
      t2 = this.constraints;
      if (i >= t2.length)
        throw $.ioore(i);
      c = t2[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      invMassA = bodyA.get$invMass();
      invIA = bodyA.get$invInertia();
      invMassB = bodyB.get$invMass();
      invIB = bodyB.get$invInertia();
      normal = c.get$normal();
      t2 = normal.x;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t3 = normal.y;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t1.x = 1 * t3;
      t1.y = -1 * t2;
      for (j = 0; $.JSNumber_methods.$lt(j, c.get$pointCount()); ++j) {
        t2 = c.get$points();
        if (j >= t2.length)
          throw $.ioore(j);
        ccp = t2[j];
        t2 = ccp.get$normalImpulse();
        t3 = $.getInterceptor$n(t2);
        t4 = t3.$mul(t2, normal.x);
        t5 = ccp.get$tangentImpulse();
        t6 = $.getInterceptor$n(t5);
        Px = t4 + t6.$mul(t5, t1.x);
        Py = t3.$mul(t2, normal.y) + t6.$mul(t5, t1.y);
        t5 = bodyA.get$angularVelocity();
        t6 = ccp.get$rA();
        bodyA.set$angularVelocity($.$sub$n(t5, invIA * ($.$mul$n(t6.x, Py) - $.$mul$n(t6.y, Px))));
        t6 = bodyA.get$linearVelocity();
        t6.x = $.$sub$n(t6.x, Px * invMassA);
        t6 = bodyA.get$linearVelocity();
        t6.y = $.$sub$n(t6.y, Py * invMassA);
        t6 = bodyB.get$angularVelocity();
        t5 = ccp.get$rB();
        bodyB.set$angularVelocity($.$add$ns(t6, invIB * ($.$mul$n(t5.x, Py) - $.$mul$n(t5.y, Px))));
        t5 = bodyB.get$linearVelocity();
        t5.x = $.$add$ns(t5.x, Px * invMassB);
        t5 = bodyB.get$linearVelocity();
        t5.y = $.$add$ns(t5.y, Py * invMassB);
      }
    }
  },
  solveVelocityConstraints$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, i, t11, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, j, ccp, a, t12, t13, lambda, maxFriction, newImpulse, Px, Py, t14, t15, t16, a1, b, cp2, t17, t18, vn1, vn2;
    t1 = this.dv;
    t2 = this.tangent;
    t3 = this.d;
    t4 = this.x;
    t5 = this.P1;
    t6 = this.P2;
    t7 = this.temp1;
    t8 = this.temp2;
    t9 = this.dv1;
    t10 = this.dv2;
    i = 0;
    while (true) {
      t11 = this.constraintCount;
      if (typeof t11 !== "number")
        throw $.iae(t11);
      if (!(i < t11))
        break;
      t11 = this.constraints;
      if (i >= t11.length)
        throw $.ioore(i);
      c = t11[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.solveVelocityConstraints$0$bailout(1, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.solveVelocityConstraints$0$bailout(2, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      invMassA = bodyA.get$invMass();
      invIA = bodyA.get$invInertia();
      invMassB = bodyB.get$invMass();
      invIB = bodyB.get$invInertia();
      t11 = c.get$normal().y;
      if (typeof t11 !== "number")
        throw $.iae(t11);
      t2.x = 1 * t11;
      t11 = c.get$normal().x;
      if (typeof t11 !== "number")
        throw $.iae(t11);
      t2.y = -1 * t11;
      friction = c.get$friction();
      if (typeof friction !== "number")
        return this.solveVelocityConstraints$0$bailout(3, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB);
      j = 0;
      while (true) {
        t11 = c.get$pointCount();
        if (typeof t11 !== "number")
          throw $.iae(t11);
        if (!(j < t11))
          break;
        t11 = c.get$points();
        if (j >= t11.length)
          throw $.ioore(j);
        ccp = t11[j];
        a = ccp.get$rA();
        t11 = ccp.get$rB().y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t12 = vB.x;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t13 = vA.x;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t13 = -wB * t11 + t12 - t13;
        t12 = a.y;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(4, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, a, $.JSNumber_methods, ccp, j, $.JSDouble_methods, t13, t12);
        t1.x = t13 + wA * t12;
        t12 = ccp.get$rB().x;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(5, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, a, $.JSNumber_methods, ccp, j, $.JSDouble_methods, 0, t12, $.JSNumber_methods);
        t13 = vB.y;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t11 = vA.y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t11 = wB * t12 + t13 - t11;
        t13 = a.x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(6, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.JSNumber_methods, ccp, j, $.JSDouble_methods, t13, 0, $.JSNumber_methods, t11);
        t1.y = t11 - wA * t13;
        t13 = t1.x;
        t11 = t2.x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(7, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.JSNumber_methods, ccp, j, $.JSDouble_methods, t13, 0, $.JSNumber_methods, t11);
        if (typeof t13 !== "number")
          throw t13.$mul();
        t11 = t13 * t11;
        t13 = t1.y;
        t12 = t2.y;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(8, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.JSNumber_methods, ccp, j, $.JSDouble_methods, t13, t12, $.JSNumber_methods, t11);
        if (typeof t13 !== "number")
          throw t13.$mul();
        lambda = ccp.get$tangentMass() * -(t11 + t13 * t12);
        t12 = ccp.get$normalImpulse();
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(9, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.JSNumber_methods, ccp, j, $.JSDouble_methods, 0, t12, $.JSNumber_methods, 0, lambda);
        maxFriction = friction * t12;
        t12 = ccp.get$tangentImpulse();
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(10, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.JSNumber_methods, ccp, j, $.JSDouble_methods, 0, t12, $.JSNumber_methods, 0, lambda, maxFriction);
        newImpulse = $.max(-maxFriction, $.min(t12 + lambda, maxFriction));
        t12 = ccp.get$tangentImpulse();
        if (typeof t12 !== "number")
          throw $.iae(t12);
        lambda = newImpulse - t12;
        t12 = t2.x;
        if (typeof t12 !== "number")
          throw t12.$mul();
        Px = t12 * lambda;
        t12 = t2.y;
        if (typeof t12 !== "number")
          throw t12.$mul();
        Py = t12 * lambda;
        t12 = vA.x;
        if (typeof t12 !== "number")
          throw t12.$sub();
        vA.x = t12 - Px * invMassA;
        t12 = vA.y;
        if (typeof t12 !== "number")
          throw t12.$sub();
        vA.y = t12 - Py * invMassA;
        t12 = ccp.get$rA();
        t13 = t12.x;
        if (typeof t13 !== "number")
          throw t13.$mul();
        t12 = t12.y;
        if (typeof t12 !== "number")
          throw t12.$mul();
        wA -= invIA * (t13 * Py - t12 * Px);
        t12 = vB.x;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(11, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.JSNumber_methods, ccp, j, $.JSDouble_methods, 0, t12, 0, 0, 0, 0, newImpulse, Px, Py);
        vB.x = t12 + Px * invMassB;
        t12 = vB.y;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(12, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.JSNumber_methods, ccp, j, $.JSDouble_methods, 0, t12, 0, 0, 0, 0, newImpulse, Px, Py);
        vB.y = t12 + Py * invMassB;
        t12 = ccp.get$rB();
        t13 = t12.x;
        if (typeof t13 !== "number")
          throw t13.$mul();
        t12 = t12.y;
        if (typeof t12 !== "number")
          throw t12.$mul();
        wB += invIB * (t13 * Py - t12 * Px);
        ccp.set$tangentImpulse(newImpulse);
        ++j;
      }
      t12 = c.get$points();
      t13 = vA.x;
      t14 = vB.x;
      t15 = t12.length;
      t16 = -wB;
      ccp = t12[0];
      if (t11 === 1) {
        if (0 >= t15)
          throw $.ioore(0);
        a1 = ccp.get$rA();
        t11 = ccp.get$rB().y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        if (typeof t14 !== "number")
          throw $.iae(t14);
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t13 = t16 * t11 + t14 - t13;
        t14 = a1.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(13, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, ccp, 0, 0, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, a1);
        t1.x = t13 + wA * t14;
        t14 = ccp.get$rB().x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(14, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, ccp, 0, 0, $.JSNumber_methods, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, a1);
        t13 = vB.y;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t11 = vA.y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t11 = wB * t14 + t13 - t11;
        t13 = a1.x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(15, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t11, ccp, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, t13);
        t1.y = t11 - wA * t13;
        b = c.get$normal();
        t13 = t1.x;
        t11 = b.x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(16, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t11, ccp, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, t13, 0, 0, 0, 0, 0, 0, b);
        if (typeof t13 !== "number")
          throw t13.$mul();
        t13 *= t11;
        t14 = t1.y;
        t16 = b.y;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(17, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t11, ccp, 0, t16, $.JSNumber_methods, $.JSNumber_methods, t14, t13);
        if (typeof t14 !== "number")
          throw t14.$mul();
        t12 = ccp.get$normalMass();
        if (typeof t12 !== "number")
          throw t12.$negate();
        lambda = -t12 * (t13 + t14 * t16 - ccp.get$velocityBias());
        t14 = ccp.get$normalImpulse();
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(18, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t11, ccp, 0, t16, $.JSNumber_methods, $.JSNumber_methods, t14, 0, lambda);
        a = t14 + lambda;
        newImpulse = a > 0 ? a : 0;
        lambda = newImpulse - t14;
        Px = t11 * lambda;
        Py = t16 * lambda;
        t11 = vA.x;
        if (typeof t11 !== "number")
          throw t11.$sub();
        vA.x = t11 - Px * invMassA;
        t11 = vA.y;
        if (typeof t11 !== "number")
          throw t11.$sub();
        vA.y = t11 - Py * invMassA;
        t11 = ccp.get$rA();
        t12 = t11.x;
        if (typeof t12 !== "number")
          throw t12.$mul();
        t11 = t11.y;
        if (typeof t11 !== "number")
          throw t11.$mul();
        wA -= invIA * (t12 * Py - t11 * Px);
        t11 = vB.x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(19, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, 0, invMassB, invIB, 0, 0, ccp, 0, t11, $.JSNumber_methods, 0, 0, 0, 0, 0, newImpulse, Px, Py);
        vB.x = t11 + Px * invMassB;
        t11 = vB.y;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(20, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, 0, invMassB, invIB, 0, 0, ccp, 0, t11, $.JSNumber_methods, 0, 0, 0, 0, 0, newImpulse, Px, Py);
        vB.y = t11 + Py * invMassB;
        t11 = ccp.get$rB();
        t12 = t11.x;
        if (typeof t12 !== "number")
          throw t12.$mul();
        t11 = t11.y;
        if (typeof t11 !== "number")
          throw t11.$mul();
        wB += invIB * (t12 * Py - t11 * Px);
        ccp.set$normalImpulse(newImpulse);
      } else {
        if (0 >= t15)
          throw $.ioore(0);
        if (1 >= t15)
          throw $.ioore(1);
        cp2 = t12[1];
        a = new $.Vector(ccp.get$normalImpulse(), cp2.get$normalImpulse());
        t11 = ccp.get$rB().y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        if (typeof t14 !== "number")
          throw $.iae(t14);
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t13 = t16 * t11 + t14 - t13;
        t14 = ccp.get$rA().y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(21, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t9.x = t13 + wA * t14;
        t14 = ccp.get$rB().x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(22, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t13 = vB.y;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t11 = vA.y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t11 = wB * t14 + t13 - t11;
        t13 = ccp.get$rA().x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(23, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t9.y = t11 - wA * t13;
        t13 = cp2.get$rB().y;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t11 = vB.x;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t14 = vA.x;
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t14 = t16 * t13 + t11 - t14;
        t11 = cp2.get$rA().y;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(24, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, t14, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, t11, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t10.x = t14 + wA * t11;
        t11 = cp2.get$rB().x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(25, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, t11, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t14 = vB.y;
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t13 = vA.y;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t13 = wB * t11 + t14 - t13;
        t14 = cp2.get$rA().x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(26, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, t14, 0, 0, t13, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t10.y = t13 - wA * t14;
        t14 = t9.x;
        t13 = c.get$normal();
        t11 = t13.x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(27, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, t14, 0, 0, t13, $.JSNumber_methods, $.JSNumber_methods, t11, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        if (typeof t14 !== "number")
          throw t14.$mul();
        t14 *= t11;
        t16 = t9.y;
        t13 = t13.y;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(28, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, t14, 0, 0, t13, $.JSNumber_methods, $.JSNumber_methods, t11, t16, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        if (typeof t16 !== "number")
          throw t16.$mul();
        t12 = t10.x;
        if (typeof t12 !== "number")
          throw t12.$mul();
        t15 = t10.y;
        if (typeof t15 !== "number")
          throw t15.$mul();
        b = new $.Vector(t14 + t16 * t13 - ccp.get$velocityBias(), t12 * t11 + t15 * t13 - cp2.get$velocityBias());
        t13 = c.get$K();
        t15 = t13.col1.x;
        t11 = a.x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(29, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, t13, $.JSNumber_methods, $.JSNumber_methods, t15, t11, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        if (typeof t15 !== "number")
          throw t15.$mul();
        t11 = t15 * t11;
        t13 = t13.col2.x;
        t15 = a.y;
        if (typeof t15 !== "number")
          return this.solveVelocityConstraints$0$bailout(30, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, t13, $.JSNumber_methods, $.JSNumber_methods, t15, t11, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        if (typeof t13 !== "number")
          throw t13.$mul();
        t8.x = t11 + t13 * t15;
        t15 = c.get$K();
        t13 = t15.col1.y;
        t11 = a.x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(31, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, t13, $.JSNumber_methods, $.JSNumber_methods, t15, t11, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        if (typeof t13 !== "number")
          throw t13.$mul();
        t11 = t13 * t11;
        t15 = t15.col2.y;
        t13 = a.y;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(32, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, t13, $.JSNumber_methods, $.JSNumber_methods, t15, t11, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        if (typeof t15 !== "number")
          throw t15.$mul();
        t8.y = t11 + t15 * t13;
        t13 = b.x;
        t15 = t8.x;
        if (typeof t15 !== "number")
          return this.solveVelocityConstraints$0$bailout(33, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, t13, $.JSNumber_methods, $.JSNumber_methods, t15, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        if (typeof t13 !== "number")
          throw t13.$sub();
        b.x = t13 - t15;
        t15 = b.y;
        t13 = t8.y;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(34, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, t13, $.JSNumber_methods, $.JSNumber_methods, t15, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        if (typeof t15 !== "number")
          throw t15.$sub();
        b.y = t15 - t13;
        $loop$1: {
          $.Matrix22_mulMatrixAndVectorToOut(c.get$normalMass(), b, t4);
          t11 = t4.x;
          if (typeof t11 !== "number")
            throw t11.$mul();
          t4.x = t11 * -1;
          t11 = t4.y;
          if (typeof t11 !== "number")
            throw t11.$mul();
          t4.y = t11 * -1;
          t11 = t4.x;
          if (typeof t11 !== "number")
            throw t11.$ge();
          if (t11 >= 0) {
            t12 = t4.y;
            if (typeof t12 !== "number")
              throw t12.$ge();
            t12 = t12 >= 0;
          } else
            t12 = false;
          if (t12) {
            t12 = t4.y;
            t3.x = t11;
            t3.y = t12;
            t12 = t3.x;
            t11 = a.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(35, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$sub();
            t3.x = t12 - t11;
            t11 = t3.y;
            t12 = a.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(36, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$sub();
            t3.y = t11 - t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t5.x = t11;
            t5.y = t12;
            t12 = t3.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(37, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t5.x;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t5.x = t11 * t12;
            t11 = t5.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t5.y = t11 * t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t6.x = t11;
            t6.y = t12;
            t12 = t3.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(38, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.x;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t6.x = t11 * t12;
            t11 = t6.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t6.y = t11 * t12;
            t12 = t5.x;
            t11 = t5.y;
            t7.x = t12;
            t7.y = t11;
            t11 = t7.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(39, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t6.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(40, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.x = t11 + t12;
            t12 = t7.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(41, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(42, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.y = t12 + t11;
            t11 = t7.x;
            t12 = t7.y;
            t8.x = t11;
            t8.y = t12;
            t12 = t8.x;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t8.x = t12 * invMassA;
            t12 = t8.y;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t8.y = t12 * invMassA;
            t12 = vA.x;
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(43, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$sub();
            vA.x = t12 - t11;
            t11 = vA.y;
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(44, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$sub();
            vA.y = t11 - t12;
            t12 = t7.x;
            t11 = t7.y;
            t8.x = t12;
            t8.y = t11;
            t11 = t8.x;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t8.x = t11 * invMassB;
            t11 = t8.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t8.y = t11 * invMassB;
            t11 = vB.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(45, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(46, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.x = t11 + t12;
            t12 = vB.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(47, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(48, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.y = t12 + t11;
            t11 = ccp.get$rA();
            t12 = t11.x;
            t13 = t5.y;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(49, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$mul();
            t12 *= t13;
            t11 = t11.y;
            t14 = t5.x;
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(50, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$mul();
            t11 = t12 - t11 * t14;
            t12 = cp2.get$rA();
            t15 = t12.x;
            t16 = t6.y;
            if (typeof t16 !== "number")
              return this.solveVelocityConstraints$0$bailout(51, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, t15, t16);
            if (typeof t15 !== "number")
              throw t15.$mul();
            t15 *= t16;
            t12 = t12.y;
            t17 = t6.x;
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(52, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, t15, t16, t17);
            if (typeof t12 !== "number")
              throw t12.$mul();
            wA -= invIA * (t11 + (t15 - t12 * t17));
            t12 = ccp.get$rB();
            t15 = t12.x;
            if (typeof t15 !== "number")
              throw t15.$mul();
            t12 = t12.y;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t11 = cp2.get$rB();
            t18 = t11.x;
            if (typeof t18 !== "number")
              throw t18.$mul();
            t11 = t11.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            wB += invIB * (t15 * t13 - t12 * t14 + (t18 * t16 - t11 * t17));
            ccp.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          t11 = ccp.get$normalMass();
          if (typeof t11 !== "number")
            throw t11.$negate();
          t12 = b.x;
          if (typeof t12 !== "number")
            throw $.iae(t12);
          t4.x = -t11 * t12;
          t4.y = 0;
          t12 = c.get$K().col1.y;
          t11 = t4.x;
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(53, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          if (typeof t12 !== "number")
            throw t12.$mul();
          t13 = b.y;
          if (typeof t13 !== "number")
            throw $.iae(t13);
          if (t11 >= 0 && t12 * t11 + t13 >= 0) {
            t12 = t4.y;
            t3.x = t11;
            t3.y = t12;
            t12 = t3.x;
            t11 = a.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(54, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$sub();
            t3.x = t12 - t11;
            t11 = t3.y;
            t12 = a.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(55, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$sub();
            t3.y = t11 - t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t5.x = t11;
            t5.y = t12;
            t12 = t3.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(56, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t5.x;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t5.x = t11 * t12;
            t11 = t5.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t5.y = t11 * t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t6.x = t11;
            t6.y = t12;
            t12 = t3.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(57, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.x;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t6.x = t11 * t12;
            t11 = t6.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t6.y = t11 * t12;
            t12 = t5.x;
            t11 = t5.y;
            t7.x = t12;
            t7.y = t11;
            t11 = t7.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(58, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t6.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(59, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.x = t11 + t12;
            t12 = t7.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(60, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(61, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.y = t12 + t11;
            t11 = t7.x;
            t12 = t7.y;
            t8.x = t11;
            t8.y = t12;
            t12 = t8.x;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t8.x = t12 * invMassA;
            t12 = t8.y;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t8.y = t12 * invMassA;
            t12 = vA.x;
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(62, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$sub();
            vA.x = t12 - t11;
            t11 = vA.y;
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(63, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$sub();
            vA.y = t11 - t12;
            t12 = t7.x;
            t11 = t7.y;
            t8.x = t12;
            t8.y = t11;
            t11 = t8.x;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t8.x = t11 * invMassB;
            t11 = t8.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t8.y = t11 * invMassB;
            t11 = vB.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(64, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(65, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.x = t11 + t12;
            t12 = vB.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(66, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(67, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.y = t12 + t11;
            t11 = ccp.get$rA();
            t12 = t11.x;
            t13 = t5.y;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(68, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$mul();
            t12 *= t13;
            t11 = t11.y;
            t14 = t5.x;
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(69, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$mul();
            t11 = t12 - t11 * t14;
            t12 = cp2.get$rA();
            t15 = t12.x;
            t16 = t6.y;
            if (typeof t16 !== "number")
              return this.solveVelocityConstraints$0$bailout(70, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, t15, t16);
            if (typeof t15 !== "number")
              throw t15.$mul();
            t15 *= t16;
            t12 = t12.y;
            t17 = t6.x;
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(71, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, t15, t16, t17);
            if (typeof t12 !== "number")
              throw t12.$mul();
            wA -= invIA * (t11 + (t15 - t12 * t17));
            t12 = ccp.get$rB();
            t15 = t12.x;
            if (typeof t15 !== "number")
              throw t15.$mul();
            t12 = t12.y;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t11 = cp2.get$rB();
            t18 = t11.x;
            if (typeof t18 !== "number")
              throw t18.$mul();
            t11 = t11.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            wB += invIB * (t15 * t13 - t12 * t14 + (t18 * t16 - t11 * t17));
            ccp.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          t4.x = 0;
          t11 = cp2.get$normalMass();
          if (typeof t11 !== "number")
            throw t11.$negate();
          t12 = b.y;
          if (typeof t12 !== "number")
            throw $.iae(t12);
          t4.y = -t11 * t12;
          t12 = c.get$K().col2.x;
          t11 = t4.y;
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(72, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          if (typeof t12 !== "number")
            throw t12.$mul();
          t13 = b.x;
          if (typeof t13 !== "number")
            throw $.iae(t13);
          if (t11 >= 0 && t12 * t11 + t13 >= 0) {
            t3.x = t4.x;
            t3.y = t11;
            t11 = t3.x;
            t12 = a.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(73, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$sub();
            t3.x = t11 - t12;
            t12 = t3.y;
            t11 = a.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(74, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$sub();
            t3.y = t12 - t11;
            t11 = c.get$normal();
            t12 = t11.x;
            t11 = t11.y;
            t5.x = t12;
            t5.y = t11;
            t11 = t3.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(75, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t5.x;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t5.x = t12 * t11;
            t12 = t5.y;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t5.y = t12 * t11;
            t11 = c.get$normal();
            t12 = t11.x;
            t11 = t11.y;
            t6.x = t12;
            t6.y = t11;
            t11 = t3.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(76, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t6.x;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t6.x = t12 * t11;
            t12 = t6.y;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t6.y = t12 * t11;
            t11 = t5.x;
            t12 = t5.y;
            t7.x = t11;
            t7.y = t12;
            t12 = t7.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(77, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(78, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.x = t12 + t11;
            t11 = t7.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(79, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t6.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(80, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.y = t11 + t12;
            t12 = t7.x;
            t11 = t7.y;
            t8.x = t12;
            t8.y = t11;
            t11 = t8.x;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t8.x = t11 * invMassA;
            t11 = t8.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t8.y = t11 * invMassA;
            t11 = vA.x;
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(81, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$sub();
            vA.x = t11 - t12;
            t12 = vA.y;
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(82, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$sub();
            vA.y = t12 - t11;
            t11 = t7.x;
            t12 = t7.y;
            t8.x = t11;
            t8.y = t12;
            t12 = t8.x;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t8.x = t12 * invMassB;
            t12 = t8.y;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t8.y = t12 * invMassB;
            t12 = vB.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(83, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(84, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.x = t12 + t11;
            t11 = vB.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(85, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(86, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.y = t11 + t12;
            t12 = ccp.get$rA();
            t11 = t12.x;
            t13 = t5.y;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(87, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$mul();
            t11 *= t13;
            t12 = t12.y;
            t14 = t5.x;
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(88, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$mul();
            t12 = t11 - t12 * t14;
            t11 = cp2.get$rA();
            t15 = t11.x;
            t16 = t6.y;
            if (typeof t16 !== "number")
              return this.solveVelocityConstraints$0$bailout(89, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, t15, t16);
            if (typeof t15 !== "number")
              throw t15.$mul();
            t15 *= t16;
            t11 = t11.y;
            t17 = t6.x;
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(90, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, t15, t16, t17);
            if (typeof t11 !== "number")
              throw t11.$mul();
            wA -= invIA * (t12 + (t15 - t11 * t17));
            t11 = ccp.get$rB();
            t15 = t11.x;
            if (typeof t15 !== "number")
              throw t15.$mul();
            t11 = t11.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t12 = cp2.get$rB();
            t18 = t12.x;
            if (typeof t18 !== "number")
              throw t18.$mul();
            t12 = t12.y;
            if (typeof t12 !== "number")
              throw t12.$mul();
            wB += invIB * (t15 * t13 - t11 * t14 + (t18 * t16 - t12 * t17));
            ccp.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          t4.x = 0;
          t4.y = 0;
          vn1 = b.x;
          if (typeof vn1 !== "number")
            return this.solveVelocityConstraints$0$bailout(91, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2, 0, 0, 0, vn1);
          vn2 = b.y;
          if (typeof vn2 !== "number")
            return this.solveVelocityConstraints$0$bailout(92, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, 0, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, 0, 0, 0, vn1, vn2);
          if (vn1 >= 0 && vn2 >= 0) {
            t11 = t4.x;
            t12 = t4.y;
            t3.x = t11;
            t3.y = t12;
            t12 = t3.x;
            t11 = a.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(93, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, a, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$sub();
            t3.x = t12 - t11;
            t11 = t3.y;
            t12 = a.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(94, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$sub();
            t3.y = t11 - t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t5.x = t11;
            t5.y = t12;
            t12 = t3.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(95, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t5.x;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t5.x = t11 * t12;
            t11 = t5.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t5.y = t11 * t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t6.x = t11;
            t6.y = t12;
            t12 = t3.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(96, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.x;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t6.x = t11 * t12;
            t11 = t6.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t6.y = t11 * t12;
            t12 = t5.x;
            t11 = t5.y;
            t7.x = t12;
            t7.y = t11;
            t11 = t7.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(97, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t6.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(98, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.x = t11 + t12;
            t12 = t7.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(99, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(100, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.y = t12 + t11;
            t11 = t7.x;
            t12 = t7.y;
            t8.x = t11;
            t8.y = t12;
            t12 = t8.x;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t8.x = t12 * invMassA;
            t12 = t8.y;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t8.y = t12 * invMassA;
            t12 = vA.x;
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(101, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$sub();
            vA.x = t12 - t11;
            t11 = vA.y;
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(102, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$sub();
            vA.y = t11 - t12;
            t12 = t7.x;
            t11 = t7.y;
            t8.x = t12;
            t8.y = t11;
            t11 = t8.x;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t8.x = t11 * invMassB;
            t11 = t8.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            t8.y = t11 * invMassB;
            t11 = vB.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(103, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, 0, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(104, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.x = t11 + t12;
            t12 = vB.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(105, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, 0, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(106, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.y = t12 + t11;
            t11 = ccp.get$rA();
            t12 = t11.x;
            t13 = t5.y;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(107, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, 0, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t12 !== "number")
              throw t12.$mul();
            t12 *= t13;
            t11 = t11.y;
            t14 = t5.x;
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(108, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            if (typeof t11 !== "number")
              throw t11.$mul();
            t11 = t12 - t11 * t14;
            t12 = cp2.get$rA();
            t15 = t12.x;
            t16 = t6.y;
            if (typeof t16 !== "number")
              return this.solveVelocityConstraints$0$bailout(109, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, t15, t16);
            if (typeof t15 !== "number")
              throw t15.$mul();
            t15 *= t16;
            t12 = t12.y;
            t17 = t6.x;
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(110, t5, t1, i, t6, t9, 0, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, t11, $.JSNumber_methods, $.JSNumber_methods, t14, t13, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, t15, t16, t17);
            if (typeof t12 !== "number")
              throw t12.$mul();
            wA -= invIA * (t11 + (t15 - t12 * t17));
            t12 = ccp.get$rB();
            t15 = t12.x;
            if (typeof t15 !== "number")
              throw t15.$mul();
            t12 = t12.y;
            if (typeof t12 !== "number")
              throw t12.$mul();
            t11 = cp2.get$rB();
            t18 = t11.x;
            if (typeof t18 !== "number")
              throw t18.$mul();
            t11 = t11.y;
            if (typeof t11 !== "number")
              throw t11.$mul();
            wB += invIB * (t15 * t13 - t12 * t14 + (t18 * t16 - t11 * t17));
            ccp.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          break $loop$1;
        }
      }
      t11 = bodyA.get$linearVelocity();
      t12 = vA.x;
      t13 = vA.y;
      t11.x = t12;
      t11.y = t13;
      bodyA.set$angularVelocity(wA);
      t13 = bodyB.get$linearVelocity();
      t11 = vB.x;
      t12 = vB.y;
      t13.x = t11;
      t13.y = t12;
      bodyB.set$angularVelocity(wB);
      ++i;
    }
  },
  solveVelocityConstraints$0$bailout: function(state0, t5, t1, i, t6, t9, c, bodyA, bodyB, t10, wA, t7, t3, t4, t2, t8, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, a, t12, ccp, j, t11, t16, t15, t14, t13, lambda, maxFriction, newImpulse, Px, Py, a1, b, cp1, cp2, t17, t18, t19, vn1, vn2) {
    switch (state0) {
      case 0:
        t1 = this.dv;
        t2 = this.tangent;
        t3 = this.d;
        t4 = this.x;
        t5 = this.P1;
        t6 = this.P2;
        t7 = this.temp1;
        t8 = this.temp2;
        t9 = this.dv1;
        t10 = this.dv2;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t11 = this.constraintCount;
                if (typeof t11 !== "number")
                  throw $.iae(t11);
                if (!$.JSNumber_methods.$lt(i, t11))
                  break L0;
                t11 = this.constraints;
                if (i >= t11.length)
                  throw $.ioore(i);
                c = t11[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                wA = bodyA.get$angularVelocity();
              case 1:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 2:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                invMassA = bodyA.get$invMass();
                invIA = bodyA.get$invInertia();
                invMassB = bodyB.get$invMass();
                invIB = bodyB.get$invInertia();
                t11 = c.get$normal().y;
                if (typeof t11 !== "number")
                  throw $.iae(t11);
                t2.x = 1 * t11;
                t11 = c.get$normal().x;
                if (typeof t11 !== "number")
                  throw $.iae(t11);
                t2.y = -1 * t11;
                friction = c.get$friction();
              case 3:
                state0 = 0;
                t11 = $.getInterceptor$n(friction);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t12 = c.get$pointCount();
                        if (typeof t12 !== "number")
                          throw $.iae(t12);
                        if (!$.JSNumber_methods.$lt(j, t12))
                          break L1;
                        t12 = c.get$points();
                        if (j >= t12.length)
                          throw $.ioore(j);
                        ccp = t12[j];
                        a = ccp.get$rA();
                        t12 = $.getInterceptor$n(wB);
                        t13 = t12.$negate(wB);
                        t14 = ccp.get$rB().y;
                        if (typeof t14 !== "number")
                          throw $.iae(t14);
                        t15 = vB.x;
                        if (typeof t15 !== "number")
                          throw $.iae(t15);
                        t16 = vA.x;
                        if (typeof t16 !== "number")
                          throw $.iae(t16);
                        t16 = t13 * t14 + t15 - t16;
                        t15 = a.y;
                      case 4:
                        state0 = 0;
                        t14 = $.getInterceptor$n(wA);
                        t1.x = t16 + t14.$mul(wA, t15);
                        t15 = ccp.get$rB().x;
                      case 5:
                        state0 = 0;
                        t15 = t12.$mul(wB, t15);
                        t16 = vB.y;
                        if (typeof t16 !== "number")
                          throw $.iae(t16);
                        t13 = vA.y;
                        if (typeof t13 !== "number")
                          throw $.iae(t13);
                        t13 = t15 + t16 - t13;
                        t16 = a.x;
                      case 6:
                        state0 = 0;
                        t1.y = t13 - t14.$mul(wA, t16);
                        t16 = t1.x;
                        t13 = t2.x;
                      case 7:
                        state0 = 0;
                        if (typeof t16 !== "number")
                          throw t16.$mul();
                        t13 = $.$mul$n(t16, t13);
                        t16 = t1.y;
                        t15 = t2.y;
                      case 8:
                        state0 = 0;
                        if (typeof t16 !== "number")
                          throw t16.$mul();
                        t15 = $.$mul$n(t16, t15);
                        lambda = ccp.get$tangentMass() * -(t13 + t15);
                        t15 = ccp.get$normalImpulse();
                      case 9:
                        state0 = 0;
                        maxFriction = t11.$mul(friction, t15);
                        t15 = ccp.get$tangentImpulse();
                      case 10:
                        state0 = 0;
                        newImpulse = $.max(-maxFriction, $.min($.$add$ns(t15, lambda), maxFriction));
                        t15 = ccp.get$tangentImpulse();
                        if (typeof t15 !== "number")
                          throw $.iae(t15);
                        lambda = newImpulse - t15;
                        t15 = t2.x;
                        if (typeof t15 !== "number")
                          throw t15.$mul();
                        Px = $.$mul$n(t15, lambda);
                        t15 = t2.y;
                        if (typeof t15 !== "number")
                          throw t15.$mul();
                        Py = $.$mul$n(t15, lambda);
                        t15 = vA.x;
                        if (typeof t15 !== "number")
                          throw t15.$sub();
                        vA.x = $.$sub$n(t15, Px * invMassA);
                        t15 = vA.y;
                        if (typeof t15 !== "number")
                          throw t15.$sub();
                        vA.y = $.$sub$n(t15, Py * invMassA);
                        t15 = ccp.get$rA();
                        t13 = t15.x;
                        if (typeof t13 !== "number")
                          throw t13.$mul();
                        t13 = $.$mul$n(t13, Py);
                        t15 = t15.y;
                        if (typeof t15 !== "number")
                          throw t15.$mul();
                        wA = t14.$sub(wA, invIA * (t13 - $.$mul$n(t15, Px)));
                        t15 = vB.x;
                      case 11:
                        state0 = 0;
                        vB.x = $.$add$ns(t15, Px * invMassB);
                        t15 = vB.y;
                      case 12:
                        state0 = 0;
                        vB.y = $.$add$ns(t15, Py * invMassB);
                        t15 = ccp.get$rB();
                        t13 = t15.x;
                        if (typeof t13 !== "number")
                          throw t13.$mul();
                        t13 = $.$mul$n(t13, Py);
                        t15 = t15.y;
                        if (typeof t15 !== "number")
                          throw t15.$mul();
                        wB = t12.$add(wB, invIB * (t13 - $.$mul$n(t15, Px)));
                        ccp.set$tangentImpulse(newImpulse);
                        ++j;
                    }
                t11 = $.$eq(t12, 1);
                t12 = c.get$points();
                t13 = vA.x;
                t14 = vB.x;
                t15 = $.getInterceptor$n(wA);
                t16 = $.getInterceptor$n(wB);
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
              case 82:
              case 83:
              case 84:
              case 85:
              case 86:
              case 87:
              case 88:
              case 89:
              case 90:
              case 91:
              case 92:
              case 93:
              case 94:
              case 95:
              case 96:
              case 97:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
              case 103:
              case 104:
              case 105:
              case 106:
              case 107:
              case 108:
              case 109:
              case 110:
                if (state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 0 && t11)
                  switch (state0) {
                    case 0:
                      if (0 >= t12.length)
                        throw $.ioore(0);
                      ccp = t12[0];
                      a1 = ccp.get$rA();
                      t11 = t16.$negate(wB);
                      t12 = ccp.get$rB().y;
                      if (typeof t12 !== "number")
                        throw $.iae(t12);
                      if (typeof t14 !== "number")
                        throw $.iae(t14);
                      if (typeof t13 !== "number")
                        throw $.iae(t13);
                      t13 = t11 * t12 + t14 - t13;
                      t14 = a1.y;
                    case 13:
                      state0 = 0;
                      t1.x = t13 + t15.$mul(wA, t14);
                      t14 = ccp.get$rB().x;
                    case 14:
                      state0 = 0;
                      t14 = t16.$mul(wB, t14);
                      t13 = vB.y;
                      if (typeof t13 !== "number")
                        throw $.iae(t13);
                      t12 = vA.y;
                      if (typeof t12 !== "number")
                        throw $.iae(t12);
                      t12 = t14 + t13 - t12;
                      t13 = a1.x;
                    case 15:
                      state0 = 0;
                      t1.y = t12 - t15.$mul(wA, t13);
                      b = c.get$normal();
                      t13 = t1.x;
                      t12 = b.x;
                    case 16:
                      state0 = 0;
                      if (typeof t13 !== "number")
                        throw t13.$mul();
                      t13 = $.$mul$n(t13, t12);
                      t14 = t1.y;
                      t11 = b.y;
                    case 17:
                      state0 = 0;
                      if (typeof t14 !== "number")
                        throw t14.$mul();
                      t14 = $.$mul$n(t14, t11);
                      t17 = ccp.get$normalMass();
                      if (typeof t17 !== "number")
                        throw t17.$negate();
                      lambda = $.$negate$n(t17) * (t13 + t14 - ccp.get$velocityBias());
                      t14 = ccp.get$normalImpulse();
                    case 18:
                      state0 = 0;
                      a = $.$add$ns(t14, lambda);
                      newImpulse = $.$gt$n(a, 0) ? a : 0;
                      lambda = $.$sub$n(newImpulse, t14);
                      Px = $.$mul$n(t12, lambda);
                      Py = $.$mul$n(t11, lambda);
                      t11 = vA.x;
                      if (typeof t11 !== "number")
                        throw t11.$sub();
                      vA.x = $.$sub$n(t11, Px * invMassA);
                      t11 = vA.y;
                      if (typeof t11 !== "number")
                        throw t11.$sub();
                      vA.y = $.$sub$n(t11, Py * invMassA);
                      t11 = ccp.get$rA();
                      t12 = t11.x;
                      if (typeof t12 !== "number")
                        throw t12.$mul();
                      t12 = $.$mul$n(t12, Py);
                      t11 = t11.y;
                      if (typeof t11 !== "number")
                        throw t11.$mul();
                      wA = t15.$sub(wA, invIA * (t12 - $.$mul$n(t11, Px)));
                      t11 = vB.x;
                    case 19:
                      state0 = 0;
                      vB.x = $.$add$ns(t11, Px * invMassB);
                      t11 = vB.y;
                    case 20:
                      state0 = 0;
                      vB.y = $.$add$ns(t11, Py * invMassB);
                      t11 = ccp.get$rB();
                      t12 = t11.x;
                      if (typeof t12 !== "number")
                        throw t12.$mul();
                      t12 = $.$mul$n(t12, Py);
                      t11 = t11.y;
                      if (typeof t11 !== "number")
                        throw t11.$mul();
                      wB = t16.$add(wB, invIB * (t12 - $.$mul$n(t11, Px)));
                      ccp.set$normalImpulse(newImpulse);
                  }
                else
                  switch (state0) {
                    case 0:
                      t11 = t12.length;
                      if (0 >= t11)
                        throw $.ioore(0);
                      cp1 = t12[0];
                      if (1 >= t11)
                        throw $.ioore(1);
                      cp2 = t12[1];
                      a = new $.Vector(cp1.get$normalImpulse(), cp2.get$normalImpulse());
                      t12 = t16.$negate(wB);
                      t11 = cp1.get$rB().y;
                      if (typeof t11 !== "number")
                        throw $.iae(t11);
                      if (typeof t14 !== "number")
                        throw $.iae(t14);
                      if (typeof t13 !== "number")
                        throw $.iae(t13);
                      t13 = t12 * t11 + t14 - t13;
                      t14 = cp1.get$rA().y;
                    case 21:
                      state0 = 0;
                      t9.x = t13 + t15.$mul(wA, t14);
                      t14 = cp1.get$rB().x;
                    case 22:
                      state0 = 0;
                      t14 = t16.$mul(wB, t14);
                      t13 = vB.y;
                      if (typeof t13 !== "number")
                        throw $.iae(t13);
                      t11 = vA.y;
                      if (typeof t11 !== "number")
                        throw $.iae(t11);
                      t11 = t14 + t13 - t11;
                      t13 = cp1.get$rA().x;
                    case 23:
                      state0 = 0;
                      t9.y = t11 - t15.$mul(wA, t13);
                      t13 = t16.$negate(wB);
                      t11 = cp2.get$rB().y;
                      if (typeof t11 !== "number")
                        throw $.iae(t11);
                      t14 = vB.x;
                      if (typeof t14 !== "number")
                        throw $.iae(t14);
                      t12 = vA.x;
                      if (typeof t12 !== "number")
                        throw $.iae(t12);
                      t12 = t13 * t11 + t14 - t12;
                      t14 = cp2.get$rA().y;
                    case 24:
                      state0 = 0;
                      t10.x = t12 + t15.$mul(wA, t14);
                      t14 = cp2.get$rB().x;
                    case 25:
                      state0 = 0;
                      t14 = t16.$mul(wB, t14);
                      t12 = vB.y;
                      if (typeof t12 !== "number")
                        throw $.iae(t12);
                      t11 = vA.y;
                      if (typeof t11 !== "number")
                        throw $.iae(t11);
                      t11 = t14 + t12 - t11;
                      t12 = cp2.get$rA().x;
                    case 26:
                      state0 = 0;
                      t10.y = t11 - t15.$mul(wA, t12);
                      t12 = t9.x;
                      t11 = c.get$normal();
                      t14 = t11.x;
                    case 27:
                      state0 = 0;
                      if (typeof t12 !== "number")
                        throw t12.$mul();
                      t12 = $.$mul$n(t12, t14);
                      t13 = t9.y;
                      t11 = t11.y;
                    case 28:
                      state0 = 0;
                      if (typeof t13 !== "number")
                        throw t13.$mul();
                      t13 = $.$mul$n(t13, t11);
                      t17 = t10.x;
                      if (typeof t17 !== "number")
                        throw t17.$mul();
                      t14 = $.$mul$n(t17, t14);
                      t17 = t10.y;
                      if (typeof t17 !== "number")
                        throw t17.$mul();
                      t11 = $.$mul$n(t17, t11);
                      b = new $.Vector(t12 + t13 - cp1.get$velocityBias(), t14 + t11 - cp2.get$velocityBias());
                      t11 = c.get$K();
                      t14 = t11.col1.x;
                      t13 = a.x;
                    case 29:
                      state0 = 0;
                      if (typeof t14 !== "number")
                        throw t14.$mul();
                      t13 = $.$mul$n(t14, t13);
                      t11 = t11.col2.x;
                      t14 = a.y;
                    case 30:
                      state0 = 0;
                      if (typeof t11 !== "number")
                        throw t11.$mul();
                      t8.x = t13 + $.$mul$n(t11, t14);
                      t14 = c.get$K();
                      t11 = t14.col1.y;
                      t13 = a.x;
                    case 31:
                      state0 = 0;
                      if (typeof t11 !== "number")
                        throw t11.$mul();
                      t13 = $.$mul$n(t11, t13);
                      t14 = t14.col2.y;
                      t11 = a.y;
                    case 32:
                      state0 = 0;
                      if (typeof t14 !== "number")
                        throw t14.$mul();
                      t8.y = t13 + $.$mul$n(t14, t11);
                      t11 = b.x;
                      t14 = t8.x;
                    case 33:
                      state0 = 0;
                      if (typeof t11 !== "number")
                        throw t11.$sub();
                      b.x = $.$sub$n(t11, t14);
                      t14 = b.y;
                      t11 = t8.y;
                    case 34:
                      state0 = 0;
                      if (typeof t14 !== "number")
                        throw t14.$sub();
                      b.y = $.$sub$n(t14, t11);
                    default:
                      $loop$1: {
                        switch (state0) {
                          case 0:
                            $.Matrix22_mulMatrixAndVectorToOut(c.get$normalMass(), b, t4);
                            t11 = t4.x;
                            if (typeof t11 !== "number")
                              throw t11.$mul();
                            t4.x = $.$mul$n(t11, -1);
                            t11 = t4.y;
                            if (typeof t11 !== "number")
                              throw t11.$mul();
                            t4.y = $.$mul$n(t11, -1);
                            t11 = t4.x;
                            if (typeof t11 !== "number")
                              throw t11.$ge();
                            if ($.$ge$n(t11, 0)) {
                              t12 = t4.y;
                              if (typeof t12 !== "number")
                                throw t12.$ge();
                              t12 = $.$ge$n(t12, 0);
                            } else
                              t12 = false;
                          default:
                            if (state0 === 52 || state0 === 51 || state0 === 50 || state0 === 49 || state0 === 48 || state0 === 47 || state0 === 46 || state0 === 45 || state0 === 44 || state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 0 && t12)
                              switch (state0) {
                                case 0:
                                  t12 = t4.y;
                                  t3.x = t11;
                                  t3.y = t12;
                                  t12 = t3.x;
                                  t11 = a.x;
                                case 35:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$sub();
                                  t3.x = $.$sub$n(t12, t11);
                                  t11 = t3.y;
                                  t12 = a.y;
                                case 36:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$sub();
                                  t3.y = $.$sub$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t5.x = t11;
                                  t5.y = t12;
                                  t12 = t3.x;
                                case 37:
                                  state0 = 0;
                                  t11 = t5.x;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t5.x = $.$mul$n(t11, t12);
                                  t11 = t5.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t5.y = $.$mul$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t6.x = t11;
                                  t6.y = t12;
                                  t12 = t3.y;
                                case 38:
                                  state0 = 0;
                                  t11 = t6.x;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t6.x = $.$mul$n(t11, t12);
                                  t11 = t6.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t6.y = $.$mul$n(t11, t12);
                                  t12 = t5.x;
                                  t11 = t5.y;
                                  t7.x = t12;
                                  t7.y = t11;
                                  t11 = t7.x;
                                case 39:
                                  state0 = 0;
                                  t12 = t6.x;
                                case 40:
                                  state0 = 0;
                                  t7.x = $.$add$ns(t11, t12);
                                  t12 = t7.y;
                                case 41:
                                  state0 = 0;
                                  t11 = t6.y;
                                case 42:
                                  state0 = 0;
                                  t7.y = $.$add$ns(t12, t11);
                                  t11 = t7.x;
                                  t12 = t7.y;
                                  t8.x = t11;
                                  t8.y = t12;
                                  t12 = t8.x;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t8.x = $.$mul$n(t12, invMassA);
                                  t12 = t8.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t8.y = $.$mul$n(t12, invMassA);
                                  t12 = vA.x;
                                  t11 = t8.x;
                                case 43:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$sub();
                                  vA.x = $.$sub$n(t12, t11);
                                  t11 = vA.y;
                                  t12 = t8.y;
                                case 44:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$sub();
                                  vA.y = $.$sub$n(t11, t12);
                                  t12 = t7.x;
                                  t11 = t7.y;
                                  t8.x = t12;
                                  t8.y = t11;
                                  t11 = t8.x;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t8.x = $.$mul$n(t11, invMassB);
                                  t11 = t8.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t8.y = $.$mul$n(t11, invMassB);
                                  t11 = vB.x;
                                case 45:
                                  state0 = 0;
                                  t12 = t8.x;
                                case 46:
                                  state0 = 0;
                                  vB.x = $.$add$ns(t11, t12);
                                  t12 = vB.y;
                                case 47:
                                  state0 = 0;
                                  t11 = t8.y;
                                case 48:
                                  state0 = 0;
                                  vB.y = $.$add$ns(t12, t11);
                                  t11 = cp1.get$rA();
                                  t12 = t11.x;
                                  t13 = t5.y;
                                case 49:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t12 = $.$mul$n(t12, t13);
                                  t11 = t11.y;
                                  t14 = t5.x;
                                case 50:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t11 = t12 - $.$mul$n(t11, t14);
                                  t12 = cp2.get$rA();
                                  t17 = t12.x;
                                  t18 = t6.y;
                                case 51:
                                  state0 = 0;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t17 = $.$mul$n(t17, t18);
                                  t12 = t12.y;
                                  t19 = t6.x;
                                case 52:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  wA = t15.$sub(wA, invIA * (t11 + (t17 - $.$mul$n(t12, t19))));
                                  t12 = cp1.get$rB();
                                  t17 = t12.x;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t13 = $.$mul$n(t17, t13);
                                  t12 = t12.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t14 = $.$mul$n(t12, t14);
                                  t12 = cp2.get$rB();
                                  t17 = t12.x;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t18 = $.$mul$n(t17, t18);
                                  t12 = t12.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  wB = t16.$add(wB, invIB * (t13 - t14 + (t18 - $.$mul$n(t12, t19))));
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            t11 = cp1.get$normalMass();
                            if (typeof t11 !== "number")
                              throw t11.$negate();
                            t11 = $.$negate$n(t11);
                            t12 = b.x;
                            if (typeof t12 !== "number")
                              throw $.iae(t12);
                            t4.x = t11 * t12;
                            t4.y = 0;
                            t12 = c.get$K().col1.y;
                            t11 = t4.x;
                          case 53:
                            state0 = 0;
                            if (typeof t12 !== "number")
                              throw t12.$mul();
                            t12 = $.$mul$n(t12, t11);
                            t13 = b.y;
                            if (typeof t13 !== "number")
                              throw $.iae(t13);
                          case 54:
                          case 55:
                          case 56:
                          case 57:
                          case 58:
                          case 59:
                          case 60:
                          case 61:
                          case 62:
                          case 63:
                          case 64:
                          case 65:
                          case 66:
                          case 67:
                          case 68:
                          case 69:
                          case 70:
                          case 71:
                            if (state0 === 71 || state0 === 70 || state0 === 69 || state0 === 68 || state0 === 67 || state0 === 66 || state0 === 65 || state0 === 64 || state0 === 63 || state0 === 62 || state0 === 61 || state0 === 60 || state0 === 59 || state0 === 58 || state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 0 && $.$ge$n(t11, 0) && t12 + t13 >= 0)
                              switch (state0) {
                                case 0:
                                  t12 = t4.y;
                                  t3.x = t11;
                                  t3.y = t12;
                                  t12 = t3.x;
                                  t11 = a.x;
                                case 54:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$sub();
                                  t3.x = $.$sub$n(t12, t11);
                                  t11 = t3.y;
                                  t12 = a.y;
                                case 55:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$sub();
                                  t3.y = $.$sub$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t5.x = t11;
                                  t5.y = t12;
                                  t12 = t3.x;
                                case 56:
                                  state0 = 0;
                                  t11 = t5.x;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t5.x = $.$mul$n(t11, t12);
                                  t11 = t5.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t5.y = $.$mul$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t6.x = t11;
                                  t6.y = t12;
                                  t12 = t3.y;
                                case 57:
                                  state0 = 0;
                                  t11 = t6.x;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t6.x = $.$mul$n(t11, t12);
                                  t11 = t6.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t6.y = $.$mul$n(t11, t12);
                                  t12 = t5.x;
                                  t11 = t5.y;
                                  t7.x = t12;
                                  t7.y = t11;
                                  t11 = t7.x;
                                case 58:
                                  state0 = 0;
                                  t12 = t6.x;
                                case 59:
                                  state0 = 0;
                                  t7.x = $.$add$ns(t11, t12);
                                  t12 = t7.y;
                                case 60:
                                  state0 = 0;
                                  t11 = t6.y;
                                case 61:
                                  state0 = 0;
                                  t7.y = $.$add$ns(t12, t11);
                                  t11 = t7.x;
                                  t12 = t7.y;
                                  t8.x = t11;
                                  t8.y = t12;
                                  t12 = t8.x;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t8.x = $.$mul$n(t12, invMassA);
                                  t12 = t8.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t8.y = $.$mul$n(t12, invMassA);
                                  t12 = vA.x;
                                  t11 = t8.x;
                                case 62:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$sub();
                                  vA.x = $.$sub$n(t12, t11);
                                  t11 = vA.y;
                                  t12 = t8.y;
                                case 63:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$sub();
                                  vA.y = $.$sub$n(t11, t12);
                                  t12 = t7.x;
                                  t11 = t7.y;
                                  t8.x = t12;
                                  t8.y = t11;
                                  t11 = t8.x;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t8.x = $.$mul$n(t11, invMassB);
                                  t11 = t8.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t8.y = $.$mul$n(t11, invMassB);
                                  t11 = vB.x;
                                case 64:
                                  state0 = 0;
                                  t12 = t8.x;
                                case 65:
                                  state0 = 0;
                                  vB.x = $.$add$ns(t11, t12);
                                  t12 = vB.y;
                                case 66:
                                  state0 = 0;
                                  t11 = t8.y;
                                case 67:
                                  state0 = 0;
                                  vB.y = $.$add$ns(t12, t11);
                                  t11 = cp1.get$rA();
                                  t12 = t11.x;
                                  t13 = t5.y;
                                case 68:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t12 = $.$mul$n(t12, t13);
                                  t11 = t11.y;
                                  t14 = t5.x;
                                case 69:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t11 = t12 - $.$mul$n(t11, t14);
                                  t12 = cp2.get$rA();
                                  t17 = t12.x;
                                  t18 = t6.y;
                                case 70:
                                  state0 = 0;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t17 = $.$mul$n(t17, t18);
                                  t12 = t12.y;
                                  t19 = t6.x;
                                case 71:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  wA = t15.$sub(wA, invIA * (t11 + (t17 - $.$mul$n(t12, t19))));
                                  t12 = cp1.get$rB();
                                  t17 = t12.x;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t13 = $.$mul$n(t17, t13);
                                  t12 = t12.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t14 = $.$mul$n(t12, t14);
                                  t12 = cp2.get$rB();
                                  t17 = t12.x;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t18 = $.$mul$n(t17, t18);
                                  t12 = t12.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  wB = t16.$add(wB, invIB * (t13 - t14 + (t18 - $.$mul$n(t12, t19))));
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            t4.x = 0;
                            t11 = cp2.get$normalMass();
                            if (typeof t11 !== "number")
                              throw t11.$negate();
                            t11 = $.$negate$n(t11);
                            t12 = b.y;
                            if (typeof t12 !== "number")
                              throw $.iae(t12);
                            t4.y = t11 * t12;
                            t12 = c.get$K().col2.x;
                            t11 = t4.y;
                          case 72:
                            state0 = 0;
                            if (typeof t12 !== "number")
                              throw t12.$mul();
                            t12 = $.$mul$n(t12, t11);
                            t13 = b.x;
                            if (typeof t13 !== "number")
                              throw $.iae(t13);
                          case 73:
                          case 74:
                          case 75:
                          case 76:
                          case 77:
                          case 78:
                          case 79:
                          case 80:
                          case 81:
                          case 82:
                          case 83:
                          case 84:
                          case 85:
                          case 86:
                          case 87:
                          case 88:
                          case 89:
                          case 90:
                            if (state0 === 90 || state0 === 89 || state0 === 88 || state0 === 87 || state0 === 86 || state0 === 85 || state0 === 84 || state0 === 83 || state0 === 82 || state0 === 81 || state0 === 80 || state0 === 79 || state0 === 78 || state0 === 77 || state0 === 76 || state0 === 75 || state0 === 74 || state0 === 73 || state0 === 0 && $.$ge$n(t11, 0) && t12 + t13 >= 0)
                              switch (state0) {
                                case 0:
                                  t3.x = t4.x;
                                  t3.y = t11;
                                  t11 = t3.x;
                                  t12 = a.x;
                                case 73:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$sub();
                                  t3.x = $.$sub$n(t11, t12);
                                  t12 = t3.y;
                                  t11 = a.y;
                                case 74:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$sub();
                                  t3.y = $.$sub$n(t12, t11);
                                  t11 = c.get$normal();
                                  t12 = t11.x;
                                  t11 = t11.y;
                                  t5.x = t12;
                                  t5.y = t11;
                                  t11 = t3.x;
                                case 75:
                                  state0 = 0;
                                  t12 = t5.x;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t5.x = $.$mul$n(t12, t11);
                                  t12 = t5.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t5.y = $.$mul$n(t12, t11);
                                  t11 = c.get$normal();
                                  t12 = t11.x;
                                  t11 = t11.y;
                                  t6.x = t12;
                                  t6.y = t11;
                                  t11 = t3.y;
                                case 76:
                                  state0 = 0;
                                  t12 = t6.x;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t6.x = $.$mul$n(t12, t11);
                                  t12 = t6.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t6.y = $.$mul$n(t12, t11);
                                  t11 = t5.x;
                                  t12 = t5.y;
                                  t7.x = t11;
                                  t7.y = t12;
                                  t12 = t7.x;
                                case 77:
                                  state0 = 0;
                                  t11 = t6.x;
                                case 78:
                                  state0 = 0;
                                  t7.x = $.$add$ns(t12, t11);
                                  t11 = t7.y;
                                case 79:
                                  state0 = 0;
                                  t12 = t6.y;
                                case 80:
                                  state0 = 0;
                                  t7.y = $.$add$ns(t11, t12);
                                  t12 = t7.x;
                                  t11 = t7.y;
                                  t8.x = t12;
                                  t8.y = t11;
                                  t11 = t8.x;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t8.x = $.$mul$n(t11, invMassA);
                                  t11 = t8.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t8.y = $.$mul$n(t11, invMassA);
                                  t11 = vA.x;
                                  t12 = t8.x;
                                case 81:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$sub();
                                  vA.x = $.$sub$n(t11, t12);
                                  t12 = vA.y;
                                  t11 = t8.y;
                                case 82:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$sub();
                                  vA.y = $.$sub$n(t12, t11);
                                  t11 = t7.x;
                                  t12 = t7.y;
                                  t8.x = t11;
                                  t8.y = t12;
                                  t12 = t8.x;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t8.x = $.$mul$n(t12, invMassB);
                                  t12 = t8.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t8.y = $.$mul$n(t12, invMassB);
                                  t12 = vB.x;
                                case 83:
                                  state0 = 0;
                                  t11 = t8.x;
                                case 84:
                                  state0 = 0;
                                  vB.x = $.$add$ns(t12, t11);
                                  t11 = vB.y;
                                case 85:
                                  state0 = 0;
                                  t12 = t8.y;
                                case 86:
                                  state0 = 0;
                                  vB.y = $.$add$ns(t11, t12);
                                  t12 = cp1.get$rA();
                                  t11 = t12.x;
                                  t13 = t5.y;
                                case 87:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t11 = $.$mul$n(t11, t13);
                                  t12 = t12.y;
                                  t14 = t5.x;
                                case 88:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t12 = t11 - $.$mul$n(t12, t14);
                                  t11 = cp2.get$rA();
                                  t17 = t11.x;
                                  t18 = t6.y;
                                case 89:
                                  state0 = 0;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t17 = $.$mul$n(t17, t18);
                                  t11 = t11.y;
                                  t19 = t6.x;
                                case 90:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  wA = t15.$sub(wA, invIA * (t12 + (t17 - $.$mul$n(t11, t19))));
                                  t11 = cp1.get$rB();
                                  t17 = t11.x;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t13 = $.$mul$n(t17, t13);
                                  t11 = t11.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t14 = $.$mul$n(t11, t14);
                                  t11 = cp2.get$rB();
                                  t17 = t11.x;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t18 = $.$mul$n(t17, t18);
                                  t11 = t11.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  wB = t16.$add(wB, invIB * (t13 - t14 + (t18 - $.$mul$n(t11, t19))));
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            t4.x = 0;
                            t4.y = 0;
                            vn1 = b.x;
                          case 91:
                            state0 = 0;
                            vn2 = b.y;
                          case 92:
                            state0 = 0;
                          case 93:
                          case 94:
                          case 95:
                          case 96:
                          case 97:
                          case 98:
                          case 99:
                          case 100:
                          case 101:
                          case 102:
                          case 103:
                          case 104:
                          case 105:
                          case 106:
                          case 107:
                          case 108:
                          case 109:
                          case 110:
                            if (state0 === 110 || state0 === 109 || state0 === 108 || state0 === 107 || state0 === 106 || state0 === 105 || state0 === 104 || state0 === 103 || state0 === 102 || state0 === 101 || state0 === 100 || state0 === 99 || state0 === 98 || state0 === 97 || state0 === 96 || state0 === 95 || state0 === 94 || state0 === 93 || state0 === 0 && $.$ge$n(vn1, 0) && $.$ge$n(vn2, 0))
                              switch (state0) {
                                case 0:
                                  t11 = t4.x;
                                  t12 = t4.y;
                                  t3.x = t11;
                                  t3.y = t12;
                                  t12 = t3.x;
                                  t11 = a.x;
                                case 93:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$sub();
                                  t3.x = $.$sub$n(t12, t11);
                                  t11 = t3.y;
                                  t12 = a.y;
                                case 94:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$sub();
                                  t3.y = $.$sub$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t5.x = t11;
                                  t5.y = t12;
                                  t12 = t3.x;
                                case 95:
                                  state0 = 0;
                                  t11 = t5.x;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t5.x = $.$mul$n(t11, t12);
                                  t11 = t5.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t5.y = $.$mul$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t6.x = t11;
                                  t6.y = t12;
                                  t12 = t3.y;
                                case 96:
                                  state0 = 0;
                                  t11 = t6.x;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t6.x = $.$mul$n(t11, t12);
                                  t11 = t6.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t6.y = $.$mul$n(t11, t12);
                                  t12 = t5.x;
                                  t11 = t5.y;
                                  t7.x = t12;
                                  t7.y = t11;
                                  t11 = t7.x;
                                case 97:
                                  state0 = 0;
                                  t12 = t6.x;
                                case 98:
                                  state0 = 0;
                                  t7.x = $.$add$ns(t11, t12);
                                  t12 = t7.y;
                                case 99:
                                  state0 = 0;
                                  t11 = t6.y;
                                case 100:
                                  state0 = 0;
                                  t7.y = $.$add$ns(t12, t11);
                                  t11 = t7.x;
                                  t12 = t7.y;
                                  t8.x = t11;
                                  t8.y = t12;
                                  t12 = t8.x;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t8.x = $.$mul$n(t12, invMassA);
                                  t12 = t8.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t8.y = $.$mul$n(t12, invMassA);
                                  t12 = vA.x;
                                  t11 = t8.x;
                                case 101:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$sub();
                                  vA.x = $.$sub$n(t12, t11);
                                  t11 = vA.y;
                                  t12 = t8.y;
                                case 102:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$sub();
                                  vA.y = $.$sub$n(t11, t12);
                                  t12 = t7.x;
                                  t11 = t7.y;
                                  t8.x = t12;
                                  t8.y = t11;
                                  t11 = t8.x;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t8.x = $.$mul$n(t11, invMassB);
                                  t11 = t8.y;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t8.y = $.$mul$n(t11, invMassB);
                                  t11 = vB.x;
                                case 103:
                                  state0 = 0;
                                  t12 = t8.x;
                                case 104:
                                  state0 = 0;
                                  vB.x = $.$add$ns(t11, t12);
                                  t12 = vB.y;
                                case 105:
                                  state0 = 0;
                                  t11 = t8.y;
                                case 106:
                                  state0 = 0;
                                  vB.y = $.$add$ns(t12, t11);
                                  t11 = cp1.get$rA();
                                  t12 = t11.x;
                                  t13 = t5.y;
                                case 107:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t12 = $.$mul$n(t12, t13);
                                  t11 = t11.y;
                                  t14 = t5.x;
                                case 108:
                                  state0 = 0;
                                  if (typeof t11 !== "number")
                                    throw t11.$mul();
                                  t11 = t12 - $.$mul$n(t11, t14);
                                  t12 = cp2.get$rA();
                                  t17 = t12.x;
                                  t18 = t6.y;
                                case 109:
                                  state0 = 0;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t17 = $.$mul$n(t17, t18);
                                  t12 = t12.y;
                                  t19 = t6.x;
                                case 110:
                                  state0 = 0;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  wA = t15.$sub(wA, invIA * (t11 + (t17 - $.$mul$n(t12, t19))));
                                  t12 = cp1.get$rB();
                                  t17 = t12.x;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t13 = $.$mul$n(t17, t13);
                                  t12 = t12.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  t14 = $.$mul$n(t12, t14);
                                  t12 = cp2.get$rB();
                                  t17 = t12.x;
                                  if (typeof t17 !== "number")
                                    throw t17.$mul();
                                  t18 = $.$mul$n(t17, t18);
                                  t12 = t12.y;
                                  if (typeof t12 !== "number")
                                    throw t12.$mul();
                                  wB = t16.$add(wB, invIB * (t13 - t14 + (t18 - $.$mul$n(t12, t19))));
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            break $loop$1;
                        }
                      }
                  }
                t11 = bodyA.get$linearVelocity();
                t12 = vA.x;
                t13 = vA.y;
                t11.x = t12;
                t11.y = t13;
                bodyA.set$angularVelocity(wA);
                t13 = bodyB.get$linearVelocity();
                t11 = vB.x;
                t12 = vB.y;
                t13.x = t11;
                t13.y = t12;
                bodyB.set$angularVelocity(wB);
                ++i;
            }
    }
  },
  storeImpulses$0: function() {
    var i, t1, c, m, j, t2;
    for (i = 0; $.JSNumber_methods.$lt(i, this.constraintCount); ++i) {
      t1 = this.constraints;
      if (i >= t1.length)
        throw $.ioore(i);
      c = t1[i];
      m = c.get$manifold();
      for (j = 0; $.JSNumber_methods.$lt(j, c.get$pointCount()); ++j) {
        t1 = m.get$points();
        if (j >= t1.length)
          throw $.ioore(j);
        t1 = t1[j];
        t2 = c.get$points();
        if (j >= t2.length)
          throw $.ioore(j);
        t1.set$normalImpulse(t2[j].get$normalImpulse());
        t2 = m.get$points();
        if (j >= t2.length)
          throw $.ioore(j);
        t2 = t2[j];
        t1 = c.get$points();
        if (j >= t1.length)
          throw $.ioore(j);
        t2.set$tangentImpulse(t1[j].get$tangentImpulse());
      }
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    var t1, t2, t3, t4, psm, normal, point, minSeparation, i, t5, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, j, t6, separation, t7, t8, C, t9, rnA, rnB, K, impulse, t10;
    t1 = this.P;
    t2 = this.temp1;
    t3 = this.rA;
    t4 = this.rB;
    psm = this.psolver;
    normal = psm.normal;
    point = psm.point;
    minSeparation = 0;
    i = 0;
    while (true) {
      t5 = this.constraintCount;
      if (typeof t5 !== "number")
        throw $.iae(t5);
      if (!(i < t5))
        break;
      t5 = this.constraints;
      if (i >= t5.length)
        throw $.ioore(i);
      c = t5[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      t5 = bodyA.get$mass();
      invMassA = t5 * bodyA.get$invMass();
      invIA = t5 * bodyA.get$invInertia();
      t5 = bodyB.get$mass();
      invMassB = t5 * bodyB.get$invMass();
      invIB = t5 * bodyB.get$invInertia();
      t5 = invMassA + invMassB;
      j = 0;
      while (true) {
        t6 = c.get$pointCount();
        if (typeof t6 !== "number")
          throw $.iae(t6);
        if (!(j < t6))
          break;
        psm.initialize$2(c, j);
        separation = psm.separation;
        t6 = point.x;
        t7 = point.y;
        t3.x = t6;
        t3.y = t7;
        t7 = bodyA.get$sweep().center;
        t6 = t3.x;
        t8 = t7.x;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(1, baumgarte, t6, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, t7, c, psm, normal, point, separation, t5, t1);
        if (typeof t6 !== "number")
          throw t6.$sub();
        t3.x = t6 - t8;
        t8 = t3.y;
        t7 = t7.y;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(2, baumgarte, 0, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, t7, c, psm, normal, point, separation, t5, t1);
        if (typeof t8 !== "number")
          throw t8.$sub();
        t3.y = t8 - t7;
        t7 = point.x;
        t8 = point.y;
        t4.x = t7;
        t4.y = t8;
        t8 = bodyB.get$sweep().center;
        t7 = t4.x;
        t6 = t8.x;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(3, baumgarte, t6, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, t7, c, psm, normal, point, separation, t5, t1);
        if (typeof t7 !== "number")
          throw t7.$sub();
        t4.x = t7 - t6;
        t6 = t4.y;
        t8 = t8.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(4, baumgarte, t6, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, 0, c, psm, normal, point, separation, t5, t1);
        if (typeof t6 !== "number")
          throw t6.$sub();
        t4.y = t6 - t8;
        minSeparation = $.min(minSeparation, separation);
        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        t8 = t3.x;
        t6 = normal.y;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(5, baumgarte, t6, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, 0, c, psm, normal, point, 0, t5, t1, C);
        if (typeof t8 !== "number")
          throw t8.$mul();
        t8 *= t6;
        t7 = t3.y;
        t9 = normal.x;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(6, baumgarte, t6, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, t7, c, psm, normal, point, 0, t5, t1, C, t9);
        if (typeof t7 !== "number")
          throw t7.$mul();
        rnA = t8 - t7 * t9;
        t7 = t4.x;
        if (typeof t7 !== "number")
          throw t7.$mul();
        t8 = t4.y;
        if (typeof t8 !== "number")
          throw t8.$mul();
        rnB = t7 * t6 - t8 * t9;
        K = t5 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t1.x = t9;
        t1.y = t6;
        t6 = t1.x;
        if (typeof t6 !== "number")
          throw t6.$mul();
        t1.x = t6 * impulse;
        t6 = t1.y;
        if (typeof t6 !== "number")
          throw t6.$mul();
        t1.y = t6 * impulse;
        t6 = t1.x;
        t7 = t1.y;
        t2.x = t6;
        t2.y = t7;
        t7 = t2.x;
        if (typeof t7 !== "number")
          throw t7.$mul();
        t2.x = t7 * invMassA;
        t7 = t2.y;
        if (typeof t7 !== "number")
          throw t7.$mul();
        t2.y = t7 * invMassA;
        t7 = bodyA.get$sweep().center;
        t6 = t7.x;
        t8 = t2.x;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(7, baumgarte, t6, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, t7, c, psm, normal, point, 0, t5, t1);
        if (typeof t6 !== "number")
          throw t6.$sub();
        t7.x = t6 - t8;
        t8 = t7.y;
        t6 = t2.y;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(8, baumgarte, t6, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, t7, c, psm, normal, point, 0, t5, t1);
        if (typeof t8 !== "number")
          throw t8.$sub();
        t7.y = t8 - t6;
        t6 = bodyA.get$sweep();
        t8 = t6.angle;
        t7 = t3.x;
        t9 = t1.y;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(9, baumgarte, t6, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, t7, c, psm, normal, point, 0, t5, t1, 0, t9);
        if (typeof t7 !== "number")
          throw t7.$mul();
        t9 = t7 * t9;
        t7 = t3.y;
        t10 = t1.x;
        if (typeof t10 !== "number")
          return this.solvePositionConstraints$1$bailout(10, baumgarte, t6, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, t7, c, psm, normal, point, 0, t5, t1, 0, t9, t10);
        if (typeof t7 !== "number")
          throw t7.$mul();
        if (typeof t8 !== "number")
          throw t8.$sub();
        t6.angle = t8 - invIA * (t9 - t7 * t10);
        bodyA.synchronizeTransform$0();
        t10 = t1.x;
        t7 = t1.y;
        t2.x = t10;
        t2.y = t7;
        t7 = t2.x;
        if (typeof t7 !== "number")
          throw t7.$mul();
        t2.x = t7 * invMassB;
        t7 = t2.y;
        if (typeof t7 !== "number")
          throw t7.$mul();
        t2.y = t7 * invMassB;
        t7 = bodyB.get$sweep().center;
        t10 = t7.x;
        if (typeof t10 !== "number")
          return this.solvePositionConstraints$1$bailout(11, baumgarte, 0, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, 0, 0, c, psm, normal, point, 0, t5, t1, 0, t7, t10);
        t9 = t2.x;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(12, baumgarte, 0, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t9, 0, c, psm, normal, point, 0, t5, t1, 0, t7, t10);
        t7.x = t10 + t9;
        t9 = t7.y;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(13, baumgarte, 0, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t9, 0, c, psm, normal, point, 0, t5, t1, 0, t7);
        t10 = t2.y;
        if (typeof t10 !== "number")
          return this.solvePositionConstraints$1$bailout(14, baumgarte, 0, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t9, 0, c, psm, normal, point, 0, t5, t1, 0, t7, t10);
        t7.y = t9 + t10;
        t10 = bodyB.get$sweep();
        t9 = t10.angle;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(15, baumgarte, 0, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t9, 0, c, psm, normal, point, 0, t5, t1, 0, 0, t10);
        t7 = t4.x;
        t8 = t1.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(16, baumgarte, t8, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t9, 0, c, psm, normal, point, 0, t5, t1, 0, t7, t10);
        if (typeof t7 !== "number")
          throw t7.$mul();
        t8 = t7 * t8;
        t7 = t4.y;
        t6 = t1.x;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(17, baumgarte, t8, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t9, t6, c, psm, normal, point, 0, t5, t1, 0, t7, t10);
        if (typeof t7 !== "number")
          throw t7.$mul();
        t10.angle = t9 + invIB * (t8 - t7 * t6);
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solvePositionConstraints$1$bailout: function(state0, baumgarte, t6, t2, t4, minSeparation, i, invMassA, invIA, invMassB, invIB, j, t3, bodyA, bodyB, t8, t7, c, psm, normal, point, separation, t5, t1, C, t9, t10) {
    switch (state0) {
      case 0:
        t1 = this.P;
        t2 = this.temp1;
        t3 = this.rA;
        t4 = this.rB;
        psm = this.psolver;
        normal = psm.normal;
        point = psm.point;
        minSeparation = 0;
        i = 0;
      default:
        var rnA, rnB, K, impulse;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t5 = this.constraintCount;
                if (typeof t5 !== "number")
                  throw $.iae(t5);
                if (!$.JSNumber_methods.$lt(i, t5))
                  break L0;
                t5 = this.constraints;
                if (i >= t5.length)
                  throw $.ioore(i);
                c = t5[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                t5 = bodyA.get$mass();
                invMassA = t5 * bodyA.get$invMass();
                invIA = t5 * bodyA.get$invInertia();
                t5 = bodyB.get$mass();
                invMassB = t5 * bodyB.get$invMass();
                invIB = t5 * bodyB.get$invInertia();
                t5 = invMassA + invMassB;
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t6 = c.get$pointCount();
                        if (typeof t6 !== "number")
                          throw $.iae(t6);
                        if (!$.JSNumber_methods.$lt(j, t6))
                          break L1;
                        psm.initialize$2(c, j);
                        separation = psm.separation;
                        t6 = point.x;
                        t7 = point.y;
                        t3.x = t6;
                        t3.y = t7;
                        t7 = bodyA.get$sweep().center;
                        t6 = t3.x;
                        t8 = t7.x;
                      case 1:
                        state0 = 0;
                        if (typeof t6 !== "number")
                          throw t6.$sub();
                        t3.x = $.$sub$n(t6, t8);
                        t8 = t3.y;
                        t7 = t7.y;
                      case 2:
                        state0 = 0;
                        if (typeof t8 !== "number")
                          throw t8.$sub();
                        t3.y = $.$sub$n(t8, t7);
                        t7 = point.x;
                        t8 = point.y;
                        t4.x = t7;
                        t4.y = t8;
                        t8 = bodyB.get$sweep().center;
                        t7 = t4.x;
                        t6 = t8.x;
                      case 3:
                        state0 = 0;
                        if (typeof t7 !== "number")
                          throw t7.$sub();
                        t4.x = $.$sub$n(t7, t6);
                        t6 = t4.y;
                        t8 = t8.y;
                      case 4:
                        state0 = 0;
                        if (typeof t6 !== "number")
                          throw t6.$sub();
                        t4.y = $.$sub$n(t6, t8);
                        minSeparation = $.min(minSeparation, separation);
                        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
                        t8 = t3.x;
                        t6 = normal.y;
                      case 5:
                        state0 = 0;
                        if (typeof t8 !== "number")
                          throw t8.$mul();
                        t8 = $.$mul$n(t8, t6);
                        t7 = t3.y;
                        t9 = normal.x;
                      case 6:
                        state0 = 0;
                        if (typeof t7 !== "number")
                          throw t7.$mul();
                        rnA = t8 - $.$mul$n(t7, t9);
                        t7 = t4.x;
                        if (typeof t7 !== "number")
                          throw t7.$mul();
                        t7 = $.$mul$n(t7, t6);
                        t8 = t4.y;
                        if (typeof t8 !== "number")
                          throw t8.$mul();
                        rnB = t7 - $.$mul$n(t8, t9);
                        K = t5 + invIA * rnA * rnA + invIB * rnB * rnB;
                        impulse = K > 0 ? -C / K : 0;
                        t1.x = t9;
                        t1.y = t6;
                        t6 = t1.x;
                        if (typeof t6 !== "number")
                          throw t6.$mul();
                        t1.x = $.$mul$n(t6, impulse);
                        t6 = t1.y;
                        if (typeof t6 !== "number")
                          throw t6.$mul();
                        t1.y = $.$mul$n(t6, impulse);
                        t6 = t1.x;
                        t7 = t1.y;
                        t2.x = t6;
                        t2.y = t7;
                        t7 = t2.x;
                        if (typeof t7 !== "number")
                          throw t7.$mul();
                        t2.x = $.$mul$n(t7, invMassA);
                        t7 = t2.y;
                        if (typeof t7 !== "number")
                          throw t7.$mul();
                        t2.y = $.$mul$n(t7, invMassA);
                        t7 = bodyA.get$sweep().center;
                        t6 = t7.x;
                        t8 = t2.x;
                      case 7:
                        state0 = 0;
                        if (typeof t6 !== "number")
                          throw t6.$sub();
                        t7.x = $.$sub$n(t6, t8);
                        t8 = t7.y;
                        t6 = t2.y;
                      case 8:
                        state0 = 0;
                        if (typeof t8 !== "number")
                          throw t8.$sub();
                        t7.y = $.$sub$n(t8, t6);
                        t6 = bodyA.get$sweep();
                        t8 = t6.angle;
                        t7 = t3.x;
                        t9 = t1.y;
                      case 9:
                        state0 = 0;
                        if (typeof t7 !== "number")
                          throw t7.$mul();
                        t9 = $.$mul$n(t7, t9);
                        t7 = t3.y;
                        t10 = t1.x;
                      case 10:
                        state0 = 0;
                        if (typeof t7 !== "number")
                          throw t7.$mul();
                        t10 = $.$mul$n(t7, t10);
                        if (typeof t8 !== "number")
                          throw t8.$sub();
                        t6.angle = $.$sub$n(t8, invIA * (t9 - t10));
                        bodyA.synchronizeTransform$0();
                        t10 = t1.x;
                        t9 = t1.y;
                        t2.x = t10;
                        t2.y = t9;
                        t9 = t2.x;
                        if (typeof t9 !== "number")
                          throw t9.$mul();
                        t2.x = $.$mul$n(t9, invMassB);
                        t9 = t2.y;
                        if (typeof t9 !== "number")
                          throw t9.$mul();
                        t2.y = $.$mul$n(t9, invMassB);
                        t9 = bodyB.get$sweep().center;
                        t10 = t9.x;
                      case 11:
                        state0 = 0;
                        t8 = t2.x;
                      case 12:
                        state0 = 0;
                        t9.x = $.$add$ns(t10, t8);
                        t8 = t9.y;
                      case 13:
                        state0 = 0;
                        t10 = t2.y;
                      case 14:
                        state0 = 0;
                        t9.y = $.$add$ns(t8, t10);
                        t10 = bodyB.get$sweep();
                        t8 = t10.angle;
                      case 15:
                        state0 = 0;
                        t9 = t4.x;
                        t6 = t1.y;
                      case 16:
                        state0 = 0;
                        if (typeof t9 !== "number")
                          throw t9.$mul();
                        t6 = $.$mul$n(t9, t6);
                        t9 = t4.y;
                        t7 = t1.x;
                      case 17:
                        state0 = 0;
                        if (typeof t9 !== "number")
                          throw t9.$mul();
                        t10.angle = $.$add$ns(t8, invIB * (t6 - $.$mul$n(t9, t7)));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  },
  ContactSolver$0: function() {
    var i, t1;
    for (i = 0; t1 = this.constraints, i < t1.length; ++i)
      t1[i] = $.ContactConstraint$();
  }
},

PositionSolverManifold: {"": "Object;normal<,point,separation,pointA<,pointB<,temp,planePoint,clipPoint",
  initialize$2: function(cc, index) {
    var t1, t2, t3, t4, t5, t6;
    switch (cc.get$type()) {
      case 0:
        t1 = this.pointA;
        cc.get$bodyA().getWorldPointToOut$2(cc.get$localPoint(), t1);
        t2 = cc.get$bodyB();
        t3 = cc.get$points();
        if (0 >= t3.length)
          throw $.ioore(0);
        t4 = this.pointB;
        t2.getWorldPointToOut$2(t3[0].get$localPoint(), t4);
        t2 = this.normal;
        if ($.MathBox_distanceSquared(t1, t4) > 1.4208639999999999e-14) {
          t3 = t4.x;
          t5 = t4.y;
          t2.x = t3;
          t2.y = t5;
          t2.x = $.$sub$n(t2.x, t1.x);
          t2.y = $.$sub$n(t2.y, t1.y);
          t2.normalize$0();
        } else {
          t2.x = 1;
          t2.y = 0;
        }
        t2 = this.point;
        t3 = t1.x;
        t5 = t1.y;
        t2.x = t3;
        t2.y = t5;
        t2.x = $.$add$ns(t2.x, t4.x);
        t2.y = $.$add$ns(t2.y, t4.y);
        t2.x = $.$mul$n(t2.x, 0.5);
        t2.y = $.$mul$n(t2.y, 0.5);
        t2 = this.temp;
        t5 = t4.x;
        t4 = t4.y;
        t2.x = t5;
        t2.y = t4;
        t2.x = $.$sub$n(t2.x, t1.x);
        t2.y = $.$sub$n(t2.y, t1.y);
        t1 = this.normal;
        t4 = $.$mul$n(t2.x, t1.x);
        t1 = $.$mul$n(t2.y, t1.y);
        t2 = cc.get$radius();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        this.separation = t4 + t1 - t2;
        break;
      case 1:
        t1 = this.normal;
        cc.get$bodyA().getWorldVectorToOut$2(cc.get$localNormal(), t1);
        t2 = this.planePoint;
        cc.get$bodyA().getWorldPointToOut$2(cc.get$localPoint(), t2);
        t3 = cc.get$bodyB();
        t4 = cc.get$points();
        if (index < 0 || index >= t4.length)
          throw $.ioore(index);
        t5 = this.clipPoint;
        t3.getWorldPointToOut$2(t4[index].get$localPoint(), t5);
        t4 = this.temp;
        t3 = t5.x;
        t6 = t5.y;
        t4.x = t3;
        t4.y = t6;
        t4.x = $.$sub$n(t4.x, t2.x);
        t4.y = $.$sub$n(t4.y, t2.y);
        t2 = $.$mul$n(t4.x, t1.x);
        t1 = $.$mul$n(t4.y, t1.y);
        t4 = cc.get$radius();
        if (typeof t4 !== "number")
          throw $.iae(t4);
        this.separation = t2 + t1 - t4;
        t4 = this.point;
        t1 = t5.x;
        t5 = t5.y;
        t4.x = t1;
        t4.y = t5;
        break;
      case 2:
        t1 = this.normal;
        cc.get$bodyB().getWorldVectorToOut$2(cc.get$localNormal(), t1);
        t2 = this.planePoint;
        cc.get$bodyB().getWorldPointToOut$2(cc.get$localPoint(), t2);
        t3 = cc.get$bodyA();
        t4 = cc.get$points();
        if (index < 0 || index >= t4.length)
          throw $.ioore(index);
        t5 = this.clipPoint;
        t3.getWorldPointToOut$2(t4[index].get$localPoint(), t5);
        t4 = this.temp;
        t3 = t5.x;
        t6 = t5.y;
        t4.x = t3;
        t4.y = t6;
        t4.x = $.$sub$n(t4.x, t2.x);
        t4.y = $.$sub$n(t4.y, t2.y);
        t2 = $.$mul$n(t4.x, t1.x);
        t4 = $.$mul$n(t4.y, t1.y);
        t6 = cc.get$radius();
        if (typeof t6 !== "number")
          throw $.iae(t6);
        this.separation = t2 + t4 - t6;
        t6 = this.point;
        t4 = t5.x;
        t5 = t5.y;
        t6.x = t4;
        t6.y = t5;
        t1.x = $.$negate$n(t1.x);
        t1.y = $.$negate$n(t1.y);
        break;
    }
  }
},

PolygonAndCircleContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygonAndCircle$5(argManifold, this.fixtureA.shape, xfA, this.fixtureB.shape, xfB);
  }
},

PolygonContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygons$5(argManifold, this.fixtureA.shape, xfA, this.fixtureB.shape, xfB);
  }
},

TimeOfImpactConstraint: {"": "Object;localPoints<,localNormal<,localPoint<,type@,radius@,pointCount@,bodyA@,bodyB@",
  setFrom$1: function(argOther) {
    var t1, t2, i, t3, t4;
    for (t1 = this.localPoints, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      t4 = argOther.get$localPoints();
      if (i >= t4.length)
        throw $.ioore(i);
      t3.setFrom$1(t4[i]);
    }
    t1 = this.localNormal;
    t2 = argOther.get$localNormal();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.localPoint;
    t1 = argOther.get$localPoint();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    this.type = argOther.get$type();
    this.radius = argOther.get$radius();
    this.pointCount = argOther.get$pointCount();
    this.bodyA = argOther.get$bodyA();
    this.bodyB = argOther.get$bodyB();
  },
  TimeOfImpactConstraint$0: function() {
    var t1, t2, i;
    for (t1 = this.localPoints, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector(0, 0);
  }
},

TimeOfImpactSolver: {"": "Object;constraints,count@,toiBody,psm,rA<,rB<,P,temp",
  initialize$3: function(contacts, argCount, argToiBody) {
    var t1, t2, i, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, t3, t4, j, cp;
    this.count = argCount;
    this.toiBody = argToiBody;
    t1 = this.count;
    t2 = this.constraints;
    i = t2.length;
    if ($.$ge$n(t1, i)) {
      this.constraints = $.List_List($.max(t1, i * 2));
      t1 = this.constraints;
      if (!!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, i, t2, 0);
      for (; t1 = this.constraints, i < t1.length; ++i)
        t1[i] = $.TimeOfImpactConstraint$();
    }
    for (t1 = contacts.length, i = 0; $.JSNumber_methods.$lt(i, this.count); ++i) {
      if (i >= t1)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      shapeA = fixtureA.shape;
      shapeB = fixtureB.shape;
      radiusA = shapeA.radius;
      radiusB = shapeB.radius;
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      manifold = contact.get$manifold();
      t2 = this.constraints;
      if (i >= t2.length)
        throw $.ioore(i);
      constraint = t2[i];
      constraint.set$bodyA(bodyA);
      constraint.set$bodyB(bodyB);
      t2 = constraint.get$localNormal();
      t3 = manifold.get$localNormal();
      t4 = t3.x;
      t3 = t3.y;
      t2.x = t4;
      t2.y = t3;
      t3 = constraint.get$localPoint();
      t2 = manifold.get$localPoint();
      t4 = t2.x;
      t2 = t2.y;
      t3.x = t4;
      t3.y = t2;
      constraint.set$type(manifold.get$type());
      constraint.set$pointCount(manifold.get$pointCount());
      constraint.set$radius($.$add$ns(radiusA, radiusB));
      for (j = 0; $.JSNumber_methods.$lt(j, constraint.get$pointCount()); ++j) {
        t2 = manifold.get$points();
        if (j >= t2.length)
          throw $.ioore(j);
        cp = t2[j];
        t2 = constraint.get$localPoints();
        t3 = cp.get$localPoint();
        if (j >= t2.length)
          throw $.ioore(j);
        t2[j] = t3;
      }
    }
  },
  solve$1: function(baumgarte) {
    var t1, t2, t3, t4, t5, normal, point, minSeparation, i, t6, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, j, t7, separation, t8, t9, C, t10, rnA, rnB, K, impulse, t11;
    t1 = this.P;
    t2 = this.temp;
    t3 = this.rA;
    t4 = this.rB;
    t5 = this.psm;
    normal = t5.normal;
    point = t5.point;
    minSeparation = 0;
    i = 0;
    while (true) {
      t6 = this.count;
      if (typeof t6 !== "number")
        throw $.iae(t6);
      if (!(i < t6))
        break;
      t6 = this.constraints;
      if (i >= t6.length)
        throw $.ioore(i);
      c = t6[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      massA = bodyA.get$mass();
      massB = bodyB.get$mass();
      if ($.$eq(bodyA, this.toiBody))
        massB = 0;
      else
        massA = 0;
      invMassA = massA * bodyA.get$invMass();
      invIA = massA * bodyA.get$invInertia();
      invMassB = massB * bodyB.get$invMass();
      invIB = massB * bodyB.get$invInertia();
      t6 = invMassA + invMassB;
      j = 0;
      while (true) {
        t7 = c.get$pointCount();
        if (typeof t7 !== "number")
          throw $.iae(t7);
        if (!(j < t7))
          break;
        t5.initialize$2(c, j);
        separation = t5.separation;
        t7 = point.x;
        t8 = point.y;
        t3.x = t7;
        t3.y = t8;
        t8 = bodyA.get$sweep().center;
        t7 = t3.x;
        t9 = t8.x;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(1, baumgarte, t8, t9, c, t3, t5, normal, i, t6, point, t1, separation, minSeparation, bodyA, bodyB, t2, t4, t7, j, invMassA, invIA, invMassB, invIB);
        if (typeof t7 !== "number")
          throw t7.$sub();
        t3.x = t7 - t9;
        t9 = t3.y;
        t8 = t8.y;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(2, baumgarte, t8, t9, c, t3, t5, normal, i, t6, point, t1, separation, minSeparation, bodyA, bodyB, t2, t4, 0, j, invMassA, invIA, invMassB, invIB);
        if (typeof t9 !== "number")
          throw t9.$sub();
        t3.y = t9 - t8;
        t8 = point.x;
        t9 = point.y;
        t4.x = t8;
        t4.y = t9;
        t9 = bodyB.get$sweep().center;
        t8 = t4.x;
        t7 = t9.x;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(3, baumgarte, t8, t9, c, t3, t5, normal, i, t6, point, t1, separation, minSeparation, bodyA, bodyB, t2, t4, t7, j, invMassA, invIA, invMassB, invIB);
        if (typeof t8 !== "number")
          throw t8.$sub();
        t4.x = t8 - t7;
        t7 = t4.y;
        t9 = t9.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(4, baumgarte, 0, t9, c, t3, t5, normal, i, t6, point, t1, separation, minSeparation, bodyA, bodyB, t2, t4, t7, j, invMassA, invIA, invMassB, invIB);
        if (typeof t7 !== "number")
          throw t7.$sub();
        t4.y = t7 - t9;
        minSeparation = $.min(minSeparation, separation);
        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        t9 = t3.x;
        t7 = normal.y;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(5, baumgarte, 0, t9, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, t7, j, invMassA, invIA, invMassB, invIB, C);
        if (typeof t9 !== "number")
          throw t9.$mul();
        t9 *= t7;
        t8 = t3.y;
        t10 = normal.x;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(6, baumgarte, t8, t9, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, t7, j, invMassA, invIA, invMassB, invIB, C, t10);
        if (typeof t8 !== "number")
          throw t8.$mul();
        rnA = t9 - t8 * t10;
        t8 = t4.x;
        if (typeof t8 !== "number")
          throw t8.$mul();
        t9 = t4.y;
        if (typeof t9 !== "number")
          throw t9.$mul();
        rnB = t8 * t7 - t9 * t10;
        K = t6 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t1.x = t10;
        t1.y = t7;
        t7 = t1.x;
        if (typeof t7 !== "number")
          throw t7.$mul();
        t1.x = t7 * impulse;
        t7 = t1.y;
        if (typeof t7 !== "number")
          throw t7.$mul();
        t1.y = t7 * impulse;
        t7 = t1.x;
        t8 = t1.y;
        t2.x = t7;
        t2.y = t8;
        t8 = t2.x;
        if (typeof t8 !== "number")
          throw t8.$mul();
        t2.x = t8 * invMassA;
        t8 = t2.y;
        if (typeof t8 !== "number")
          throw t8.$mul();
        t2.y = t8 * invMassA;
        t8 = bodyA.get$sweep().center;
        t7 = t8.x;
        t9 = t2.x;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(7, baumgarte, t8, t9, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, t7, j, invMassA, invIA, invMassB, invIB);
        if (typeof t7 !== "number")
          throw t7.$sub();
        t8.x = t7 - t9;
        t9 = t8.y;
        t7 = t2.y;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(8, baumgarte, t8, t9, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, t7, j, invMassA, invIA, invMassB, invIB);
        if (typeof t9 !== "number")
          throw t9.$sub();
        t8.y = t9 - t7;
        t7 = bodyA.get$sweep();
        t9 = t7.angle;
        t8 = t3.x;
        t10 = t1.y;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(9, baumgarte, t8, t9, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, t7, j, invMassA, invIA, invMassB, invIB, 0, t10);
        if (typeof t8 !== "number")
          throw t8.$mul();
        t10 = t8 * t10;
        t8 = t3.y;
        t11 = t1.x;
        if (typeof t11 !== "number")
          return this.solve$1$bailout(10, baumgarte, t8, t9, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, t7, j, invMassA, invIA, invMassB, invIB, 0, t10, t11);
        if (typeof t8 !== "number")
          throw t8.$mul();
        if (typeof t9 !== "number")
          throw t9.$sub();
        t7.angle = t9 - invIA * (t10 - t8 * t11);
        bodyA.synchronizeTransform$0();
        t11 = t1.x;
        t8 = t1.y;
        t2.x = t11;
        t2.y = t8;
        t8 = t2.x;
        if (typeof t8 !== "number")
          throw t8.$mul();
        t2.x = t8 * invMassB;
        t8 = t2.y;
        if (typeof t8 !== "number")
          throw t8.$mul();
        t2.y = t8 * invMassB;
        t8 = bodyB.get$sweep().center;
        t11 = t8.x;
        if (typeof t11 !== "number")
          return this.solve$1$bailout(11, baumgarte, 0, 0, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, 0, j, invMassA, invIA, invMassB, invIB, 0, t8, t11);
        t10 = t2.x;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(12, baumgarte, 0, t10, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, 0, j, invMassA, invIA, invMassB, invIB, 0, t8, t11);
        t8.x = t11 + t10;
        t10 = t8.y;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(13, baumgarte, 0, t10, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, 0, j, invMassA, invIA, invMassB, invIB, 0, t8);
        t11 = t2.y;
        if (typeof t11 !== "number")
          return this.solve$1$bailout(14, baumgarte, 0, t10, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, 0, j, invMassA, invIA, invMassB, invIB, 0, t8, t11);
        t8.y = t10 + t11;
        t11 = bodyB.get$sweep();
        t10 = t11.angle;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(15, baumgarte, 0, t10, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, 0, j, invMassA, invIA, invMassB, invIB, 0, 0, t11);
        t8 = t4.x;
        t9 = t1.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(16, baumgarte, 0, t10, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, t9, j, invMassA, invIA, invMassB, invIB, 0, t8, t11);
        if (typeof t8 !== "number")
          throw t8.$mul();
        t9 = t8 * t9;
        t8 = t4.y;
        t7 = t1.x;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(17, baumgarte, t7, t10, c, t3, t5, normal, i, t6, point, t1, 0, minSeparation, bodyA, bodyB, t2, t4, t9, j, invMassA, invIA, invMassB, invIB, 0, t8, t11);
        if (typeof t8 !== "number")
          throw t8.$mul();
        t11.angle = t10 + invIB * (t9 - t8 * t7);
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solve$1$bailout: function(state0, baumgarte, t8, t9, c, t3, t5, normal, i, t6, point, t1, separation, minSeparation, bodyA, bodyB, t2, t4, t7, j, invMassA, invIA, invMassB, invIB, C, t10, t11) {
    switch (state0) {
      case 0:
        t1 = this.P;
        t2 = this.temp;
        t3 = this.rA;
        t4 = this.rB;
        t5 = this.psm;
        normal = t5.normal;
        point = t5.point;
        minSeparation = 0;
        i = 0;
      default:
        var massA, massB, rnA, rnB, K, impulse;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t6 = this.count;
                if (typeof t6 !== "number")
                  throw $.iae(t6);
                if (!$.JSNumber_methods.$lt(i, t6))
                  break L0;
                t6 = this.constraints;
                if (i >= t6.length)
                  throw $.ioore(i);
                c = t6[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                massA = bodyA.get$mass();
                massB = bodyB.get$mass();
                if ($.$eq(bodyA, this.toiBody))
                  massB = 0;
                else
                  massA = 0;
                invMassA = massA * bodyA.get$invMass();
                invIA = massA * bodyA.get$invInertia();
                invMassB = massB * bodyB.get$invMass();
                invIB = massB * bodyB.get$invInertia();
                t6 = invMassA + invMassB;
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t7 = c.get$pointCount();
                        if (typeof t7 !== "number")
                          throw $.iae(t7);
                        if (!$.JSNumber_methods.$lt(j, t7))
                          break L1;
                        t5.initialize$2(c, j);
                        separation = t5.separation;
                        t7 = point.x;
                        t8 = point.y;
                        t3.x = t7;
                        t3.y = t8;
                        t8 = bodyA.get$sweep().center;
                        t7 = t3.x;
                        t9 = t8.x;
                      case 1:
                        state0 = 0;
                        if (typeof t7 !== "number")
                          throw t7.$sub();
                        t3.x = $.$sub$n(t7, t9);
                        t9 = t3.y;
                        t8 = t8.y;
                      case 2:
                        state0 = 0;
                        if (typeof t9 !== "number")
                          throw t9.$sub();
                        t3.y = $.$sub$n(t9, t8);
                        t8 = point.x;
                        t9 = point.y;
                        t4.x = t8;
                        t4.y = t9;
                        t9 = bodyB.get$sweep().center;
                        t8 = t4.x;
                        t7 = t9.x;
                      case 3:
                        state0 = 0;
                        if (typeof t8 !== "number")
                          throw t8.$sub();
                        t4.x = $.$sub$n(t8, t7);
                        t7 = t4.y;
                        t9 = t9.y;
                      case 4:
                        state0 = 0;
                        if (typeof t7 !== "number")
                          throw t7.$sub();
                        t4.y = $.$sub$n(t7, t9);
                        minSeparation = $.min(minSeparation, separation);
                        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
                        t9 = t3.x;
                        t7 = normal.y;
                      case 5:
                        state0 = 0;
                        if (typeof t9 !== "number")
                          throw t9.$mul();
                        t9 = $.$mul$n(t9, t7);
                        t8 = t3.y;
                        t10 = normal.x;
                      case 6:
                        state0 = 0;
                        if (typeof t8 !== "number")
                          throw t8.$mul();
                        rnA = t9 - $.$mul$n(t8, t10);
                        t8 = t4.x;
                        if (typeof t8 !== "number")
                          throw t8.$mul();
                        t8 = $.$mul$n(t8, t7);
                        t9 = t4.y;
                        if (typeof t9 !== "number")
                          throw t9.$mul();
                        rnB = t8 - $.$mul$n(t9, t10);
                        K = t6 + invIA * rnA * rnA + invIB * rnB * rnB;
                        impulse = K > 0 ? -C / K : 0;
                        t1.x = t10;
                        t1.y = t7;
                        t7 = t1.x;
                        if (typeof t7 !== "number")
                          throw t7.$mul();
                        t1.x = $.$mul$n(t7, impulse);
                        t7 = t1.y;
                        if (typeof t7 !== "number")
                          throw t7.$mul();
                        t1.y = $.$mul$n(t7, impulse);
                        t7 = t1.x;
                        t8 = t1.y;
                        t2.x = t7;
                        t2.y = t8;
                        t8 = t2.x;
                        if (typeof t8 !== "number")
                          throw t8.$mul();
                        t2.x = $.$mul$n(t8, invMassA);
                        t8 = t2.y;
                        if (typeof t8 !== "number")
                          throw t8.$mul();
                        t2.y = $.$mul$n(t8, invMassA);
                        t8 = bodyA.get$sweep().center;
                        t7 = t8.x;
                        t9 = t2.x;
                      case 7:
                        state0 = 0;
                        if (typeof t7 !== "number")
                          throw t7.$sub();
                        t8.x = $.$sub$n(t7, t9);
                        t9 = t8.y;
                        t7 = t2.y;
                      case 8:
                        state0 = 0;
                        if (typeof t9 !== "number")
                          throw t9.$sub();
                        t8.y = $.$sub$n(t9, t7);
                        t7 = bodyA.get$sweep();
                        t9 = t7.angle;
                        t8 = t3.x;
                        t10 = t1.y;
                      case 9:
                        state0 = 0;
                        if (typeof t8 !== "number")
                          throw t8.$mul();
                        t10 = $.$mul$n(t8, t10);
                        t8 = t3.y;
                        t11 = t1.x;
                      case 10:
                        state0 = 0;
                        if (typeof t8 !== "number")
                          throw t8.$mul();
                        t11 = $.$mul$n(t8, t11);
                        if (typeof t9 !== "number")
                          throw t9.$sub();
                        t7.angle = $.$sub$n(t9, invIA * (t10 - t11));
                        bodyA.synchronizeTransform$0();
                        t11 = t1.x;
                        t10 = t1.y;
                        t2.x = t11;
                        t2.y = t10;
                        t10 = t2.x;
                        if (typeof t10 !== "number")
                          throw t10.$mul();
                        t2.x = $.$mul$n(t10, invMassB);
                        t10 = t2.y;
                        if (typeof t10 !== "number")
                          throw t10.$mul();
                        t2.y = $.$mul$n(t10, invMassB);
                        t10 = bodyB.get$sweep().center;
                        t11 = t10.x;
                      case 11:
                        state0 = 0;
                        t9 = t2.x;
                      case 12:
                        state0 = 0;
                        t10.x = $.$add$ns(t11, t9);
                        t9 = t10.y;
                      case 13:
                        state0 = 0;
                        t11 = t2.y;
                      case 14:
                        state0 = 0;
                        t10.y = $.$add$ns(t9, t11);
                        t11 = bodyB.get$sweep();
                        t9 = t11.angle;
                      case 15:
                        state0 = 0;
                        t10 = t4.x;
                        t7 = t1.y;
                      case 16:
                        state0 = 0;
                        if (typeof t10 !== "number")
                          throw t10.$mul();
                        t7 = $.$mul$n(t10, t7);
                        t10 = t4.y;
                        t8 = t1.x;
                      case 17:
                        state0 = 0;
                        if (typeof t10 !== "number")
                          throw t10.$mul();
                        t11.angle = $.$add$ns(t9, invIB * (t7 - $.$mul$n(t10, t8)));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  },
  TimeOfImpactSolver$0: function() {
    var i, t1;
    for (i = 0; t1 = this.constraints, i < t1.length; ++i)
      t1[i] = $.TimeOfImpactConstraint$();
  }
},

TimeOfImpactSolverManifold: {"": "Object;normal<,point,separation,pointA<,pointB<,temp,planePoint,clipPoint",
  initialize$2: function(cc, index) {
    var t1, t2, t3, t4, t5, t6;
    switch (cc.get$type()) {
      case 0:
        t1 = this.pointA;
        t2 = cc.get$bodyA().getWorldPoint$1(cc.get$localPoint());
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.pointB;
        t3 = cc.get$bodyB();
        t4 = cc.get$localPoints();
        if (0 >= t4.length)
          throw $.ioore(0);
        t4 = t3.getWorldPoint$1(t4[0]);
        t3 = t4.x;
        t4 = t4.y;
        t2.x = t3;
        t2.y = t4;
        t3 = this.normal;
        if ($.MathBox_distanceSquared(t1, t2) > 1.4208639999999999e-14) {
          t4 = t2.x;
          t5 = t2.y;
          t3.x = t4;
          t3.y = t5;
          t3.x = $.$sub$n(t3.x, t1.x);
          t3.y = $.$sub$n(t3.y, t1.y);
          t3.normalize$0();
        } else {
          t3.x = 1;
          t3.y = 0;
        }
        t3 = this.point;
        t4 = t1.x;
        t5 = t1.y;
        t3.x = t4;
        t3.y = t5;
        t3.x = $.$add$ns(t3.x, t2.x);
        t3.y = $.$add$ns(t3.y, t2.y);
        t3.x = $.$mul$n(t3.x, 0.5);
        t3.y = $.$mul$n(t3.y, 0.5);
        t3 = this.temp;
        t5 = t2.x;
        t2 = t2.y;
        t3.x = t5;
        t3.y = t2;
        t3.x = $.$sub$n(t3.x, t1.x);
        t3.y = $.$sub$n(t3.y, t1.y);
        t1 = this.normal;
        t2 = $.$mul$n(t3.x, t1.x);
        t1 = $.$mul$n(t3.y, t1.y);
        t3 = cc.get$radius();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        this.separation = t2 + t1 - t3;
        break;
      case 1:
        t1 = this.normal;
        t2 = cc.get$bodyA().getWorldVector$1(cc.get$localNormal());
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.planePoint;
        t3 = cc.get$bodyA().getWorldPoint$1(cc.get$localPoint());
        t4 = t3.x;
        t3 = t3.y;
        t2.x = t4;
        t2.y = t3;
        t3 = this.clipPoint;
        t4 = cc.get$bodyB();
        t5 = cc.get$localPoints();
        if (index < 0 || index >= t5.length)
          throw $.ioore(index);
        t5 = t4.getWorldPoint$1(t5[index]);
        t4 = t5.x;
        t5 = t5.y;
        t3.x = t4;
        t3.y = t5;
        t5 = this.temp;
        t4 = t3.x;
        t6 = t3.y;
        t5.x = t4;
        t5.y = t6;
        t5.x = $.$sub$n(t5.x, t2.x);
        t5.y = $.$sub$n(t5.y, t2.y);
        t2 = $.$mul$n(t5.x, t1.x);
        t1 = $.$mul$n(t5.y, t1.y);
        t5 = cc.get$radius();
        if (typeof t5 !== "number")
          throw $.iae(t5);
        this.separation = t2 + t1 - t5;
        t5 = this.point;
        t1 = t3.x;
        t3 = t3.y;
        t5.x = t1;
        t5.y = t3;
        break;
      case 2:
        t1 = this.normal;
        t2 = cc.get$bodyB().getWorldVector$1(cc.get$localNormal());
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.planePoint;
        t3 = cc.get$bodyB().getWorldPoint$1(cc.get$localPoint());
        t4 = t3.x;
        t3 = t3.y;
        t2.x = t4;
        t2.y = t3;
        t3 = this.clipPoint;
        t4 = cc.get$bodyA();
        t5 = cc.get$localPoints();
        if (index < 0 || index >= t5.length)
          throw $.ioore(index);
        t5 = t4.getWorldPoint$1(t5[index]);
        t4 = t5.x;
        t5 = t5.y;
        t3.x = t4;
        t3.y = t5;
        t5 = this.temp;
        t4 = t3.x;
        t6 = t3.y;
        t5.x = t4;
        t5.y = t6;
        t5.x = $.$sub$n(t5.x, t2.x);
        t5.y = $.$sub$n(t5.y, t2.y);
        t2 = $.$mul$n(t5.x, t1.x);
        t5 = $.$mul$n(t5.y, t1.y);
        t6 = cc.get$radius();
        if (typeof t6 !== "number")
          throw $.iae(t6);
        this.separation = t2 + t5 - t6;
        t6 = this.point;
        t5 = t3.x;
        t3 = t3.y;
        t6.x = t5;
        t6.y = t3;
        t1.x = $.$negate$n(t1.x);
        t1.y = $.$negate$n(t1.y);
        break;
    }
  }
},

Joint: {"": "Object;type@,_next<,bodyA@,bodyB@,islandFlag@,userData@"},

DefaultWorldPool: {"": "Object;collision,timeOfImpact,distance@",
  getCircleContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.CircleContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  getPolyCircleContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.PolygonAndCircleContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  getPolyContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.PolygonContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  DefaultWorldPool$0: function() {
    this.distance = $.Distance$_construct();
    this.collision = $.Collision$_construct(this);
    this.timeOfImpact = $.TimeOfImpact$_construct(this);
  }
},

AxisAlignedBox_testOverlap: function(a, b) {
  var t1, t2, t3;
  t1 = b.lowerBound;
  t2 = t1.x;
  t3 = a.get$upperBound();
  if (!($.$gt$n(t2, t3.x) || $.$gt$n(t1.y, t3.y))) {
    t1 = a.get$lowerBound();
    t2 = t1.x;
    t3 = b.upperBound;
    t1 = $.$gt$n(t2, t3.x) || $.$gt$n(t1.y, t3.y);
  } else
    t1 = true;
  return !t1;
},

Collision$_construct: function(pool) {
  var t1, t2, t3, t4;
  t1 = $.DistanceProxy$();
  t2 = $.DistanceProxy$();
  t3 = $.Matrix22$(null, null);
  t4 = $.Matrix22$(null, null);
  t4 = new $.Collision(pool, $.SimplexCache$(), new $.DistanceInput(t1, t2, new $.Transform(new $.Vector(0, 0), t3), new $.Transform(new $.Vector(0, 0), t4), false), new $.DistanceOutput(new $.Vector(0, 0), new $.Vector(0, 0), null, null), new $.EdgeResults(0, 0), new $.EdgeResults(0, 0), $.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), $.List_List(2), $.List_List(2));
  t4.Collision$_construct$1(pool);
  return t4;
},

Collision_clipSegmentToLine: function(vOut, vIn, norm, offset) {
  var t1, t2, t3, t4, t5, t6, t7, t8, distance0, distance1, numOut, numOut0, interp, vin, vin0;
  t1 = vIn.length;
  if (0 >= t1)
    throw $.ioore(0);
  t2 = vIn[0];
  t3 = t2.get$v();
  t4 = norm.x;
  t5 = $.getInterceptor$n(t4);
  t6 = t5.$mul(t4, t3.x);
  t7 = norm.y;
  t8 = $.getInterceptor$n(t7);
  distance0 = t6 + t8.$mul(t7, t3.y) - offset;
  if (1 >= t1)
    throw $.ioore(1);
  t1 = vIn[1].get$v();
  distance1 = t5.$mul(t4, t1.x) + t8.$mul(t7, t1.y) - offset;
  if (distance0 <= 0) {
    if (0 >= vOut.length)
      throw $.ioore(0);
    vOut[0].setFrom$1(t2);
    numOut = 1;
  } else
    numOut = 0;
  if (distance1 <= 0) {
    numOut0 = numOut + 1;
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].setFrom$1(vIn[1]);
    numOut = numOut0;
  }
  if (distance0 * distance1 < 0) {
    interp = distance0 / (distance0 - distance1);
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    t1 = vOut[numOut];
    t2 = t1.get$v();
    vin = vIn[1];
    t3 = vin.get$v();
    t4 = t3.x;
    t3 = t3.y;
    t2.x = t4;
    t2.y = t3;
    vin0 = vIn[0];
    t3 = vin0.get$v();
    t2.x = $.$sub$n(t2.x, t3.x);
    t2.y = $.$sub$n(t2.y, t3.y);
    t2.x = $.$mul$n(t2.x, interp);
    t2.y = $.$mul$n(t2.y, interp);
    t3 = vin0.get$v();
    t2.x = $.$add$ns(t2.x, t3.x);
    t2.y = $.$add$ns(t2.y, t3.y);
    if (distance0 > 0)
      vin = vin0;
    t1 = t1.get$id();
    t1 = t1.features;
    t2 = vin.get$id().features;
    t1.referenceEdge = t2.referenceEdge;
    t1.incidentEdge = t2.incidentEdge;
    t1.incidentVertex = t2.incidentVertex;
    t1.flip = t2.flip;
    ++numOut;
  }
  return numOut;
},

Distance$_construct: function() {
  return new $.Distance(0, 0, 20, $.Simplex$(), $.List_List(3), $.List_List(3), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
},

DistanceProxy$: function() {
  var t1 = new $.DistanceProxy($.List_List(8), 0, 0);
  t1.DistanceProxy$0();
  return t1;
},

Manifold$: function() {
  var t1 = new $.Manifold($.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0), null, 0);
  t1.Manifold$0();
  return t1;
},

Simplex$: function() {
  var t1 = new $.Simplex(new $.SimplexVertex(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0, 0), new $.SimplexVertex(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0, 0), new $.SimplexVertex(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0, 0), $.List_List(3), 0, new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
  t1.Simplex$0();
  return t1;
},

SimplexCache$: function() {
  var t1 = new $.SimplexCache(0, 0, $.List_List(3), $.List_List(3));
  t1.SimplexCache$0();
  return t1;
},

TimeOfImpact$_construct: function(argPool) {
  var t1 = new $.TimeOfImpact($.SimplexCache$(), new $.DistanceInput($.DistanceProxy$(), $.DistanceProxy$(), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)), false), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)), new $.DistanceOutput(new $.Vector(0, 0), new $.Vector(0, 0), null, null), $.SeparationFunction$(), $.List_List(2), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), argPool);
  t1.TimeOfImpact$_construct$1(argPool);
  return t1;
},

SeparationFunction$: function() {
  return new $.SeparationFunction($.DistanceProxy$(), $.DistanceProxy$(), 0, new $.Vector(0, 0), new $.Vector(0, 0), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)));
},

WorldManifold$: function() {
  var t1 = new $.WorldManifold(new $.Vector(0, 0), $.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0));
  t1.WorldManifold$0();
  return t1;
},

BroadPhase$: function() {
  var t1 = new $.BroadPhase($.DynamicTree$(), 0, null, null, 16, 0, null);
  t1.BroadPhase$0();
  return t1;
},

DynamicTree$: function() {
  var t1, t2;
  t1 = $.List_List(4);
  t2 = new $.AxisAlignedBox(null, null);
  if (t2.lowerBound == null)
    t2.lowerBound = new $.Vector(0, 0);
  if (t2.upperBound == null)
    t2.upperBound = new $.Vector(0, 0);
  t1 = new $.DynamicTree(null, 0, null, 0, 0, $.ListQueue$(null), t1, 0, new $.Vector(0, 0), t2, new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
  t1.DynamicTree$0();
  return t1;
},

PolygonShape$: function() {
  var t1 = new $.PolygonShape(new $.Vector(0, 0), $.List_List(8), $.List_List(8), 0, 1, 0.01);
  t1.PolygonShape$0();
  return t1;
},

PolygonShape$copy: function(other) {
  var t1, t2, t3, t4, t5;
  t1 = other.radius;
  t2 = other.vertexCount;
  t3 = $.List_List(8);
  t4 = $.List_List(8);
  t5 = other.centroid;
  t1 = new $.PolygonShape(new $.Vector(t5.x, t5.y), t3, t4, t2, 1, t1);
  t1.PolygonShape$copy$1(other);
  return t1;
},

MathBox_distanceSquared: function(v1, v2) {
  var dx, dy;
  dx = $.$sub$n(v1.x, v2.x);
  dy = $.$sub$n(v1.y, v2.y);
  return dx * dx + dy * dy;
},

Matrix22$: function(c1, c2) {
  var t1 = new $.Matrix22(null, null);
  t1.Matrix22$2(c1, c2);
  return t1;
},

Matrix22_mulTransMatrixAndVectorToOut: function(matrix, vector, out) {
  var t1, t2, t3, t4, t5, t6, outx;
  t1 = vector.x;
  t2 = matrix.col1;
  t3 = t2.x;
  if (typeof t3 !== "number")
    return $.Matrix22_mulTransMatrixAndVectorToOut$bailout(1, t1, matrix, out, t3, t2, vector);
  t4 = $.getInterceptor$n(t1);
  if (typeof t1 !== "number")
    throw t1.$mul();
  t3 = t1 * t3;
  t5 = vector.y;
  t2 = t2.y;
  if (typeof t2 !== "number")
    return $.Matrix22_mulTransMatrixAndVectorToOut$bailout(2, t1, matrix, out, t3, t2, 0, t5, t4);
  t6 = $.getInterceptor$n(t5);
  if (typeof t5 !== "number")
    throw t5.$mul();
  outx = t3 + t5 * t2;
  t2 = matrix.col2;
  t3 = t2.x;
  if (typeof t3 !== "number")
    return $.Matrix22_mulTransMatrixAndVectorToOut$bailout(3, t1, 0, out, t3, t2, 0, t5, t4, t6, outx);
  t3 = t1 * t3;
  t2 = t2.y;
  if (typeof t2 !== "number")
    return $.Matrix22_mulTransMatrixAndVectorToOut$bailout(4, 0, 0, out, t3, t2, 0, t5, 0, t6, outx);
  out.y = t3 + t5 * t2;
  out.x = outx;
},

Matrix22_mulTransMatrixAndVectorToOut$bailout: function(state0, t1, matrix, out, t3, t2, vector, t5, t4, t6, outx) {
  switch (state0) {
    case 0:
      t1 = vector.x;
      t2 = matrix.col1;
      t3 = t2.x;
    case 1:
      state0 = 0;
      t4 = $.getInterceptor$n(t1);
      if (typeof t1 !== "number")
        throw t1.$mul();
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t3 = t4.$mul(t1, t3);
      t5 = vector.y;
      t2 = t2.y;
    case 2:
      state0 = 0;
      t6 = $.getInterceptor$n(t5);
      if (typeof t5 !== "number")
        throw t5.$mul();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      outx = t3 + t6.$mul(t5, t2);
      t2 = matrix.col2;
      t3 = t2.x;
    case 3:
      state0 = 0;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t3 = t4.$mul(t1, t3);
      t2 = t2.y;
    case 4:
      state0 = 0;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      out.y = t3 + t6.$mul(t5, t2);
      out.x = outx;
  }
},

Matrix22_mulMatrixAndVectorToOut: function(matrix, vector, out) {
  var t1, t2, t3, t4, t5, t6;
  t1 = matrix.get$col1();
  t2 = t1.y;
  t3 = vector.get$x();
  if (typeof t3 !== "number")
    return $.Matrix22_mulMatrixAndVectorToOut$bailout(1, matrix, vector, out, t2, t1, t3);
  if (typeof t2 !== "number")
    throw t2.$mul();
  t2 *= t3;
  t4 = matrix.get$col2();
  t5 = t4.y;
  t6 = vector.get$y();
  if (typeof t6 !== "number")
    return $.Matrix22_mulMatrixAndVectorToOut$bailout(2, 0, 0, out, t2, t1, t3, t5, t4, t6);
  if (typeof t5 !== "number")
    throw t5.$mul();
  t1 = t1.x;
  if (typeof t1 !== "number")
    throw t1.$mul();
  t4 = t4.x;
  if (typeof t4 !== "number")
    throw t4.$mul();
  out.x = t1 * t3 + t4 * t6;
  out.y = t2 + t5 * t6;
},

Matrix22_mulMatrixAndVectorToOut$bailout: function(state0, matrix, vector, out, t2, t1, t3, t5, t4, t6) {
  switch (state0) {
    case 0:
      t1 = matrix.get$col1();
      t2 = t1.y;
      t3 = vector.get$x();
    case 1:
      state0 = 0;
      if (typeof t2 !== "number")
        throw t2.$mul();
      t2 = $.$mul$n(t2, t3);
      t4 = matrix.get$col2();
      t5 = t4.y;
      t6 = vector.get$y();
    case 2:
      state0 = 0;
      if (typeof t5 !== "number")
        throw t5.$mul();
      t5 = $.$mul$n(t5, t6);
      t1 = t1.x;
      if (typeof t1 !== "number")
        throw t1.$mul();
      t3 = $.$mul$n(t1, t3);
      t4 = t4.x;
      if (typeof t4 !== "number")
        throw t4.$mul();
      out.x = t3 + $.$mul$n(t4, t6);
      out.y = t2 + t5;
  }
},

Transform_mulToOut: function(transform, vector, out) {
  var t1, t2, t3, t4, t5, t6, t7, tempY;
  t1 = transform.position;
  t2 = t1.y;
  if (typeof t2 !== "number")
    return $.Transform_mulToOut$bailout(1, transform, vector, out, t1, t2);
  t3 = transform.rotation;
  t4 = t3.col1;
  t5 = t4.y;
  t6 = vector.get$x();
  if (typeof t6 !== "number")
    return $.Transform_mulToOut$bailout(2, 0, vector, out, t1, t2, t4, t5, t6, t3);
  if (typeof t5 !== "number")
    throw t5.$mul();
  t5 = t2 + t5 * t6;
  t3 = t3.col2;
  t2 = t3.y;
  t7 = vector.get$y();
  if (typeof t7 !== "number")
    return $.Transform_mulToOut$bailout(3, 0, 0, out, t1, t2, t4, t5, t6, t3, t7);
  if (typeof t2 !== "number")
    throw t2.$mul();
  tempY = t5 + t2 * t7;
  t1 = t1.x;
  if (typeof t1 !== "number")
    return $.Transform_mulToOut$bailout(4, 0, 0, out, t1, 0, t4, 0, t6, t3, t7, tempY);
  t4 = t4.x;
  if (typeof t4 !== "number")
    throw t4.$mul();
  t3 = t3.x;
  if (typeof t3 !== "number")
    throw t3.$mul();
  out.x = t1 + t4 * t6 + t3 * t7;
  out.y = tempY;
},

Transform_mulToOut$bailout: function(state0, transform, vector, out, t1, t2, t4, t5, t6, t3, t7, tempY) {
  switch (state0) {
    case 0:
      t1 = transform.position;
      t2 = t1.y;
    case 1:
      state0 = 0;
      t3 = transform.rotation;
      t4 = t3.col1;
      t5 = t4.y;
      t6 = vector.get$x();
    case 2:
      state0 = 0;
      if (typeof t5 !== "number")
        throw t5.$mul();
      t5 = $.$add$ns(t2, $.$mul$n(t5, t6));
      t3 = t3.col2;
      t2 = t3.y;
      t7 = vector.get$y();
    case 3:
      state0 = 0;
      if (typeof t2 !== "number")
        throw t2.$mul();
      tempY = $.$add$ns(t5, $.$mul$n(t2, t7));
      t1 = t1.x;
    case 4:
      state0 = 0;
      t4 = t4.x;
      if (typeof t4 !== "number")
        throw t4.$mul();
      t6 = $.$add$ns(t1, $.$mul$n(t4, t6));
      t3 = t3.x;
      if (typeof t3 !== "number")
        throw t3.$mul();
      out.x = $.$add$ns(t6, $.$mul$n(t3, t7));
      out.y = tempY;
  }
},

Transform_mulTransToOut: function(T, v, out) {
  var t1, t2, t3, v1x, v1y, b, b1, t4;
  t1 = v.x;
  t2 = T.position;
  t3 = t2.x;
  if (typeof t3 !== "number")
    return $.Transform_mulTransToOut$bailout(1, T, v, out, t3, t1, t2);
  if (typeof t1 !== "number")
    throw t1.$sub();
  v1x = t1 - t3;
  t3 = v.y;
  t2 = t2.y;
  if (typeof t2 !== "number")
    return $.Transform_mulTransToOut$bailout(2, T, 0, out, t3, 0, t2, v1x);
  if (typeof t3 !== "number")
    throw t3.$sub();
  v1y = t3 - t2;
  t2 = T.rotation;
  b = t2.col1;
  b1 = t2.col2;
  t2 = b1.x;
  if (typeof t2 !== "number")
    throw $.iae(t2);
  t3 = b1.y;
  if (typeof t3 !== "number")
    throw $.iae(t3);
  t1 = b.x;
  if (typeof t1 !== "number")
    throw $.iae(t1);
  t4 = b.y;
  if (typeof t4 !== "number")
    throw $.iae(t4);
  out.x = v1x * t1 + v1y * t4;
  out.y = v1x * t2 + v1y * t3;
},

Transform_mulTransToOut$bailout: function(state0, T, v, out, t3, t1, t2, v1x) {
  switch (state0) {
    case 0:
      t1 = v.x;
      t2 = T.position;
      t3 = t2.x;
    case 1:
      state0 = 0;
      if (typeof t1 !== "number")
        throw t1.$sub();
      v1x = $.$sub$n(t1, t3);
      t3 = v.y;
      t2 = t2.y;
    case 2:
      var v1y, b, b1, t4;
      state0 = 0;
      if (typeof t3 !== "number")
        throw t3.$sub();
      v1y = $.$sub$n(t3, t2);
      t2 = T.rotation;
      b = t2.col1;
      b1 = t2.col2;
      t2 = b1.x;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t3 = b1.y;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t1 = b.x;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t4 = b.y;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      out.x = v1x * t1 + v1y * t4;
      out.y = v1x * t2 + v1y * t3;
  }
},

Vector_minToOut: function(a, b, out) {
  var t1, t2;
  t1 = a.x;
  t2 = b.x;
  if (typeof t2 !== "number")
    return $.Vector_minToOut$bailout(1, a, b, out, t1, t2);
  if (typeof t1 !== "number")
    throw t1.$lt();
  if (t1 < t2)
    ;
  else
    t1 = t2;
  out.x = t1;
  t1 = a.y;
  t2 = b.y;
  if (typeof t2 !== "number")
    return $.Vector_minToOut$bailout(2, 0, 0, out, t1, t2);
  if (typeof t1 !== "number")
    throw t1.$lt();
  if (t1 < t2)
    ;
  else
    t1 = t2;
  out.y = t1;
},

Vector_minToOut$bailout: function(state0, a, b, out, t1, t2) {
  switch (state0) {
    case 0:
      t1 = a.x;
      t2 = b.x;
    case 1:
      state0 = 0;
      if (typeof t1 !== "number")
        throw t1.$lt();
      if ($.$lt$n(t1, t2))
        ;
      else
        t1 = t2;
      out.x = t1;
      t1 = a.y;
      t2 = b.y;
    case 2:
      state0 = 0;
      if (typeof t1 !== "number")
        throw t1.$lt();
      if ($.$lt$n(t1, t2))
        ;
      else
        t1 = t2;
      out.y = t1;
  }
},

Vector_maxToOut: function(a, b, out) {
  var t1, t2;
  t1 = a.x;
  t2 = b.x;
  if (typeof t2 !== "number")
    return $.Vector_maxToOut$bailout(1, a, b, out, t1, t2);
  if (typeof t1 !== "number")
    throw t1.$gt();
  if (t1 > t2)
    ;
  else
    t1 = t2;
  out.x = t1;
  t1 = a.y;
  t2 = b.y;
  if (typeof t2 !== "number")
    return $.Vector_maxToOut$bailout(2, 0, 0, out, t1, t2);
  if (typeof t1 !== "number")
    throw t1.$gt();
  if (t1 > t2)
    ;
  else
    t1 = t2;
  out.y = t1;
},

Vector_maxToOut$bailout: function(state0, a, b, out, t1, t2) {
  switch (state0) {
    case 0:
      t1 = a.x;
      t2 = b.x;
    case 1:
      state0 = 0;
      if (typeof t1 !== "number")
        throw t1.$gt();
      if ($.$gt$n(t1, t2))
        ;
      else
        t1 = t2;
      out.x = t1;
      t1 = a.y;
      t2 = b.y;
    case 2:
      state0 = 0;
      if (typeof t1 !== "number")
        throw t1.$gt();
      if ($.$gt$n(t1, t2))
        ;
      else
        t1 = t2;
      out.y = t1;
  }
},

Body$: function(bd, world) {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.Matrix22$(null, null);
  t2 = bd.linearVelocity;
  t3 = t2.x;
  t2 = t2.y;
  t4 = bd.userData;
  t5 = $.FixtureDef$();
  t6 = $.Matrix22$(null, null);
  t6 = new $.Body(world, 0, null, 0, t4, new $.Vector(t3, t2), 0, null, null, null, null, null, 0, null, new $.Vector(0, 0), 0, 0, 0, bd.linearDamping, bd.angularDamping, bd.type, null, new $.Transform(new $.Vector(0, 0), t1), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), t5, new $.MassData(0, new $.Vector(0, 0), 0), new $.Transform(new $.Vector(0, 0), t6), new $.Vector(0, 0), new $.Vector(0, 0));
  t6.Body$2(bd, world);
  return t6;
},

BodyDef$: function() {
  return new $.BodyDef(0, 0, null, new $.Vector(0, 0), new $.Vector(0, 0), 0, false, null, false, true, 0, 0, true, true);
},

Fixture$: function() {
  var t1, t2, t3;
  t1 = new $.AxisAlignedBox(null, null);
  if (t1.lowerBound == null)
    t1.lowerBound = new $.Vector(0, 0);
  if (t1.upperBound == null)
    t1.upperBound = new $.Vector(0, 0);
  t2 = new $.AxisAlignedBox(null, null);
  if (t2.lowerBound == null)
    t2.lowerBound = new $.Vector(0, 0);
  if (t2.upperBound == null)
    t2.upperBound = new $.Vector(0, 0);
  t3 = new $.AxisAlignedBox(null, null);
  if (t3.lowerBound == null)
    t3.lowerBound = new $.Vector(0, 0);
  if (t3.upperBound == null)
    t3.upperBound = new $.Vector(0, 0);
  return new $.Fixture(t1, null, null, null, null, null, null, null, new $.Filter(0, 0, 0), null, null, t2, t3);
},

FixtureDef$: function() {
  var t1 = new $.FixtureDef(null, null, 0.2, 0, 0, false, new $.Filter(0, 0, 0));
  t1.FixtureDef$0();
  return t1;
},

World$: function(gravity, doSleep, argPool) {
  var t1 = new $.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, $.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0), new $.TimeStep(0, 0, 0, 0, 0, true), new $.Vector(0, 0), new $.Vector(0, 0), new $.WorldQueryWrapper(null, null), new $.TimeOfImpactInput($.DistanceProxy$(), $.DistanceProxy$(), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), 0), new $.TimeOfImpactOutput(0, 0), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), $.TimeOfImpactSolver$(), $.List_List(32), new $.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, $.ContactSolver$(), new $.Vector(0, 0), new $.ContactImpulse($.List_List(2), $.List_List(2))), $.List_List(10));
  t1.World$3(gravity, doSleep, argPool);
  return t1;
},

ContactConstraint$: function() {
  var t1 = new $.ContactConstraint($.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), $.Matrix22$(null, null), $.Matrix22$(null, null), null, null, null, null, null, null, 0, null);
  t1.ContactConstraint$0();
  return t1;
},

ContactConstraintPoint$: function() {
  return new $.ContactConstraintPoint(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0, 0, 0, 0);
},

ContactSolver$: function() {
  var t1 = new $.ContactSolver($.List_List(256), null, $.WorldManifold$(), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), $.PositionSolverManifold$(), new $.Vector(0, 0), new $.Vector(0, 0));
  t1.ContactSolver$0();
  return t1;
},

PositionSolverManifold$: function() {
  return new $.PositionSolverManifold(new $.Vector(0, 0), new $.Vector(0, 0), 0, new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
},

TimeOfImpactConstraint$: function() {
  var t1 = new $.TimeOfImpactConstraint($.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0, 0, null, null);
  t1.TimeOfImpactConstraint$0();
  return t1;
},

TimeOfImpactSolver$: function() {
  var t1 = new $.TimeOfImpactSolver($.List_List(4), 0, null, $.TimeOfImpactSolverManifold$(), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
  t1.TimeOfImpactSolver$0();
  return t1;
},

TimeOfImpactSolverManifold$: function() {
  return new $.TimeOfImpactSolverManifold(new $.Vector(0, 0), new $.Vector(0, 0), 0, new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
}}],
["dart._collection.dev", {
ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new $.ListIterator(this, this.get$length(this), 0, null);
  },
  skip$1: function(_, count) {
    return new $.SubListIterable(this, count, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else
      result = $.List_List(this.get$length(this));
    for (i = 0; i < this.get$length(this); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  $asIterable: null
},

SubListIterable: {"": "ListIterable;_iterable,_liblib$_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$as(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$as(this._iterable);
    t1 = this._liblib$_start;
    if ($.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$as(this._iterable);
    t1 = this._liblib$_start;
    if (typeof t1 !== "number")
      throw t1.$ge();
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (typeof t2 !== "number")
      return this.get$length$bailout2(1, t2, $length, t1);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, t2, $length, t1) {
    if (t2 == null || $.$ge$n(t2, $length)) {
      if (typeof t1 !== "number")
        throw $.iae(t1);
      return $length - t1;
    }
    return $.$sub$n(t2, t1);
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(3, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
    }
    return $.elementAt$1$a(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
      case 3:
        if (state0 === 3 || state0 === 0 && !$.$lt$n(index, 0))
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t1 = $.$ge$n(realIndex, t1);
          }
        else
          t1 = true;
        if (t1) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
        }
        return $.elementAt$1$a(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if (count < 0)
      throw $.wrapException(new $.ArgumentError(count));
    return new $.SubListIterable(this._iterable, $.$add$ns(this._liblib$_start, count), this._endOrLength);
  },
  $asIterable: null
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, $length, t2;
    t1 = this._iterable;
    $length = $.get$length$as(t1);
    if (this._length !== $length)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t2 = this._index;
    if (t2 >= $length) {
      this._current = null;
      return false;
    }
    this._current = $.elementAt$1$a(t1, t2);
    this._index = this._index + 1;
    return true;
  }
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    var t1, t2;
    if (n < 0)
      throw $.wrapException(new $.ArgumentError(n));
    t1 = new $.SkipIterable(this._iterable, $.$add$ns(this._skipCount, n));
    t2 = t1._skipCount;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0))
      $.throwExpression(new $.ArgumentError(t2));
    return t1;
  },
  get$iterator: function(_) {
    return new $.SkipIterator($.get$iterator$a(this._iterable), this._skipCount);
  },
  SkipIterable$2: function(_iterable, _skipCount) {
    var t1 = this._skipCount;
    if (typeof t1 !== "number" || Math.floor(t1) !== t1 || $.$lt$n(t1, 0))
      throw $.wrapException(new $.ArgumentError(t1));
  },
  $asIterable: null
},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount) {
  }
},

Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.isJsIndexable(src, src[$.dispatchPropertyName])))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart) {
    i = srcStart + count - 1;
    j = dstStart + count - 1;
    if (j !== (j | 0))
      return $.Arrays_copy$bailout(2, src, srcStart, dst, 0, 0, i, j);
    t1 = src.length;
    for (; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t2 = src[i];
      if (j < 0 || j >= dst.length)
        throw $.ioore(j);
      dst[j] = t2;
    }
  } else
    for (t1 = src.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t2 = src[i];
      if (j < 0 || j >= dst.length)
        throw $.ioore(j);
      dst[j] = t2;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count, i, j) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    case 2:
      var t1, t2;
      if (state0 === 2 || state0 === 0 && srcStart < dstStart)
        switch (state0) {
          case 0:
            i = srcStart + count - 1;
            j = dstStart + count - 1;
          case 2:
            state0 = 0;
            t1 = $.getInterceptor$as(src);
            for (; i >= srcStart; --i, --j) {
              t2 = t1.$index(src, i);
              if (j >>> 0 !== j || j >= dst.length)
                throw $.ioore(j);
              dst[j] = t2;
            }
        }
      else
        for (t1 = $.getInterceptor$as(src), j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
          t2 = t1.$index(src, i);
          if (j < 0 || j >= dst.length)
            throw $.ioore(j);
          dst[j] = t2;
        }
  }
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1;
  if (start < 0 || start > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + t1));
  }
  if (end < start || end > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + start + ".." + t1));
  }
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList, t1;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw $.wrapException(new $.ArgumentError(skipCount));
  if (typeof from === "object" && from !== null && (from.constructor === Array || !!$.getInterceptor(from).$isList)) {
    otherStart = skipCount;
    otherList = from;
  } else {
    t1 = $.skip$1$a(from, skipCount);
    otherList = t1.toList$1$growable(t1, false);
    otherStart = 0;
  }
  if (otherStart + $length > $.get$length$as(otherList))
    throw $.wrapException(new $.StateError("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
},

Sort_insertionSort_: function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[$.dispatchPropertyName]))
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0);
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
},

Sort_insertionSort_$bailout: function(state0, a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = $.getInterceptor$as(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && $.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, pivots_are_equal, k, ak, comp, great0, less0, t3;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[$.dispatchPropertyName]))
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.JSNumber_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.JSNumber_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 >>> 0 !== index1 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 >>> 0 !== index2 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 >>> 0 !== index3 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 >>> 0 !== index4 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 >>> 0 !== index5 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left >>> 0 !== left || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right >>> 0 !== right || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t1 = $.getInterceptor(comp);
      if (t1.$eq(comp, 0))
        continue;
      if (t1.$lt(comp, 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t1 = $.getInterceptor$n(comp);
          if (t1.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = t1.$lt(comp, 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  t1 = less - 2;
  if (t1 - left <= 32)
    $.Sort_insertionSort_(a, left, t1, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t1, compare);
  t1 = great + 2;
  if (right - t1 <= 32)
    $.Sort_insertionSort_(a, t1, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t1, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!$.$eq(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.$eq(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
},

Sort__dualPivotQuicksort$bailout: function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, pivots_are_equal, k, ak, comp, t2, great0, less0;
  sixth = $.JSNumber_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.JSNumber_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = $.getInterceptor$as(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if ($.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t2 = $.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t2.$lt(comp, 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if ($.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if ($.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if ($.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
  t2 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t2));
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t2));
  t1.$indexSet(a, t2, el4);
  t2 = less - 2;
  if (t2 - left <= 32)
    $.Sort_insertionSort_(a, left, t2, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t2, compare);
  t2 = great + 2;
  if (right - t2 <= 32)
    $.Sort_insertionSort_(a, t2, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    for (; $.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
      ++less;
    for (; $.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if ($.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if ($.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if ($.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
},

ToString__emitValue: function(i, result, visiting) {
  var isList, t1, first, e;
  visiting.push(i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(isList ? "[" : "{");
  for (t1 = $.get$iterator$a(i), first = true; t1.moveNext$0() === true; first = false) {
    e = t1.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  if (0 >= visiting.length)
    throw $.ioore(0);
  visiting.pop();
},

ToString__emitObject: function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable)) {
    o;
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  } else
    result.write$1(o);
},

ToString__containsRef: function(i, ref) {
  var t1;
  for (t1 = $.JSArray_methods.get$iterator(i); t1.moveNext$0();)
    if (t1.get$current() === ref)
      return true;
  return false;
}}],
["dart.collection", {
IterableBase: {"": "Object;",
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  skip$1: function(_, n) {
    var t1, t2;
    t1 = new $.SkipIterable(this, n);
    t2 = t1._skipCount;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0))
      $.throwExpression(new $.ArgumentError(t2));
    return t1;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      remaining = $.$sub$n(remaining, 1);
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  $isIterable: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return new $._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$gt(index, (this._tail - this._head & this._table.length - 1) >>> 0)) {
      t1 = this._tail;
      t2 = this._head;
      t3 = this._table;
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + ((t1 - t2 & t3.length - 1) >>> 0)));
    }
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    return t1[t2];
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(this, result, $.List_List($));
    return result._contents;
  },
  addFirst$1: function(element) {
    var t1, t2;
    this._head = (this._head - 1 & this._table.length - 1) >>> 0;
    t1 = this._table;
    t2 = this._head;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    if (t2 === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    if (!!newTable.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    if (!!newTable.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity) {
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if ($.JSNull_methods.$and(initialCapacity, $.JSNull_methods.$sub(initialCapacity, 1)) !== 0)
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    this._table = $.List_List(initialCapacity);
  },
  $asIterable: null,
  $isIterable: true
},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression(new $.ConcurrentModificationError(t1));
    t2 = this._position;
    if (t2 === this._end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib0$_current = t3[t2];
    this._position = (this._position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
},

ListQueue$: function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  number = $.JSNull_methods.$shl(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
}}],
["dart.core", {
NullThrownError: {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Object;message",
  toString$0: function(_) {
    return "Illegal argument(s): " + $.S(this.message);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

UnsupportedError: {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

StateError: {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Object;modifiedObject",
  toString$0: function(_) {
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(this.modifiedObject)) + ".";
  }
},

Iterator: {"": "Object;"},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  toString$0: function(_) {
    return "Instance of '" + $.Primitives_objectTypeName(this) + "'";
  }
},

Stopwatch: {"": "Object;_start,_stop",
  start$0: function() {
    var t1, t2, t3;
    t1 = this._start == null;
    if (!t1 && this._stop == null)
      return;
    if (t1)
      this._start = $.Primitives_numMicroseconds();
    else {
      t1 = $.Primitives_numMicroseconds();
      t2 = this._stop;
      t3 = this._start;
      if (typeof t3 !== "number")
        return this.start$0$bailout(1, t1, t2, t3);
      if (typeof t2 !== "number")
        throw t2.$sub();
      this._start = t1 - (t2 - t3);
      this._stop = null;
    }
  },
  start$0$bailout: function(state0, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this._start == null;
        if (!t1 && this._stop == null)
          return;
      case 1:
        if (state0 === 0 && t1)
          this._start = $.Primitives_numMicroseconds();
        else
          switch (state0) {
            case 0:
              t1 = $.Primitives_numMicroseconds();
              t2 = this._stop;
              t3 = this._start;
            case 1:
              state0 = 0;
              if (typeof t2 !== "number")
                throw t2.$sub();
              this._start = t1 - $.$sub$n(t2, t3);
              this._stop = null;
          }
    }
  },
  stop$0: function() {
    if (!(this._start != null && this._stop == null))
      return;
    this._stop = $.Primitives_numMicroseconds();
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    if (t2 == null) {
      t1 = $.Primitives_numMicroseconds();
      t2 = this._start;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t2 = t1 - t2;
      t1 = t2;
    } else
      t1 = $.$sub$n(t2, t1);
    return t1;
  }
},

StringBuffer: {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  toString$0: function(_) {
    return "Instance of '" + $.Primitives_objectTypeName(this) + "'";
  }
},

Comparable_compare: function(a, b) {
  return $.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  if (false)
    return $.toString$0(object);
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

List_List: function($length) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

List_List$from: function(other, growable) {
  var list, t1, $length, fixedList, i;
  list = $.List_List($);
  for (t1 = $.get$iterator$a(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    fixedList[i] = list[i];
  }
  return fixedList;
}}],
["dart.math", {
min: function(a, b) {
  if (typeof a === "number") {
    a;
    if (typeof b === "number") {
      b;
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        b;
        if (typeof a === "number") {
          a;
          if (a === 0)
            return (a + b) * a * b;
        }
        if (a === 0 && $.JSDouble_methods.get$isNegative(b) || $.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      return a;
    }
    throw $.wrapException(new $.ArgumentError(b));
  }
  throw $.wrapException(new $.ArgumentError(a));
},

max: function(a, b) {
  if (typeof a === "number") {
    a;
    if (typeof b === "number") {
      b;
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        b;
        if (typeof a === "number") {
          a;
          if (a === 0)
            return a + b;
        }
        if ($.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      if (b === 0 && $.JSNumber_methods.get$isNegative(a))
        return b;
      return a;
    }
    throw $.wrapException(new $.ArgumentError(b));
  }
  throw $.wrapException(new $.ArgumentError(a));
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.Comparable_compare$closure = new $.Closure$compare($.Comparable_compare, "Comparable_compare$closure");
$.C_NullThrownError = new $.NullThrownError();
$.JSArray_methods = $.JSArray.prototype;
$.JSDouble_methods = $.JSDouble.prototype;
$.JSNumber_methods = $.JSNumber.prototype;
$.JSNull_methods = $.JSNull.prototype;
$.dispatchPropertyName = null;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$as = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$as(receiver).$index(receiver, a0);
};
$.$indexSet$a = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$a(receiver).$indexSet(receiver, a0, a1);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.elementAt$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).elementAt$1(receiver, a0);
};
$.get$iterator$a = function(receiver) {
  return $.getInterceptor$a(receiver).get$iterator(receiver);
};
$.get$length$as = function(receiver) {
  return $.getInterceptor$as(receiver).get$length(receiver);
};
$.skip$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).skip$1(receiver, a0);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$a = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$as = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};

var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        isolateProperties[cls] = defineClass(name, cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=Bench2d.dart.js.map
