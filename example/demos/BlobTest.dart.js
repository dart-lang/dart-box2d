// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "Element;type%",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AreaElement = {"": "Element;shape="};

$$.Attr = {"": "Node;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "Element;"};

$$.BaseElement = {"": "Element;"};

$$.BodyElement = {"": "Element;"};

$$.ButtonElement = {"": "Element;type%"};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "Element;height},width}",
  getContext$2: function(receiver, contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return receiver.getContext(contextId, $.convertDartToNative_Dictionary(attrs));
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, $);
  }
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x, y, width, height);
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x, y);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  setFillColorRgb$4: function(receiver, r, g, b, a) {
    receiver.fillStyle = "rgba(" + $.S(r) + ", " + $.S(g) + ", " + $.S(b) + ", " + $.S(a) + ")";
  },
  setStrokeColorRgb$4: function(receiver, r, g, b, a) {
    receiver.strokeStyle = "rgba(" + $.S(r) + ", " + $.S(g) + ", " + $.S(b) + ", " + $.S(a) + ")";
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  }
};

$$.CharacterData = {"": "Node;length="};

$$.Comment = {"": "CharacterData;"};

$$.ContentElement = {"": "Element;"};

$$.CssStyleDeclaration = {"": "Interceptor;length=",
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  get$position: function(receiver) {
    var propValue = receiver.getPropertyValue("position");
    return propValue != null ? propValue : "";
  },
  set$width: function(receiver, value) {
    this.setProperty$3(receiver, "width", value, "");
  }
};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DetailsElement = {"": "Element;"};

$$.DialogElement = {"": "Element;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;",
  register$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    if (!t1)
      return receiver.webkitRegister($name, $.convertDartToNative_Dictionary(options));
    return receiver.webkitRegister($name);
  }
};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = new $.FilteredElementList(receiver, new $._ChildNodeListLazy(receiver));
    return receiver._children;
  },
  set$innerHtml: function(receiver, value) {
    var e, t1, t2;
    new $._ChildNodeListLazy(receiver)._this.textContent = "";
    e = document.createElement("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    t2 = new $._ChildNodeListLazy(receiver);
    t2.addAll$1(t2, $.List_List$from(t1.get$nodes(e), false));
  }
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;$$dom_children:children=,id=,innerHtml:innerHTML}",
  get$children: function(receiver) {
    return new $._ChildrenElementList(receiver, this.get$$$dom_children(receiver));
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {"": "Element;height},type%,width}"};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;type="};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;"};

$$.FieldSetElement = {"": "Element;type="};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FormElement = {"": "Element;length=",
  reset$0: function(receiver) {
    return receiver.reset();
  }
};

$$.HRElement = {"": "Element;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.HtmlCollection = {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;"};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.IFrameElement = {"": "Element;height},width}"};

$$.ImageElement = {"": "Element;height},width},x=,y="};

$$.InputElement = {"": "Element;height},type%,width}",
  step$1: function($receiver, arg0) {
    return this.step.call$1(arg0);
  },
  $isElement: true,
  $asElement: null
};

$$.KeygenElement = {"": "Element;type="};

$$.LIElement = {"": "Element;type%"};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;type%"};

$$.MapElement = {"": "Element;"};

$$.MediaElement = {"": "Element;"};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MenuElement = {"": "Element;"};

$$.MetaElement = {"": "Element;"};

$$.MeterElement = {"": "Element;"};

$$.ModElement = {"": "Element;"};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;parent:parentElement=",
  get$nodes: function(receiver) {
    return new $._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.localName;
    if (t1 == null) {
      t1 = receiver.nodeValue;
      if (t1 == null)
        t1 = $.Interceptor.prototype.toString$0.call(this, receiver);
    }
    return t1;
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  }
};

$$.NodeList = {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.OListElement = {"": "Element;type%"};

$$.ObjectElement = {"": "Element;height},type%,width}"};

$$.OptGroupElement = {"": "Element;"};

$$.OptionElement = {"": "Element;"};

$$.OutputElement = {"": "Element;type="};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "Element;position="};

$$.QuoteElement = {"": "Element;"};

$$.ScriptElement = {"": "Element;type%"};

$$.SelectElement = {"": "Element;length=,type="};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;innerHtml:innerHTML}"};

$$.SourceElement = {"": "Element;type%"};

$$.SpanElement = {"": "Element;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.StyleElement = {"": "Element;type%"};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;"};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;"};

$$.TableRowElement = {"": "Element;"};

$$.TableSectionElement = {"": "Element;"};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "Element;type="};

$$.TitleElement = {"": "Element;"};

$$.TrackElement = {"": "Element;"};

$$.UListElement = {"": "Element;"};

$$.UnknownElement = {"": "Element;"};

$$.VideoElement = {"": "MediaElement;height},width}"};

$$.Window = {"": "EventTarget;",
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$parent: function(receiver) {
    return $._convertNativeToDart_Window(receiver.parent);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._NamedNodeMap = {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.AElement = {"": "StyledElement;"};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedEnumeration = {"": "Interceptor;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;"};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;type=,x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;x=,y="};

$$.FECompositeElement = {"": "StyledElement;x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;x=,y="};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;x=,y="};

$$.FEImageElement = {"": "StyledElement;x=,y="};

$$.FEMergeElement = {"": "StyledElement;x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;x=,y="};

$$.FEOffsetElement = {"": "StyledElement;x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y=,z="};

$$.FESpecularLightingElement = {"": "StyledElement;x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y=,z="};

$$.FETileElement = {"": "StyledElement;x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;type=,x=,y="};

$$.FilterElement = {"": "StyledElement;x=,y="};

$$.ForeignObjectElement = {"": "StyledElement;x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;x=,y="};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;x=,y="};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;"};

$$.PatternElement = {"": "StyledElement;x=,y="};

$$.PointList = {"": "Interceptor;"};

$$.PolygonElement = {"": "StyledElement;points="};

$$.PolylineElement = {"": "StyledElement;points="};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.Rect = {"": "Interceptor;height},width},x%,y%"};

$$.RectElement = {"": "StyledElement;x=,y="};

$$.ScriptElement0 = {"": "SvgElement;type%"};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;type%"};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$children: function(receiver) {
    return new $.FilteredElementList(receiver, new $._ChildNodeListLazy(receiver));
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1, children;
    container = document.createElement("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    t1 = $.get$children$x($.$index$asx(t1.get$children(container), 0));
    children = new $.FilteredElementList(receiver, $._ChildNodeListLazy$(receiver));
    children._childNodes._this.textContent = "";
    children.addAll$1(children, t1);
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;x=,y="};

$$.ViewElement = {"": "SvgElement;"};

$$._GradientElement = {"": "StyledElement;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.RenderingContext = {"": "CanvasRenderingContext;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

// Bound closures
$$.BoundClosure$3 = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.Closure$main = {"": "Closure;call$0,$name"};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name"};

$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name"};

$$.Closure$compare = {"": "Closure;call$2,$name"};

(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  var libraries = init.libraries;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var descriptor = data[1];
    var classes = [];
    var functions = [];
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property)) continue;
      var element = descriptor[property];
      if (typeof element === "function") {
        $[property] = element;
        functions.push(property);
      } else {
        $$[property] = element;
        classes.push(property);
        classes.push(element[""]);
      }
    }
    var uri = ".../library" + i + ".dart";
    libraries.push([name, uri, classes, functions]);
  }
})([
["BlobTest", {
BlobTest: {"": "Demo;bodies,canvas,ctx,viewport,debugDraw,world,frameCount,fpsCounter,elapsedUs,worldStepTime,viewportScale,_stopwatch",
  initialize$0: function(_) {
    var sd, bd, t1, ground, cvjd, i, angle, t2, t3, body, fd, cd, bd2, psd, fallingBox;
    sd = $.PolygonShape$();
    sd.setAsBox$2(50, 0.4);
    bd = $.BodyDef$();
    t1 = bd.position;
    t1.x = 0;
    t1.y = 0;
    ground = this.world.createBody$1(bd);
    this.bodies.push(ground);
    ground.createFixtureFromShape$2;
    t1 = ground._fixDef;
    t1.shape = sd;
    t1.density = 0;
    ground.createFixture$1(t1);
    sd.setAsBoxWithCenterAndAngle$4(0.4, 50, new $.Vector(-10, 0), 0);
    t1.shape = sd;
    t1.density = 0;
    ground.createFixture$1(t1);
    sd.setAsBoxWithCenterAndAngle$4(0.4, 50, new $.Vector(10, 0), 0);
    t1.shape = sd;
    t1.density = 0;
    ground.createFixture$1(t1);
    cvjd = $.ConstantVolumeJointDef$();
    for (i = 0; i < 20; ++i) {
      angle = $.MathBox_translateAndScale(i, 0, 20, 0, 6.283185307179586);
      bd = $.BodyDef$();
      bd.fixedRotation = true;
      t1 = Math.sin(angle);
      t2 = Math.cos(angle);
      t3 = bd.position;
      t2 = new $.Vector(0 + 5 * t1, 10 + 5 * t2);
      t1 = t2.x;
      t2 = t2.y;
      t3.x = t1;
      t3.y = t2;
      bd.type = 2;
      body = this.world.createBody$1(bd);
      this.bodies.push(body);
      fd = $.FixtureDef$();
      cd = new $.CircleShape(new $.Vector(0, 0), 0, 0);
      cd.radius = 0.5;
      fd.shape = cd;
      fd.density = 1;
      fd.filter.groupIndex = -2;
      body.createFixture$1(fd);
      cvjd.addBody$1(body);
    }
    cvjd.frequencyHz = 10;
    cvjd.dampingRatio = 1;
    this.world.createJoint$1(cvjd);
    bd2 = $.BodyDef$();
    bd2.type = 2;
    psd = $.PolygonShape$();
    psd.setAsBoxWithCenterAndAngle$4(3, 1.5, new $.Vector(0, 25), 0);
    bd2.position = new $.Vector(0, 25);
    fallingBox = this.world.createBody$1(bd2);
    this.bodies.push(fallingBox);
    fallingBox.createFixtureFromShape$2;
    t1 = fallingBox._fixDef;
    t1.shape = psd;
    t1.density = 1;
    fallingBox.createFixture$1(t1);
  }
},

main: function() {
  var blob = new $.BlobTest($.List_List($), null, null, null, null, null, null, null, null, null, 10, null);
  blob.Demo$3("Blob test", null, 10);
  blob.initialize$0(blob);
  blob.initializeAnimation$0();
  blob.runAnimation$0();
}}],
["_interceptors", {
Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.Primitives_objectTypeName(receiver) + "'";
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JSUnknown: {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException(new $.RangeError("value -1"));
    return receiver.pop();
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = this.get$iterator(collection); t1.moveNext$0();)
      this.add$1(receiver, t1.get$current());
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return new $.SubListIterable(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    var t1;
    if (start == null)
      $.throwExpression(new $.ArgumentError(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException(new $.ArgumentError(start));
    else
      start;
    if (start < 0 || start > receiver.length) {
      t1 = receiver.length;
      throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + t1));
    }
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw $.wrapException(new $.ArgumentError(end));
      if (end < start || end > receiver.length) {
        t1 = receiver.length;
        throw $.wrapException(new $.RangeError("value " + end + " not in range " + start + ".." + t1));
      }
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + newLength));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression(new $.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    receiver[index] = value;
  },
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $asList: function() { return [null]; }, $asIterable: function() { return [null]; }},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;"},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var t1, bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException(new $.ArgumentError(b));
    else
      b;
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      t1 = receiver === 0;
      if (t1) {
        bIsNegative = this.get$isNegative(b);
        if ((t1 ? 1 / receiver < 0 : receiver < 0) === bIsNegative)
          return 0;
        if (t1 ? 1 / receiver < 0 : receiver < 0)
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  ceilToDouble$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floorToDouble$0: function(receiver) {
    return Math.floor(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    var t1, truncated;
    t1 = receiver / other;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;", $isint: true, $isnum: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression(new $.ArgumentError(endIndex));
    if (startIndex < 0)
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.wrapException(new $.RangeError("value " + $.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $isString: true
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

setDispatchProperty: function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
},

makeDispatchRecord: function(interceptor, proto, extension) {
  return {i: interceptor, p: proto, e: extension, x: null};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return $.C_JSUnknown;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

initializeDispatchProperty: function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null));
      return;
    }
  }
},

initializeDispatchProperty$bailout: function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null));
      return;
    }
  }
}}],
["_isolate_helper", {
CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    this._port.send$1(message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _Manager$1: function(entry) {
    var $function;
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new $._EventLoop($.ListQueue$(null), 0);
    this.isolates = new $.HashMap(0, null, null, null, null);
    this.managers = new $.HashMap(0, null, null, null, null);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
      $.get$globalThis().onmessage = $function;
      $.get$globalThis().dartPrint = function (object) {};
    }
  }
},

_IsolateContext: {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.wrapException(new $._ExceptionImplementation("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._liblib0$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = new $.HashMap(0, null, null, null, null);
    this.isolateStatics = new Isolate();
  }
},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._liblib0$_length === 0)
      throw $.wrapException(new $._ExceptionImplementation("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true) {
        t2 = t1.isolates;
        t2.get$isEmpty;
        t2 = t2._liblib0$_length === 0 && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
        t1.postMessage$1;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    var milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
    $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    var t1 = $.ReceivePortImpl__nextFreeId;
    $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
    t1 = new $.ReceivePortImpl(t1, null);
    $.register$2$x($._globalState().currentContext, t1._id, t1);
    $.lazyPort = t1;
    if ($.lazyPort == null)
      $.lazyPort = $.ReceivePortImpl$();
    t1 = $.lazyPort;
    t1.toSendPort$0;
    this.replyTo_1.send$2("spawned", new $._NativeJsSendPort(t1, $.get$id$x($globalState.currentContext)));
    this.entryPoint_0.call$0();
  }
},

_BaseSendPort: {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException(new $._ExceptionImplementation("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, t1, port;
    completer = $._AsyncCompleter$();
    t1 = $.ReceivePortImpl__nextFreeId;
    $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
    port = new $.ReceivePortImpl(t1, null);
    $.register$2$x($globalState.currentContext, port._id, port);
    this.send$2(message, new $._NativeJsSendPort(port, $.get$id$x($globalState.currentContext)));
    port._callback = new $._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException) {
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(value);
    } else {
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t1._setFutureValue$1(value);
    }
  }
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && !$.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3.enqueue$3;
    t3.events._add$1(new $._IsolateEvent(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort) {
      other;
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  ReceivePortImpl$0: function() {
    $.register$2$x($globalState.currentContext, this._id, this);
  }
},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    t1 = map.get$values(map);
    t1.forEach$1(t1, new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return new $._NativeJsSendPort(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return new $._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw $.wrapException("Illegal underlying port " + $.S(this.get$p()));
  },
  visitIsolateSink$1: function(sink) {
    var result = new $.JsIsolateSink(false, this.visitSendPort$1(sink._port));
    result._isClosed = sink._isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new $._NativeJsSendPort(receivePort, isolateId);
    } else
      return new $._WorkerSendPort(managerId, receivePortId, isolateId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    result = new $.JsIsolateSink(false, port);
    result._isClosed = t1.$index(list, 2);
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;_visited",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
},

_Copier: {"": "_MessageTraverser;_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      copy[i] = this._dispatch$1(list[i]);
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = new $.HashMap(0, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  }
},

_Serializer: {"": "_MessageTraverser;_nextFreeRefId,_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.List_List$from(map.get$keys(), true)), this._serializeList$1($.List_List$from(map.get$values(map), true))];
  },
  _serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._dispatch$1(list[i]);
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;_deserialized",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = new $.HashMap(0, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[$.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = new $.HashMap(0, null, null, null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.isJsIndexable(keys, keys[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.isJsIndexable(values, values[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values) {
    switch (state0) {
      case 0:
        result = new $.HashMap(0, null, null, null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        for (t2 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$periodic$2: function(milliseconds, callback) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setInterval($.convertDartClosureToJS(new $.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
    } else
      throw $.wrapException(new $.UnsupportedError("Periodic timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.enqueue$3;
      t1.events._add$1(new $._IsolateEvent(t2, callback, "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback(this, callback), 0), milliseconds);
    } else
      throw $.wrapException(new $.UnsupportedError("Timer greater than 0."));
  }
},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  }
},

TimerImpl$periodic_closure: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  }
},

startRootIsolate: function(entry) {
  var rootContext, t1, t2;
  $globalState = $._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = new $._IsolateContext(null, null, null);
  t1 = $globalState;
  t2 = t1.nextIsolateId;
  t1.nextIsolateId = t2 + 1;
  rootContext.id = t2;
  rootContext.ports = new $.HashMap(0, null, null, null, null);
  rootContext.isolateStatics = new Isolate();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

_globalState: function() {
  return $globalState;
},

_Manager$: function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
},

_MainManagerStub$: function() {
  return new $._MainManagerStub();
},

IsolateNatives_computeThisScript: function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException(new $.UnsupportedError("Cannot extract URI from \"" + $.S(stack) + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2, values;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : $[functionName];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = new $._IsolateContext(null, null, null);
      t1 = $globalState;
      t2 = t1.nextIsolateId;
      t1.nextIsolateId = t2 + 1;
      context.id = t2;
      context.ports = new $.HashMap(0, null, null, null, null);
      context.isolateStatics = new Isolate();
      t2 = $globalState.topEventLoop;
      t2.enqueue$3;
      t2.events._add$1(new $._IsolateEvent(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      values = $.Primitives_getProperty(sender, "expando$values");
      t1.remove$1(t1, values == null ? null : $.Primitives_getProperty(values, t2._getKey$0()));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException(new $._ExceptionImplementation(trace));
    }

},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
},

ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  $.register$2$x($globalState.currentContext, t1._id, t1);
  return t1;
},

_waitForPendingPorts: function(message, callback) {
  var finder = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  finder._visited = $._JsVisitedMap$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
    t1._visited = $._JsVisitedMap$();
    return t1.traverse$1(message);
  } else {
    t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
    t1._visited = $._JsVisitedMap$();
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
},

_JsDeserializer$: function() {
  return new $._JsDeserializer(null);
},

_JsVisitedMap$: function() {
  return new $._JsVisitedMap(null);
},

_MessageTraverserVisitedMap$: function() {
  return new $._MessageTraverserVisitedMap();
},

TimerImpl$: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
},

TimerImpl$periodic: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(false, false, null);
  t1.TimerImpl$periodic$2(milliseconds, callback);
  return t1;
}}],
["_js_helper", {
DartError: {"": "Object;",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.stack == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.stack);
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  }
},

_StackTrace: {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

Creates: {"": "Object;types"},

Returns: {"": "Object;types"},

JSName: {"": "Object;name"},

Null: {"": "Object;"},

TypeErrorImplementation: {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
},

FallThroughErrorImplementation: {"": "Object;",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
},

TypeImpl: {"": "Object;_typeName",
  toString$0: function(_) {
    return this._typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isTypeImpl && $.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

JSSyntaxRegExp: {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    if (typeof str !== "string")
      $.throwExpression(new $.ArgumentError(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    matchStart = m.index;
    if (0 >= m.length)
      throw $.ioore(0);
    t1 = $.get$length$asx(m[0]);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return new $._MatchImplementation(this._pattern, str, matchStart, matchStart + t1, m);
  }
},

_MatchImplementation: {"": "Object;pattern,str,start,end,_groups",
  $index: function(_, index) {
    var t1 = this._groups;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
},

_AllMatchesIterable: {"": "IterableBase;_re,_str",
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = this._re;
    t2 = t1._pattern;
    t3 = t1._isMultiLine;
    t1 = t1._isCaseSensitive;
    return new $._AllMatchesIterator(new $.JSSyntaxRegExp(t2, t3, t1, $.JSSyntaxRegExp_makeNative(t2, t3, t1, true)), this._str, null);
  },
  $asIterable: function() { return [$.Match]; }
},

_AllMatchesIterator: {"": "Object;_re,_str,_liblib3$_current",
  get$current: function() {
    return this._liblib3$_current;
  },
  moveNext$0: function() {
    this._liblib3$_current = this._re.firstMatch$1(this._str);
    return this._liblib3$_current != null;
  }
},

StringMatch: {"": "Object;start,str,pattern",
  $index: function(_, g) {
    if (!$.$eq(g, 0))
      $.throwExpression(new $.RangeError("value " + $.S(g)));
    return this.pattern;
  }
},

isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  return $.isJsIndexableSlow(object);
},

isJsIndexableSlow: function(object) {
  var result, record;
  result = typeof object === "object" && object !== null && !!$.getInterceptor(object).$isJavaScriptIndexingBehavior;
  record = $.getDispatchProperty(object);
  if (record == null)
    return result;
  record.x = result;
  return result;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException(new $.ArgumentError(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = $.getRuntimeTypeInfo(object);
  return $.S($name) + $.joinArguments(t1, 0);
},

Primitives_numMicroseconds: function() {
  var performance, t1, truncated;
  if (typeof window != "undefined" && window !== null) {
    performance = window.performance;
    if (performance != null && typeof performance.webkitNow == "function") {
      t1 = Math.floor(1000 * performance.webkitNow());
      if (isNaN(t1))
        $.throwExpression(new $.UnsupportedError("NaN"));
      if (t1 == Infinity || t1 == -Infinity)
        $.throwExpression(new $.UnsupportedError("Infinity"));
      truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
      return truncated == -0.0 ? 0 : truncated;
    }
  }
  return 1000 * Date.now();
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw $.wrapException(new $.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression(new $.ArgumentError(index));
  throw $.wrapException(new $.RangeError("value " + $.S(index)));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = new $.DartError();
  wrapper.dartException = ex;
  wrapper.toString = $.DartError_toStringWrapper$closure.call$0;
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

DartError_toStringWrapper: function() {
  return $.toString$0(this);
},

unwrapException: function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return ex.dartException;
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") || t1.$eq(type, "called_non_callable") || t1.$eq(type, "non_object_property_call") || t1.$eq(type, "non_object_property_load");
    } else
      t1 = true;
    if (t1)
      return new $.NoSuchMethodError(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method"))
      return new $.NoSuchMethodError("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1) {
      message;
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return new $.NoSuchMethodError(null, message, [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return new $.NoSuchMethodError("", message, [], $.makeLiteralMap([]), null);
      }
    }
    t1 = t1 ? message : "";
    return new $._ExceptionImplementation(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new $.StackOverflowError();
    return new $.ArgumentError(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new $.StackOverflowError();
  return ex;
},

getTraceFromException: function(exception) {
  if (exception == null)
    return;
  if (typeof exception !== "object")
    return;
  if ("stack" in exception)
    return new $._StackTrace(exception.stack);
  else
    return;
},

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1, result;
  t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0)) {
    result = isolate.eval$1(new $.invokeClosure_closure(closure));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 1)) {
    result = isolate.eval$1(new $.invokeClosure_closure0(closure, arg1));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 2)) {
    result = isolate.eval$1(new $.invokeClosure_closure1(closure, arg1, arg2));
    $globalState.topEventLoop.run$0();
    return result;
  } else
    throw $.wrapException(new $._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw $.wrapException(new $.RuntimeError("Cyclic initialization for static " + $.S(staticName)));
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

runtimeTypeToString: function(type) {
  if (typeof type !== "string" && (typeof type !== "object" || type === null || type.constructor !== Array && !$.isJsIndexable(type, type[$.dispatchPropertyName])))
    return $.runtimeTypeToString$bailout(1, type);
  if (type.constructor === Array) {
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
},

runtimeTypeToString$bailout: function(state0, type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.$index$asx(type, 0).builtin$cls + $.joinArguments(type, 1);
  else
    return type.builtin$cls;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, t1;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.isJsIndexable(types, types[$.dispatchPropertyName])))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    t1 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t1;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

joinArguments$bailout: function(state0, types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, argument, t2;
  t1 = $.getInterceptor(types);
  if (types == null)
    return "";
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  for (index = startIndex, firstArgument = true, allDynamic = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    t2 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t2;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

typeNameInChrome: function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
},

typeNameInSafari: function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
},

typeNameInWebKitCommon: function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string") {
      $name;
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    } else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
},

toStringForNativeObject: function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeDispatchRecord(interceptor, false, null);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null);
},

JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  if (typeof pattern !== "string")
    $.throwExpression(new $.ArgumentError(pattern));
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException(new $.FormatException("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = new $.StringBuffer("");
      result._contents = "";
      $length = receiver.length;
      result._contents = result._contents + to;
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
}}],
["box2d", {
ContactFilter: {"": "Object;",
  shouldCollide$2: function(fixtureA, fixtureB) {
    var filterA, filterB, t1;
    filterA = fixtureA.filter;
    filterB = fixtureB.filter;
    t1 = filterA.groupIndex;
    if (t1 !== 0 && t1 === filterB.groupIndex)
      return t1 > 0;
    return (filterA.maskBits & filterB.categoryBits) >>> 0 !== 0 && (filterA.categoryBits & filterB.maskBits) >>> 0 !== 0;
  }
},

ContactImpulse: {"": "Object;normalImpulses,tangentImpulses"},

DebugDraw: {"": "Object;flags@"},

AxisAlignedBox: {"": "Object;lowerBound<,upperBound<",
  setFromCombination$2: function(boxOne, boxTwo) {
    this.lowerBound.x = $.min(boxOne.lowerBound.x, boxTwo.lowerBound.x);
    this.lowerBound.y = $.min(boxOne.lowerBound.y, boxTwo.lowerBound.y);
    this.upperBound.x = $.max(boxOne.upperBound.x, boxTwo.upperBound.x);
    this.upperBound.y = $.max(boxOne.upperBound.y, boxTwo.upperBound.y);
  },
  get$center: function() {
    var t1, c, t2, t3;
    t1 = this.lowerBound;
    c = new $.Vector(t1.x, t1.y);
    t1 = this.upperBound;
    t2 = c.x;
    if (typeof t2 !== "number")
      return this.get$center$bailout(1, c, t1, t2);
    t3 = t1.x;
    if (typeof t3 !== "number")
      return this.get$center$bailout(2, c, t1, t2, t3);
    c.x = t2 + t3;
    t3 = c.y;
    if (typeof t3 !== "number")
      return this.get$center$bailout(3, c, t1, 0, t3);
    t1 = t1.y;
    if (typeof t1 !== "number")
      return this.get$center$bailout(4, c, t1, 0, t3);
    c.y = t3 + t1;
    t1 = c.x;
    if (typeof t1 !== "number")
      return this.get$center$bailout(5, c, t1);
    c.x = t1 * 0.5;
    t1 = c.y;
    if (typeof t1 !== "number")
      return this.get$center$bailout(6, c, t1);
    c.y = t1 * 0.5;
    return c;
  },
  get$center$bailout: function(state0, c, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this.lowerBound;
        c = new $.Vector(t1.x, t1.y);
        t1 = this.upperBound;
        t2 = c.x;
      case 1:
        state0 = 0;
        t3 = t1.x;
      case 2:
        state0 = 0;
        c.x = $.$add$ns(t2, t3);
        t3 = c.y;
      case 3:
        state0 = 0;
        t1 = t1.y;
      case 4:
        state0 = 0;
        c.y = $.$add$ns(t3, t1);
        t1 = c.x;
      case 5:
        state0 = 0;
        c.x = $.$mul$n(t1, 0.5);
        t1 = c.y;
      case 6:
        state0 = 0;
        c.y = $.$mul$n(t1, 0.5);
        return c;
    }
  },
  contains$1: function(_, aabb) {
    var t1, t2, t3, t4;
    t1 = this.lowerBound;
    t2 = t1.x;
    if (typeof t2 !== "number")
      return this.contains$1$bailout(1, aabb, t2, t1);
    t3 = aabb.lowerBound;
    t4 = t3.x;
    if (typeof t4 !== "number")
      return this.contains$1$bailout(2, aabb, t2, t1, t3, t4);
    if (t2 > t4) {
      t1 = t1.y;
      if (typeof t1 !== "number")
        return this.contains$1$bailout(3, aabb, 0, t1, t3);
      t3 = t3.y;
      if (typeof t3 !== "number")
        return this.contains$1$bailout(4, aabb, 0, t1, t3);
      if (t1 > t3) {
        t1 = this.upperBound;
        t2 = t1.y;
        if (typeof t2 !== "number")
          return this.contains$1$bailout(5, aabb, t2, t1);
        t3 = aabb.upperBound;
        t4 = t3.y;
        if (typeof t4 !== "number")
          return this.contains$1$bailout(6, 0, t2, t1, t3, t4);
        if (t2 < t4) {
          t1 = t1.x;
          if (typeof t1 !== "number")
            return this.contains$1$bailout(7, 0, 0, t1, t3);
          t3 = t3.x;
          if (typeof t3 !== "number")
            return this.contains$1$bailout(8, 0, 0, t1, t3);
          t3 = t1 < t3;
          t1 = t3;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  contains$1$bailout: function(state0, aabb, t2, t1, t3, t4) {
    switch (state0) {
      case 0:
        t1 = this.lowerBound;
        t2 = t1.x;
      case 1:
        state0 = 0;
        t3 = aabb.lowerBound;
        t4 = t3.x;
      case 2:
        state0 = 0;
      default:
        if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && $.$gt$n(t2, t4))
          switch (state0) {
            case 0:
              t1 = t1.y;
            case 3:
              state0 = 0;
              t3 = t3.y;
            case 4:
              state0 = 0;
            default:
              if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && $.$gt$n(t1, t3))
                switch (state0) {
                  case 0:
                    t1 = this.upperBound;
                    t2 = t1.y;
                  case 5:
                    state0 = 0;
                    t3 = aabb.upperBound;
                    t4 = t3.y;
                  case 6:
                    state0 = 0;
                  default:
                    if (state0 === 8 || state0 === 7 || state0 === 0 && $.$lt$n(t2, t4))
                      switch (state0) {
                        case 0:
                          t1 = t1.x;
                        case 7:
                          state0 = 0;
                          t3 = t3.x;
                        case 8:
                          state0 = 0;
                          t3 = $.$lt$n(t1, t3);
                          t1 = t3;
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.lowerBound;
    t2 = other.get$lowerBound();
    t1.setFrom$1;
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.upperBound;
    t1 = other.get$upperBound();
    t2.setFrom$1;
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
  },
  toString$0: function(_) {
    return $.S(this.lowerBound) + ", " + $.S(this.upperBound);
  },
  AxisAlignedBox$2: function(lowerBound, upperBound) {
    if (this.lowerBound == null)
      this.lowerBound = new $.Vector(0, 0);
    if (this.upperBound == null)
      this.upperBound = new $.Vector(0, 0);
  }
},

Collision: {"": "Object;_pool,cache,input,output,results1,results2,incidentEdge<,localTangent,localNormal<,planePoint,tangent,normal<,normal1,v11,v12,clipPoints1,clipPoints2",
  testOverlap$4: function(shapeA, shapeB, transformA, transformB) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.input;
    t1.proxyA.setFromShape$1(shapeA);
    t1.proxyB.setFromShape$1(shapeB);
    t2 = t1.transformA;
    t3 = t2.position;
    t4 = transformA.position;
    t5 = t4.x;
    t4 = t4.y;
    t3.x = t5;
    t3.y = t4;
    t2 = t2.rotation;
    t4 = transformA.rotation;
    t3 = t2.col1;
    t5 = t4.col1;
    t3.setFrom$1;
    t6 = t5.x;
    t5 = t5.y;
    t3.x = t6;
    t3.y = t5;
    t2 = t2.col2;
    t4 = t4.col2;
    t2.setFrom$1;
    t5 = t4.x;
    t4 = t4.y;
    t2.x = t5;
    t2.y = t4;
    t4 = t1.transformB;
    t2 = t4.position;
    t5 = transformB.position;
    t3 = t5.x;
    t5 = t5.y;
    t2.x = t3;
    t2.y = t5;
    t4 = t4.rotation;
    t5 = transformB.rotation;
    t2 = t4.col1;
    t3 = t5.col1;
    t2.setFrom$1;
    t6 = t3.x;
    t3 = t3.y;
    t2.x = t6;
    t2.y = t3;
    t4 = t4.col2;
    t5 = t5.col2;
    t4.setFrom$1;
    t3 = t5.x;
    t5 = t5.y;
    t4.x = t3;
    t4.y = t5;
    t1.useRadii = true;
    t5 = this.cache;
    t5.count = 0;
    t4 = this.output;
    this._pool.distance.distance$3(t4, t5, t1);
    return $.$lt$n(t4.distance, 0.000001192);
  },
  collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
    var v, t1, t2, t3, t4, t5, t6, t7, pAy, pAx, v1, pBy, dx, dy, distSqr, radius;
    manifold.set$pointCount(0);
    v = circle1.get$position(circle1);
    t1 = xfA.position;
    t2 = t1.y;
    t3 = xfA.rotation;
    t4 = t3.col1;
    t5 = t4.y;
    t6 = v.x;
    t5 = $.$add$ns(t2, $.$mul$n(t5, t6));
    t3 = t3.col2;
    t2 = t3.y;
    t7 = v.y;
    pAy = $.$add$ns(t5, $.$mul$n(t2, t7));
    pAx = $.$add$ns($.$add$ns(t1.x, $.$mul$n(t4.x, t6)), $.$mul$n(t3.x, t7));
    v1 = circle2.get$position(circle2);
    t7 = xfB.position;
    t3 = t7.y;
    t6 = xfB.rotation;
    t4 = t6.col1;
    t1 = t4.y;
    t2 = v1.x;
    t1 = $.$add$ns(t3, $.$mul$n(t1, t2));
    t6 = t6.col2;
    t3 = t6.y;
    t5 = v1.y;
    pBy = $.$add$ns(t1, $.$mul$n(t3, t5));
    dx = $.$sub$n($.$add$ns($.$add$ns(t7.x, $.$mul$n(t4.x, t2)), $.$mul$n(t6.x, t5)), pAx);
    dy = $.$sub$n(pBy, pAy);
    distSqr = $.$add$ns($.$mul$n(dx, dx), $.$mul$n(dy, dy));
    radius = $.$add$ns(circle1.radius, circle2.radius);
    if ($.$gt$n(distSqr, $.$mul$n(radius, radius)))
      return;
    t1 = $.getInterceptor$x(manifold);
    t1.set$type(manifold, 0);
    t2 = manifold.get$localPoint();
    t3 = circle1.get$position(circle1);
    t4 = t3.x;
    t3 = t3.y;
    t2.x = t4;
    t2.y = t3;
    t3 = manifold.get$localNormal();
    t3.x = 0;
    t3.y = 0;
    manifold.set$pointCount(1);
    t3 = $.$index$asx(t1.get$points(manifold), 0).get$localPoint();
    t2 = circle2.get$position(circle2);
    t4 = t2.x;
    t2 = t2.y;
    t3.x = t4;
    t3.y = t2;
    $.get$id$x($.$index$asx(t1.get$points(manifold), 0)).zero$0();
  },
  collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
    var v, t1, t2, t3, t4, t5, t6, t7, cy, v1x, v1y, b, b1, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, norm, s, vertIndex2, v1, v2, mpoint, tempX, tempY, temp2X, temp2Y, temp3X, temp3Y, fcx, fcy;
    manifold.set$pointCount(0);
    v = circle.get$position(circle);
    t1 = xfB.position;
    t2 = t1.y;
    t3 = xfB.rotation;
    t4 = t3.col1;
    t5 = t4.y;
    t6 = v.x;
    t5 = $.$add$ns(t2, $.$mul$n(t5, t6));
    t3 = t3.col2;
    t2 = t3.y;
    t7 = v.y;
    cy = $.$add$ns(t5, $.$mul$n(t2, t7));
    t2 = xfA.position;
    v1x = $.$sub$n($.$add$ns($.$add$ns(t1.x, $.$mul$n(t4.x, t6)), $.$mul$n(t3.x, t7)), t2.x);
    v1y = $.$sub$n(cy, t2.y);
    t2 = xfA.rotation;
    b = t2.col1;
    b1 = t2.col2;
    t2 = $.getInterceptor$n(v1x);
    t7 = $.getInterceptor$n(v1y);
    cLocaly = $.$add$ns(t2.$mul(v1x, b1.x), t7.$mul(v1y, b1.y));
    if (typeof cLocaly !== "number")
      return this.collidePolygonAndCircle$5$bailout(1, manifold, polygon, t7, circle, v1x, v1y, cLocaly, t2, b);
    cLocalx = $.$add$ns(t2.$mul(v1x, b.x), t7.$mul(v1y, b.y));
    if (typeof cLocalx !== "number")
      return this.collidePolygonAndCircle$5$bailout(2, manifold, polygon, 0, circle, 0, 0, cLocaly, 0, 0, cLocalx);
    radius = $.$add$ns(polygon.radius, circle.radius);
    if (typeof radius !== "number")
      return this.collidePolygonAndCircle$5$bailout(3, manifold, polygon, 0, circle, 0, 0, cLocaly, 0, 0, cLocalx, radius);
    vertexCount = polygon.get$vertexCount();
    vertices = polygon.get$vertices();
    normals = polygon.get$normals();
    for (t1 = vertices.length, t2 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      vertex = vertices[i];
      t3 = $.getInterceptor$x(vertex);
      t4 = t3.get$x(vertex);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t3 = t3.get$y(vertex);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (i >= t2)
        throw $.ioore(i);
      norm = normals[i];
      t5 = $.getInterceptor$x(norm);
      s = $.$add$ns($.$mul$n(t5.get$x(norm), cLocalx - t4), $.$mul$n(t5.get$y(norm), cLocaly - t3));
      t3 = $.getInterceptor$n(s);
      if (t3.$gt(s, radius))
        return;
      if (t3.$gt(s, separation)) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    if (normalIndex < 0 || normalIndex >= t1)
      throw $.ioore(normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t1)
      throw $.ioore(vertIndex2);
    v2 = vertices[vertIndex2];
    if ($.$lt$n(separation, 1.192e-7)) {
      manifold.set$pointCount(1);
      t1 = $.getInterceptor$x(manifold);
      t1.set$type(manifold, 1);
      if (normalIndex >= t2)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t2 = $.getInterceptor$x(norm);
      manifold.get$localNormal().x = t2.get$x(norm);
      manifold.get$localNormal().y = t2.get$y(norm);
      t2 = $.getInterceptor$x(v1);
      t3 = $.getInterceptor$x(v2);
      manifold.get$localPoint().x = $.$mul$n($.$add$ns(t2.get$x(v1), t3.get$x(v2)), 0.5);
      manifold.get$localPoint().y = $.$mul$n($.$add$ns(t2.get$y(v1), t3.get$y(v2)), 0.5);
      mpoint = $.$index$asx(t1.get$points(manifold), 0);
      mpoint.get$localPoint().x = circle.get$position(circle).x;
      mpoint.get$localPoint().y = circle.get$position(circle).y;
      $.get$id$x(mpoint).zero$0();
      return;
    }
    t1 = $.getInterceptor$x(v1);
    t3 = t1.get$x(v1);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    tempX = cLocalx - t3;
    t4 = t1.get$y(v1);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    tempY = cLocaly - t4;
    t5 = $.getInterceptor$x(v2);
    t6 = t5.get$x(v2);
    temp2X = $.$sub$n(t6, t3);
    t7 = t5.get$y(v2);
    temp2Y = $.$sub$n(t7, t4);
    if (typeof temp2X !== "number")
      throw $.iae(temp2X);
    if (typeof temp2Y !== "number")
      throw $.iae(temp2Y);
    if (typeof t6 !== "number")
      throw $.iae(t6);
    temp3X = cLocalx - t6;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    temp3Y = cLocaly - t7;
    if (tempX * temp2X + tempY * temp2Y <= 0) {
      if (tempX * tempX + tempY * tempY > radius * radius)
        return;
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      t3 = manifold.get$localNormal();
      t4 = t1.get$x(v1);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t3.x = cLocalx - t4;
      t4 = manifold.get$localNormal();
      t3 = t1.get$y(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t4.y = cLocaly - t3;
      manifold.get$localNormal().normalize$0();
      t3 = manifold.get$localPoint();
      t4 = t1.get$x(v1);
      t1 = t1.get$y(v1);
      t3.x = t4;
      t3.y = t1;
      t1 = $.$index$asx(t2.get$points(manifold), 0).get$localPoint();
      t3 = circle.get$position(circle);
      t4 = t3.x;
      t3 = t3.y;
      t1.x = t4;
      t1.y = t3;
      $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
    } else if (temp3X * (t3 - t6) + temp3Y * (t4 - t7) <= 0) {
      if (temp3X * temp3X + temp3Y * temp3Y > radius * radius)
        return;
      manifold.set$pointCount(1);
      t1 = $.getInterceptor$x(manifold);
      t1.set$type(manifold, 1);
      t2 = manifold.get$localNormal();
      t3 = t5.get$x(v2);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t2.x = cLocalx - t3;
      t3 = manifold.get$localNormal();
      t2 = t5.get$y(v2);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t3.y = cLocaly - t2;
      manifold.get$localNormal().normalize$0();
      t2 = manifold.get$localPoint();
      t3 = t5.get$x(v2);
      t5 = t5.get$y(v2);
      t2.x = t3;
      t2.y = t5;
      t5 = $.$index$asx(t1.get$points(manifold), 0).get$localPoint();
      t2 = circle.get$position(circle);
      t3 = t2.x;
      t2 = t2.y;
      t5.x = t3;
      t5.y = t2;
      $.get$id$x($.$index$asx(t1.get$points(manifold), 0)).zero$0();
    } else {
      fcx = (t3 + t6) * 0.5;
      fcy = (t4 + t7) * 0.5;
      if (normalIndex >= t2)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t1 = $.getInterceptor$x(norm);
      t2 = t1.get$x(norm);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t1 = t1.get$y(norm);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if ((cLocalx - fcx) * t2 + (cLocaly - fcy) * t1 > radius)
        return;
      manifold.set$pointCount(1);
      t1 = $.getInterceptor$x(manifold);
      t1.set$type(manifold, 1);
      t2 = manifold.get$localNormal();
      t3 = normals[normalIndex];
      t4 = $.getInterceptor$x(t3);
      t5 = t4.get$x(t3);
      t3 = t4.get$y(t3);
      t2.x = t5;
      t2.y = t3;
      manifold.get$localPoint().x = fcx;
      manifold.get$localPoint().y = fcy;
      t3 = $.$index$asx(t1.get$points(manifold), 0).get$localPoint();
      t2 = circle.get$position(circle);
      t5 = t2.x;
      t2 = t2.y;
      t3.x = t5;
      t3.y = t2;
      $.get$id$x($.$index$asx(t1.get$points(manifold), 0)).zero$0();
    }
  },
  collidePolygonAndCircle$5$bailout: function(state0, manifold, polygon, t7, circle, v1x, v1y, cLocaly, t2, b, cLocalx, radius) {
    switch (state0) {
      case 0:
        manifold.set$pointCount(0);
        v = circle.get$position(circle);
        t1 = xfB.position;
        t2 = t1.y;
        t3 = xfB.rotation;
        t4 = t3.col1;
        t5 = t4.y;
        t6 = v.x;
        t5 = $.$add$ns(t2, $.$mul$n(t5, t6));
        t3 = t3.col2;
        t2 = t3.y;
        t7 = v.y;
        cy = $.$add$ns(t5, $.$mul$n(t2, t7));
        t2 = xfA.position;
        v1x = $.$sub$n($.$add$ns($.$add$ns(t1.x, $.$mul$n(t4.x, t6)), $.$mul$n(t3.x, t7)), t2.x);
        v1y = $.$sub$n(cy, t2.y);
        t2 = xfA.rotation;
        b = t2.col1;
        b1 = t2.col2;
        t2 = $.getInterceptor$n(v1x);
        t7 = $.getInterceptor$n(v1y);
        cLocaly = $.$add$ns(t2.$mul(v1x, b1.x), t7.$mul(v1y, b1.y));
      case 1:
        state0 = 0;
        cLocalx = $.$add$ns(t2.$mul(v1x, b.x), t7.$mul(v1y, b.y));
      case 2:
        state0 = 0;
        radius = $.$add$ns(polygon.radius, circle.radius);
      case 3:
        var v, t1, t3, t4, t5, t6, cy, b1, vertexCount, vertices, normals, normalIndex, separation, i, vertex, tempx, tempy, norm, s, vertIndex2, v1, v2, mpoint, tempX, tempY, t8, temp2X, t9, temp2Y, u1, temp3X, temp3Y, temp4X, temp4Y, u2, dx, dy, fcx, fcy, tx, ty;
        state0 = 0;
        vertexCount = polygon.get$vertexCount();
        vertices = polygon.get$vertices();
        normals = polygon.get$normals();
        for (t1 = vertices.length, t2 = $.getInterceptor$n(cLocalx), t3 = $.getInterceptor$n(cLocaly), t4 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
          if (i >= t1)
            throw $.ioore(i);
          vertex = vertices[i];
          t5 = $.getInterceptor$x(vertex);
          tempx = t2.$sub(cLocalx, t5.get$x(vertex));
          tempy = t3.$sub(cLocaly, t5.get$y(vertex));
          if (i >= t4)
            throw $.ioore(i);
          norm = normals[i];
          t5 = $.getInterceptor$x(norm);
          s = $.$add$ns($.$mul$n(t5.get$x(norm), tempx), $.$mul$n(t5.get$y(norm), tempy));
          t5 = $.getInterceptor$n(s);
          if (t5.$gt(s, radius))
            return;
          if (t5.$gt(s, separation)) {
            separation = s;
            normalIndex = i;
          }
        }
        vertIndex2 = normalIndex + 1;
        vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
        if (normalIndex < 0 || normalIndex >= t1)
          throw $.ioore(normalIndex);
        v1 = vertices[normalIndex];
        if (vertIndex2 < 0 || vertIndex2 >= t1)
          throw $.ioore(vertIndex2);
        v2 = vertices[vertIndex2];
        if ($.$lt$n(separation, 1.192e-7)) {
          manifold.set$pointCount(1);
          t1 = $.getInterceptor$x(manifold);
          t1.set$type(manifold, 1);
          if (normalIndex >= t4)
            throw $.ioore(normalIndex);
          norm = normals[normalIndex];
          t4 = $.getInterceptor$x(norm);
          manifold.get$localNormal().x = t4.get$x(norm);
          manifold.get$localNormal().y = t4.get$y(norm);
          t4 = $.getInterceptor$x(v1);
          t2 = $.getInterceptor$x(v2);
          manifold.get$localPoint().x = $.$mul$n($.$add$ns(t4.get$x(v1), t2.get$x(v2)), 0.5);
          manifold.get$localPoint().y = $.$mul$n($.$add$ns(t4.get$y(v1), t2.get$y(v2)), 0.5);
          mpoint = $.$index$asx(t1.get$points(manifold), 0);
          mpoint.get$localPoint().x = circle.get$position(circle).x;
          mpoint.get$localPoint().y = circle.get$position(circle).y;
          $.get$id$x(mpoint).zero$0();
          return;
        }
        t1 = $.getInterceptor$x(v1);
        t5 = t1.get$x(v1);
        tempX = t2.$sub(cLocalx, t5);
        t6 = t1.get$y(v1);
        tempY = t3.$sub(cLocaly, t6);
        t7 = $.getInterceptor$x(v2);
        t8 = t7.get$x(v2);
        temp2X = $.$sub$n(t8, t5);
        t9 = t7.get$y(v2);
        temp2Y = $.$sub$n(t9, t6);
        u1 = $.$add$ns($.$mul$n(tempX, temp2X), $.$mul$n(tempY, temp2Y));
        temp3X = t2.$sub(cLocalx, t8);
        temp3Y = t3.$sub(cLocaly, t9);
        temp4X = $.$sub$n(t5, t8);
        temp4Y = $.$sub$n(t6, t9);
        u2 = $.$add$ns($.$mul$n(temp3X, temp4X), $.$mul$n(temp3Y, temp4Y));
        if ($.$le$n(u1, 0)) {
          dx = t2.$sub(cLocalx, t5);
          dy = t3.$sub(cLocaly, t6);
          if ($.$gt$n($.$add$ns($.$mul$n(dx, dx), $.$mul$n(dy, dy)), $.$mul$n(radius, radius)))
            return;
          manifold.set$pointCount(1);
          t4 = $.getInterceptor$x(manifold);
          t4.set$type(manifold, 1);
          manifold.get$localNormal().x = t2.$sub(cLocalx, t1.get$x(v1));
          manifold.get$localNormal().y = t3.$sub(cLocaly, t1.get$y(v1));
          manifold.get$localNormal().normalize$0();
          t3 = manifold.get$localPoint();
          t2 = t1.get$x(v1);
          t1 = t1.get$y(v1);
          t3.x = t2;
          t3.y = t1;
          t1 = $.$index$asx(t4.get$points(manifold), 0).get$localPoint();
          t3 = circle.get$position(circle);
          t2 = t3.x;
          t3 = t3.y;
          t1.x = t2;
          t1.y = t3;
          $.get$id$x($.$index$asx(t4.get$points(manifold), 0)).zero$0();
        } else if ($.$le$n(u2, 0)) {
          dx = t2.$sub(cLocalx, t8);
          dy = t3.$sub(cLocaly, t9);
          if ($.$gt$n($.$add$ns($.$mul$n(dx, dx), $.$mul$n(dy, dy)), $.$mul$n(radius, radius)))
            return;
          manifold.set$pointCount(1);
          t1 = $.getInterceptor$x(manifold);
          t1.set$type(manifold, 1);
          manifold.get$localNormal().x = t2.$sub(cLocalx, t7.get$x(v2));
          manifold.get$localNormal().y = t3.$sub(cLocaly, t7.get$y(v2));
          manifold.get$localNormal().normalize$0();
          t3 = manifold.get$localPoint();
          t2 = t7.get$x(v2);
          t7 = t7.get$y(v2);
          t3.x = t2;
          t3.y = t7;
          t7 = $.$index$asx(t1.get$points(manifold), 0).get$localPoint();
          t3 = circle.get$position(circle);
          t2 = t3.x;
          t3 = t3.y;
          t7.x = t2;
          t7.y = t3;
          $.get$id$x($.$index$asx(t1.get$points(manifold), 0)).zero$0();
        } else {
          fcx = $.$mul$n($.$add$ns(t5, t8), 0.5);
          fcy = $.$mul$n($.$add$ns(t6, t9), 0.5);
          tx = t2.$sub(cLocalx, fcx);
          ty = t3.$sub(cLocaly, fcy);
          if (normalIndex >= t4)
            throw $.ioore(normalIndex);
          norm = normals[normalIndex];
          t1 = $.getInterceptor$x(norm);
          if ($.$gt$n($.$add$ns($.$mul$n(tx, t1.get$x(norm)), $.$mul$n(ty, t1.get$y(norm))), radius))
            return;
          manifold.set$pointCount(1);
          t1 = $.getInterceptor$x(manifold);
          t1.set$type(manifold, 1);
          t2 = manifold.get$localNormal();
          t3 = normals[normalIndex];
          t4 = $.getInterceptor$x(t3);
          t5 = t4.get$x(t3);
          t3 = t4.get$y(t3);
          t2.x = t5;
          t2.y = t3;
          manifold.get$localPoint().x = fcx;
          manifold.get$localPoint().y = fcy;
          t3 = $.$index$asx(t1.get$points(manifold), 0).get$localPoint();
          t2 = circle.get$position(circle);
          t5 = t2.x;
          t2 = t2.y;
          t3.x = t5;
          t3.y = t2;
          $.get$id$x($.$index$asx(t1.get$points(manifold), 0)).zero$0();
        }
    }
  },
  edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
    var vertices1, normals1, count2, vertices2, R, v, t1, t2, t3, t4, t5, t6, t7, normal1Worldy, normal1Worldx, R1, normal1x, t8, t9, normal1y, index, minDot, i, a, t10, t11, dot, v3, t12, t13, v1y, v1x, v4, v2y;
    poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    vertices2 = poly2.get$vertices();
    R = xf1.rotation;
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    v = normals1[edge1];
    t1 = R.col1;
    t2 = t1.y;
    if (typeof t2 !== "number")
      return this.edgeSeparation$5$bailout(1, xf1, edge1, xf2, R, vertices1, t1, count2, vertices2, t2, v);
    t3 = $.getInterceptor$x(v);
    t4 = t3.get$x(v);
    if (typeof t4 !== "number")
      return this.edgeSeparation$5$bailout(2, xf1, edge1, xf2, R, vertices1, t1, count2, vertices2, t2, v, t3, t4);
    t5 = t2 * t4;
    t6 = R.col2;
    t7 = t6.y;
    if (typeof t7 !== "number")
      return this.edgeSeparation$5$bailout(3, xf1, edge1, xf2, 0, vertices1, t1, count2, vertices2, t2, v, t3, t4, t6, t7, $.JSNumber_methods, t5);
    t3 = t3.get$y(v);
    if (typeof t3 !== "number")
      return this.edgeSeparation$5$bailout(4, xf1, edge1, xf2, 0, vertices1, t1, count2, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, t5);
    normal1Worldy = t5 + t7 * t3;
    t1 = t1.x;
    if (typeof t1 !== "number")
      return this.edgeSeparation$5$bailout(5, xf1, edge1, xf2, 0, vertices1, t1, count2, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, 0, normal1Worldy, $.JSNumber_methods);
    t4 = t1 * t4;
    t6 = t6.x;
    if (typeof t6 !== "number")
      return this.edgeSeparation$5$bailout(6, xf1, edge1, xf2, 0, vertices1, t1, count2, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, $.JSNumber_methods, normal1Worldy, $.JSNumber_methods);
    normal1Worldx = t4 + t6 * t3;
    R1 = xf2.rotation;
    t3 = R1.col1;
    t4 = t3.x;
    if (typeof t4 !== "number")
      return this.edgeSeparation$5$bailout(7, xf1, edge1, xf2, 0, vertices1, t1, count2, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, $.JSNumber_methods, normal1Worldy, $.JSNumber_methods, normal1Worldx, $.JSNumber_methods, R1);
    t5 = normal1Worldx * t4;
    t3 = t3.y;
    if (typeof t3 !== "number")
      return this.edgeSeparation$5$bailout(8, xf1, edge1, xf2, 0, vertices1, t1, count2, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, $.JSNumber_methods, normal1Worldy, $.JSNumber_methods, normal1Worldx, $.JSNumber_methods, R1, t5, $.JSNumber_methods);
    normal1x = t5 + normal1Worldy * t3;
    t5 = R1.col2;
    t8 = t5.x;
    if (typeof t8 !== "number")
      return this.edgeSeparation$5$bailout(9, xf1, edge1, xf2, 0, vertices1, t1, count2, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, $.JSNumber_methods, normal1Worldy, $.JSNumber_methods, normal1Worldx, $.JSNumber_methods, 0, t5, $.JSNumber_methods, normal1x, t8, $.JSNumber_methods);
    t9 = normal1Worldx * t8;
    t5 = t5.y;
    if (typeof t5 !== "number")
      return this.edgeSeparation$5$bailout(10, xf1, edge1, xf2, 0, vertices1, t1, count2, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, $.JSNumber_methods, normal1Worldy, $.JSNumber_methods, normal1Worldx, $.JSNumber_methods, 0, t5, t9, normal1x, t8, $.JSNumber_methods);
    normal1y = t9 + normal1Worldy * t5;
    for (t9 = vertices2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t9)
        throw $.ioore(i);
      a = vertices2[i];
      t10 = $.getInterceptor$x(a);
      t11 = t10.get$x(a);
      if (typeof t11 !== "number")
        return this.edgeSeparation$5$bailout(11, xf1, edge1, xf2, 0, vertices1, t1, count2, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, $.JSNumber_methods, normal1Worldy, $.JSNumber_methods, normal1Worldx, $.JSNumber_methods, 0, t5, t9, normal1x, t8, t10, index, minDot, i, t11, normal1y, a);
      t11 *= normal1x;
      t10 = t10.get$y(a);
      if (typeof t10 !== "number")
        return this.edgeSeparation$5$bailout(12, xf1, edge1, xf2, 0, vertices1, t1, count2, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, $.JSNumber_methods, normal1Worldy, $.JSNumber_methods, normal1Worldx, $.JSNumber_methods, 0, t5, t9, normal1x, t8, t10, index, minDot, i, t11, normal1y);
      dot = t11 + t10 * normal1y;
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    if (edge1 >= vertices1.length)
      throw $.ioore(edge1);
    v3 = vertices1[edge1];
    t10 = xf1.position;
    t11 = t10.y;
    if (typeof t11 !== "number")
      return this.edgeSeparation$5$bailout(13, 0, 0, xf2, 0, 0, t1, 0, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, $.JSNumber_methods, normal1Worldy, $.JSNumber_methods, normal1Worldx, $.JSNumber_methods, 0, t5, t9, 0, t8, t10, index, 0, 0, t11, 0, 0, v3);
    t12 = $.getInterceptor$x(v3);
    t13 = t12.get$x(v3);
    if (typeof t13 !== "number")
      return this.edgeSeparation$5$bailout(14, 0, 0, xf2, 0, 0, t1, 0, vertices2, t2, 0, t3, t4, t6, t7, $.JSNumber_methods, $.JSNumber_methods, normal1Worldy, $.JSNumber_methods, normal1Worldx, $.JSNumber_methods, 0, t5, t9, 0, t8, t10, index, 0, 0, t11, 0, 0, v3, t12, t13);
    t2 = t11 + t2 * t13;
    t12 = t12.get$y(v3);
    if (typeof t12 !== "number")
      return this.edgeSeparation$5$bailout(15, 0, 0, xf2, 0, 0, t1, 0, vertices2, t2, 0, t3, t4, t6, t7, 0, $.JSNumber_methods, normal1Worldy, $.JSNumber_methods, normal1Worldx, $.JSNumber_methods, 0, t5, t9, 0, t8, t10, index, 0, 0, 0, 0, 0, 0, t12, t13);
    v1y = t2 + t7 * t12;
    t10 = t10.x;
    if (typeof t10 !== "number")
      return this.edgeSeparation$5$bailout(16, 0, 0, xf2, 0, 0, t1, 0, vertices2, 0, 0, t3, t4, t6, 0, 0, $.JSNumber_methods, normal1Worldy, 0, normal1Worldx, $.JSNumber_methods, 0, t5, t9, 0, t8, t10, index, 0, 0, 0, 0, 0, 0, t12, t13, v1y);
    v1x = t10 + t1 * t13 + t6 * t12;
    if (index < 0 || index >= t9)
      throw $.ioore(index);
    v4 = vertices2[index];
    t9 = xf2.position;
    t12 = t9.y;
    if (typeof t12 !== "number")
      return this.edgeSeparation$5$bailout(17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, t4, 0, 0, 0, 0, normal1Worldy, 0, normal1Worldx, 0, 0, t5, t9, 0, t8, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, v1y, v1x, v4);
    t6 = $.getInterceptor$x(v4);
    t13 = t6.get$x(v4);
    if (typeof t13 !== "number")
      return this.edgeSeparation$5$bailout(18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, t4, t6, 0, 0, 0, normal1Worldy, 0, normal1Worldx, t13, 0, t5, t9, 0, t8, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, v1y, v1x, v4);
    t3 = t12 + t3 * t13;
    t6 = t6.get$y(v4);
    if (typeof t6 !== "number")
      return this.edgeSeparation$5$bailout(19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, t4, t6, 0, 0, 0, normal1Worldy, 0, normal1Worldx, t13, 0, t5, t9, 0, t8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1y, v1x);
    v2y = t3 + t5 * t6 - v1y;
    t9 = t9.x;
    if (typeof t9 !== "number")
      return this.edgeSeparation$5$bailout(20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, t6, 0, 0, 0, normal1Worldy, 0, normal1Worldx, t13, 0, 0, t9, 0, t8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1x, 0, v2y);
    return (t9 + t4 * t13 + t8 * t6 - v1x) * normal1Worldx + v2y * normal1Worldy;
  },
  edgeSeparation$5$bailout: function(state0, xf1, edge1, xf2, R, vertices1, t1, count2, vertices2, t2, v, t3, t4, t7, t8, t5, t6, normal1Worldy, t9, normal1Worldx, t10, R1, t12, t11, normal1x, t14, t13, index, minDot, i, t15, normal1y, a, v3, t16, t17, v1y, v1x, v4, v2y) {
    switch (state0) {
      case 0:
        poly1.get$vertexCount();
        vertices1 = poly1.get$vertices();
        normals1 = poly1.get$normals();
        count2 = poly2.get$vertexCount();
        vertices2 = poly2.get$vertices();
        R = xf1.rotation;
        if (edge1 < 0 || edge1 >= normals1.length)
          throw $.ioore(edge1);
        v = normals1[edge1];
        t1 = R.col1;
        t2 = t1.y;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(v);
        t4 = t3.get$x(v);
      case 2:
        state0 = 0;
        t5 = $.getInterceptor$n(t2);
        t6 = t5.$mul(t2, t4);
        t7 = R.col2;
        t8 = t7.y;
      case 3:
        state0 = 0;
        t3 = t3.get$y(v);
      case 4:
        state0 = 0;
        t9 = $.getInterceptor$n(t8);
        normal1Worldy = $.$add$ns(t6, t9.$mul(t8, t3));
        t1 = t1.x;
      case 5:
        state0 = 0;
        t6 = $.getInterceptor$n(t1);
        t4 = t6.$mul(t1, t4);
        t7 = t7.x;
      case 6:
        state0 = 0;
        t10 = $.getInterceptor$n(t7);
        normal1Worldx = $.$add$ns(t4, t10.$mul(t7, t3));
        R1 = xf2.rotation;
        t3 = R1.col1;
        t4 = t3.x;
      case 7:
        state0 = 0;
        t11 = $.getInterceptor$n(normal1Worldx);
        t12 = t11.$mul(normal1Worldx, t4);
        t3 = t3.y;
      case 8:
        state0 = 0;
        t13 = $.getInterceptor$n(normal1Worldy);
        normal1x = $.$add$ns(t12, t13.$mul(normal1Worldy, t3));
        t12 = R1.col2;
        t14 = t12.x;
      case 9:
        state0 = 0;
        t11 = t11.$mul(normal1Worldx, t14);
        t12 = t12.y;
      case 10:
        state0 = 0;
        normal1y = $.$add$ns(t11, t13.$mul(normal1Worldy, t12));
        t11 = vertices2.length;
        index = 0;
        minDot = 99999999999999;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < count2))
                  break L0;
                if (i >= t11)
                  throw $.ioore(i);
                a = vertices2[i];
                t13 = $.getInterceptor$x(a);
                t15 = t13.get$x(a);
              case 11:
                state0 = 0;
                t15 = $.$mul$n(t15, normal1x);
                t13 = t13.get$y(a);
              case 12:
                state0 = 0;
                dot = $.$add$ns(t15, $.$mul$n(t13, normal1y));
                if ($.$lt$n(dot, minDot)) {
                  minDot = dot;
                  index = i;
                }
                ++i;
            }
        if (edge1 >= vertices1.length)
          throw $.ioore(edge1);
        v3 = vertices1[edge1];
        t13 = xf1.position;
        t15 = t13.y;
      case 13:
        state0 = 0;
        t16 = $.getInterceptor$x(v3);
        t17 = t16.get$x(v3);
      case 14:
        state0 = 0;
        t2 = $.$add$ns(t15, t5.$mul(t2, t17));
        t16 = t16.get$y(v3);
      case 15:
        state0 = 0;
        v1y = $.$add$ns(t2, t9.$mul(t8, t16));
        t13 = t13.x;
      case 16:
        state0 = 0;
        v1x = $.$add$ns($.$add$ns(t13, t6.$mul(t1, t17)), t10.$mul(t7, t16));
        if (index < 0 || index >= t11)
          throw $.ioore(index);
        v4 = vertices2[index];
        t11 = xf2.position;
        t16 = t11.y;
      case 17:
        state0 = 0;
        t7 = $.getInterceptor$x(v4);
        t10 = t7.get$x(v4);
      case 18:
        state0 = 0;
        t3 = $.$add$ns(t16, $.$mul$n(t3, t10));
        t7 = t7.get$y(v4);
      case 19:
        state0 = 0;
        v2y = $.$sub$n($.$add$ns(t3, $.$mul$n(t12, t7)), v1y);
        t11 = t11.x;
      case 20:
        var normals1, dot;
        state0 = 0;
        return $.$add$ns($.$mul$n($.$sub$n($.$add$ns($.$add$ns(t11, $.$mul$n(t4, t10)), $.$mul$n(t14, t7)), v1x), normal1Worldx), $.$mul$n(v2y, normal1Worldy));
    }
  },
  findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
    var count1, normals1, v, t1, t2, t3, t4, t5, t6, t7, predy, predx, v1, t8, tempy, dx, dy, dLocal1x, dLocal1y, edge, maxDot, i, norm, dot, s, prevEdge, sPrev, nextEdge, sNext, bestSeparation, bestEdge, increment, edge0;
    count1 = poly1.get$vertexCount();
    normals1 = poly1.get$normals();
    v = poly2.get$centroid();
    t1 = xf2.position;
    t2 = t1.y;
    t3 = xf2.rotation;
    t4 = t3.col1;
    t5 = t4.y;
    t6 = v.x;
    t5 = $.$add$ns(t2, $.$mul$n(t5, t6));
    t3 = t3.col2;
    t2 = t3.y;
    t7 = v.y;
    predy = $.$add$ns(t5, $.$mul$n(t2, t7));
    predx = $.$add$ns($.$add$ns(t1.x, $.$mul$n(t4.x, t6)), $.$mul$n(t3.x, t7));
    v1 = poly1.get$centroid();
    t7 = xf1.position;
    t3 = t7.y;
    t6 = xf1.rotation;
    t4 = t6.col1;
    t1 = t4.y;
    t2 = v1.x;
    t3 = $.$add$ns(t3, $.$mul$n(t1, t2));
    t6 = t6.col2;
    t5 = t6.y;
    t8 = v1.y;
    tempy = $.$add$ns(t3, $.$mul$n(t5, t8));
    t7 = t7.x;
    t4 = t4.x;
    t2 = $.$add$ns(t7, $.$mul$n(t4, t2));
    t6 = t6.x;
    dx = $.$sub$n(predx, $.$add$ns(t2, $.$mul$n(t6, t8)));
    dy = $.$sub$n(predy, tempy);
    t8 = $.getInterceptor$n(dx);
    t2 = $.getInterceptor$n(dy);
    dLocal1x = $.$add$ns(t8.$mul(dx, t4), t2.$mul(dy, t1));
    if (typeof dLocal1x !== "number")
      return this.findMaxSeparation$5$bailout(1, results, poly1, xf1, poly2, xf2, t5, count1, normals1, t6, dx, dy, dLocal1x, t8, t2);
    dLocal1y = $.$add$ns(t8.$mul(dx, t6), t2.$mul(dy, t5));
    if (typeof dLocal1y !== "number")
      return this.findMaxSeparation$5$bailout(2, results, poly1, xf1, poly2, xf2, 0, count1, normals1, 0, 0, 0, dLocal1x, 0, 0, dLocal1y);
    for (t1 = normals1.length, edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      norm = normals1[i];
      t2 = $.getInterceptor$x(norm);
      dot = $.$add$ns($.$mul$n(t2.get$x(norm), dLocal1x), $.$mul$n(t2.get$y(norm), dLocal1y));
      if ($.$gt$n(dot, maxDot)) {
        maxDot = dot;
        edge = i;
      }
    }
    s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
    prevEdge = edge - 1;
    prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
    sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
    nextEdge = edge + 1;
    nextEdge = nextEdge < count1 ? nextEdge : 0;
    sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
    t1 = $.getInterceptor$n(sPrev);
    if (t1.$gt(sPrev, s) && t1.$gt(sPrev, sNext)) {
      bestSeparation = sPrev;
      bestEdge = prevEdge;
      increment = -1;
    } else {
      if ($.$gt$n(sNext, s))
        ;
      else {
        results.edgeIndex = edge;
        results.separation = s;
        return;
      }
      bestSeparation = sNext;
      bestEdge = nextEdge;
      increment = 1;
    }
    if (typeof bestSeparation !== "number")
      return this.findMaxSeparation$5$bailout(3, results, poly1, xf1, poly2, xf2, 0, count1, 0, 0, 0, 0, 0, 0, 0, 0, bestEdge, bestSeparation, increment);
    for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
      if (t1) {
        edge0 = bestEdge - 1;
        edge0 = edge0 >= 0 ? edge0 : edge;
      } else {
        edge0 = bestEdge + 1;
        edge0 = edge0 < count1 ? edge0 : 0;
      }
      s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
      if ($.$gt$n(s, bestSeparation))
        ;
      else
        break;
    }
    results.edgeIndex = bestEdge;
    results.separation = bestSeparation;
  },
  findMaxSeparation$5$bailout: function(state0, results, poly1, xf1, poly2, xf2, t5, count1, normals1, t6, dx, dy, dLocal1x, t8, t2, dLocal1y, bestEdge, bestSeparation, increment) {
    switch (state0) {
      case 0:
        count1 = poly1.get$vertexCount();
        normals1 = poly1.get$normals();
        v = poly2.get$centroid();
        t1 = xf2.position;
        t2 = t1.y;
        t3 = xf2.rotation;
        t4 = t3.col1;
        t5 = t4.y;
        t6 = v.x;
        t5 = $.$add$ns(t2, $.$mul$n(t5, t6));
        t3 = t3.col2;
        t2 = t3.y;
        t7 = v.y;
        predy = $.$add$ns(t5, $.$mul$n(t2, t7));
        predx = $.$add$ns($.$add$ns(t1.x, $.$mul$n(t4.x, t6)), $.$mul$n(t3.x, t7));
        v1 = poly1.get$centroid();
        t7 = xf1.position;
        t3 = t7.y;
        t6 = xf1.rotation;
        t4 = t6.col1;
        t1 = t4.y;
        t2 = v1.x;
        t3 = $.$add$ns(t3, $.$mul$n(t1, t2));
        t6 = t6.col2;
        t5 = t6.y;
        t8 = v1.y;
        tempy = $.$add$ns(t3, $.$mul$n(t5, t8));
        t7 = t7.x;
        t4 = t4.x;
        t2 = $.$add$ns(t7, $.$mul$n(t4, t2));
        t6 = t6.x;
        dx = $.$sub$n(predx, $.$add$ns(t2, $.$mul$n(t6, t8)));
        dy = $.$sub$n(predy, tempy);
        t8 = $.getInterceptor$n(dx);
        t2 = $.getInterceptor$n(dy);
        dLocal1x = $.$add$ns(t8.$mul(dx, t4), t2.$mul(dy, t1));
      case 1:
        state0 = 0;
        dLocal1y = $.$add$ns(t8.$mul(dx, t6), t2.$mul(dy, t5));
      case 2:
        state0 = 0;
        for (t1 = normals1.length, edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
          if (i >= t1)
            throw $.ioore(i);
          norm = normals1[i];
          t2 = $.getInterceptor$x(norm);
          dot = $.$add$ns($.$mul$n(t2.get$x(norm), dLocal1x), $.$mul$n(t2.get$y(norm), dLocal1y));
          if ($.$gt$n(dot, maxDot)) {
            maxDot = dot;
            edge = i;
          }
        }
        s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
        prevEdge = edge - 1;
        prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
        sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
        nextEdge = edge + 1;
        nextEdge = nextEdge < count1 ? nextEdge : 0;
        sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
        t1 = $.getInterceptor$n(sPrev);
        if (t1.$gt(sPrev, s) && t1.$gt(sPrev, sNext)) {
          bestSeparation = sPrev;
          bestEdge = prevEdge;
          increment = -1;
        } else {
          if ($.$gt$n(sNext, s))
            ;
          else {
            results.edgeIndex = edge;
            results.separation = s;
            return;
          }
          bestSeparation = sNext;
          bestEdge = nextEdge;
          increment = 1;
        }
      case 3:
        var v, t1, t3, t4, t7, predy, predx, v1, tempy, edge, maxDot, i, norm, dot, s, prevEdge, sPrev, nextEdge, sNext, edge0;
        state0 = 0;
        for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
          if (t1) {
            edge0 = bestEdge - 1;
            edge0 = edge0 >= 0 ? edge0 : edge;
          } else {
            edge0 = bestEdge + 1;
            edge0 = edge0 < count1 ? edge0 : 0;
          }
          s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
          if ($.$gt$n(s, bestSeparation))
            ;
          else
            break;
        }
        results.edgeIndex = bestEdge;
        results.separation = bestSeparation;
    }
  },
  findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
    var normals1, count2, vertices2, normals2, t1, t2, t3, index, minDot, i, t4, t5, t6, dot, i2;
    poly1.get$vertexCount();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    vertices2 = poly2.get$vertices();
    normals2 = poly2.get$normals();
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    t1 = this.normal1;
    $.Matrix22_mulMatrixAndVectorToOut(xf1.rotation, normals1[edge1], t1);
    $.Matrix22_mulTransMatrixAndVectorToOut(xf2.rotation, t1, t1);
    t2 = normals2.length;
    t3 = t1.x;
    if (typeof t3 !== "number")
      return this.findIncidentEdge$6$bailout(1, c, t3, edge1, xf2, count2, vertices2, normals2, t2, t1);
    t1 = t1.y;
    if (typeof t1 !== "number")
      return this.findIncidentEdge$6$bailout(2, c, t3, edge1, xf2, count2, vertices2, normals2, t2, t1, $.JSNumber_methods);
    index = 0;
    minDot = 99999999999999;
    i = 0;
    for (; i < count2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t4 = normals2[i];
      t5 = $.getInterceptor$x(t4);
      t6 = t5.get$x(t4);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t4 = t5.get$y(t4);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      dot = t3 * t6 + t1 * t4;
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    i2 = index + 1;
    i2 = i2 < count2 ? i2 : 0;
    t1 = vertices2.length;
    if (index < 0 || index >= t1)
      throw $.ioore(index);
    t2 = vertices2[index];
    t3 = c.length;
    if (0 >= t3)
      throw $.ioore(0);
    $.Transform_mulToOut(xf2, t2, c[0].get$v());
    $.get$id$x(c[0]).get$features().referenceEdge = edge1;
    $.get$id$x(c[0]).get$features().incidentEdge = index;
    $.get$id$x(c[0]).get$features().incidentVertex = 0;
    if (i2 < 0 || i2 >= t1)
      throw $.ioore(i2);
    t1 = vertices2[i2];
    if (1 >= t3)
      throw $.ioore(1);
    $.Transform_mulToOut(xf2, t1, c[1].get$v());
    $.get$id$x(c[1]).get$features().referenceEdge = edge1;
    $.get$id$x(c[1]).get$features().incidentEdge = i2;
    $.get$id$x(c[1]).get$features().incidentVertex = 1;
  },
  findIncidentEdge$6$bailout: function(state0, c, t3, edge1, xf2, count2, vertices2, normals2, t2, t1, t4) {
    switch (state0) {
      case 0:
        poly1.get$vertexCount();
        normals1 = poly1.get$normals();
        count2 = poly2.get$vertexCount();
        vertices2 = poly2.get$vertices();
        normals2 = poly2.get$normals();
        if (edge1 < 0 || edge1 >= normals1.length)
          throw $.ioore(edge1);
        t1 = this.normal1;
        $.Matrix22_mulMatrixAndVectorToOut(xf1.rotation, normals1[edge1], t1);
        $.Matrix22_mulTransMatrixAndVectorToOut(xf2.rotation, t1, t1);
        t2 = normals2.length;
        t3 = t1.x;
      case 1:
        state0 = 0;
        t4 = $.getInterceptor$n(t3);
        t1 = t1.y;
      case 2:
        var normals1, t5, index, minDot, i, t6, t7, dot, i2;
        state0 = 0;
        t5 = $.getInterceptor$n(t1);
        index = 0;
        minDot = 99999999999999;
        i = 0;
        for (; i < count2; ++i) {
          if (i >= t2)
            throw $.ioore(i);
          t6 = normals2[i];
          t7 = $.getInterceptor$x(t6);
          dot = $.$add$ns(t4.$mul(t3, t7.get$x(t6)), t5.$mul(t1, t7.get$y(t6)));
          if ($.$lt$n(dot, minDot)) {
            minDot = dot;
            index = i;
          }
        }
        i2 = index + 1;
        i2 = i2 < count2 ? i2 : 0;
        t1 = vertices2.length;
        if (index < 0 || index >= t1)
          throw $.ioore(index);
        t2 = vertices2[index];
        t3 = c.length;
        if (0 >= t3)
          throw $.ioore(0);
        $.Transform_mulToOut(xf2, t2, c[0].get$v());
        $.get$id$x(c[0]).get$features().referenceEdge = edge1;
        $.get$id$x(c[0]).get$features().incidentEdge = index;
        $.get$id$x(c[0]).get$features().incidentVertex = 0;
        if (i2 < 0 || i2 >= t1)
          throw $.ioore(i2);
        t1 = vertices2[i2];
        if (1 >= t3)
          throw $.ioore(1);
        $.Transform_mulToOut(xf2, t1, c[1].get$v());
        $.get$id$x(c[1]).get$features().referenceEdge = edge1;
        $.get$id$x(c[1]).get$features().incidentEdge = i2;
        $.get$id$x(c[1]).get$features().incidentVertex = 1;
    }
  },
  collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
    var totalRadius, t1, t2, t3, t4, t5, t6, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t7, t8, t9, t10, t11, frontOffset, t12, t13, sideOffset2, np, pointCount, i, cp;
    manifold.set$pointCount(0);
    totalRadius = $.$add$ns(polyA.radius, polyB.radius);
    t1 = this.results1;
    this.findMaxSeparation$5(t1, polyA, xfA, polyB, xfB);
    if ($.$gt$n(t1.separation, totalRadius))
      return;
    t2 = this.results2;
    this.findMaxSeparation$5(t2, polyB, xfB, polyA, xfA);
    t3 = t2.separation;
    t4 = $.getInterceptor$n(t3);
    if (t4.$gt(t3, totalRadius))
      return;
    t5 = t1.separation;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = $.getInterceptor$x(manifold);
    if (t4.$gt(t3, 0.98 * t5 + 0.001)) {
      edge1 = t2.edgeIndex;
      t6.set$type(manifold, 2);
      xf2 = xfA;
      xf1 = xfB;
      poly2 = polyA;
      poly1 = polyB;
      flip = 1;
    } else {
      edge1 = t1.edgeIndex;
      t6.set$type(manifold, 1);
      xf2 = xfB;
      xf1 = xfA;
      poly2 = polyB;
      poly1 = polyA;
      flip = 0;
    }
    t1 = this.incidentEdge;
    this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
    count1 = poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    t2 = this.v11;
    t3 = vertices1.length;
    if (edge1 < 0 || edge1 >= t3)
      throw $.ioore(edge1);
    t4 = vertices1[edge1];
    t5 = $.getInterceptor$x(t4);
    t7 = t5.get$x(t4);
    t4 = t5.get$y(t4);
    t2.x = t7;
    t2.y = t4;
    t4 = this.v12;
    t5 = edge1 + 1;
    if (t5 < count1) {
      if (t5 >= t3)
        throw $.ioore(t5);
      t3 = vertices1[t5];
    } else {
      if (0 >= t3)
        throw $.ioore(0);
      t3 = vertices1[0];
    }
    t5 = $.getInterceptor$x(t3);
    t7 = t5.get$x(t3);
    t3 = t5.get$y(t3);
    t4.x = t7;
    t4.y = t3;
    t3 = this.localTangent;
    t7 = t4.x;
    t5 = t4.y;
    t3.x = t7;
    t3.y = t5;
    t3.x = $.$sub$n(t3.x, t2.x);
    t3.y = $.$sub$n(t3.y, t2.y);
    t3.normalize$0();
    t5 = this.localNormal;
    t7 = t3.x;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t8 = t3.y;
    if (typeof t8 !== "number")
      throw $.iae(t8);
    t5.x = 1 * t8;
    t5.y = -1 * t7;
    t7 = this.planePoint;
    t8 = t2.x;
    t9 = t2.y;
    t7.x = t8;
    t7.y = t9;
    t7.x = $.$add$ns(t7.x, t4.x);
    t7.y = $.$add$ns(t7.y, t4.y);
    t7.x = $.$mul$n(t7.x, 0.5);
    t7.y = $.$mul$n(t7.y, 0.5);
    t9 = this.tangent;
    $.Matrix22_mulMatrixAndVectorToOut(xf1.rotation, t3, t9);
    t3 = this.normal;
    t8 = t9.x;
    if (typeof t8 !== "number")
      throw $.iae(t8);
    t10 = t9.y;
    if (typeof t10 !== "number")
      throw $.iae(t10);
    t3.x = 1 * t10;
    t3.y = -1 * t8;
    $.Transform_mulToOut(xf1, t2, t2);
    $.Transform_mulToOut(xf1, t4, t4);
    t8 = t3.x;
    t10 = t2.x;
    t8 = $.$mul$n(t8, t10);
    t11 = t3.y;
    t2 = t2.y;
    frontOffset = $.$add$ns(t8, $.$mul$n(t11, t2));
    if (typeof frontOffset !== "number")
      return this.collidePolygons$5$bailout(1, manifold, t4, xf2, flip, totalRadius, t9, frontOffset, t3, t5, t7, t10, t2, t1);
    t11 = t9.x;
    t8 = $.getInterceptor$n(t11);
    t10 = t8.$mul(t11, t10);
    t12 = t9.y;
    t13 = $.getInterceptor$n(t12);
    t2 = $.$negate$n($.$add$ns(t10, t13.$mul(t12, t2)));
    if (typeof totalRadius !== "number")
      throw $.iae(totalRadius);
    sideOffset2 = $.$add$ns($.$add$ns(t8.$mul(t11, t4.x), t13.$mul(t12, t4.y)), totalRadius);
    t9.x = t8.$negate(t11);
    t9.y = $.$negate$n(t9.y);
    t11 = this.clipPoints1;
    np = $.Collision_clipSegmentToLine(t11, t1, t9, t2 + totalRadius);
    t9.x = $.$negate$n(t9.x);
    t9.y = $.$negate$n(t9.y);
    if (np < 2)
      return;
    t1 = this.clipPoints2;
    if ($.Collision_clipSegmentToLine(t1, t11, t9, sideOffset2) < 2)
      return;
    t2 = manifold.get$localNormal();
    t4 = t5.x;
    t5 = t5.y;
    t2.x = t4;
    t2.y = t5;
    t5 = manifold.get$localPoint();
    t2 = t7.x;
    t7 = t7.y;
    t5.x = t2;
    t5.y = t7;
    for (t2 = t1.length, pointCount = 0, i = 0; i < 2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t4 = t1[i].get$v();
      if ($.$le$n($.$sub$n($.$add$ns($.$mul$n(t3.x, t4.x), $.$mul$n(t3.y, t4.y)), frontOffset), totalRadius)) {
        cp = $.$index$asx(t6.get$points(manifold), pointCount);
        $.Transform_mulTransToOut(xf2, t4, cp.get$localPoint());
        t4 = $.getInterceptor$x(cp);
        t4.get$id(cp).setFrom$1($.get$id$x(t1[i]));
        t4.get$id(cp).get$features().flip = flip;
        ++pointCount;
      }
    }
    manifold.set$pointCount(pointCount);
  },
  collidePolygons$5$bailout: function(state0, manifold, t4, xf2, flip, totalRadius, t8, frontOffset, t3, t5, t6, t9, t2, t1) {
    var t10, t7, t11, t12, sideOffset2, np, pointCount, i, cp;
    t10 = t8.x;
    t7 = $.getInterceptor$n(t10);
    t9 = t7.$mul(t10, t9);
    t11 = t8.y;
    t12 = $.getInterceptor$n(t11);
    t2 = $.$negate$n($.$add$ns(t9, t12.$mul(t11, t2)));
    if (typeof totalRadius !== "number")
      throw $.iae(totalRadius);
    sideOffset2 = $.$add$ns($.$add$ns(t7.$mul(t10, t4.x), t12.$mul(t11, t4.y)), totalRadius);
    t8.x = t7.$negate(t10);
    t8.y = $.$negate$n(t8.y);
    t10 = this.clipPoints1;
    np = $.Collision_clipSegmentToLine(t10, t1, t8, t2 + totalRadius);
    t8.x = $.$negate$n(t8.x);
    t8.y = $.$negate$n(t8.y);
    if (np < 2)
      return;
    t1 = this.clipPoints2;
    if ($.Collision_clipSegmentToLine(t1, t10, t8, sideOffset2) < 2)
      return;
    t2 = manifold.get$localNormal();
    t4 = t5.x;
    t5 = t5.y;
    t2.x = t4;
    t2.y = t5;
    t5 = manifold.get$localPoint();
    t2 = t6.x;
    t6 = t6.y;
    t5.x = t2;
    t5.y = t6;
    for (t2 = $.getInterceptor$x(manifold), t4 = t1.length, pointCount = 0, i = 0; i < 2; ++i) {
      if (i >= t4)
        throw $.ioore(i);
      t5 = t1[i].get$v();
      if ($.$le$n($.$sub$n($.$add$ns($.$mul$n(t3.x, t5.x), $.$mul$n(t3.y, t5.y)), frontOffset), totalRadius)) {
        cp = $.$index$asx(t2.get$points(manifold), pointCount);
        $.Transform_mulTransToOut(xf2, t5, cp.get$localPoint());
        t5 = $.getInterceptor$x(cp);
        t5.get$id(cp).setFrom$1($.get$id$x(t1[i]));
        t5.get$id(cp).get$features().flip = flip;
        ++pointCount;
      }
    }
    manifold.set$pointCount(pointCount);
  },
  Collision$_construct$1: function(pool) {
    var t1, t2;
    t1 = this.incidentEdge;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
    t1 = this.clipPoints1;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
    t1 = this.clipPoints2;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = new $.ClipVertex(new $.Vector(0, 0), new $.ContactID(new $.Features(0, 0, 0, 0)));
  }
},

ClipVertex: {"": "Object;v<,id>",
  setFrom$1: function(cv) {
    var t1, t2, t3;
    t1 = this.v;
    t2 = cv.get$v();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.id;
    t2 = t2.features;
    t1 = $.get$id$x(cv).get$features();
    t2.referenceEdge = t1.referenceEdge;
    t2.incidentEdge = t1.incidentEdge;
    t2.incidentVertex = t1.incidentVertex;
    t2.flip = t1.flip;
  }
},

EdgeResults: {"": "Object;separation,edgeIndex"},

ContactID: {"": "Object;features<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = other.get$features();
    return t1.$eq(t1, this.features);
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.features;
    t2 = other.get$features();
    t1.referenceEdge = t2.referenceEdge;
    t1.incidentEdge = t2.incidentEdge;
    t1.incidentVertex = t2.incidentVertex;
    t1.flip = t2.flip;
  },
  isEqual$1: function(other) {
    var t1 = other.get$features();
    return t1.$eq(t1, this.features);
  },
  zero$0: function() {
    var t1 = this.features;
    t1.referenceEdge = 0;
    t1.incidentEdge = 0;
    t1.incidentVertex = 0;
    t1.flip = 0;
  }
},

Distance: {"": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal<",
  distance$3: function(output, cache, input) {
    var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, iter, saveCount, i, t12, t13, t14, t15, vertex, duplicate, rA, rB;
    this.calls = this.calls + 1;
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    transformA = input.get$transformA();
    transformB = input.get$transformB();
    t1 = this.simplex;
    t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
    vertices = t1.vertices;
    t2 = this.closestPoint;
    t1.getClosestPoint$1(t2);
    t3 = t2.x;
    t3 = $.$mul$n(t3, t3);
    t4 = t2.y;
    $.$add$ns(t3, $.$mul$n(t4, t4));
    for (t3 = this.saveB, t4 = t3.length, t5 = this.saveA, t6 = t5.length, t7 = vertices.length, t8 = transformA.rotation, t9 = this.searchDirection, t10 = this.temp, t11 = transformB.rotation, iter = 0; iter < this.maxIters;) {
      saveCount = t1.count;
      for (i = 0; $.JSNumber_methods.$lt(i, saveCount); ++i) {
        if (i >= t7)
          throw $.ioore(i);
        t12 = vertices[i].get$indexA();
        if (i >= t6)
          throw $.ioore(i);
        t5[i] = t12;
        t12 = vertices[i].get$indexB();
        if (i >= t4)
          throw $.ioore(i);
        t3[i] = t12;
      }
      switch (saveCount) {
        case 1:
          break;
        case 2:
          t1.solve2$0();
          break;
        case 3:
          t1.solve3$0();
          break;
        default:
          return;
      }
      if ($.$eq(t1.count, 3))
        break;
      t1.getClosestPoint$1(t2);
      t12 = t2.x;
      t12 = $.$mul$n(t12, t12);
      t13 = t2.y;
      $.$add$ns(t12, $.$mul$n(t13, t13));
      t1.getSearchDirection$1(t9);
      t12 = t9.x;
      t13 = $.getInterceptor$n(t12);
      t14 = t13.$mul(t12, t12);
      t15 = t9.y;
      if ($.$lt$n($.$add$ns(t14, $.$mul$n(t15, t15)), 1.4208639999999999e-14))
        break;
      t14 = t1.count;
      if (t14 >>> 0 !== t14 || t14 >= t7)
        throw $.ioore(t14);
      vertex = vertices[t14];
      t9.x = t13.$negate(t12);
      t9.y = $.$negate$n(t9.y);
      $.Matrix22_mulTransMatrixAndVectorToOut(t8, t9, t10);
      vertex.set$indexA(proxyA.getSupport$1(t10));
      t12 = proxyA.get$vertices();
      t13 = vertex.get$indexA();
      if (t13 >>> 0 !== t13 || t13 >= t12.length)
        throw $.ioore(t13);
      $.Transform_mulToOut(transformA, t12[t13], vertex.get$wA());
      t9.x = $.$negate$n(t9.x);
      t9.y = $.$negate$n(t9.y);
      $.Matrix22_mulTransMatrixAndVectorToOut(t11, t9, t10);
      vertex.set$indexB(proxyB.getSupport$1(t10));
      t13 = proxyB.get$vertices();
      t12 = vertex.get$indexB();
      if (t12 >>> 0 !== t12 || t12 >= t13.length)
        throw $.ioore(t12);
      $.Transform_mulToOut(transformB, t13[t12], vertex.get$wB());
      t12 = vertex.get$w();
      t13 = vertex.get$wB();
      t14 = t13.x;
      t13 = t13.y;
      t12.x = t14;
      t12.y = t13;
      t13 = vertex.get$wA();
      t12.x = $.$sub$n(t12.x, t13.x);
      t12.y = $.$sub$n(t12.y, t13.y);
      ++iter;
      this.iters = this.iters + 1;
      for (i = 0; duplicate = false, $.JSNumber_methods.$lt(i, saveCount); ++i) {
        t12 = vertex.get$indexA();
        if (i >= t6)
          throw $.ioore(i);
        if ($.$eq(t12, t5[i])) {
          t12 = vertex.get$indexB();
          if (i >= t4)
            throw $.ioore(i);
          t12 = $.$eq(t12, t3[i]);
        } else
          t12 = false;
        if (t12) {
          duplicate = true;
          break;
        }
      }
      if (duplicate)
        break;
      t1.count = $.$add$ns(t1.count, 1);
    }
    this.maxIters = $.max(this.maxIters, iter);
    t1.getWitnessPoints$2(output.get$pointA(), output.get$pointB());
    t2 = $.MathBox_distanceSquared(output.get$pointA(), output.get$pointB());
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    output.set$distance(Math.sqrt(t2));
    output.set$iterations(iter);
    t1.writeCache$1(cache);
    if (input.get$useRadii()) {
      rA = proxyA.get$radius();
      rB = proxyB.get$radius();
      t1 = output.get$distance();
      t2 = $.getInterceptor$ns(rA);
      t3 = $.getInterceptor$n(t1);
      if (t3.$gt(t1, t2.$add(rA, rB)) && t3.$gt(t1, 1.192e-7)) {
        output.set$distance(t3.$sub(t1, t2.$add(rA, rB)));
        t1 = this.normal;
        t2 = output.get$pointB();
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = output.get$pointA();
        t1.x = $.$sub$n(t1.x, t2.x);
        t1.y = $.$sub$n(t1.y, t2.y);
        t1.normalize$0();
        t2 = t1.x;
        t3 = t1.y;
        t10.x = t2;
        t10.y = t3;
        t10.x = $.$mul$n(t10.x, rA);
        t10.y = $.$mul$n(t10.y, rA);
        t3 = output.get$pointA();
        t3.x = $.$add$ns(t3.x, t10.x);
        t3.y = $.$add$ns(t3.y, t10.y);
        t3 = t1.x;
        t1 = t1.y;
        t10.x = t3;
        t10.y = t1;
        t10.x = $.$mul$n(t10.x, rB);
        t10.y = $.$mul$n(t10.y, rB);
        t1 = output.get$pointB();
        t1.x = $.$sub$n(t1.x, t10.x);
        t1.y = $.$sub$n(t1.y, t10.y);
      } else {
        t1 = output.get$pointA();
        t2 = output.get$pointB();
        t1.x = $.$add$ns(t1.x, t2.x);
        t1.y = $.$add$ns(t1.y, t2.y);
        t1.x = $.$mul$n(t1.x, 0.5);
        t1.y = $.$mul$n(t1.y, 0.5);
        t1 = output.get$pointB();
        t2 = output.get$pointA();
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        output.set$distance(0);
      }
    }
  },
  get$distance: function() {
    return new $.BoundClosure$3(this, "distance$3");
  }
},

DistanceInput: {"": "Object;proxyA@,proxyB@,transformA<,transformB<,useRadii<"},

DistanceOutput: {"": "Object;pointA<,pointB<,distance@,iterations?"},

DistanceProxy: {"": "Object;vertices<,count@,radius@",
  setFromShape$1: function(shape) {
    var t1, t2, i, t3, t4;
    t1 = shape.type;
    if (typeof t1 !== "number")
      return this.setFromShape$1$bailout(1, shape, t1);
    if (t1 === 0) {
      t1 = this.vertices;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1[0].setFrom$1(shape.get$position(shape));
      this.count = 1;
      this.radius = shape.radius;
    } else if (t1 === 1) {
      this.count = shape.get$vertexCount();
      this.radius = shape.radius;
      t1 = this.vertices;
      t2 = t1.length;
      i = 0;
      while (true) {
        t3 = this.count;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        if (!(i < t3))
          break;
        if (i >= t2)
          throw $.ioore(i);
        t3 = t1[i];
        t4 = shape.get$vertices();
        if (i >= t4.length)
          throw $.ioore(i);
        t3.setFrom$1(t4[i]);
        ++i;
      }
    }
  },
  setFromShape$1$bailout: function(state0, shape, t1) {
    switch (state0) {
      case 0:
        t1 = shape.type;
      case 1:
        state0 = 0;
      case 2:
        var t2, i, t3, t4;
        if (state0 === 0 && $.$eq(t1, 0)) {
          t1 = this.vertices;
          if (0 >= t1.length)
            throw $.ioore(0);
          t1[0].setFrom$1(shape.get$position(shape));
          this.count = 1;
          this.radius = shape.radius;
        } else
          switch (state0) {
            case 0:
              t1 = shape.type;
            case 2:
              state0 = 0;
              if ($.$eq(t1, 1)) {
                this.count = shape.get$vertexCount();
                this.radius = shape.radius;
                t1 = this.vertices;
                t2 = t1.length;
                i = 0;
                while (true) {
                  t3 = this.count;
                  if (typeof t3 !== "number")
                    throw $.iae(t3);
                  if (!$.JSNumber_methods.$lt(i, t3))
                    break;
                  if (i >= t2)
                    throw $.ioore(i);
                  t3 = t1[i];
                  t4 = shape.get$vertices();
                  if (i >= t4.length)
                    throw $.ioore(i);
                  t3.setFrom$1(t4[i]);
                  ++i;
                }
              }
          }
    }
  },
  getSupport$1: function(direction) {
    var t1, t2, t3, t4, t5, t6, bestValue, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = $.getInterceptor$x(t3);
    t5 = t4.get$x(t3);
    t6 = direction.x;
    if (typeof t6 !== "number")
      return this.getSupport$1$bailout(1, direction, t1, t3, t6, t4, t5, t2);
    t5 = $.$mul$n(t5, t6);
    t3 = t4.get$y(t3);
    t4 = direction.y;
    if (typeof t4 !== "number")
      return this.getSupport$1$bailout(2, 0, t1, t3, t6, t4, t5, t2);
    bestValue = $.$add$ns(t5, $.$mul$n(t3, t4));
    if (typeof bestValue !== "number")
      return this.getSupport$1$bailout(3, 0, t1, 0, t6, t4, 0, t2, bestValue);
    for (bestIndex = 0, i = 1; $.JSNumber_methods.$lt(i, this.count); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t5 = $.getInterceptor$x(t3);
      value = $.$add$ns($.$mul$n(t5.get$x(t3), t6), $.$mul$n(t5.get$y(t3), t4));
      if ($.$gt$n(value, bestValue)) {
        bestValue = value;
        bestIndex = i;
      }
    }
    return bestIndex;
  },
  getSupport$1$bailout: function(state0, direction, t1, t3, t6, t4, t5, t2, bestValue) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t3 = t1[0];
        t4 = $.getInterceptor$x(t3);
        t5 = t4.get$x(t3);
        t6 = direction.x;
      case 1:
        state0 = 0;
        t5 = $.$mul$n(t5, t6);
        t3 = t4.get$y(t3);
        t4 = direction.y;
      case 2:
        state0 = 0;
        bestValue = $.$add$ns(t5, $.$mul$n(t3, t4));
      case 3:
        var bestIndex, i, value;
        state0 = 0;
        for (bestIndex = 0, i = 1; $.JSNumber_methods.$lt(i, this.count); ++i) {
          if (i >= t2)
            throw $.ioore(i);
          t3 = t1[i];
          t5 = $.getInterceptor$x(t3);
          value = $.$add$ns($.$mul$n(t5.get$x(t3), t6), $.$mul$n(t5.get$y(t3), t4));
          if ($.$gt$n(value, bestValue)) {
            bestValue = value;
            bestIndex = i;
          }
        }
        return bestIndex;
    }
  },
  DistanceProxy$0: function() {
    var t1, t2, i;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector(0, 0);
  }
},

Features: {"": "Object;referenceEdge<,incidentEdge<,incidentVertex<,flip<",
  setFrom$1: function(f) {
    this.referenceEdge = f.get$referenceEdge();
    this.incidentEdge = f.get$incidentEdge();
    this.incidentVertex = f.get$incidentVertex();
    this.flip = f.get$flip();
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return this.referenceEdge === other.get$referenceEdge() && this.incidentEdge === other.get$incidentEdge() && this.incidentVertex === other.get$incidentVertex() && this.flip === other.get$flip();
  },
  toString$0: function(_) {
    return "Features: (" + this.flip + ", " + $.S(this.incidentEdge) + ", " + this.incidentVertex + " " + this.referenceEdge + ")";
  }
},

Manifold: {"": "Object;points>,localNormal<,localPoint<,type*,pointCount@",
  setFrom$1: function(other) {
    var t1, t2, t3, i;
    for (t1 = this.points, t2 = t1.length, t3 = $.getInterceptor$x(other), i = 0; $.JSNumber_methods.$lt(i, other.get$pointCount()); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i].setFrom$1($.$index$asx(t3.get$points(other), i));
    }
    this.type = $.get$type$x(other);
    t1 = this.localNormal;
    t2 = other.get$localNormal();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.localPoint;
    t1 = other.get$localPoint();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    this.pointCount = other.get$pointCount();
  },
  Manifold$0: function() {
    var t1, t2, i;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = new $.ManifoldPoint(new $.Vector(0, 0), 0, 0, new $.ContactID(new $.Features(0, 0, 0, 0)));
    }
  }
},

ManifoldPoint: {"": "Object;localPoint<,normalImpulse@,tangentImpulse@,id>",
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.localPoint;
    t2 = other.get$localPoint();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    this.normalImpulse = other.get$normalImpulse();
    this.tangentImpulse = other.get$tangentImpulse();
    t2 = this.id.features;
    t1 = $.get$id$x(other).get$features();
    t2.referenceEdge = t1.referenceEdge;
    t2.incidentEdge = t1.incidentEdge;
    t2.incidentVertex = t1.incidentVertex;
    t2.flip = t1.flip;
  }
},

Simplex: {"": "Object;v1,v2,v3,vertices<,count@,e13,e23,e12,case2,case22,case3,case33",
  readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
    var t1, t2, i, t3, v, t4, wALocal, wBLocal, t5, metric1, metric2;
    this.count = cache.get$count();
    for (t1 = this.vertices, t2 = t1.length, i = 0; t3 = this.count, $.JSNumber_methods.$lt(i, t3); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      v = t1[i];
      v.set$indexA($.$index$asx(cache.get$indexA(), i));
      v.set$indexB($.$index$asx(cache.get$indexB(), i));
      t3 = proxyA.get$vertices();
      t4 = v.get$indexA();
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw $.ioore(t4);
      wALocal = t3[t4];
      t4 = proxyB.get$vertices();
      t3 = v.get$indexB();
      if (t3 >>> 0 !== t3 || t3 >= t4.length)
        throw $.ioore(t3);
      wBLocal = t4[t3];
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      t3 = v.get$w();
      t4 = v.get$wB();
      t5 = t4.x;
      t4 = t4.y;
      t3.x = t5;
      t3.y = t4;
      t4 = v.get$wA();
      t3.x = $.$sub$n(t3.x, t4.x);
      t3.y = $.$sub$n(t3.y, t4.y);
      v.set$a(0);
    }
    if ($.$gt$n(t3, 1)) {
      metric1 = cache.get$metric();
      metric2 = this.getMetric$0();
      if (typeof metric1 !== "number")
        throw $.iae(metric1);
      t3 = $.getInterceptor$n(metric2);
      if (t3.$lt(metric2, 0.5 * metric1) || $.JSNumber_methods.$lt(2 * metric1, metric2) || t3.$lt(metric2, 1.192e-7))
        this.count = 0;
    }
    if ($.$eq(this.count, 0)) {
      if (0 >= t2)
        throw $.ioore(0);
      v = t1[0];
      v.set$indexA(0);
      v.set$indexB(0);
      t1 = proxyA.get$vertices();
      if (0 >= t1.length)
        throw $.ioore(0);
      wALocal = t1[0];
      t1 = proxyB.get$vertices();
      if (0 >= t1.length)
        throw $.ioore(0);
      wBLocal = t1[0];
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      t1 = v.get$w();
      t2 = v.get$wB();
      t3 = t2.x;
      t2 = t2.y;
      t1.x = t3;
      t1.y = t2;
      t2 = v.get$wA();
      t1.x = $.$sub$n(t1.x, t2.x);
      t1.y = $.$sub$n(t1.y, t2.y);
      this.count = 1;
    }
  },
  writeCache$1: function(cache) {
    var t1, t2, i, t3;
    cache.set$metric(this.getMetric$0());
    cache.set$count(this.count);
    for (t1 = this.vertices, t2 = t1.length, i = 0; $.JSNumber_methods.$lt(i, this.count); ++i) {
      t3 = cache.get$indexA();
      if (i >= t2)
        throw $.ioore(i);
      $.$indexSet$ax(t3, i, t1[i].get$indexA());
      $.$indexSet$ax(cache.get$indexB(), i, t1[i].get$indexB());
    }
  },
  getSearchDirection$1: function(out) {
    var t1, t2, t3;
    switch (this.count) {
      case 1:
        t1 = this.v1.w;
        t2 = t1.x;
        t1 = t1.y;
        out.x = t2;
        out.y = t1;
        out.x = $.$negate$n(out.x);
        out.y = $.$negate$n(out.y);
        return;
      case 2:
        t1 = this.e12;
        t2 = this.v2.w;
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.v1.w;
        t1.x = $.$sub$n(t1.x, t2.x);
        t1.y = $.$sub$n(t1.y, t2.y);
        t3 = t2.x;
        t2 = t2.y;
        out.x = t3;
        out.y = t2;
        out.x = $.$negate$n(out.x);
        out.y = $.$negate$n(out.y);
        t2 = t1.x;
        t3 = $.$mul$n(t2, out.y);
        t1 = t1.y;
        if ($.$gt$n($.$sub$n(t3, $.$mul$n(t1, out.x)), 0)) {
          if (typeof t2 !== "number")
            throw $.iae(t2);
          if (typeof t1 !== "number")
            throw $.iae(t1);
          out.x = -1 * t1;
          out.y = 1 * t2;
        } else {
          if (typeof t2 !== "number")
            throw $.iae(t2);
          if (typeof t1 !== "number")
            throw $.iae(t1);
          out.x = 1 * t1;
          out.y = -1 * t2;
        }
        break;
      default:
        out.x = 0;
        out.y = 0;
        return;
    }
  },
  getClosestPoint$1: function(out) {
    var t1, t2, t3, t4, t5;
    switch (this.count) {
      case 0:
        out.x = 0;
        out.y = 0;
        return;
      case 1:
        t1 = this.v1.w;
        t2 = t1.x;
        t1 = t1.y;
        out.x = t2;
        out.y = t1;
        return;
      case 2:
        t1 = this.case22;
        t2 = this.v2;
        t3 = t2.w;
        t4 = t3.x;
        t3 = t3.y;
        t1.x = t4;
        t1.y = t3;
        t2 = t2.a;
        t1.x = $.$mul$n(t1.x, t2);
        t1.y = $.$mul$n(t1.y, t2);
        t2 = this.case2;
        t3 = this.v1;
        t4 = t3.w;
        t5 = t4.x;
        t4 = t4.y;
        t2.x = t5;
        t2.y = t4;
        t3 = t3.a;
        t2.x = $.$mul$n(t2.x, t3);
        t2.y = $.$mul$n(t2.y, t3);
        t2.x = $.$add$ns(t2.x, t1.x);
        t2.y = $.$add$ns(t2.y, t1.y);
        t1 = t2.x;
        t2 = t2.y;
        out.x = t1;
        out.y = t2;
        return;
      case 3:
        out.x = 0;
        out.y = 0;
        return;
      default:
        out.x = 0;
        out.y = 0;
        return;
    }
  },
  getWitnessPoints$2: function(pA, pB) {
    var t1, t2, t3, t4, t5;
    switch (this.count) {
      case 0:
        break;
      case 1:
        t1 = this.v1;
        t2 = t1.wA;
        t3 = t2.x;
        t2 = t2.y;
        pA.x = t3;
        pA.y = t2;
        t1 = t1.wB;
        t2 = t1.x;
        t1 = t1.y;
        pB.x = t2;
        pB.y = t1;
        break;
      case 2:
        t1 = this.case2;
        t2 = this.v1;
        t3 = t2.wA;
        t4 = t3.x;
        t3 = t3.y;
        t1.x = t4;
        t1.y = t3;
        t3 = t2.a;
        t1.x = $.$mul$n(t1.x, t3);
        t1.y = $.$mul$n(t1.y, t3);
        t3 = this.v2;
        t4 = t3.wA;
        t5 = t4.x;
        t4 = t4.y;
        pA.x = t5;
        pA.y = t4;
        t4 = t3.a;
        pA.x = $.$mul$n(pA.x, t4);
        pA.y = $.$mul$n(pA.y, t4);
        pA.x = $.$add$ns(pA.x, t1.x);
        pA.y = $.$add$ns(pA.y, t1.y);
        t4 = t2.wB;
        t5 = t4.x;
        t4 = t4.y;
        t1.x = t5;
        t1.y = t4;
        t2 = t2.a;
        t1.x = $.$mul$n(t1.x, t2);
        t1.y = $.$mul$n(t1.y, t2);
        t2 = t3.wB;
        t4 = t2.x;
        t2 = t2.y;
        pB.x = t4;
        pB.y = t2;
        t3 = t3.a;
        pB.x = $.$mul$n(pB.x, t3);
        pB.y = $.$mul$n(pB.y, t3);
        pB.x = $.$add$ns(pB.x, t1.x);
        pB.y = $.$add$ns(pB.y, t1.y);
        break;
      case 3:
        t1 = this.v1;
        t2 = t1.wA;
        t3 = t2.x;
        t2 = t2.y;
        pA.x = t3;
        pA.y = t2;
        t1 = t1.a;
        pA.x = $.$mul$n(pA.x, t1);
        pA.y = $.$mul$n(pA.y, t1);
        t1 = this.case3;
        t2 = this.v2;
        t3 = t2.wA;
        t4 = t3.x;
        t3 = t3.y;
        t1.x = t4;
        t1.y = t3;
        t2 = t2.a;
        t1.x = $.$mul$n(t1.x, t2);
        t1.y = $.$mul$n(t1.y, t2);
        t2 = this.case33;
        t3 = this.v3;
        t4 = t3.wA;
        t5 = t4.x;
        t4 = t4.y;
        t2.x = t5;
        t2.y = t4;
        t3 = t3.a;
        t2.x = $.$mul$n(t2.x, t3);
        t2.y = $.$mul$n(t2.y, t3);
        pA.x = $.$add$ns(pA.x, t1.x);
        pA.y = $.$add$ns(pA.y, t1.y);
        pA.x = $.$add$ns(pA.x, t2.x);
        pA.y = $.$add$ns(pA.y, t2.y);
        t2 = pA.x;
        t1 = pA.y;
        pB.x = t2;
        pB.y = t1;
        break;
      default:
        break;
    }
  },
  getMetric$0: function() {
    var t1, t2, t3, t4, t5;
    switch (this.count) {
      case 0:
        return 0;
      case 1:
        return 0;
      case 2:
        t1 = $.MathBox_distanceSquared(this.v1.w, this.v2.w);
        if (typeof t1 !== "number")
          $.throwExpression(new $.ArgumentError(t1));
        return Math.sqrt(t1);
      case 3:
        t1 = this.case3;
        t2 = this.v2.w;
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.v1.w;
        t1.x = $.$sub$n(t1.x, t2.x);
        t1.y = $.$sub$n(t1.y, t2.y);
        t3 = this.case33;
        t4 = this.v3.w;
        t5 = t4.x;
        t4 = t4.y;
        t3.x = t5;
        t3.y = t4;
        t3.x = $.$sub$n(t3.x, t2.x);
        t3.y = $.$sub$n(t3.y, t2.y);
        return $.$sub$n($.$mul$n(t1.x, t3.y), $.$mul$n(t1.y, t3.x));
      default:
        return 0;
    }
  },
  solve2$0: function() {
    var t1, w1, t2, w2, t3, t4, t5, t6, d12_2, d12_1, inv_d12;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.e12;
    t4 = w2.x;
    t5 = w2.y;
    t3.x = t4;
    t3.y = t5;
    t5 = t3.x;
    if (typeof t5 !== "number")
      return this.solve2$0$bailout(1, t1, t5, w1, t2, w2, t3);
    t4 = w1.x;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(2, t1, t5, w1, t2, w2, t3, t4);
    t3.x = t5 - t4;
    t4 = t3.y;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(3, t1, 0, w1, t2, w2, t3, t4);
    t5 = w1.y;
    if (typeof t5 !== "number")
      return this.solve2$0$bailout(4, t1, t5, w1, t2, w2, t3, t4);
    t3.y = t4 - t5;
    t5 = w1.x;
    if (typeof t5 !== "number")
      return this.solve2$0$bailout(5, t1, t5, w1, t2, w2, t3);
    t4 = t3.x;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(6, t1, t5, w1, t2, w2, t3, t4);
    t5 *= t4;
    t6 = w1.y;
    if (typeof t6 !== "number")
      return this.solve2$0$bailout(7, t1, t5, 0, t2, w2, t3, t4, t6);
    t3 = t3.y;
    if (typeof t3 !== "number")
      return this.solve2$0$bailout(8, t1, t5, 0, t2, w2, t3, t4, t6);
    d12_2 = -(t5 + t6 * t3);
    if (d12_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    t5 = w2.x;
    if (typeof t5 !== "number")
      return this.solve2$0$bailout(9, t1, t5, 0, t2, w2, t3, t4, 0, d12_2);
    t4 = t5 * t4;
    t5 = w2.y;
    if (typeof t5 !== "number")
      return this.solve2$0$bailout(10, t1, t5, 0, t2, 0, t3, t4, 0, d12_2);
    d12_1 = t4 + t5 * t3;
    if (d12_1 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    inv_d12 = 1 / (d12_1 + d12_2);
    t1.a = d12_1 * inv_d12;
    t2.a = d12_2 * inv_d12;
    this.count = 2;
  },
  solve2$0$bailout: function(state0, t1, t5, w1, t2, w2, t3, t4, t6, d12_2) {
    switch (state0) {
      case 0:
        t1 = this.v1;
        w1 = t1.w;
        t2 = this.v2;
        w2 = t2.w;
        t3 = this.e12;
        t4 = w2.x;
        t5 = w2.y;
        t3.x = t4;
        t3.y = t5;
        t5 = t3.x;
      case 1:
        state0 = 0;
        t4 = w1.x;
      case 2:
        state0 = 0;
        t3.x = $.$sub$n(t5, t4);
        t4 = t3.y;
      case 3:
        state0 = 0;
        t5 = w1.y;
      case 4:
        state0 = 0;
        t3.y = $.$sub$n(t4, t5);
        t5 = w1.x;
      case 5:
        state0 = 0;
        t4 = t3.x;
      case 6:
        state0 = 0;
        t5 = $.$mul$n(t5, t4);
        t6 = w1.y;
      case 7:
        state0 = 0;
        t3 = t3.y;
      case 8:
        state0 = 0;
        d12_2 = $.$negate$n($.$add$ns(t5, $.$mul$n(t6, t3)));
        if (d12_2 <= 0) {
          t1.a = 1;
          this.count = 1;
          return;
        }
        t5 = w2.x;
      case 9:
        state0 = 0;
        t4 = $.$mul$n(t5, t4);
        t5 = w2.y;
      case 10:
        var d12_1, inv_d12;
        state0 = 0;
        d12_1 = $.$add$ns(t4, $.$mul$n(t5, t3));
        t3 = $.getInterceptor$n(d12_1);
        if (t3.$le(d12_1, 0)) {
          t2.a = 1;
          this.count = 1;
          t1.setFrom$1(t2);
          return;
        }
        t4 = t3.$add(d12_1, d12_2);
        if (typeof t4 !== "number")
          throw $.iae(t4);
        inv_d12 = 1 / t4;
        t1.a = t3.$mul(d12_1, inv_d12);
        t2.a = d12_2 * inv_d12;
        this.count = 2;
    }
  },
  solve3$0: function() {
    var t1, w1, t2, w2, t3, w3, t4, t5, t6, t7, t8, w1e12, w2e12, d12_2, t9, w1e13, w3e13, d13_2, t10, w2e23, t11, w3e23, d23_2, n123, d123_1, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.v3;
    w3 = t3.w;
    t4 = this.e12;
    t5 = w2.x;
    t6 = w2.y;
    t4.x = t5;
    t4.y = t6;
    t6 = t4.x;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(1, t2, w2, t3, w3, t4, t6, t1, w1);
    t5 = w1.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(2, t2, w2, t3, w3, t4, t6, t1, w1, t5);
    t4.x = t6 - t5;
    t5 = t4.y;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(3, t2, w2, t3, w3, t4, 0, t1, w1, t5);
    t6 = w1.y;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(4, t2, w2, t3, w3, t4, t6, t1, w1, t5);
    t4.y = t5 - t6;
    t6 = w1.x;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(5, t2, w2, t3, w3, t4, t6, t1, w1);
    t5 = t4.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(6, t2, w2, t3, w3, t4, t6, t1, w1, t5);
    t6 *= t5;
    t7 = w1.y;
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(7, t2, w2, t3, w3, t4, t6, t1, w1, t5, t7);
    t8 = t4.y;
    if (typeof t8 !== "number")
      return this.solve3$0$bailout(8, t2, w2, t3, w3, t4, t6, t1, w1, t5, t7, t8);
    w1e12 = t6 + t7 * t8;
    t7 = w2.x;
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(9, t2, w2, t3, w3, t4, 0, t1, w1, t5, t7, t8, w1e12);
    t5 = t7 * t5;
    t7 = w2.y;
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(10, t2, w2, t3, w3, t4, 0, t1, w1, t5, t7, t8, w1e12);
    w2e12 = t5 + t7 * t8;
    d12_2 = -w1e12;
    t8 = this.e13;
    t7 = w3.x;
    t5 = w3.y;
    t8.x = t7;
    t8.y = t5;
    t5 = t8.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(11, t2, w2, t3, w3, t4, 0, t1, w1, t5, 0, t8, 0, w2e12, d12_2);
    t7 = w1.x;
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(12, t2, w2, t3, w3, t4, 0, t1, w1, t5, t7, t8, 0, w2e12, d12_2);
    t8.x = t5 - t7;
    t7 = t8.y;
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(13, t2, w2, t3, w3, t4, 0, t1, w1, 0, t7, t8, 0, w2e12, d12_2);
    t5 = w1.y;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(14, t2, w2, t3, w3, t4, 0, t1, w1, t5, t7, t8, 0, w2e12, d12_2);
    t8.y = t7 - t5;
    t5 = w1.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(15, t2, w2, t3, w3, t4, 0, t1, w1, t5, 0, t8, 0, w2e12, d12_2);
    t7 = t8.x;
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(16, t2, w2, t3, w3, t4, 0, t1, w1, t5, t7, t8, 0, w2e12, d12_2);
    t5 *= t7;
    t6 = w1.y;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(17, t2, w2, t3, w3, t4, t6, t1, w1, t5, t7, t8, 0, w2e12, d12_2);
    t9 = t8.y;
    if (typeof t9 !== "number")
      return this.solve3$0$bailout(18, t2, w2, t3, w3, t4, t6, t1, w1, t5, t7, t8, 0, w2e12, d12_2, t9);
    w1e13 = t5 + t6 * t9;
    t6 = w3.x;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(19, t2, w2, t3, w3, t4, t6, t1, w1, 0, t7, t8, 0, w2e12, d12_2, t9, w1e13);
    t7 = t6 * t7;
    t5 = w3.y;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(20, t2, w2, t3, w3, t4, t6, t1, w1, t5, t7, t8, 0, w2e12, d12_2, t9, w1e13);
    w3e13 = t7 + t5 * t9;
    d13_2 = -w1e13;
    t9 = this.e23;
    t9.x = t6;
    t9.y = t5;
    t5 = t9.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(21, t2, w2, t3, w3, t4, 0, t1, w1, t5, 0, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2);
    t6 = w2.x;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(22, t2, w2, t3, w3, t4, t6, t1, w1, t5, 0, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2);
    t9.x = t5 - t6;
    t6 = t9.y;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(23, t2, w2, t3, w3, t4, t6, t1, w1, 0, 0, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2);
    t5 = w2.y;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(24, t2, w2, t3, w3, t4, t6, t1, w1, t5, 0, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2);
    t9.y = t6 - t5;
    t5 = w2.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(25, t2, w2, t3, w3, t4, 0, t1, w1, t5, 0, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2);
    t6 = t9.x;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(26, t2, w2, t3, w3, t4, t6, t1, w1, t5, 0, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2);
    t7 = t5 * t6;
    t10 = w2.y;
    if (typeof t10 !== "number")
      return this.solve3$0$bailout(27, t2, 0, t3, w3, t4, t6, t1, w1, t5, $.JSNumber_methods, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2, t10, t7);
    t9 = t9.y;
    if (typeof t9 !== "number")
      return this.solve3$0$bailout(28, t2, 0, t3, w3, t4, t6, t1, w1, t5, $.JSNumber_methods, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2, t10, t7);
    w2e23 = t7 + t10 * t9;
    t7 = w3.x;
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(29, t2, 0, t3, w3, t4, t6, t1, w1, t5, $.JSNumber_methods, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2, t10, t7, w2e23, $.JSNumber_methods);
    t6 = t7 * t6;
    t11 = w3.y;
    if (typeof t11 !== "number")
      return this.solve3$0$bailout(30, t2, 0, t3, 0, t4, t6, t1, w1, t5, $.JSNumber_methods, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2, t10, t7, w2e23, $.JSNumber_methods, $.JSNumber_methods, t11);
    w3e23 = t6 + t11 * t9;
    d23_2 = -w2e23;
    t9 = t4.x;
    if (typeof t9 !== "number")
      return this.solve3$0$bailout(31, t2, 0, t3, 0, t4, 0, t1, w1, t5, $.JSNumber_methods, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2, t10, t7, 0, $.JSNumber_methods, $.JSNumber_methods, t11, d23_2, w3e23, $.JSNumber_methods);
    t6 = t8.y;
    if (typeof t6 !== "number")
      return this.solve3$0$bailout(32, t2, 0, t3, 0, t4, t6, t1, w1, t5, $.JSNumber_methods, t8, 0, w2e12, d12_2, t9, 0, w3e13, d13_2, t10, t7, 0, $.JSNumber_methods, $.JSNumber_methods, t11, d23_2, w3e23, $.JSNumber_methods);
    t6 = t9 * t6;
    t4 = t4.y;
    if (typeof t4 !== "number")
      return this.solve3$0$bailout(33, t2, 0, t3, 0, t4, t6, t1, w1, t5, $.JSNumber_methods, t8, 0, w2e12, d12_2, 0, 0, w3e13, d13_2, t10, t7, 0, $.JSNumber_methods, $.JSNumber_methods, t11, d23_2, w3e23, $.JSNumber_methods);
    t8 = t8.x;
    if (typeof t8 !== "number")
      return this.solve3$0$bailout(34, t2, 0, t3, 0, t4, t6, t1, w1, t5, $.JSNumber_methods, t8, 0, w2e12, d12_2, 0, 0, w3e13, d13_2, t10, t7, 0, $.JSNumber_methods, $.JSNumber_methods, t11, d23_2, w3e23, $.JSNumber_methods);
    n123 = t6 - t4 * t8;
    d123_1 = n123 * (t5 * t11 - t10 * t7);
    t8 = w1.y;
    if (typeof t8 !== "number")
      return this.solve3$0$bailout(35, t2, 0, t3, 0, 0, 0, t1, w1, t5, 0, $.JSNumber_methods, 0, w2e12, d12_2, 0, 0, w3e13, d13_2, t10, t7, 0, t8, $.JSNumber_methods, t11, d23_2, w3e23, $.JSNumber_methods, d123_1, n123);
    t7 *= t8;
    t4 = w1.x;
    if (typeof t4 !== "number")
      return this.solve3$0$bailout(36, t2, 0, t3, 0, 0, 0, t1, 0, t5, 0, $.JSNumber_methods, 0, w2e12, d12_2, 0, 0, w3e13, d13_2, t10, t7, 0, t8, t4, t11, d23_2, w3e23, $.JSNumber_methods, d123_1, n123);
    d123_2 = n123 * (t7 - t11 * t4);
    d123_3 = n123 * (t4 * t10 - t8 * t5);
    if (d12_2 <= 0 && d13_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
      inv_d12 = 1 / (w2e12 + d12_2);
      t1.a = w2e12 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
      return;
    }
    if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
      inv_d13 = 1 / (w3e13 + d13_2);
      t1.a = w3e13 * inv_d13;
      t3.a = d13_2 * inv_d13;
      this.count = 2;
      t2.setFrom$1(t3);
      return;
    }
    if (w2e12 <= 0 && d23_2 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    if (w3e13 <= 0 && w3e23 <= 0) {
      t3.a = 1;
      this.count = 1;
      t1.setFrom$1(t3);
      return;
    }
    if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
      inv_d23 = 1 / (w3e23 + d23_2);
      t2.a = w3e23 * inv_d23;
      t3.a = d23_2 * inv_d23;
      this.count = 2;
      t1.setFrom$1(t3);
      return;
    }
    inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
    t1.a = d123_1 * inv_d123;
    t2.a = d123_2 * inv_d123;
    t3.a = d123_3 * inv_d123;
    this.count = 3;
  },
  solve3$0$bailout: function(state0, t2, w2, t3, w3, t4, t6, t1, w1, t5, t7, t8, w1e12, w2e12, d12_2, t9, w1e13, w3e13, d13_2, t11, t10, w2e23, t12, t13, t14, d23_2, w3e23, t15, d123_1, n123) {
    switch (state0) {
      case 0:
        t1 = this.v1;
        w1 = t1.w;
        t2 = this.v2;
        w2 = t2.w;
        t3 = this.v3;
        w3 = t3.w;
        t4 = this.e12;
        t5 = w2.x;
        t6 = w2.y;
        t4.x = t5;
        t4.y = t6;
        t6 = t4.x;
      case 1:
        state0 = 0;
        t5 = w1.x;
      case 2:
        state0 = 0;
        t4.x = $.$sub$n(t6, t5);
        t5 = t4.y;
      case 3:
        state0 = 0;
        t6 = w1.y;
      case 4:
        state0 = 0;
        t4.y = $.$sub$n(t5, t6);
        t6 = w1.x;
      case 5:
        state0 = 0;
        t5 = t4.x;
      case 6:
        state0 = 0;
        t6 = $.$mul$n(t6, t5);
        t7 = w1.y;
      case 7:
        state0 = 0;
        t8 = t4.y;
      case 8:
        state0 = 0;
        w1e12 = $.$add$ns(t6, $.$mul$n(t7, t8));
        t7 = w2.x;
      case 9:
        state0 = 0;
        t5 = $.$mul$n(t7, t5);
        t7 = w2.y;
      case 10:
        state0 = 0;
        w2e12 = $.$add$ns(t5, $.$mul$n(t7, t8));
        d12_2 = $.$negate$n(w1e12);
        t8 = this.e13;
        t7 = w3.x;
        t5 = w3.y;
        t8.x = t7;
        t8.y = t5;
        t5 = t8.x;
      case 11:
        state0 = 0;
        t7 = w1.x;
      case 12:
        state0 = 0;
        t8.x = $.$sub$n(t5, t7);
        t7 = t8.y;
      case 13:
        state0 = 0;
        t5 = w1.y;
      case 14:
        state0 = 0;
        t8.y = $.$sub$n(t7, t5);
        t5 = w1.x;
      case 15:
        state0 = 0;
        t7 = t8.x;
      case 16:
        state0 = 0;
        t5 = $.$mul$n(t5, t7);
        t6 = w1.y;
      case 17:
        state0 = 0;
        t9 = t8.y;
      case 18:
        state0 = 0;
        w1e13 = $.$add$ns(t5, $.$mul$n(t6, t9));
        t6 = w3.x;
      case 19:
        state0 = 0;
        t7 = $.$mul$n(t6, t7);
        t5 = w3.y;
      case 20:
        state0 = 0;
        w3e13 = $.$add$ns(t7, $.$mul$n(t5, t9));
        d13_2 = $.$negate$n(w1e13);
        t9 = this.e23;
        t9.x = t6;
        t9.y = t5;
        t5 = t9.x;
      case 21:
        state0 = 0;
        t6 = w2.x;
      case 22:
        state0 = 0;
        t9.x = $.$sub$n(t5, t6);
        t6 = t9.y;
      case 23:
        state0 = 0;
        t5 = w2.y;
      case 24:
        state0 = 0;
        t9.y = $.$sub$n(t6, t5);
        t5 = w2.x;
      case 25:
        state0 = 0;
        t6 = t9.x;
      case 26:
        state0 = 0;
        t7 = $.getInterceptor$n(t5);
        t10 = t7.$mul(t5, t6);
        t11 = w2.y;
      case 27:
        state0 = 0;
        t9 = t9.y;
      case 28:
        state0 = 0;
        t12 = $.getInterceptor$n(t11);
        w2e23 = $.$add$ns(t10, t12.$mul(t11, t9));
        t10 = w3.x;
      case 29:
        state0 = 0;
        t13 = $.getInterceptor$n(t10);
        t6 = t13.$mul(t10, t6);
        t14 = w3.y;
      case 30:
        state0 = 0;
        t15 = $.getInterceptor$n(t14);
        w3e23 = $.$add$ns(t6, t15.$mul(t14, t9));
        d23_2 = $.$negate$n(w2e23);
        t9 = t4.x;
      case 31:
        state0 = 0;
        t6 = t8.y;
      case 32:
        state0 = 0;
        t6 = $.$mul$n(t9, t6);
        t4 = t4.y;
      case 33:
        state0 = 0;
        t8 = t8.x;
      case 34:
        state0 = 0;
        n123 = $.$sub$n(t6, $.$mul$n(t4, t8));
        t8 = $.getInterceptor$n(n123);
        d123_1 = t8.$mul(n123, $.$sub$n(t7.$mul(t5, t14), t12.$mul(t11, t10)));
        t12 = w1.y;
      case 35:
        state0 = 0;
        t10 = t13.$mul(t10, t12);
        t13 = w1.x;
      case 36:
        var d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
        state0 = 0;
        d123_2 = t8.$mul(n123, $.$sub$n(t10, t15.$mul(t14, t13)));
        d123_3 = t8.$mul(n123, $.$sub$n($.$mul$n(t13, t11), $.$mul$n(t12, t5)));
        if (d12_2 <= 0 && d13_2 <= 0) {
          t1.a = 1;
          this.count = 1;
          return;
        }
        t4 = $.getInterceptor$n(w2e12);
        if (t4.$gt(w2e12, 0) && d12_2 > 0 && $.$le$n(d123_3, 0)) {
          t3 = t4.$add(w2e12, d12_2);
          if (typeof t3 !== "number")
            throw $.iae(t3);
          inv_d12 = 1 / t3;
          t1.a = t4.$mul(w2e12, inv_d12);
          t2.a = d12_2 * inv_d12;
          this.count = 2;
          return;
        }
        t5 = $.getInterceptor$n(w3e13);
        if (t5.$gt(w3e13, 0) && d13_2 > 0 && $.$le$n(d123_2, 0)) {
          t4 = t5.$add(w3e13, d13_2);
          if (typeof t4 !== "number")
            throw $.iae(t4);
          inv_d13 = 1 / t4;
          t1.a = t5.$mul(w3e13, inv_d13);
          t3.a = d13_2 * inv_d13;
          this.count = 2;
          t2.setFrom$1(t3);
          return;
        }
        if (t4.$le(w2e12, 0) && d23_2 <= 0) {
          t2.a = 1;
          this.count = 1;
          t1.setFrom$1(t2);
          return;
        }
        if (t5.$le(w3e13, 0) && $.$le$n(w3e23, 0)) {
          t3.a = 1;
          this.count = 1;
          t1.setFrom$1(t3);
          return;
        }
        t4 = $.getInterceptor$n(w3e23);
        if (t4.$gt(w3e23, 0) && d23_2 > 0 && $.$le$n(d123_1, 0)) {
          t5 = t4.$add(w3e23, d23_2);
          if (typeof t5 !== "number")
            throw $.iae(t5);
          inv_d23 = 1 / t5;
          t2.a = t4.$mul(w3e23, inv_d23);
          t3.a = d23_2 * inv_d23;
          this.count = 2;
          t1.setFrom$1(t3);
          return;
        }
        t4 = $.getInterceptor$ns(d123_1);
        t5 = $.$add$ns(t4.$add(d123_1, d123_2), d123_3);
        if (typeof t5 !== "number")
          throw $.iae(t5);
        inv_d123 = 1 / t5;
        t1.a = t4.$mul(d123_1, inv_d123);
        t2.a = $.$mul$n(d123_2, inv_d123);
        t3.a = $.$mul$n(d123_3, inv_d123);
        this.count = 3;
    }
  },
  Simplex$0: function() {
    var t1, t2;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = this.v1;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = this.v2;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = this.v3;
  }
},

SimplexCache: {"": "Object;metric@,count@,indexA<,indexB<",
  setFrom$1: function(sc) {
    var t1, t2;
    t1 = this.indexA;
    t2 = sc.get$indexA();
    if (!!t1.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(t1, 0, t1.length, t2, 0);
    t1 = this.indexB;
    t2 = sc.get$indexB();
    if (!!t1.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(t1, 0, t1.length, t2, 0);
    this.metric = sc.get$metric();
    this.count = sc.get$count();
  },
  SimplexCache$0: function() {
    var t1, t2, t3, t4, i;
    for (t1 = this.indexA, t2 = t1.length, t3 = this.indexB, t4 = t3.length, i = 0; i < 3; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = 2147483647;
      if (i >= t4)
        throw $.ioore(i);
      t3[i] = 2147483647;
    }
  }
},

SimplexVertex: {"": "Object;wA<,wB<,w<,a@,indexA@,indexB@",
  setFrom$1: function(sv) {
    var t1, t2, t3;
    t1 = this.wA;
    t2 = sv.get$wA();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.wB;
    t1 = sv.get$wB();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    t1 = this.w;
    t2 = sv.get$w();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    this.a = sv.get$a();
    this.indexA = sv.get$indexA();
    this.indexB = sv.get$indexB();
  },
  toString$0: function(_) {
    return "wA: " + $.S(this.wA) + ", wB: " + $.S(this.wB) + ", w: " + $.S(this.w);
  }
},

TimeOfImpact: {"": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA<,sweepB<,pool",
  timeOfImpact$2: function(output, input) {
    var t1, proxyA, proxyB, t2, t3, truncated, d, tMax, t4, target, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, iter, t15, t20, pushBackIter, done, s2, s1, a2, a1, rootIterCount, t, s;
    t1 = $.TimeOfImpact_toiCalls;
    if (typeof t1 !== "number")
      return this.timeOfImpact$2$bailout(1, output, input, t1);
    $.TimeOfImpact_toiCalls = t1 + 1;
    output.set$state(0);
    output.set$t(input.get$tMax());
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    t1 = this.sweepA;
    t1.setFrom$1(input.get$sweepA());
    t2 = this.sweepB;
    t2.setFrom$1(input.get$sweepB());
    t3 = t1.angleZero;
    if (typeof t3 !== "number")
      throw t3.$div();
    t3 = Math.floor(t3 / 6.283185307179586);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? $.JSNumber_methods.ceilToDouble$0(t3) : $.JSNumber_methods.floorToDouble$0(t3);
    d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
    t3 = t1.angleZero;
    if (typeof t3 !== "number")
      return this.timeOfImpact$2$bailout(2, output, input, t1, t2, d, t3, proxyA, proxyB);
    t1.angleZero = t3 - d;
    t3 = t1.angle;
    if (typeof t3 !== "number")
      return this.timeOfImpact$2$bailout(3, output, input, t1, t2, d, t3, proxyA, proxyB);
    t1.angle = t3 - d;
    t3 = t2.angleZero;
    if (typeof t3 !== "number")
      throw t3.$div();
    t3 = Math.floor(t3 / 6.283185307179586);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? $.JSNumber_methods.ceilToDouble$0(t3) : $.JSNumber_methods.floorToDouble$0(t3);
    d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
    t3 = t2.angleZero;
    if (typeof t3 !== "number")
      return this.timeOfImpact$2$bailout(4, output, input, t1, t2, d, t3, proxyA, proxyB);
    t2.angleZero = t3 - d;
    t3 = t2.angle;
    if (typeof t3 !== "number")
      return this.timeOfImpact$2$bailout(5, output, input, t1, t2, d, t3, proxyA, proxyB);
    t2.angle = t3 - d;
    tMax = input.get$tMax();
    if (typeof tMax !== "number")
      return this.timeOfImpact$2$bailout(6, output, input, t1, t2, 0, 0, proxyA, proxyB, tMax);
    t3 = proxyA.get$radius();
    if (typeof t3 !== "number")
      return this.timeOfImpact$2$bailout(7, output, input, t1, t2, 0, t3, proxyA, proxyB, tMax);
    t4 = proxyB.get$radius();
    if (typeof t4 !== "number")
      return this.timeOfImpact$2$bailout(8, output, input, t1, t2, 0, t3, proxyA, proxyB, tMax, t4);
    target = $.max(0.005, t3 + t4 - 0.015);
    t4 = this.cache;
    t4.count = 0;
    t3 = this.distanceInput;
    t3.proxyA = input.get$proxyA();
    t3.proxyB = input.get$proxyB();
    t3.useRadii = false;
    for (t5 = this.fcn, t6 = this.indexes, t7 = t6.length, t8 = target + 0.00125, t9 = target - 0.00125, t10 = this.distanceOutput, t11 = this.xfA, t12 = this.xfB, t13 = this.pool, t14 = 0, iter = 0; true;) {
      t1.getTransform$2(t11, t14);
      t2.getTransform$2(t12, t14);
      t3.transformA = t11;
      t3.transformB = t12;
      t13.distance.distance$3(t10, t4, t3);
      t15 = t10.distance;
      if (typeof t15 !== "number")
        throw t15.$le();
      if (t15 <= 0) {
        output.set$state(2);
        output.set$t(0);
        break;
      }
      if (t15 < t8) {
        output.set$state(3);
        output.set$t(t14);
        break;
      }
      t5.initialize$6(t5, t4, proxyA, t1, proxyB, t2, t14);
      for (t20 = tMax, pushBackIter = 0; done = false, true;) {
        s2 = t5.findMinSeparation$2(t6, t20);
        if (typeof s2 !== "number")
          return this.timeOfImpact$2$bailout(9, output, 0, t1, t2, 0, t3, proxyA, proxyB, tMax, t4, t5, t6, t7, t11, t12, t13, t9, t8, t10, t14, iter, t20, pushBackIter, target, s2);
        if (s2 > t8) {
          output.set$state(4);
          output.set$t(tMax);
          done = true;
          break;
        }
        if (s2 > t9) {
          t14 = t20;
          done = false;
          break;
        }
        if (0 >= t7)
          throw $.ioore(0);
        t15 = t6[0];
        if (1 >= t7)
          throw $.ioore(1);
        s1 = t5.evaluate$3(t15, t6[1], t14);
        if (typeof s1 !== "number")
          return this.timeOfImpact$2$bailout(10, output, 0, t1, t2, 0, t3, proxyA, proxyB, tMax, t4, t5, t6, t7, t11, t12, t13, t9, t8, t10, t14, iter, t20, pushBackIter, target, s2, s1);
        if (s1 < t9) {
          output.set$state(1);
          output.set$t(t14);
          done = true;
          break;
        }
        if (s1 <= t8) {
          output.set$state(3);
          output.set$t(t14);
          done = true;
          break;
        }
        for (a2 = t20, a1 = t14, rootIterCount = 0; true;) {
          t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
          s = t5.evaluate$3(t6[0], t6[1], t);
          if (typeof s !== "number")
            return this.timeOfImpact$2$bailout(11, output, 0, t1, t2, 0, t3, proxyA, proxyB, tMax, t4, t5, t6, t7, t11, t12, t13, t9, t8, t10, t14, iter, t20, pushBackIter, target, s2, s1, rootIterCount, a1, a2, t, s);
          if ($.JSNumber_methods.abs$0(s - target) < 0.00125) {
            t20 = t;
            break;
          }
          if (s > target) {
            a1 = t;
            s1 = s;
          } else {
            a2 = t;
            s2 = s;
          }
          ++rootIterCount;
          t15 = $.TimeOfImpact_toiRootIters;
          if (typeof t15 !== "number")
            return this.timeOfImpact$2$bailout(12, output, 0, t1, t2, 0, t3, proxyA, proxyB, tMax, t4, t5, t6, t7, t11, t12, t13, t9, t8, t10, t14, iter, t20, pushBackIter, target, s2, s1, rootIterCount, a1, a2, 0, 0, t15);
          $.TimeOfImpact_toiRootIters = t15 + 1;
          if (rootIterCount === 50)
            break;
        }
        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
        ++pushBackIter;
        if (pushBackIter === 8) {
          done = false;
          break;
        }
      }
      ++iter;
      t15 = $.TimeOfImpact_toiIters;
      if (typeof t15 !== "number")
        return this.timeOfImpact$2$bailout(13, output, 0, t1, t2, 0, t3, proxyA, proxyB, tMax, t4, t5, t6, t7, t11, t12, t13, t9, t8, t10, t14, iter, 0, 0, target, 0, 0, 0, 0, 0, 0, 0, t15, done);
      $.TimeOfImpact_toiIters = t15 + 1;
      if (done)
        break;
      if (iter === 1000) {
        output.set$state(1);
        output.set$t(t14);
        break;
      }
    }
    $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
  },
  timeOfImpact$2$bailout: function(state0, output, input, t1, t2, d, t3, proxyA, proxyB, tMax, t4, t5, t6, t7, t11, t12, t13, t9, t8, t10, t14, iter, t20, pushBackIter, target, s2, s1, rootIterCount, a1, a2, t, s, t15, done) {
    switch (state0) {
      case 0:
        t1 = $.TimeOfImpact_toiCalls;
      case 1:
        state0 = 0;
        $.TimeOfImpact_toiCalls = $.$add$ns(t1, 1);
        output.set$state(0);
        output.set$t(input.get$tMax());
        proxyA = input.get$proxyA();
        proxyB = input.get$proxyB();
        t1 = this.sweepA;
        t1.setFrom$1(input.get$sweepA());
        t2 = this.sweepB;
        t2.setFrom$1(input.get$sweepB());
        t3 = t1.angleZero;
        if (typeof t3 !== "number")
          throw t3.$div();
        t3 = Math.floor($.$div$n(t3, 6.283185307179586));
        if (isNaN(t3))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t3 == Infinity || t3 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t3 < 0 ? $.JSNumber_methods.ceilToDouble$0(t3) : $.JSNumber_methods.floorToDouble$0(t3);
        d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
        t3 = t1.angleZero;
      case 2:
        state0 = 0;
        t1.angleZero = $.$sub$n(t3, d);
        t3 = t1.angle;
      case 3:
        state0 = 0;
        t1.angle = $.$sub$n(t3, d);
        t3 = t2.angleZero;
        if (typeof t3 !== "number")
          throw t3.$div();
        t3 = Math.floor($.$div$n(t3, 6.283185307179586));
        if (isNaN(t3))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t3 == Infinity || t3 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t3 < 0 ? $.JSNumber_methods.ceilToDouble$0(t3) : $.JSNumber_methods.floorToDouble$0(t3);
        d = 6.283185307179586 * (truncated == -0.0 ? 0 : truncated);
        t3 = t2.angleZero;
      case 4:
        state0 = 0;
        t2.angleZero = $.$sub$n(t3, d);
        t3 = t2.angle;
      case 5:
        state0 = 0;
        t2.angle = $.$sub$n(t3, d);
        tMax = input.get$tMax();
      case 6:
        state0 = 0;
        t3 = proxyA.get$radius();
      case 7:
        state0 = 0;
        t4 = proxyB.get$radius();
      case 8:
        state0 = 0;
        target = $.max(0.005, $.$sub$n($.$add$ns(t3, t4), 0.015));
        t4 = this.cache;
        t4.count = 0;
        t3 = this.distanceInput;
        t3.proxyA = input.get$proxyA();
        t3.proxyB = input.get$proxyB();
        t3.useRadii = false;
        t5 = this.fcn;
        t6 = this.indexes;
        t7 = t6.length;
        t8 = target + 0.00125;
        t9 = target - 0.00125;
        t10 = this.distanceOutput;
        t11 = this.xfA;
        t12 = this.xfB;
        t13 = this.pool;
        t14 = 0;
        iter = 0;
      default:
        var truncated, t16, t17;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1.getTransform$2(t11, t14);
                t2.getTransform$2(t12, t14);
                t3.transformA = t11;
                t3.transformB = t12;
                t13.distance.distance$3(t10, t4, t3);
                t15 = t10.distance;
                t16 = $.getInterceptor$n(t15);
                if (typeof t15 !== "number")
                  throw t15.$le();
                if (t16.$le(t15, 0)) {
                  output.set$state(2);
                  output.set$t(0);
                  break L0;
                }
                if (t16.$lt(t15, t8)) {
                  output.set$state(3);
                  output.set$t(t14);
                  break L0;
                }
                t5.initialize$6(t5, t4, proxyA, t1, proxyB, t2, t14);
                t20 = tMax;
                pushBackIter = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        done = false;
                        if (!true)
                          break L1;
                        s2 = t5.findMinSeparation$2(t6, t20);
                      case 9:
                        state0 = 0;
                        t15 = $.getInterceptor$n(s2);
                        if (t15.$gt(s2, t8)) {
                          output.set$state(4);
                          output.set$t(tMax);
                          done = true;
                          break L1;
                        }
                        if (t15.$gt(s2, t9)) {
                          t14 = t20;
                          done = false;
                          break L1;
                        }
                        if (0 >= t7)
                          throw $.ioore(0);
                        t15 = t6[0];
                        if (1 >= t7)
                          throw $.ioore(1);
                        s1 = t5.evaluate$3(t15, t6[1], t14);
                      case 10:
                        state0 = 0;
                        t15 = $.getInterceptor$n(s1);
                        if (t15.$lt(s1, t9)) {
                          output.set$state(1);
                          output.set$t(t14);
                          done = true;
                          break L1;
                        }
                        if (t15.$le(s1, t8)) {
                          output.set$state(3);
                          output.set$t(t14);
                          done = true;
                          break L1;
                        }
                        a2 = t20;
                        a1 = t14;
                        rootIterCount = 0;
                      default:
                        L2:
                          while (true)
                            switch (state0) {
                              case 0:
                                if (!true)
                                  break L2;
                                t15 = $.getInterceptor$ns(a1);
                                if ((rootIterCount & 1) === 1) {
                                  if (typeof s1 !== "number")
                                    throw $.iae(s1);
                                  t16 = $.$sub$n(a2, a1);
                                  if (typeof t16 !== "number")
                                    throw $.iae(t16);
                                  t17 = $.$sub$n(s2, s1);
                                  if (typeof t17 !== "number")
                                    throw $.iae(t17);
                                  t = t15.$add(a1, (target - s1) * t16 / t17);
                                } else {
                                  t15 = t15.$add(a1, a2);
                                  if (typeof t15 !== "number")
                                    throw $.iae(t15);
                                  t = 0.5 * t15;
                                }
                                s = t5.evaluate$3(t6[0], t6[1], t);
                              case 11:
                                state0 = 0;
                                t15 = $.getInterceptor$n(s);
                                if ($.abs$0$n(t15.$sub(s, target)) < 0.00125) {
                                  t20 = t;
                                  break L2;
                                }
                                if (t15.$gt(s, target)) {
                                  a1 = t;
                                  s1 = s;
                                } else {
                                  a2 = t;
                                  s2 = s;
                                }
                                ++rootIterCount;
                                t15 = $.TimeOfImpact_toiRootIters;
                              case 12:
                                state0 = 0;
                                $.TimeOfImpact_toiRootIters = $.$add$ns(t15, 1);
                                if (rootIterCount === 50)
                                  break L2;
                            }
                        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
                        ++pushBackIter;
                        if (pushBackIter === 8) {
                          done = false;
                          break L1;
                        }
                    }
                ++iter;
                t15 = $.TimeOfImpact_toiIters;
              case 13:
                state0 = 0;
                $.TimeOfImpact_toiIters = $.$add$ns(t15, 1);
                if (done)
                  break L0;
                if (iter === 1000) {
                  output.set$state(1);
                  output.set$t(t14);
                  break L0;
                }
            }
        $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
    }
  },
  TimeOfImpact$_construct$1: function(argPool) {
    var t1, t2;
    t1 = this.indexes;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    $.TimeOfImpact_toiCalls = 0;
    $.TimeOfImpact_toiIters = 0;
    $.TimeOfImpact_toiMaxIters = 0;
    $.TimeOfImpact_toiRootIters = 0;
    $.TimeOfImpact_toiMaxRootIters = 0;
  }
},

SeparationFunction: {"": "Object;proxyA@,proxyB@,type*,localPoint<,axis,sweepA<,sweepB<,localPointA,localPointB,pointA<,pointB<,localPointA1,localPointA2,normal<,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
  initialize$6: function(_, cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
    var count, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, s;
    this.proxyA = argProxyA;
    this.proxyB = argProxyB;
    count = cache.count;
    if (typeof count !== "number")
      return this.initialize$6$bailout(1, cache, argSweepA, count, t1, argSweepB);
    this.sweepA = argSweepA;
    this.sweepB = argSweepB;
    t2 = this.xfa;
    this.sweepA.getTransform$2(t2, t1);
    t3 = this.xfb;
    this.sweepB.getTransform$2(t3, t1);
    if (count === 1) {
      this.type = 0;
      t1 = this.localPointA;
      t4 = this.proxyA.get$vertices();
      t5 = cache.indexA;
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      if (t5 >>> 0 !== t5 || t5 >= t4.length)
        throw $.ioore(t5);
      t5 = t4[t5];
      t4 = $.getInterceptor$x(t5);
      t6 = t4.get$x(t5);
      t5 = t4.get$y(t5);
      t1.x = t6;
      t1.y = t5;
      t5 = this.localPointB;
      t6 = this.proxyB.get$vertices();
      t4 = cache.indexB;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4 = t4[0];
      if (t4 >>> 0 !== t4 || t4 >= t6.length)
        throw $.ioore(t4);
      t4 = t6[t4];
      t6 = $.getInterceptor$x(t4);
      t7 = t6.get$x(t4);
      t4 = t6.get$y(t4);
      t5.x = t7;
      t5.y = t4;
      t4 = this.pointA;
      $.Transform_mulToOut(t2, t1, t4);
      t1 = this.pointB;
      $.Transform_mulToOut(t3, t5, t1);
      t5 = this.axis;
      t3 = t1.x;
      t1 = t1.y;
      t5.x = t3;
      t5.y = t1;
      t1 = t5.x;
      if (typeof t1 !== "number")
        return this.initialize$6$bailout(2, 0, 0, 0, t1, 0, t4, t5);
      t3 = t4.x;
      if (typeof t3 !== "number")
        return this.initialize$6$bailout(3, 0, 0, 0, t1, 0, t4, t5, t3);
      t5.x = t1 - t3;
      t3 = t5.y;
      if (typeof t3 !== "number")
        return this.initialize$6$bailout(4, 0, 0, 0, 0, 0, t4, t5, t3);
      t4 = t4.y;
      if (typeof t4 !== "number")
        return this.initialize$6$bailout(5, 0, 0, 0, 0, 0, t4, t5, t3);
      t5.y = t3 - t4;
      return t5.normalize$0();
    } else {
      t1 = cache.indexA;
      t4 = t1.length;
      if (0 >= t4)
        throw $.ioore(0);
      t5 = t1[0];
      if (1 >= t4)
        throw $.ioore(1);
      t4 = cache.indexB;
      t6 = this.pointA;
      t7 = this.localPoint;
      t8 = this.normal;
      t9 = this.axis;
      t10 = this.pointB;
      t11 = this.temp;
      t12 = t4.length;
      if ($.$eq(t5, t1[1])) {
        this.type = 2;
        t5 = this.localPointB1;
        t13 = this.proxyB.get$vertices();
        if (0 >= t12)
          throw $.ioore(0);
        t14 = t4[0];
        if (t14 >>> 0 !== t14 || t14 >= t13.length)
          throw $.ioore(t14);
        t14 = t13[t14];
        t13 = $.getInterceptor$x(t14);
        t15 = t13.get$x(t14);
        t14 = t13.get$y(t14);
        t5.x = t15;
        t5.y = t14;
        t14 = this.localPointB2;
        t15 = this.proxyB.get$vertices();
        if (1 >= t12)
          throw $.ioore(1);
        t4 = t4[1];
        if (t4 >>> 0 !== t4 || t4 >= t15.length)
          throw $.ioore(t4);
        t4 = t15[t4];
        t15 = $.getInterceptor$x(t4);
        t12 = t15.get$x(t4);
        t4 = t15.get$y(t4);
        t14.x = t12;
        t14.y = t4;
        t4 = t14.x;
        t12 = t14.y;
        t11.x = t4;
        t11.y = t12;
        t12 = t11.x;
        if (typeof t12 !== "number")
          return this.initialize$6$bailout(6, 0, 0, 0, t1, 0, 0, t5, t3, t7, t12, t6, t8, t2, t14, t9, t11, t10);
        t4 = t5.x;
        if (typeof t4 !== "number")
          return this.initialize$6$bailout(7, 0, 0, 0, t1, 0, t4, t5, t3, t7, t12, t6, t8, t2, t14, t9, t11, t10);
        t11.x = t12 - t4;
        t4 = t11.y;
        if (typeof t4 !== "number")
          return this.initialize$6$bailout(8, 0, 0, 0, t1, 0, t4, t5, t3, t7, 0, t6, t8, t2, t14, t9, t11, t10);
        t12 = t5.y;
        if (typeof t12 !== "number")
          return this.initialize$6$bailout(9, 0, 0, 0, t1, 0, t4, t5, t3, t7, t12, t6, t8, t2, t14, t9, t11, t10);
        t11.y = t4 - t12;
        t12 = t11.x;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t4 = t11.y;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t9.x = 1 * t4;
        t9.y = -1 * t12;
        t9.normalize$0();
        $.Matrix22_mulMatrixAndVectorToOut(t3.rotation, t9, t8);
        t12 = t5.x;
        t5 = t5.y;
        t7.x = t12;
        t7.y = t5;
        t5 = t7.x;
        if (typeof t5 !== "number")
          return this.initialize$6$bailout(10, 0, 0, 0, t1, 0, 0, t5, t3, t7, 0, t6, t8, t2, t14, t9, t11, t10);
        t12 = t14.x;
        if (typeof t12 !== "number")
          return this.initialize$6$bailout(11, 0, 0, 0, t1, 0, 0, t5, t3, t7, t12, t6, t8, t2, t14, t9, t11, t10);
        t7.x = t5 + t12;
        t12 = t7.y;
        if (typeof t12 !== "number")
          return this.initialize$6$bailout(12, 0, 0, 0, t1, 0, 0, 0, t3, t7, t12, t6, t8, t2, t14, t9, t11, t10);
        t14 = t14.y;
        if (typeof t14 !== "number")
          return this.initialize$6$bailout(13, 0, 0, 0, t1, 0, 0, 0, t3, t7, t12, t6, t8, t2, t14, t9, t11, t10);
        t7.y = t12 + t14;
        t14 = t7.x;
        if (typeof t14 !== "number")
          return this.initialize$6$bailout(14, 0, 0, 0, t1, 0, 0, 0, t3, t7, 0, t6, t8, t2, t14, t9, t11, t10);
        t7.x = t14 * 0.5;
        t14 = t7.y;
        if (typeof t14 !== "number")
          return this.initialize$6$bailout(15, 0, 0, 0, t1, 0, 0, 0, t3, t7, 0, t6, t8, t2, t14, t9, t11, t10);
        t7.y = t14 * 0.5;
        $.Transform_mulToOut(t3, t7, t10);
        t7 = this.localPointA;
        t3 = this.proxyA.get$vertices();
        t1 = t1[0];
        if (t1 >>> 0 !== t1 || t1 >= t3.length)
          throw $.ioore(t1);
        t1 = t3[t1];
        t3 = $.getInterceptor$x(t1);
        t14 = t3.get$x(t1);
        t1 = t3.get$y(t1);
        t7.x = t14;
        t7.y = t1;
        $.Transform_mulToOut(t2, t7, t6);
        t7 = t6.x;
        t6 = t6.y;
        t11.x = t7;
        t11.y = t6;
        t6 = t11.x;
        if (typeof t6 !== "number")
          return this.initialize$6$bailout(16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, t8, 0, 0, t9, t11, t10);
        t7 = t10.x;
        if (typeof t7 !== "number")
          return this.initialize$6$bailout(17, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, t6, t8, 0, 0, t9, t11, t10);
        t11.x = t6 - t7;
        t7 = t11.y;
        if (typeof t7 !== "number")
          return this.initialize$6$bailout(18, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, 0, t8, 0, 0, t9, t11, t10);
        t10 = t10.y;
        if (typeof t10 !== "number")
          return this.initialize$6$bailout(19, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, 0, t8, 0, 0, t9, t11, t10);
        t11.y = t7 - t10;
        t10 = t11.x;
        if (typeof t10 !== "number")
          return this.initialize$6$bailout(20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, 0, 0, t9, t11, t10);
        t7 = t8.x;
        if (typeof t7 !== "number")
          return this.initialize$6$bailout(21, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, 0, t8, 0, 0, t9, t11, t10);
        t7 = t10 * t7;
        t11 = t11.y;
        if (typeof t11 !== "number")
          return this.initialize$6$bailout(22, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, 0, t8, 0, 0, t9, t11);
        t8 = t8.y;
        if (typeof t8 !== "number")
          return this.initialize$6$bailout(23, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, 0, t8, 0, 0, t9, t11);
        s = t7 + t11 * t8;
        if (s < 0) {
          t1 = t9.x;
          if (typeof t1 !== "number")
            throw t1.$negate();
          t9.x = -t1;
          t1 = t9.y;
          if (typeof t1 !== "number")
            throw t1.$negate();
          t9.y = -t1;
          s = -s;
        }
        return s;
      } else {
        this.type = 1;
        t5 = this.localPointA1;
        t13 = this.proxyA.get$vertices();
        t14 = t1[0];
        if (t14 >>> 0 !== t14 || t14 >= t13.length)
          throw $.ioore(t14);
        t14 = t13[t14];
        t13 = $.getInterceptor$x(t14);
        t15 = t13.get$x(t14);
        t14 = t13.get$y(t14);
        t5.x = t15;
        t5.y = t14;
        t14 = this.localPointA2;
        t15 = this.proxyA.get$vertices();
        t1 = t1[1];
        if (t1 >>> 0 !== t1 || t1 >= t15.length)
          throw $.ioore(t1);
        t1 = t15[t1];
        t15 = $.getInterceptor$x(t1);
        t13 = t15.get$x(t1);
        t1 = t15.get$y(t1);
        t14.x = t13;
        t14.y = t1;
        t1 = t14.x;
        t13 = t14.y;
        t11.x = t1;
        t11.y = t13;
        t13 = t11.x;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(24, 0, 0, 0, 0, 0, t4, t5, t3, t7, t14, t6, t8, t2, 0, t9, t11, t10, t13);
        t1 = t5.x;
        if (typeof t1 !== "number")
          return this.initialize$6$bailout(25, 0, 0, 0, t1, 0, t4, t5, t3, t7, t14, t6, t8, t2, 0, t9, t11, t10, t13);
        t11.x = t13 - t1;
        t1 = t11.y;
        if (typeof t1 !== "number")
          return this.initialize$6$bailout(26, 0, 0, 0, t1, 0, t4, t5, t3, t7, t14, t6, t8, t2, 0, t9, t11, t10);
        t13 = t5.y;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(27, 0, 0, 0, t1, 0, t4, t5, t3, t7, t14, t6, t8, t2, 0, t9, t11, t10, t13);
        t11.y = t1 - t13;
        t13 = t11.x;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t1 = t11.y;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t9.x = 1 * t1;
        t9.y = -1 * t13;
        t9.normalize$0();
        $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, t9, t8);
        t13 = t5.x;
        t5 = t5.y;
        t7.x = t13;
        t7.y = t5;
        t5 = t7.x;
        if (typeof t5 !== "number")
          return this.initialize$6$bailout(28, 0, 0, 0, 0, 0, t4, t5, t3, t7, t14, t6, t8, t2, 0, t9, t11, t10);
        t13 = t14.x;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(29, 0, 0, 0, 0, 0, t4, t5, t3, t7, t14, t6, t8, t2, 0, t9, t11, t10, t13);
        t7.x = t5 + t13;
        t13 = t7.y;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(30, 0, 0, 0, 0, 0, t4, 0, t3, t7, t14, t6, t8, t2, 0, t9, t11, t10, t13);
        t14 = t14.y;
        if (typeof t14 !== "number")
          return this.initialize$6$bailout(31, 0, 0, 0, 0, 0, t4, 0, t3, t7, t14, t6, t8, t2, 0, t9, t11, t10, t13);
        t7.y = t13 + t14;
        t14 = t7.x;
        if (typeof t14 !== "number")
          return this.initialize$6$bailout(32, 0, 0, 0, 0, 0, t4, 0, t3, t7, t14, t6, t8, t2, 0, t9, t11, t10);
        t7.x = t14 * 0.5;
        t14 = t7.y;
        if (typeof t14 !== "number")
          return this.initialize$6$bailout(33, 0, 0, 0, 0, 0, t4, 0, t3, t7, t14, t6, t8, t2, 0, t9, t11, t10);
        t7.y = t14 * 0.5;
        $.Transform_mulToOut(t2, t7, t6);
        t7 = this.localPointB;
        t2 = this.proxyB.get$vertices();
        if (0 >= t12)
          throw $.ioore(0);
        t4 = t4[0];
        if (t4 >>> 0 !== t4 || t4 >= t2.length)
          throw $.ioore(t4);
        t4 = t2[t4];
        t2 = $.getInterceptor$x(t4);
        t12 = t2.get$x(t4);
        t4 = t2.get$y(t4);
        t7.x = t12;
        t7.y = t4;
        $.Transform_mulToOut(t3, t7, t10);
        t7 = t10.x;
        t10 = t10.y;
        t11.x = t7;
        t11.y = t10;
        t10 = t11.x;
        if (typeof t10 !== "number")
          return this.initialize$6$bailout(34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, t8, 0, 0, t9, t11, t10);
        t7 = t6.x;
        if (typeof t7 !== "number")
          return this.initialize$6$bailout(35, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, t6, t8, 0, 0, t9, t11, t10);
        t11.x = t10 - t7;
        t7 = t11.y;
        if (typeof t7 !== "number")
          return this.initialize$6$bailout(36, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, t6, t8, 0, 0, t9, t11);
        t6 = t6.y;
        if (typeof t6 !== "number")
          return this.initialize$6$bailout(37, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, t6, t8, 0, 0, t9, t11);
        t11.y = t7 - t6;
        t6 = t11.x;
        if (typeof t6 !== "number")
          return this.initialize$6$bailout(38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, t8, 0, 0, t9, t11);
        t7 = t8.x;
        if (typeof t7 !== "number")
          return this.initialize$6$bailout(39, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, t6, t8, 0, 0, t9, t11);
        t7 = t6 * t7;
        t11 = t11.y;
        if (typeof t11 !== "number")
          return this.initialize$6$bailout(40, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, 0, t8, 0, 0, t9, t11);
        t8 = t8.y;
        if (typeof t8 !== "number")
          return this.initialize$6$bailout(41, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, 0, t8, 0, 0, t9, t11);
        s = t7 + t11 * t8;
        if (s < 0) {
          t1 = t9.x;
          if (typeof t1 !== "number")
            throw t1.$negate();
          t9.x = -t1;
          t1 = t9.y;
          if (typeof t1 !== "number")
            throw t1.$negate();
          t9.y = -t1;
          s = -s;
        }
        return s;
      }
    }
  },
  initialize$6$bailout: function(state0, cache, argSweepA, count, t1, argSweepB, t4, t5, t3, t7, t13, t6, t8, t2, t14, t9, t11, t10, t12) {
    switch (state0) {
      case 0:
        this.proxyA = argProxyA;
        this.proxyB = argProxyB;
        count = cache.count;
      case 1:
        state0 = 0;
        this.sweepA = argSweepA;
        this.sweepB = argSweepB;
        t2 = this.xfa;
        this.sweepA.getTransform$2(t2, t1);
        t3 = this.xfb;
        this.sweepB.getTransform$2(t3, t1);
      default:
        var t15, s;
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && $.$eq(count, 1))
          switch (state0) {
            case 0:
              this.type = 0;
              t1 = this.localPointA;
              t4 = this.proxyA.get$vertices();
              t5 = cache.indexA;
              if (0 >= t5.length)
                throw $.ioore(0);
              t5 = t5[0];
              if (t5 >>> 0 !== t5 || t5 >= t4.length)
                throw $.ioore(t5);
              t5 = t4[t5];
              t4 = $.getInterceptor$x(t5);
              t6 = t4.get$x(t5);
              t5 = t4.get$y(t5);
              t1.x = t6;
              t1.y = t5;
              t5 = this.localPointB;
              t6 = this.proxyB.get$vertices();
              t4 = cache.indexB;
              if (0 >= t4.length)
                throw $.ioore(0);
              t4 = t4[0];
              if (t4 >>> 0 !== t4 || t4 >= t6.length)
                throw $.ioore(t4);
              t4 = t6[t4];
              t6 = $.getInterceptor$x(t4);
              t7 = t6.get$x(t4);
              t4 = t6.get$y(t4);
              t5.x = t7;
              t5.y = t4;
              t4 = this.pointA;
              $.Transform_mulToOut(t2, t1, t4);
              t1 = this.pointB;
              $.Transform_mulToOut(t3, t5, t1);
              t5 = this.axis;
              t3 = t1.x;
              t1 = t1.y;
              t5.x = t3;
              t5.y = t1;
              t1 = t5.x;
            case 2:
              state0 = 0;
              t3 = t4.x;
            case 3:
              state0 = 0;
              t5.x = $.$sub$n(t1, t3);
              t3 = t5.y;
            case 4:
              state0 = 0;
              t4 = t4.y;
            case 5:
              state0 = 0;
              t5.y = $.$sub$n(t3, t4);
              return t5.normalize$0();
          }
        else
          switch (state0) {
            case 0:
              t1 = cache.indexA;
              t4 = t1.length;
              if (0 >= t4)
                throw $.ioore(0);
              t5 = t1[0];
              if (1 >= t4)
                throw $.ioore(1);
              t4 = cache.indexB;
              t6 = this.pointA;
              t7 = this.localPoint;
              t8 = this.normal;
              t9 = this.axis;
              t10 = this.pointB;
              t11 = this.temp;
            default:
              if (state0 === 23 || state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && $.$eq(t5, t1[1]))
                switch (state0) {
                  case 0:
                    this.type = 2;
                    t5 = this.localPointB1;
                    t12 = this.proxyB.get$vertices();
                    t13 = t4.length;
                    if (0 >= t13)
                      throw $.ioore(0);
                    t14 = t4[0];
                    if (t14 >>> 0 !== t14 || t14 >= t12.length)
                      throw $.ioore(t14);
                    t14 = t12[t14];
                    t12 = $.getInterceptor$x(t14);
                    t15 = t12.get$x(t14);
                    t14 = t12.get$y(t14);
                    t5.x = t15;
                    t5.y = t14;
                    t14 = this.localPointB2;
                    t15 = this.proxyB.get$vertices();
                    if (1 >= t13)
                      throw $.ioore(1);
                    t4 = t4[1];
                    if (t4 >>> 0 !== t4 || t4 >= t15.length)
                      throw $.ioore(t4);
                    t4 = t15[t4];
                    t15 = $.getInterceptor$x(t4);
                    t13 = t15.get$x(t4);
                    t4 = t15.get$y(t4);
                    t14.x = t13;
                    t14.y = t4;
                    t4 = t14.x;
                    t13 = t14.y;
                    t11.x = t4;
                    t11.y = t13;
                    t13 = t11.x;
                  case 6:
                    state0 = 0;
                    t4 = t5.x;
                  case 7:
                    state0 = 0;
                    t11.x = $.$sub$n(t13, t4);
                    t4 = t11.y;
                  case 8:
                    state0 = 0;
                    t13 = t5.y;
                  case 9:
                    state0 = 0;
                    t11.y = $.$sub$n(t4, t13);
                    t13 = t11.x;
                    if (typeof t13 !== "number")
                      throw $.iae(t13);
                    t4 = t11.y;
                    if (typeof t4 !== "number")
                      throw $.iae(t4);
                    t9.x = 1 * t4;
                    t9.y = -1 * t13;
                    t9.normalize$0();
                    $.Matrix22_mulMatrixAndVectorToOut(t3.rotation, t9, t8);
                    t13 = t5.x;
                    t5 = t5.y;
                    t7.x = t13;
                    t7.y = t5;
                    t5 = t7.x;
                  case 10:
                    state0 = 0;
                    t13 = t14.x;
                  case 11:
                    state0 = 0;
                    t7.x = $.$add$ns(t5, t13);
                    t13 = t7.y;
                  case 12:
                    state0 = 0;
                    t14 = t14.y;
                  case 13:
                    state0 = 0;
                    t7.y = $.$add$ns(t13, t14);
                    t14 = t7.x;
                  case 14:
                    state0 = 0;
                    t7.x = $.$mul$n(t14, 0.5);
                    t14 = t7.y;
                  case 15:
                    state0 = 0;
                    t7.y = $.$mul$n(t14, 0.5);
                    $.Transform_mulToOut(t3, t7, t10);
                    t7 = this.localPointA;
                    t3 = this.proxyA.get$vertices();
                    t1 = t1[0];
                    if (t1 >>> 0 !== t1 || t1 >= t3.length)
                      throw $.ioore(t1);
                    t1 = t3[t1];
                    t3 = $.getInterceptor$x(t1);
                    t14 = t3.get$x(t1);
                    t1 = t3.get$y(t1);
                    t7.x = t14;
                    t7.y = t1;
                    $.Transform_mulToOut(t2, t7, t6);
                    t7 = t6.x;
                    t6 = t6.y;
                    t11.x = t7;
                    t11.y = t6;
                    t6 = t11.x;
                  case 16:
                    state0 = 0;
                    t7 = t10.x;
                  case 17:
                    state0 = 0;
                    t11.x = $.$sub$n(t6, t7);
                    t7 = t11.y;
                  case 18:
                    state0 = 0;
                    t10 = t10.y;
                  case 19:
                    state0 = 0;
                    t11.y = $.$sub$n(t7, t10);
                    t10 = t11.x;
                  case 20:
                    state0 = 0;
                    t7 = t8.x;
                  case 21:
                    state0 = 0;
                    t7 = $.$mul$n(t10, t7);
                    t11 = t11.y;
                  case 22:
                    state0 = 0;
                    t8 = t8.y;
                  case 23:
                    state0 = 0;
                    s = $.$add$ns(t7, $.$mul$n(t11, t8));
                    t1 = $.getInterceptor$n(s);
                    if (t1.$lt(s, 0)) {
                      t2 = t9.x;
                      if (typeof t2 !== "number")
                        throw t2.$negate();
                      t9.x = $.$negate$n(t2);
                      t2 = t9.y;
                      if (typeof t2 !== "number")
                        throw t2.$negate();
                      t9.y = $.$negate$n(t2);
                      s = t1.$negate(s);
                    }
                    return s;
                }
              else
                switch (state0) {
                  case 0:
                    this.type = 1;
                    t5 = this.localPointA1;
                    t12 = this.proxyA.get$vertices();
                    t13 = t1[0];
                    if (t13 >>> 0 !== t13 || t13 >= t12.length)
                      throw $.ioore(t13);
                    t13 = t12[t13];
                    t12 = $.getInterceptor$x(t13);
                    t14 = t12.get$x(t13);
                    t13 = t12.get$y(t13);
                    t5.x = t14;
                    t5.y = t13;
                    t13 = this.localPointA2;
                    t14 = this.proxyA.get$vertices();
                    t1 = t1[1];
                    if (t1 >>> 0 !== t1 || t1 >= t14.length)
                      throw $.ioore(t1);
                    t1 = t14[t1];
                    t14 = $.getInterceptor$x(t1);
                    t12 = t14.get$x(t1);
                    t1 = t14.get$y(t1);
                    t13.x = t12;
                    t13.y = t1;
                    t1 = t13.x;
                    t12 = t13.y;
                    t11.x = t1;
                    t11.y = t12;
                    t12 = t11.x;
                  case 24:
                    state0 = 0;
                    t1 = t5.x;
                  case 25:
                    state0 = 0;
                    t11.x = $.$sub$n(t12, t1);
                    t1 = t11.y;
                  case 26:
                    state0 = 0;
                    t12 = t5.y;
                  case 27:
                    state0 = 0;
                    t11.y = $.$sub$n(t1, t12);
                    t12 = t11.x;
                    if (typeof t12 !== "number")
                      throw $.iae(t12);
                    t1 = t11.y;
                    if (typeof t1 !== "number")
                      throw $.iae(t1);
                    t9.x = 1 * t1;
                    t9.y = -1 * t12;
                    t9.normalize$0();
                    $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, t9, t8);
                    t12 = t5.x;
                    t5 = t5.y;
                    t7.x = t12;
                    t7.y = t5;
                    t5 = t7.x;
                  case 28:
                    state0 = 0;
                    t12 = t13.x;
                  case 29:
                    state0 = 0;
                    t7.x = $.$add$ns(t5, t12);
                    t12 = t7.y;
                  case 30:
                    state0 = 0;
                    t13 = t13.y;
                  case 31:
                    state0 = 0;
                    t7.y = $.$add$ns(t12, t13);
                    t13 = t7.x;
                  case 32:
                    state0 = 0;
                    t7.x = $.$mul$n(t13, 0.5);
                    t13 = t7.y;
                  case 33:
                    state0 = 0;
                    t7.y = $.$mul$n(t13, 0.5);
                    $.Transform_mulToOut(t2, t7, t6);
                    t7 = this.localPointB;
                    t2 = this.proxyB.get$vertices();
                    if (0 >= t4.length)
                      throw $.ioore(0);
                    t4 = t4[0];
                    if (t4 >>> 0 !== t4 || t4 >= t2.length)
                      throw $.ioore(t4);
                    t4 = t2[t4];
                    t2 = $.getInterceptor$x(t4);
                    t13 = t2.get$x(t4);
                    t4 = t2.get$y(t4);
                    t7.x = t13;
                    t7.y = t4;
                    $.Transform_mulToOut(t3, t7, t10);
                    t7 = t10.x;
                    t10 = t10.y;
                    t11.x = t7;
                    t11.y = t10;
                    t10 = t11.x;
                  case 34:
                    state0 = 0;
                    t7 = t6.x;
                  case 35:
                    state0 = 0;
                    t11.x = $.$sub$n(t10, t7);
                    t7 = t11.y;
                  case 36:
                    state0 = 0;
                    t6 = t6.y;
                  case 37:
                    state0 = 0;
                    t11.y = $.$sub$n(t7, t6);
                    t6 = t11.x;
                  case 38:
                    state0 = 0;
                    t7 = t8.x;
                  case 39:
                    state0 = 0;
                    t7 = $.$mul$n(t6, t7);
                    t11 = t11.y;
                  case 40:
                    state0 = 0;
                    t8 = t8.y;
                  case 41:
                    state0 = 0;
                    s = $.$add$ns(t7, $.$mul$n(t11, t8));
                    t1 = $.getInterceptor$n(s);
                    if (t1.$lt(s, 0)) {
                      t2 = t9.x;
                      if (typeof t2 !== "number")
                        throw t2.$negate();
                      t9.x = $.$negate$n(t2);
                      t2 = t9.y;
                      if (typeof t2 !== "number")
                        throw t2.$negate();
                      t9.y = $.$negate$n(t2);
                      s = t1.$negate(s);
                    }
                    return s;
                }
          }
    }
  },
  findMinSeparation$2: function(indexes, t) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    t3 = indexes.length;
    switch (this.type) {
      case 0:
        t4 = this.axis;
        t5 = this.axisA;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t4, t5);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        t6 = this.axisB;
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t4, t6);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        t7 = this.proxyA;
        t5 = t7.getSupport$1(t5);
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = t5;
        t6 = this.proxyB.getSupport$1(t6);
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = t6;
        t6 = this.localPointA;
        t7 = t7.get$vertices();
        t3 = indexes[0];
        if (t3 >>> 0 !== t3 || t3 >= t7.length)
          throw $.ioore(t3);
        t3 = t7[t3];
        t7 = $.getInterceptor$x(t3);
        t5 = t7.get$x(t3);
        t3 = t7.get$y(t3);
        t6.x = t5;
        t6.y = t3;
        t3 = this.localPointB;
        t5 = this.proxyB.get$vertices();
        t7 = indexes[1];
        if (t7 >>> 0 !== t7 || t7 >= t5.length)
          throw $.ioore(t7);
        t7 = t5[t7];
        t5 = $.getInterceptor$x(t7);
        t8 = t5.get$x(t7);
        t7 = t5.get$y(t7);
        t3.x = t8;
        t3.y = t7;
        t7 = this.pointA;
        $.Transform_mulToOut(t1, t6, t7);
        t6 = this.pointB;
        $.Transform_mulToOut(t2, t3, t6);
        t6.x = $.$sub$n(t6.x, t7.x);
        t6.y = $.$sub$n(t6.y, t7.y);
        return $.$add$ns($.$mul$n(t6.x, t4.x), $.$mul$n(t6.y, t4.y));
      case 1:
        t4 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1.rotation, this.axis, t4);
        t5 = this.pointA;
        $.Transform_mulToOut(t1, this.localPoint, t5);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        t1 = this.axisB;
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t4, t1);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = -1;
        t6 = this.proxyB;
        t1 = t6.getSupport$1(t1);
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = t1;
        t1 = this.localPointB;
        t6 = t6.get$vertices();
        t3 = indexes[1];
        if (t3 >>> 0 !== t3 || t3 >= t6.length)
          throw $.ioore(t3);
        t3 = t6[t3];
        t6 = $.getInterceptor$x(t3);
        t7 = t6.get$x(t3);
        t3 = t6.get$y(t3);
        t1.x = t7;
        t1.y = t3;
        t3 = this.pointB;
        $.Transform_mulToOut(t2, t1, t3);
        t3.x = $.$sub$n(t3.x, t5.x);
        t3.y = $.$sub$n(t3.y, t5.y);
        return $.$add$ns($.$mul$n(t3.x, t4.x), $.$mul$n(t3.y, t4.y));
      case 2:
        t4 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, this.axis, t4);
        t5 = this.pointB;
        $.Transform_mulToOut(t2, this.localPoint, t5);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        t2 = this.axisA;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t4, t2);
        t4.x = $.$negate$n(t4.x);
        t4.y = $.$negate$n(t4.y);
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = -1;
        t3 = this.proxyA;
        indexes[0] = t3.getSupport$1(t2);
        t2 = this.localPointA;
        t3 = t3.get$vertices();
        t6 = indexes[0];
        if (t6 >>> 0 !== t6 || t6 >= t3.length)
          throw $.ioore(t6);
        t6 = t3[t6];
        t3 = $.getInterceptor$x(t6);
        t7 = t3.get$x(t6);
        t6 = t3.get$y(t6);
        t2.x = t7;
        t2.y = t6;
        t6 = this.pointA;
        $.Transform_mulToOut(t1, t2, t6);
        t6.x = $.$sub$n(t6.x, t5.x);
        t6.y = $.$sub$n(t6.y, t5.y);
        return $.$add$ns($.$mul$n(t6.x, t4.x), $.$mul$n(t6.y, t4.y));
      default:
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = -1;
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = -1;
        return 0;
    }
  },
  evaluate$3: function(indexA, indexB, t) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    switch (this.type) {
      case 0:
        t3 = this.axis;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t3, this.axisA);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t3, this.axisB);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        t4 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA >>> 0 !== indexA || indexA >= t5.length)
          throw $.ioore(indexA);
        t5 = t5[indexA];
        t6 = $.getInterceptor$x(t5);
        t7 = t6.get$x(t5);
        t5 = t6.get$y(t5);
        t4.x = t7;
        t4.y = t5;
        t5 = this.localPointB;
        t7 = this.proxyB.get$vertices();
        if (indexB >>> 0 !== indexB || indexB >= t7.length)
          throw $.ioore(indexB);
        t7 = t7[indexB];
        t6 = $.getInterceptor$x(t7);
        t8 = t6.get$x(t7);
        t7 = t6.get$y(t7);
        t5.x = t8;
        t5.y = t7;
        t7 = this.pointA;
        $.Transform_mulToOut(t1, t4, t7);
        t4 = this.pointB;
        $.Transform_mulToOut(t2, t5, t4);
        t4.x = $.$sub$n(t4.x, t7.x);
        t4.y = $.$sub$n(t4.y, t7.y);
        return $.$add$ns($.$mul$n(t4.x, t3.x), $.$mul$n(t4.y, t3.y));
      case 1:
        t3 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1.rotation, this.axis, t3);
        t4 = this.pointA;
        $.Transform_mulToOut(t1, this.localPoint, t4);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t3, this.axisB);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        t1 = this.localPointB;
        t5 = this.proxyB.get$vertices();
        if (indexB >>> 0 !== indexB || indexB >= t5.length)
          throw $.ioore(indexB);
        t5 = t5[indexB];
        t6 = $.getInterceptor$x(t5);
        t7 = t6.get$x(t5);
        t5 = t6.get$y(t5);
        t1.x = t7;
        t1.y = t5;
        t5 = this.pointB;
        $.Transform_mulToOut(t2, t1, t5);
        t5.x = $.$sub$n(t5.x, t4.x);
        t5.y = $.$sub$n(t5.y, t4.y);
        return $.$add$ns($.$mul$n(t5.x, t3.x), $.$mul$n(t5.y, t3.y));
      case 2:
        t3 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t2.rotation, this.axis, t3);
        t4 = this.pointB;
        $.Transform_mulToOut(t2, this.localPoint, t4);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        $.Matrix22_mulTransMatrixAndVectorToOut(t1.rotation, t3, this.axisA);
        t3.x = $.$negate$n(t3.x);
        t3.y = $.$negate$n(t3.y);
        t2 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA >>> 0 !== indexA || indexA >= t5.length)
          throw $.ioore(indexA);
        t5 = t5[indexA];
        t6 = $.getInterceptor$x(t5);
        t7 = t6.get$x(t5);
        t5 = t6.get$y(t5);
        t2.x = t7;
        t2.y = t5;
        t5 = this.pointA;
        $.Transform_mulToOut(t1, t2, t5);
        t5.x = $.$sub$n(t5.x, t4.x);
        t5.y = $.$sub$n(t5.y, t4.y);
        return $.$add$ns($.$mul$n(t5.x, t3.x), $.$mul$n(t5.y, t3.y));
      default:
        return 0;
    }
  }
},

TimeOfImpactInput: {"": "Object;proxyA<,proxyB<,sweepA<,sweepB<,tMax<"},

TimeOfImpactOutput: {"": "Object;state?,t?"},

WorldManifold: {"": "Object;normal<,points>,pool3,pool4",
  initialize$5: function(_, manifold, xfA, radiusA, xfB, radiusB) {
    var t1, pointA, pointB, t2, t3, t4, t5, t6, t7, t8, cAx, cAy, planePoint, clipPoint, i, t9, t10, t11, t12, t13, scalar, R, v, cBx, cBy;
    t1 = $.getInterceptor$x(manifold);
    switch (t1.get$type(manifold)) {
      case 0:
        pointA = this.pool3;
        pointB = this.pool4;
        t2 = this.normal;
        t2.x = 1;
        t2.y = 0;
        t3 = xfA.position;
        t4 = t3.x;
        t5 = xfA.rotation;
        t6 = t5.col1.x;
        t7 = manifold.get$localPoint();
        pointA.x = $.$add$ns($.$add$ns(t4, $.$mul$n(t6, t7.x)), $.$mul$n(t5.col2.x, t7.y));
        t3 = t3.y;
        t7 = t5.col1.y;
        t6 = manifold.get$localPoint();
        pointA.y = $.$add$ns($.$add$ns(t3, $.$mul$n(t7, t6.x)), $.$mul$n(t5.col2.y, t6.y));
        t6 = xfB.position;
        t5 = t6.x;
        t7 = xfB.rotation;
        t3 = t7.col1.x;
        t4 = t1.get$points(manifold);
        t8 = $.getInterceptor$asx(t4);
        pointB.x = $.$add$ns($.$add$ns(t5, $.$mul$n(t3, t8.$index(t4, 0).get$localPoint().x)), $.$mul$n(t7.col2.x, t8.$index(t4, 0).get$localPoint().y));
        t6 = t6.y;
        t4 = t7.col1.y;
        t1 = t1.get$points(manifold);
        t8 = $.getInterceptor$asx(t1);
        pointB.y = $.$add$ns($.$add$ns(t6, $.$mul$n(t4, t8.$index(t1, 0).get$localPoint().x)), $.$mul$n(t7.col2.y, t8.$index(t1, 0).get$localPoint().y));
        if ($.$gt$n($.MathBox_distanceSquared(pointA, pointB), 1.4208639999999999e-14)) {
          t2.x = $.$sub$n(pointB.x, pointA.x);
          t2.y = $.$sub$n(pointB.y, pointA.y);
          t2.normalize$0();
        }
        t1 = t2.x;
        t3 = $.getInterceptor$n(t1);
        cAx = $.$add$ns(t3.$mul(t1, radiusA), pointA.x);
        t2 = t2.y;
        t4 = $.getInterceptor$n(t2);
        cAy = $.$add$ns(t4.$mul(t2, radiusA), pointA.y);
        t1 = t3.$negate(t1);
        if (typeof radiusB !== "number")
          throw $.iae(radiusB);
        t3 = pointB.x;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t2 = t4.$negate(t2);
        t4 = pointB.y;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t5 = this.points;
        if (0 >= t5.length)
          throw $.ioore(0);
        $.set$x$x(t5[0], $.$mul$n($.$add$ns(cAx, t1 * radiusB + t3), 0.5));
        $.set$y$x(t5[0], $.$mul$n($.$add$ns(cAy, t2 * radiusB + t4), 0.5));
        return;
      case 1:
        planePoint = this.pool3;
        t2 = this.normal;
        t3 = xfA.rotation;
        t4 = t3.col1.x;
        t5 = manifold.get$localNormal();
        t2.x = $.$add$ns($.$mul$n(t4, t5.x), $.$mul$n(t3.col2.x, t5.y));
        t5 = t3.col1.y;
        t4 = manifold.get$localNormal();
        t2.y = $.$add$ns($.$mul$n(t5, t4.x), $.$mul$n(t3.col2.y, t4.y));
        t4 = xfA.position;
        t5 = t4.x;
        t6 = t3.col1.x;
        t7 = manifold.get$localPoint();
        planePoint.x = $.$add$ns($.$add$ns(t5, $.$mul$n(t6, t7.x)), $.$mul$n(t3.col2.x, t7.y));
        t4 = t4.y;
        t7 = t3.col1.y;
        t6 = manifold.get$localPoint();
        planePoint.y = $.$add$ns($.$add$ns(t4, $.$mul$n(t7, t6.x)), $.$mul$n(t3.col2.y, t6.y));
        clipPoint = this.pool4;
        for (t3 = xfB.position, t4 = xfB.rotation, t5 = $.getInterceptor$n(radiusA), t6 = this.points, t7 = t6.length, i = 0; $.JSNumber_methods.$lt(i, manifold.get$pointCount()); ++i) {
          t8 = t3.x;
          t9 = t4.col1.x;
          t10 = t1.get$points(manifold);
          t11 = $.getInterceptor$asx(t10);
          clipPoint.x = $.$add$ns($.$add$ns(t8, $.$mul$n(t9, t11.$index(t10, i).get$localPoint().x)), $.$mul$n(t4.col2.x, t11.$index(t10, i).get$localPoint().y));
          t10 = t3.y;
          t11 = t4.col1.y;
          t9 = t1.get$points(manifold);
          t8 = $.getInterceptor$asx(t9);
          clipPoint.y = $.$add$ns($.$add$ns(t10, $.$mul$n(t11, t8.$index(t9, i).get$localPoint().x)), $.$mul$n(t4.col2.y, t8.$index(t9, i).get$localPoint().y));
          t9 = clipPoint.x;
          t8 = $.$sub$n(t9, planePoint.x);
          t11 = t2.x;
          t8 = $.$mul$n(t8, t11);
          t10 = clipPoint.y;
          t12 = $.$sub$n(t10, planePoint.y);
          t13 = t2.y;
          scalar = t5.$sub(radiusA, $.$add$ns(t8, $.$mul$n(t12, t13)));
          t12 = $.getInterceptor$n(t11);
          cAx = $.$add$ns(t12.$mul(t11, scalar), t9);
          t8 = $.getInterceptor$n(t13);
          cAy = $.$add$ns(t8.$mul(t13, scalar), t10);
          t11 = t12.$negate(t11);
          if (typeof radiusB !== "number")
            throw $.iae(radiusB);
          if (typeof t9 !== "number")
            throw $.iae(t9);
          t13 = t8.$negate(t13);
          if (typeof t10 !== "number")
            throw $.iae(t10);
          if (i >= t7)
            throw $.ioore(i);
          $.set$x$x(t6[i], $.$mul$n($.$add$ns(cAx, t11 * radiusB + t9), 0.5));
          $.set$y$x(t6[i], $.$mul$n($.$add$ns(cAy, t13 * radiusB + t10), 0.5));
        }
        return;
      case 2:
        planePoint = this.pool3;
        R = xfB.rotation;
        t2 = this.normal;
        t3 = R.col1.x;
        t4 = manifold.get$localNormal();
        t2.x = $.$add$ns($.$mul$n(t3, t4.x), $.$mul$n(R.col2.x, t4.y));
        t4 = R.col1.y;
        t3 = manifold.get$localNormal();
        t2.y = $.$add$ns($.$mul$n(t4, t3.x), $.$mul$n(R.col2.y, t3.y));
        v = manifold.get$localPoint();
        t3 = xfB.position;
        planePoint.x = $.$add$ns($.$add$ns(t3.x, $.$mul$n(R.col1.x, v.x)), $.$mul$n(R.col2.x, v.y));
        planePoint.y = $.$add$ns($.$add$ns(t3.y, $.$mul$n(R.col1.y, v.x)), $.$mul$n(R.col2.y, v.y));
        clipPoint = this.pool4;
        for (t3 = xfA.position, t4 = xfA.rotation, t5 = $.getInterceptor$n(radiusB), t6 = this.points, t7 = t6.length, i = 0; $.JSNumber_methods.$lt(i, manifold.get$pointCount()); ++i) {
          t8 = t3.x;
          t9 = t4.col1.x;
          t10 = t1.get$points(manifold);
          t11 = $.getInterceptor$asx(t10);
          clipPoint.x = $.$add$ns($.$add$ns(t8, $.$mul$n(t9, t11.$index(t10, i).get$localPoint().x)), $.$mul$n(t4.col2.x, t11.$index(t10, i).get$localPoint().y));
          t10 = t3.y;
          t11 = t4.col1.y;
          t9 = t1.get$points(manifold);
          t8 = $.getInterceptor$asx(t9);
          clipPoint.y = $.$add$ns($.$add$ns(t10, $.$mul$n(t11, t8.$index(t9, i).get$localPoint().x)), $.$mul$n(t4.col2.y, t8.$index(t9, i).get$localPoint().y));
          t9 = clipPoint.x;
          t8 = $.$sub$n(t9, planePoint.x);
          t11 = t2.x;
          t8 = $.$mul$n(t8, t11);
          t10 = clipPoint.y;
          t12 = $.$sub$n(t10, planePoint.y);
          t13 = t2.y;
          scalar = t5.$sub(radiusB, $.$add$ns(t8, $.$mul$n(t12, t13)));
          t12 = $.getInterceptor$n(t11);
          cBx = $.$add$ns(t12.$mul(t11, scalar), t9);
          t8 = $.getInterceptor$n(t13);
          cBy = $.$add$ns(t8.$mul(t13, scalar), t10);
          t11 = t12.$negate(t11);
          if (typeof radiusA !== "number")
            throw $.iae(radiusA);
          if (typeof t9 !== "number")
            throw $.iae(t9);
          t13 = t8.$negate(t13);
          if (typeof t10 !== "number")
            throw $.iae(t10);
          if (i >= t7)
            throw $.ioore(i);
          t8 = t6[i];
          if (typeof cBx !== "number")
            throw $.iae(cBx);
          $.set$x$x(t8, (t11 * radiusA + t9 + cBx) * 0.5);
          t9 = t6[i];
          if (typeof cBy !== "number")
            throw $.iae(cBy);
          $.set$y$x(t9, (t13 * radiusA + t10 + cBy) * 0.5);
        }
        t2.x = $.$negate$n(t2.x);
        t2.y = $.$negate$n(t2.y);
        break;
    }
  },
  WorldManifold$0: function() {
    var t1, t2, i;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = new $.Vector(0, 0);
    }
  }
},

BroadPhase: {"": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
  updatePairs$1: function(callback) {
    var t1, i, t2, t3, pairBuffer, compare, primaryPair, pair;
    this._pairCount = 0;
    for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
      this.queryProxy = t2[i];
      t2 = this.queryProxy;
      if (t2 == null)
        continue;
      t1._query$4(this, t2.get$box(), t1._root, 1);
    }
    this.moveBuffer = $.List_List($);
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    $.IterableMixinWorkaround__rangeCheck(t2, 0, t3);
    pairBuffer = $.List_List$from(new $.SubListIterable(t2, 0, t3), true);
    compare = new $.BroadPhase_updatePairs_closure();
    if (!!pairBuffer.immutable$list)
      $.throwExpression(new $.UnsupportedError("sort"));
    t2 = $.$sub$n($.get$length$asx(pairBuffer), 1);
    if ($.$le$n($.$sub$n(t2, 0), 32))
      $.Sort_insertionSort_(pairBuffer, 0, t2, compare);
    else
      $.Sort__dualPivotQuicksort(pairBuffer, 0, t2, compare);
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    if (!!t2.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(t2, 0, t3, pairBuffer, 0);
    for (i = 0; i < this._pairCount;) {
      t2 = this._pairBuffer;
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      primaryPair = t2[i];
      callback.addPair$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
      ++i;
      for (; i < this._pairCount;) {
        t2 = this._pairBuffer;
        if (i >= t2.length)
          throw $.ioore(i);
        pair = t2[i];
        if (!$.$eq(pair.get$proxyA(), primaryPair.get$proxyA()) || !$.$eq(pair.get$proxyB(), primaryPair.get$proxyB()))
          break;
        ++i;
      }
    }
    t1.rebalance$1(4);
  },
  treeCallback$1: function(proxy) {
    var t1, t2, oldBuffer, i, i0, t3, t4;
    if ($.$eq(proxy, this.queryProxy))
      return true;
    t1 = this._pairCount;
    t2 = this._pairCapacity;
    if (t1 === t2) {
      oldBuffer = this._pairBuffer;
      this._pairCapacity = t2 * 2;
      this._pairBuffer = $.List_List(this._pairCapacity);
      for (t1 = this._pairBuffer, i = oldBuffer.length, t2 = t1.length, i0 = 0; i0 < i; ++i0) {
        t3 = oldBuffer[i0];
        if (i0 >= t2)
          throw $.ioore(i0);
        t1[i0] = t3;
      }
      for (; i < this._pairCapacity; ++i) {
        if (i >= t2)
          throw $.ioore(i);
        t1[i] = new $.Pair(null, null);
      }
    }
    t1 = proxy.get$key();
    t2 = this.queryProxy;
    t1 = $.$lt$n(t1, t2.get$key());
    t3 = this._pairBuffer;
    t4 = this._pairCount;
    if (t1) {
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw $.ioore(t4);
      t3[t4].set$proxyA(proxy);
      t1 = this._pairBuffer;
      t2 = this._pairCount;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2].set$proxyB(this.queryProxy);
    } else {
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw $.ioore(t4);
      t3[t4].set$proxyA(t2);
      t1 = this._pairBuffer;
      t2 = this._pairCount;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2].set$proxyB(proxy);
    }
    this._pairCount = this._pairCount + 1;
    return true;
  },
  BroadPhase$0: function() {
    var t1, t2, i;
    this.moveBuffer = $.List_List($);
    this._pairBuffer = $.List_List(this._pairCapacity);
    for (t1 = this._pairBuffer, t2 = t1.length, i = 0; i < this._pairCapacity; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = new $.Pair(null, null);
    }
  }
},

BroadPhase_updatePairs_closure: {"": "Closure;",
  call$2: function(a, b) {
    return $.compareTo$1$ns(a, b);
  }
},

DynamicTree: {"": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center<,deltaOne,deltaTwo",
  createProxy$2: function(box, userData) {
    var proxy, iterationCount, height, tryCount;
    proxy = this._allocateNode$0();
    proxy.get$box().lowerBound.x = $.$sub$n(box.lowerBound.x, 0.1);
    proxy.get$box().lowerBound.y = $.$sub$n(box.lowerBound.y, 0.1);
    proxy.get$box().upperBound.x = $.$add$ns(box.upperBound.x, 0.1);
    proxy.get$box().upperBound.y = $.$add$ns(box.upperBound.y, 0.1);
    proxy.set$userData(userData);
    this._insertLeaf$1(proxy);
    iterationCount = $.JSNumber_methods.$shr(this._nodeCount, 4);
    height = this._computeHeight$1(this._root);
    tryCount = 0;
    while (true) {
      if (!(height > 64 && tryCount < 10))
        break;
      this.rebalance$1(iterationCount);
      height = this._computeHeight$1(this._root);
      ++tryCount;
    }
    return proxy;
  },
  moveProxy$3: function(argProxy, argBox, displacement) {
    var t1, t2, t3, t4;
    t1 = argProxy.get$box();
    if (t1.contains$1(t1, argBox))
      return false;
    this._removeLeaf$1(argProxy);
    t1 = argBox.lowerBound;
    t1.x = $.$sub$n(t1.x, 0.1);
    t1 = argBox.lowerBound;
    t1.y = $.$sub$n(t1.y, 0.1);
    t1 = argBox.upperBound;
    t1.x = $.$add$ns(t1.x, 0.1);
    t1 = argBox.upperBound;
    t1.y = $.$add$ns(t1.y, 0.1);
    t1 = this._tempVector;
    t2 = displacement.x;
    t3 = displacement.y;
    t1.x = t2;
    t1.y = t3;
    t1.x = $.$mul$n(t1.x, 2);
    t1.y = $.$mul$n(t1.y, 2);
    t2 = t1.x;
    if ($.$lt$n(t2, 0)) {
      t3 = argBox.lowerBound;
      t3.x = $.$add$ns(t3.x, t2);
    } else {
      t3 = argBox.upperBound;
      t3.x = $.$add$ns(t3.x, t2);
    }
    t1 = t1.y;
    if ($.$lt$n(t1, 0)) {
      t2 = argBox.lowerBound;
      t2.y = $.$add$ns(t2.y, t1);
    } else {
      t2 = argBox.upperBound;
      t2.y = $.$add$ns(t2.y, t1);
    }
    t1 = argProxy.get$box();
    t2 = t1.lowerBound;
    t3 = argBox.lowerBound;
    t2.setFrom$1;
    t4 = t3.x;
    t3 = t3.y;
    t2.x = t4;
    t2.y = t3;
    t1 = t1.upperBound;
    t3 = argBox.upperBound;
    t1.setFrom$1;
    t2 = t3.x;
    t3 = t3.y;
    t1.x = t2;
    t1.y = t3;
    this._insertLeaf$1(argProxy);
    return true;
  },
  _allocateNode$0: function() {
    var t1, i, t2, node;
    t1 = this._nodeStack;
    if (t1._head === t1._tail)
      for (i = 0; i < 6; ++i) {
        t2 = new $.AxisAlignedBox(null, null);
        if (t2.lowerBound == null)
          t2.lowerBound = new $.Vector(0, 0);
        if (t2.upperBound == null)
          t2.upperBound = new $.Vector(0, 0);
        t1.addFirst$1(new $.DynamicTreeNode(t2, null, null, null, null, null, null));
      }
    node = t1.removeFirst$0();
    $.set$parent$x(node, null);
    node.set$childOne(null);
    node.set$childTwo(null);
    node.set$userData(null);
    node.set$key(this._nodeCounter);
    this._nodeCounter = this._nodeCounter + 1;
    this._nodeCount = this._nodeCount + 1;
    return node;
  },
  _query$4: function(callback, argBox, node, count) {
    if (node == null)
      return true;
    if ($.AxisAlignedBox_testOverlap(argBox, node.get$box()))
      if (node.get$isLeaf()) {
        if (!callback.treeCallback$1(node))
          return false;
      } else {
        if (count < 64) {
          ++count;
          if (!this._query$4(callback, argBox, node.get$childOne(), count))
            return false;
        }
        if (count < 64)
          if (!this._query$4(callback, argBox, node.get$childTwo(), count + 1))
            return false;
      }
    return true;
  },
  _insertLeaf$1: function(node) {
    var t1, t2, t3, c, t4, sibling, childOne, childTwo, t5, t6, normOne, node1, node2, node10;
    this._insertionCount = this._insertionCount + 1;
    if (this._root == null) {
      this._root = node;
      $.set$parent$x(node, null);
      return;
    }
    t1 = this.center;
    t2 = node.get$box();
    t3 = t2.lowerBound;
    c = new $.Vector(t3.x, t3.y);
    t2 = t2.upperBound;
    t3 = c.x;
    if (typeof t3 !== "number")
      return this._insertLeaf$1$bailout(1, node, c, t2, t1, t3);
    t4 = t2.x;
    if (typeof t4 !== "number")
      return this._insertLeaf$1$bailout(2, node, c, t2, t1, t3, t4);
    c.x = t3 + t4;
    t4 = c.y;
    if (typeof t4 !== "number")
      return this._insertLeaf$1$bailout(3, node, c, t2, t1, 0, t4);
    t2 = t2.y;
    if (typeof t2 !== "number")
      return this._insertLeaf$1$bailout(4, node, c, t2, t1, 0, t4);
    c.y = t4 + t2;
    t2 = c.x;
    if (typeof t2 !== "number")
      return this._insertLeaf$1$bailout(5, node, c, t2, t1);
    c.x = t2 * 0.5;
    t2 = c.y;
    if (typeof t2 !== "number")
      return this._insertLeaf$1$bailout(6, node, c, t2, t1);
    c.y = t2 * 0.5;
    t2 = c.x;
    t4 = c.y;
    t1.x = t2;
    t1.y = t4;
    sibling = this._root;
    if (!sibling.get$isLeaf())
      do {
        childOne = sibling.get$childOne();
        childTwo = sibling.get$childTwo();
        t2 = this.deltaOne;
        t3 = childOne.get$box();
        t4 = t3.lowerBound;
        c = new $.Vector(t4.x, t4.y);
        t3 = t3.upperBound;
        t4 = c.x;
        if (typeof t4 !== "number")
          return this._insertLeaf$1$bailout(7, node, c, t2, t1, t3, t4, childOne, childTwo);
        t5 = t3.x;
        if (typeof t5 !== "number")
          return this._insertLeaf$1$bailout(8, node, c, t2, t1, t3, t4, childOne, childTwo, t5);
        c.x = t4 + t5;
        t5 = c.y;
        if (typeof t5 !== "number")
          return this._insertLeaf$1$bailout(9, node, c, t2, t1, t3, 0, childOne, childTwo, t5);
        t3 = t3.y;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(10, node, c, t2, t1, t3, 0, childOne, childTwo, t5);
        c.y = t5 + t3;
        t3 = c.x;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(11, node, c, t2, t1, t3, 0, childOne, childTwo);
        c.x = t3 * 0.5;
        t3 = c.y;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(12, node, c, t2, t1, t3, 0, childOne, childTwo);
        c.y = t3 * 0.5;
        t3 = c.x;
        t5 = c.y;
        t2.x = t3;
        t2.y = t5;
        t5 = this.deltaTwo;
        t3 = childTwo.get$box();
        t4 = t3.lowerBound;
        c = new $.Vector(t4.x, t4.y);
        t3 = t3.upperBound;
        t4 = c.x;
        if (typeof t4 !== "number")
          return this._insertLeaf$1$bailout(13, node, c, t2, t1, t3, t4, childOne, childTwo, t5);
        t6 = t3.x;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(14, node, c, t2, t1, t3, t4, childOne, childTwo, t5, t6);
        c.x = t4 + t6;
        t6 = c.y;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(15, node, c, t2, t1, t3, 0, childOne, childTwo, t5, t6);
        t3 = t3.y;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(16, node, c, t2, t1, t3, 0, childOne, childTwo, t5, t6);
        c.y = t6 + t3;
        t3 = c.x;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(17, node, c, t2, t1, t3, 0, childOne, childTwo, t5);
        c.x = t3 * 0.5;
        t3 = c.y;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(18, node, c, t2, t1, t3, 0, childOne, childTwo, t5);
        c.y = t3 * 0.5;
        t3 = c.x;
        t6 = c.y;
        t5.x = t3;
        t5.y = t6;
        t6 = t2.x;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(19, node, 0, t2, t1, 0, 0, childOne, childTwo, t5, t6);
        t3 = t1.x;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(20, node, 0, t2, t1, t3, 0, childOne, childTwo, t5, t6);
        t2.x = t6 - t3;
        t3 = t2.y;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(21, node, 0, t2, t1, t3, 0, childOne, childTwo, t5);
        t6 = t1.y;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(22, node, 0, t2, t1, t3, 0, childOne, childTwo, t5, t6);
        t2.y = t3 - t6;
        t2.x = $.abs$0$n(t2.x);
        t2.y = $.abs$0$n(t2.y);
        t6 = t5.x;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(23, node, 0, t2, t1, 0, 0, childOne, childTwo, t5, t6);
        t3 = t1.x;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(24, node, 0, t2, t1, t3, 0, childOne, childTwo, t5, t6);
        t5.x = t6 - t3;
        t3 = t5.y;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(25, node, 0, t2, t1, t3, 0, childOne, childTwo, t5);
        t6 = t1.y;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(26, node, 0, t2, 0, t3, 0, childOne, childTwo, t5, t6);
        t5.y = t3 - t6;
        t5.x = $.abs$0$n(t5.x);
        t5.y = $.abs$0$n(t5.y);
        t6 = t2.x;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(27, node, 0, t2, 0, 0, 0, childOne, childTwo, t5, t6);
        t2 = t2.y;
        if (typeof t2 !== "number")
          return this._insertLeaf$1$bailout(28, node, 0, t2, 0, 0, 0, childOne, childTwo, t5, t6);
        normOne = t6 + t2;
        t2 = t5.x;
        if (typeof t2 !== "number")
          return this._insertLeaf$1$bailout(29, node, 0, t2, 0, 0, 0, childOne, childTwo, t5, 0, normOne);
        t5 = t5.y;
        if (typeof t5 !== "number")
          return this._insertLeaf$1$bailout(30, node, 0, t2, 0, 0, 0, childOne, childTwo, t5, 0, normOne);
        sibling = normOne < t2 + t5 ? childOne : childTwo;
      } while (!sibling.get$isLeaf());
    t1 = $.getInterceptor$x(sibling);
    node1 = t1.get$parent(sibling);
    node2 = this._allocateNode$0();
    $.set$parent$x(node2, node1);
    node2.set$userData(null);
    node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
    if (node1 != null) {
      if ($.$eq(t1.get$parent(sibling).get$childOne(), sibling))
        node1.set$childOne(node2);
      else
        node1.set$childTwo(node2);
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      t1.set$parent(sibling, node2);
      $.set$parent$x(node, node2);
      do {
        t1 = node1.get$box();
        if (t1.contains$1(t1, node2.get$box()))
          break;
        t1.setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        node10 = $.get$parent$x(node1);
        if (node10 != null) {
          node2 = node1;
          node1 = node10;
          continue;
        } else
          break;
      } while (true);
    } else {
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      t1.set$parent(sibling, node2);
      $.set$parent$x(node, node2);
      this._root = node2;
    }
  },
  _insertLeaf$1$bailout: function(state0, node, c, t2, t1, t3, t4, childOne, childTwo, t5, t6, normOne) {
    switch (state0) {
      case 0:
        this._insertionCount = this._insertionCount + 1;
        if (this._root == null) {
          this._root = node;
          $.set$parent$x(node, null);
          return;
        }
        t1 = this.center;
        t2 = node.get$box();
        t3 = t2.lowerBound;
        c = new $.Vector(t3.x, t3.y);
        t2 = t2.upperBound;
        t3 = c.x;
      case 1:
        state0 = 0;
        t4 = t2.x;
      case 2:
        state0 = 0;
        c.x = $.$add$ns(t3, t4);
        t4 = c.y;
      case 3:
        state0 = 0;
        t2 = t2.y;
      case 4:
        state0 = 0;
        c.y = $.$add$ns(t4, t2);
        t2 = c.x;
      case 5:
        state0 = 0;
        c.x = $.$mul$n(t2, 0.5);
        t2 = c.y;
      case 6:
        state0 = 0;
        c.y = $.$mul$n(t2, 0.5);
        t2 = c.x;
        t4 = c.y;
        t1.x = t2;
        t1.y = t4;
        sibling = this._root;
      default:
        var sibling, node1, node2, node10;
        if (state0 === 30 || state0 === 29 || state0 === 28 || state0 === 27 || state0 === 26 || state0 === 25 || state0 === 24 || state0 === 23 || state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && !sibling.get$isLeaf())
          switch (state0) {
            case 0:
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      childOne = sibling.get$childOne();
                      childTwo = sibling.get$childTwo();
                      t2 = this.deltaOne;
                      t3 = childOne.get$box();
                      t4 = t3.lowerBound;
                      c = new $.Vector(t4.x, t4.y);
                      t3 = t3.upperBound;
                      t4 = c.x;
                    case 7:
                      state0 = 0;
                      t5 = t3.x;
                    case 8:
                      state0 = 0;
                      c.x = $.$add$ns(t4, t5);
                      t5 = c.y;
                    case 9:
                      state0 = 0;
                      t3 = t3.y;
                    case 10:
                      state0 = 0;
                      c.y = $.$add$ns(t5, t3);
                      t3 = c.x;
                    case 11:
                      state0 = 0;
                      c.x = $.$mul$n(t3, 0.5);
                      t3 = c.y;
                    case 12:
                      state0 = 0;
                      c.y = $.$mul$n(t3, 0.5);
                      t3 = c.x;
                      t5 = c.y;
                      t2.x = t3;
                      t2.y = t5;
                      t5 = this.deltaTwo;
                      t3 = childTwo.get$box();
                      t4 = t3.lowerBound;
                      c = new $.Vector(t4.x, t4.y);
                      t3 = t3.upperBound;
                      t4 = c.x;
                    case 13:
                      state0 = 0;
                      t6 = t3.x;
                    case 14:
                      state0 = 0;
                      c.x = $.$add$ns(t4, t6);
                      t6 = c.y;
                    case 15:
                      state0 = 0;
                      t3 = t3.y;
                    case 16:
                      state0 = 0;
                      c.y = $.$add$ns(t6, t3);
                      t3 = c.x;
                    case 17:
                      state0 = 0;
                      c.x = $.$mul$n(t3, 0.5);
                      t3 = c.y;
                    case 18:
                      state0 = 0;
                      c.y = $.$mul$n(t3, 0.5);
                      t3 = c.x;
                      t6 = c.y;
                      t5.x = t3;
                      t5.y = t6;
                      t6 = t2.x;
                    case 19:
                      state0 = 0;
                      t3 = t1.x;
                    case 20:
                      state0 = 0;
                      t2.x = $.$sub$n(t6, t3);
                      t3 = t2.y;
                    case 21:
                      state0 = 0;
                      t6 = t1.y;
                    case 22:
                      state0 = 0;
                      t2.y = $.$sub$n(t3, t6);
                      t2.x = $.abs$0$n(t2.x);
                      t2.y = $.abs$0$n(t2.y);
                      t6 = t5.x;
                    case 23:
                      state0 = 0;
                      t3 = t1.x;
                    case 24:
                      state0 = 0;
                      t5.x = $.$sub$n(t6, t3);
                      t3 = t5.y;
                    case 25:
                      state0 = 0;
                      t6 = t1.y;
                    case 26:
                      state0 = 0;
                      t5.y = $.$sub$n(t3, t6);
                      t5.x = $.abs$0$n(t5.x);
                      t5.y = $.abs$0$n(t5.y);
                      t6 = t2.x;
                    case 27:
                      state0 = 0;
                      t2 = t2.y;
                    case 28:
                      state0 = 0;
                      normOne = $.$add$ns(t6, t2);
                      t2 = t5.x;
                    case 29:
                      state0 = 0;
                      t5 = t5.y;
                    case 30:
                      state0 = 0;
                      sibling = $.$lt$n(normOne, $.$add$ns(t2, t5)) ? childOne : childTwo;
                      if (!!sibling.get$isLeaf())
                        break L0;
                  }
          }
        t1 = $.getInterceptor$x(sibling);
        node1 = t1.get$parent(sibling);
        node2 = this._allocateNode$0();
        $.set$parent$x(node2, node1);
        node2.set$userData(null);
        node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
        if (node1 != null) {
          if ($.$eq(t1.get$parent(sibling).get$childOne(), sibling))
            node1.set$childOne(node2);
          else
            node1.set$childTwo(node2);
          node2.set$childOne(sibling);
          node2.set$childTwo(node);
          t1.set$parent(sibling, node2);
          $.set$parent$x(node, node2);
          do {
            t1 = node1.get$box();
            if (t1.contains$1(t1, node2.get$box()))
              break;
            t1.setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
            node10 = $.get$parent$x(node1);
            if (node10 != null) {
              node2 = node1;
              node1 = node10;
              continue;
            } else
              break;
          } while (true);
        } else {
          node2.set$childOne(sibling);
          node2.set$childTwo(node);
          t1.set$parent(sibling, node2);
          $.set$parent$x(node, node2);
          this._root = node2;
        }
    }
  },
  _removeLeaf$1: function(argNode) {
    var t1, node2, node1, sibling, t2, t3, t4, t5;
    t1 = $.getInterceptor(argNode);
    if (t1.$eq(argNode, this._root)) {
      this._root = null;
      if ($.$eq(this._lastLeaf, argNode))
        this._lastLeaf = null;
      return;
    }
    node2 = t1.get$parent(argNode);
    node1 = $.get$parent$x(node2);
    sibling = $.$eq(node2.get$childOne(), argNode) ? node2.get$childTwo() : node2.get$childOne();
    if (node1 != null) {
      if ($.$eq(node1.get$childOne(), node2))
        node1.set$childOne(sibling);
      else
        node1.set$childTwo(sibling);
      $.set$parent$x(sibling, node1);
      this._nodeStack.addFirst$1(node2);
      this._nodeCount = this._nodeCount - 1;
      for (t1 = this._tempBox; node1 != null;) {
        t2 = node1.get$box();
        t3 = t1.lowerBound;
        t4 = t2.lowerBound;
        t3.setFrom$1;
        t5 = t4.x;
        t4 = t4.y;
        t3.x = t5;
        t3.y = t4;
        t4 = t1.upperBound;
        t2 = t2.upperBound;
        t4.setFrom$1;
        t3 = t2.x;
        t2 = t2.y;
        t4.x = t3;
        t4.y = t2;
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        if (t1.contains$1(t1, node1.get$box()))
          break;
        node1 = $.get$parent$x(node1);
      }
    } else {
      this._root = sibling;
      $.set$parent$x(sibling, null);
      this._nodeStack.addFirst$1(node2);
      this._nodeCount = this._nodeCount - 1;
    }
    if ($.$eq(this._lastLeaf, argNode))
      this._lastLeaf = this._root;
  },
  _computeHeight$1: function(node) {
    if (node == null)
      return 0;
    return 1 + $.max(this._computeHeight$1(node.get$childOne()), this._computeHeight$1(node.get$childTwo()));
  },
  rebalance$1: function(iterations) {
    var i, current, bit, t1, t2;
    if (this._root == null)
      return;
    for (i = 0; i < iterations; ++i) {
      current = this._root;
      for (bit = 0; t1 = current.get$isLeaf(), t2 = this._path, !t1;) {
        current = ($.JSNumber_methods.$shr(t2, bit) & 1) === 0 ? current.get$childOne() : current.get$childTwo();
        bit = bit + 1 & 31;
      }
      this._path = t2 + 1;
      this._removeLeaf$1(current);
      this._insertLeaf$1(current);
    }
  },
  DynamicTree$0: function() {
    var t1, t2, i;
    for (t1 = this._drawVectors, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector(0, 0);
  }
},

DynamicTreeNode: {"": "Object;box<,parent*,next@,childOne@,childTwo@,userData@,key@",
  get$isLeaf: function() {
    return this.childOne == null;
  },
  toString$0: function(_) {
    var t1 = this.box;
    return $.S(t1.lowerBound) + ", " + $.S(t1.upperBound);
  }
},

Pair: {"": "Object;proxyA@,proxyB@",
  compareTo$1: function(_, pair2) {
    var t1, t2;
    t1 = this.proxyA.get$key();
    t2 = pair2.get$proxyA().get$key();
    if ($.$lt$n(t1, t2))
      return -1;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.proxyB.get$key();
      t2 = pair2.get$proxyB().get$key();
      if ($.$lt$n(t1, t2))
        t1 = -1;
      else
        t1 = (t1 == null ? t2 == null : t1 === t2) ? 0 : 1;
      return t1;
    }
    return 1;
  }
},

CircleShape: {"": "Shape;position>,type,radius",
  computeAxisAlignedBox$2: function(argBox, argTransform) {
    var p, t1, t2, t3;
    p = new $.Vector(0, 0);
    $.Matrix22_mulMatrixAndVectorToOut(argTransform.rotation, this.position, p);
    t1 = argTransform.position;
    p.x = $.$add$ns(p.x, t1.x);
    p.y = $.$add$ns(p.y, t1.y);
    t1 = argBox.lowerBound;
    t2 = p.x;
    t3 = this.radius;
    t2 = $.$sub$n(t2, t3);
    t3 = $.$sub$n(p.y, t3);
    t1.setCoords$2;
    t1.x = t2;
    t1.y = t3;
    t3 = argBox.upperBound;
    t1 = p.x;
    t2 = this.radius;
    t1 = $.$add$ns(t1, t2);
    t2 = $.$add$ns(p.y, t2);
    t3.setCoords$2;
    t3.x = t1;
    t3.y = t2;
  },
  clone$0: function(_) {
    var t1, t2, t3;
    t1 = this.type;
    t2 = this.radius;
    t3 = this.position;
    return new $.CircleShape(new $.Vector(t3.x, t3.y), t1, t2);
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, t4;
    t1 = $.$mul$n(density, 3.141592653589793);
    t2 = this.radius;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    massData.mass = t1 * t2 * t2;
    t2 = massData.center;
    t1 = this.position;
    t3 = t1.x;
    t4 = t1.y;
    t2.x = t3;
    t2.y = t4;
    t4 = massData.mass;
    t2 = this.radius;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = t1.x;
    t3 = $.$mul$n(t3, t3);
    t1 = t1.y;
    t1 = $.$add$ns(t3, $.$mul$n(t1, t1));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    massData.inertia = $.$mul$n(t4, 0.5 * t2 * t2 + t1);
  }
},

MassData: {"": "Object;mass<,center<,inertia<",
  setFrom$1: function(md) {
    var t1, t2, t3;
    this.mass = md.get$mass();
    this.inertia = md.get$inertia();
    t1 = this.center;
    t2 = md.get$center();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
  }
},

PolygonShape: {"": "Shape;centroid<,vertices<,normals<,vertexCount<,type,radius",
  getSupport$1: function(d) {
    var t1, t2, t3, t4, t5, t6, bestValue, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = $.getInterceptor$x(t3);
    t5 = t4.get$x(t3);
    t6 = d.x;
    if (typeof t6 !== "number")
      return this.getSupport$1$bailout(1, d, t1, t3, t6, t4, t5, t2);
    t5 = $.$mul$n(t5, t6);
    t3 = t4.get$y(t3);
    t4 = d.y;
    if (typeof t4 !== "number")
      return this.getSupport$1$bailout(2, 0, t1, t3, t6, t4, t5, t2);
    bestValue = $.$add$ns(t5, $.$mul$n(t3, t4));
    if (typeof bestValue !== "number")
      return this.getSupport$1$bailout(3, 0, t1, 0, t6, t4, 0, t2, bestValue);
    for (bestIndex = 0, i = 1; i < this.vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t5 = $.getInterceptor$x(t3);
      value = $.$add$ns($.$mul$n(t5.get$x(t3), t6), $.$mul$n(t5.get$y(t3), t4));
      if ($.$gt$n(value, bestValue)) {
        bestValue = value;
        bestIndex = i;
      }
    }
    return bestIndex;
  },
  getSupport$1$bailout: function(state0, d, t1, t3, t6, t4, t5, t2, bestValue) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t3 = t1[0];
        t4 = $.getInterceptor$x(t3);
        t5 = t4.get$x(t3);
        t6 = d.x;
      case 1:
        state0 = 0;
        t5 = $.$mul$n(t5, t6);
        t3 = t4.get$y(t3);
        t4 = d.y;
      case 2:
        state0 = 0;
        bestValue = $.$add$ns(t5, $.$mul$n(t3, t4));
      case 3:
        var bestIndex, i, value;
        state0 = 0;
        for (bestIndex = 0, i = 1; i < this.vertexCount; ++i) {
          if (i >= t2)
            throw $.ioore(i);
          t3 = t1[i];
          t5 = $.getInterceptor$x(t3);
          value = $.$add$ns($.$mul$n(t5.get$x(t3), t6), $.$mul$n(t5.get$y(t3), t4));
          if ($.$gt$n(value, bestValue)) {
            bestValue = value;
            bestIndex = i;
          }
        }
        return bestIndex;
    }
  },
  clone$0: function(_) {
    return $.PolygonShape$copy(this);
  },
  setAsBox$2: function(hx, hy) {
    var t1, t2, t3, t4;
    this.vertexCount = 4;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = -hx;
    t4 = -hy;
    t1[0].setCoords$2(t3, t4);
    if (1 >= t2)
      throw $.ioore(1);
    t1[1].setCoords$2(hx, t4);
    if (2 >= t2)
      throw $.ioore(2);
    t1[2].setCoords$2(hx, hy);
    if (3 >= t2)
      throw $.ioore(3);
    t1[3].setCoords$2(t3, hy);
    t3 = this.normals;
    t1 = t3.length;
    if (0 >= t1)
      throw $.ioore(0);
    t3[0].setCoords$2(0, -1);
    if (1 >= t1)
      throw $.ioore(1);
    t3[1].setCoords$2(1, 0);
    if (2 >= t1)
      throw $.ioore(2);
    t3[2].setCoords$2(0, 1);
    if (3 >= t1)
      throw $.ioore(3);
    t3[3].setCoords$2(-1, 0);
    t3 = this.centroid;
    t3.x = 0;
    t3.y = 0;
  },
  setAsBoxWithCenterAndAngle$4: function(hx, hy, center, angle) {
    var t1, t2, t3, t4, t5, t6, t7, xf, i;
    this.vertexCount = 4;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = -hx;
    t4 = -hy;
    t1[0].setCoords$2(t3, t4);
    if (1 >= t2)
      throw $.ioore(1);
    t1[1].setCoords$2(hx, t4);
    if (2 >= t2)
      throw $.ioore(2);
    t1[2].setCoords$2(hx, hy);
    if (3 >= t2)
      throw $.ioore(3);
    t1[3].setCoords$2(t3, hy);
    t3 = this.normals;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0].setCoords$2(0, -1);
    if (1 >= t4)
      throw $.ioore(1);
    t3[1].setCoords$2(1, 0);
    if (2 >= t4)
      throw $.ioore(2);
    t3[2].setCoords$2(0, 1);
    if (3 >= t4)
      throw $.ioore(3);
    t3[3].setCoords$2(-1, 0);
    t5 = this.centroid;
    t6 = center.x;
    t7 = center.y;
    t5.x = t6;
    t5.y = t7;
    xf = new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null));
    t7 = xf.position;
    t5 = center.x;
    t6 = center.y;
    t7.x = t5;
    t7.y = t6;
    t6 = xf.rotation;
    t6.setAngle$1(angle);
    for (i = 0; i < this.vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t5 = t1[i];
      $.Transform_mulToOut(xf, t5, t5);
      if (i >= t4)
        throw $.ioore(i);
      t5 = t3[i];
      $.Matrix22_mulMatrixAndVectorToOut(t6, t5, t5);
    }
  },
  computeAxisAlignedBox$2: function(argAabb, argXf) {
    var lower, upper, v, t1, t2, t3, t4, i;
    lower = new $.Vector(0, 0);
    upper = new $.Vector(0, 0);
    v = new $.Vector(0, 0);
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    $.Transform_mulToOut(argXf, t1[0], lower);
    t3 = lower.x;
    t4 = lower.y;
    upper.x = t3;
    upper.y = t4;
    for (i = 1; i < this.vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      $.Transform_mulToOut(argXf, t1[i], v);
      $.Vector_minToOut(lower, v, lower);
      $.Vector_maxToOut(upper, v, upper);
    }
    argAabb.lowerBound.x = $.$sub$n(lower.x, this.radius);
    argAabb.lowerBound.y = $.$sub$n(lower.y, this.radius);
    argAabb.upperBound.x = $.$add$ns(upper.x, this.radius);
    argAabb.upperBound.y = $.$add$ns(upper.y, this.radius);
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, t4, t5, t6, center, pRef, e1, e2, p3, area, I, i, p2, p30, D, triangleArea, t7, px, py, ex1, ey1, ex2, ey2;
    if (this.vertexCount === 2) {
      t1 = massData.center;
      t2 = this.vertices;
      t3 = t2.length;
      if (0 >= t3)
        throw $.ioore(0);
      t4 = t2[0];
      t5 = $.getInterceptor$x(t4);
      t6 = t5.get$x(t4);
      t4 = t5.get$y(t4);
      t1.x = t6;
      t1.y = t4;
      if (1 >= t3)
        throw $.ioore(1);
      t2 = t2[1];
      t3 = $.getInterceptor$x(t2);
      t1.x = $.$add$ns(t1.x, t3.get$x(t2));
      t1.y = $.$add$ns(t1.y, t3.get$y(t2));
      t1.x = $.$mul$n(t1.x, 0.5);
      t1.y = $.$mul$n(t1.y, 0.5);
      massData.mass = 0;
      massData.inertia = 0;
      return;
    }
    center = new $.Vector(0, 0);
    center.x = 0;
    center.y = 0;
    pRef = new $.Vector(0, 0);
    pRef.x = 0;
    pRef.y = 0;
    e1 = new $.Vector(0, 0);
    e2 = new $.Vector(0, 0);
    for (t1 = this.vertices, t2 = t1.length, p3 = t1[0], area = 0, I = 0, i = 0; t3 = this.vertexCount, i < t3;) {
      if (i >= t2)
        throw $.ioore(i);
      p2 = t1[i];
      ++i;
      if (i < t3) {
        if (i >= t2)
          throw $.ioore(i);
        p30 = t1[i];
      } else {
        if (0 >= t2)
          throw $.ioore(0);
        p30 = p3;
      }
      t3 = $.getInterceptor$x(p2);
      t4 = t3.get$x(p2);
      t5 = t3.get$y(p2);
      e1.x = t4;
      e1.y = t5;
      e1.x = $.$sub$n(e1.x, pRef.x);
      e1.y = $.$sub$n(e1.y, pRef.y);
      t5 = $.getInterceptor$x(p30);
      t4 = t5.get$x(p30);
      t6 = t5.get$y(p30);
      e2.x = t4;
      e2.y = t6;
      e2.x = $.$sub$n(e2.x, pRef.x);
      e2.y = $.$sub$n(e2.y, pRef.y);
      D = $.$sub$n($.$mul$n(e1.x, e2.y), $.$mul$n(e1.y, e2.x));
      if (typeof D !== "number")
        throw $.iae(D);
      triangleArea = 0.5 * D;
      area += triangleArea;
      t6 = center.x;
      t4 = triangleArea * 0.3333333333333333;
      t7 = $.$add$ns($.$add$ns(pRef.x, t3.get$x(p2)), t5.get$x(p30));
      if (typeof t7 !== "number")
        throw $.iae(t7);
      center.x = $.$add$ns(t6, t4 * t7);
      t7 = center.y;
      t5 = $.$add$ns($.$add$ns(pRef.y, t3.get$y(p2)), t5.get$y(p30));
      if (typeof t5 !== "number")
        throw $.iae(t5);
      center.y = $.$add$ns(t7, t4 * t5);
      px = pRef.x;
      py = pRef.y;
      ex1 = e1.x;
      ey1 = e1.y;
      ex2 = e2.x;
      ey2 = e2.y;
      t5 = $.getInterceptor$n(ex2);
      t5 = $.$add$ns($.$add$ns($.$mul$n(ex1, ex1), t5.$mul(ex2, ex1)), t5.$mul(ex2, ex2));
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = $.getInterceptor$n(px);
      t4 = $.$add$ns(t4.$mul(px, ex1), t4.$mul(px, ex2));
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (typeof px !== "number")
        throw $.iae(px);
      t7 = $.getInterceptor$n(ey2);
      t7 = $.$add$ns($.$add$ns($.$mul$n(ey1, ey1), t7.$mul(ey2, ey1)), t7.$mul(ey2, ey2));
      if (typeof t7 !== "number")
        throw $.iae(t7);
      t3 = $.getInterceptor$n(py);
      t3 = $.$add$ns(t3.$mul(py, ey1), t3.$mul(py, ey2));
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (typeof py !== "number")
        throw $.iae(py);
      I += D * (0.3333333333333333 * (0.25 * t5 + t4) + 0.5 * px * px + (0.3333333333333333 * (0.25 * t7 + t3) + 0.5 * py * py));
    }
    massData.mass = $.$mul$n(density, area);
    t1 = 1 / area;
    center.x = $.$mul$n(center.x, t1);
    center.y = $.$mul$n(center.y, t1);
    t1 = massData.center;
    t2 = center.x;
    t3 = center.y;
    t1.x = t2;
    t1.y = t3;
    if (typeof density !== "number")
      throw $.iae(density);
    massData.inertia = I * density;
  },
  PolygonShape$0: function() {
    var t1, t2, i;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector(0, 0);
    for (t1 = this.normals, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector(0, 0);
  },
  PolygonShape$copy$1: function(other) {
    var t1, t2, t3, t4, i, t5, t6, t7;
    for (t1 = this.vertices, t2 = other.vertices, t3 = t2.length, t4 = t1.length, i = 0; i < t3; ++i) {
      t5 = t2[i];
      t6 = $.getInterceptor$x(t5);
      t7 = t6.get$x(t5);
      t5 = t6.get$y(t5);
      if (i >= t4)
        throw $.ioore(i);
      t1[i] = new $.Vector(t7, t5);
    }
    for (t1 = this.normals, t2 = other.normals, t3 = t2.length, t4 = t1.length, i = 0; i < t3; ++i) {
      t5 = t2[i];
      t6 = $.getInterceptor$x(t5);
      t7 = t6.get$x(t5);
      t5 = t6.get$y(t5);
      if (i >= t4)
        throw $.ioore(i);
      t1[i] = new $.Vector(t7, t5);
    }
  }
},

Shape: {"": "Object;type*,radius@"},

Color3: {"": "Object;x*,y*,z>",
  setFromRGBF$3: function(r, g, b) {
    var t1, truncated;
    t1 = Math.floor(r * 255);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    t1 = truncated == -0.0 ? 0 : truncated;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    this.x = truncated == -0.0 ? 0 : truncated;
    t1 = Math.floor(g * 255);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    t1 = truncated == -0.0 ? 0 : truncated;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    this.y = truncated == -0.0 ? 0 : truncated;
    t1 = Math.floor(b * 255);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    t1 = truncated == -0.0 ? 0 : truncated;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    this.z = truncated == -0.0 ? 0 : truncated;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isColor3)
      t1 = $.$eq(this.x, other.x) && $.$eq(this.y, other.y) && this.z === other.z;
    else
      t1 = false;
    return t1;
  },
  $isColor3: true
},

IViewportTransform: {"": "Object;yFlip,extents,scale,center<",
  getWorldToScreen$2: function(argWorld, argScreen) {
    var t1, t2, t3, t4, t5, gridCorrectedX, gridCorrectedY, result;
    t1 = $.getInterceptor$x(argWorld);
    t2 = t1.get$x(argWorld);
    t3 = this.scale;
    t2 = $.$mul$n(t2, t3);
    t4 = this.extents;
    t5 = t4.x;
    gridCorrectedX = $.$add$ns(t2, t5);
    t2 = t4.y;
    gridCorrectedY = $.$sub$n(t2, $.$mul$n(t1.get$y(argWorld), t3));
    result = new $.Vector(t5, t2);
    t2 = this.center;
    result.x = $.$sub$n(result.x, t2.x);
    result.y = $.$sub$n(result.y, t2.y);
    t5 = $.$add$ns(gridCorrectedX, result.x);
    result = new $.Vector(t4.x, t4.y);
    result.x = $.$sub$n(result.x, t2.x);
    result.y = $.$sub$n(result.y, t2.y);
    argScreen.setCoords$2(t5, $.$add$ns(gridCorrectedY, $.$negate$n(result.y)));
  }
},

Matrix22: {"": "Object;col1<,col2<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isMatrix22)
      t1 = $.$eq(this.col1, other.col1) && $.$eq(this.col2, other.col2);
    else
      t1 = false;
    return t1;
  },
  setAngle$1: function(angle) {
    var t1, cosin, sin;
    t1 = typeof angle !== "number";
    if (t1)
      $.throwExpression(new $.ArgumentError(angle));
    cosin = Math.cos(angle);
    if (t1)
      $.throwExpression(new $.ArgumentError(angle));
    sin = Math.sin(angle);
    t1 = this.col1;
    t1.setCoords$2;
    t1.x = cosin;
    t1.y = sin;
    t1 = this.col2;
    t1.setCoords$2;
    t1.x = -sin;
    t1.y = cosin;
  },
  setFrom$1: function(matrix) {
    var t1, t2, t3;
    t1 = this.col1;
    t2 = matrix.get$col1();
    t1.setFrom$1;
    t3 = t2.get$x(t2);
    t2 = t2.get$y(t2);
    t1.x = t3;
    t1.y = t2;
    t2 = this.col2;
    t1 = matrix.get$col2();
    t2.setFrom$1;
    t3 = t1.get$x(t1);
    t1 = t1.get$y(t1);
    t2.x = t3;
    t2.y = t1;
  },
  invertLocal$0: function() {
    var t1, a, t2, b, c, d, det;
    t1 = this.col1;
    a = t1.x;
    if (typeof a !== "number")
      return this.invertLocal$0$bailout(1, t1, a);
    t2 = this.col2;
    b = t2.x;
    if (typeof b !== "number")
      return this.invertLocal$0$bailout(2, t1, a, t2, b);
    c = t1.y;
    if (typeof c !== "number")
      return this.invertLocal$0$bailout(3, t1, a, t2, b, c);
    d = t2.y;
    if (typeof d !== "number")
      return this.invertLocal$0$bailout(4, t1, a, 0, b, c, d);
    det = a * d - b * c;
    if (det !== 0)
      det = 1 / det;
    t1.x = det * d;
    t1 = -det;
    this.col2.x = t1 * b;
    this.col1.y = t1 * c;
    this.col2.y = det * a;
    return this;
  },
  invertLocal$0$bailout: function(state0, t1, a, t2, b, c, d) {
    switch (state0) {
      case 0:
        t1 = this.col1;
        a = t1.x;
      case 1:
        state0 = 0;
        t2 = this.col2;
        b = t2.x;
      case 2:
        state0 = 0;
        c = t1.y;
      case 3:
        state0 = 0;
        d = t2.y;
      case 4:
        var det, t3;
        state0 = 0;
        det = $.$sub$n($.$mul$n(a, d), $.$mul$n(b, c));
        if (!$.$eq(det, 0)) {
          if (typeof det !== "number")
            throw $.iae(det);
          det = 1 / det;
        }
        t2 = $.getInterceptor$n(det);
        t1.x = t2.$mul(det, d);
        t1 = this.col2;
        t3 = t2.$negate(det);
        if (typeof b !== "number")
          throw $.iae(b);
        t1.x = t3 * b;
        t3 = this.col1;
        t1 = t2.$negate(det);
        if (typeof c !== "number")
          throw $.iae(c);
        t3.y = t1 * c;
        this.col2.y = t2.$mul(det, a);
        return this;
    }
  },
  addLocal$1: function(other) {
    var t1 = this.col1;
    t1.x = $.$add$ns(t1.x, other.col1.x);
    t1 = this.col1;
    t1.y = $.$add$ns(t1.y, other.col1.y);
    t1 = this.col2;
    t1.x = $.$add$ns(t1.x, other.col2.x);
    t1 = this.col2;
    t1.y = $.$add$ns(t1.y, other.col2.y);
    return this;
  },
  solveToOut$2: function(b, out) {
    var t1, a11, t2, a12, a21, a22, det, t3, t4, t5, tempy;
    t1 = this.col1;
    a11 = t1.x;
    t2 = this.col2;
    a12 = t2.x;
    a21 = t1.y;
    a22 = t2.y;
    t2 = $.getInterceptor$n(a11);
    t1 = $.getInterceptor$n(a12);
    det = $.$sub$n(t2.$mul(a11, a22), t1.$mul(a12, a21));
    if (!$.$eq(det, 0)) {
      if (typeof det !== "number")
        throw $.iae(det);
      det = 1 / det;
    }
    t3 = b.y;
    t2 = t2.$mul(a11, t3);
    t4 = b.x;
    t5 = $.getInterceptor$n(det);
    tempy = t5.$mul(det, $.$sub$n(t2, $.$mul$n(a21, t4)));
    out.x = t5.$mul(det, $.$sub$n($.$mul$n(a22, t4), t1.$mul(a12, t3)));
    out.y = tempy;
  },
  toString$0: function(_) {
    return $.S(this.col1) + ", " + $.S(this.col2);
  },
  Matrix22$2: function(c1, c2) {
    if (c1 == null)
      c1 = new $.Vector(0, 0);
    if (c2 == null)
      c2 = new $.Vector(0, 0);
    this.col1 = c1;
    this.col2 = c2;
  },
  $isMatrix22: true
},

Matrix33: {"": "Object;col1<,col2<,col3",
  solve22ToOut$2: function(b, out) {
    var t1, a11, t2, a12, a21, a22, det, t3;
    t1 = this.col1;
    a11 = t1.x;
    t2 = this.col2;
    a12 = t2.x;
    a21 = t1.y;
    a22 = t2.y;
    t2 = $.getInterceptor$n(a11);
    t1 = $.getInterceptor$n(a12);
    det = $.$sub$n(t2.$mul(a11, a22), t1.$mul(a12, a21));
    if (!$.$eq(det, 0)) {
      if (typeof det !== "number")
        throw $.iae(det);
      det = 1 / det;
    }
    t3 = $.getInterceptor$n(det);
    out.x = t3.$mul(det, $.$sub$n($.$mul$n(a22, b.x), t1.$mul(a12, b.y)));
    out.y = t3.$mul(det, $.$sub$n(t2.$mul(a11, b.y), $.$mul$n(a21, b.x)));
  },
  solve33ToOut$2: function(b, out) {
    var t1, t2, t3, det, t4, x, y, z;
    t1 = this.col2;
    t2 = this.col3;
    $.Vector3_crossToOut(t1, t2, out);
    t3 = this.col1;
    det = $.$add$ns($.$add$ns($.$mul$n(t3.x, out.x), $.$mul$n(t3.y, out.y)), $.$mul$n(t3.z, out.z));
    if (!$.$eq(det, 0)) {
      if (typeof det !== "number")
        throw $.iae(det);
      det = 1 / det;
    }
    $.Vector3_crossToOut(t1, t2, out);
    t4 = $.getInterceptor$n(det);
    x = t4.$mul(det, $.$add$ns($.$add$ns($.$mul$n(b.x, out.x), $.$mul$n(b.y, out.y)), $.$mul$n(b.z, out.z)));
    $.Vector3_crossToOut(b, t2, out);
    y = t4.$mul(det, $.$add$ns($.$add$ns($.$mul$n(t3.x, out.x), $.$mul$n(t3.y, out.y)), $.$mul$n(t3.z, out.z)));
    $.Vector3_crossToOut(t1, b, out);
    z = t4.$mul(det, $.$add$ns($.$add$ns($.$mul$n(t3.x, out.x), $.$mul$n(t3.y, out.y)), $.$mul$n(t3.z, out.z)));
    out.x = x;
    out.y = y;
    out.z = z;
  }
},

Sweep: {"": "Object;localCenter<,centerZero<,center<,angleZero<,angle<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.localCenter;
    if (t1.$eq(t1, other.get$localCenter())) {
      t1 = this.centerZero;
      if (t1.$eq(t1, other.get$centerZero())) {
        t1 = this.center;
        t1 = t1.$eq(t1, other.get$center()) && $.$eq(this.angleZero, other.get$angleZero()) && $.$eq(this.angle, other.get$angle());
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.localCenter;
    t2 = other.get$localCenter();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.centerZero;
    t1 = other.get$centerZero();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    t1 = this.center;
    t2 = other.get$center();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    this.angleZero = other.get$angleZero();
    this.angle = other.get$angle();
  },
  getTransform$2: function(xf, alpha) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = xf.position;
    if (typeof alpha !== "number")
      throw $.iae(alpha);
    t2 = 1 - alpha;
    t3 = this.centerZero;
    t4 = t3.x;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = this.center;
    t6 = t5.x;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t1.x = t2 * t4 + alpha * t6;
    t3 = t3.y;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t5 = t5.y;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t1.y = t2 * t3 + alpha * t5;
    t5 = xf.rotation;
    t3 = this.angleZero;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t6 = this.angle;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t5.setAngle$1(t2 * t3 + alpha * t6);
    t6 = t1.x;
    if (typeof t6 !== "number")
      return this.getTransform$2$bailout(1, t1, t6, t5);
    t3 = t5.col1.x;
    if (typeof t3 !== "number")
      return this.getTransform$2$bailout(2, t1, t6, t5, t3);
    t2 = this.localCenter;
    t4 = t2.x;
    if (typeof t4 !== "number")
      return this.getTransform$2$bailout(3, t1, t6, t5, t3, t2, t4);
    t4 = t3 * t4;
    t3 = t5.col2.x;
    if (typeof t3 !== "number")
      return this.getTransform$2$bailout(4, t1, t6, t5, t3, t2, t4);
    t7 = t2.y;
    if (typeof t7 !== "number")
      return this.getTransform$2$bailout(5, t1, t6, t5, t3, t2, t4, t7);
    t1.x = t6 - (t4 + t3 * t7);
    t7 = t1.y;
    if (typeof t7 !== "number")
      return this.getTransform$2$bailout(6, t1, 0, t5, 0, t2, 0, t7);
    t3 = t5.col1.y;
    if (typeof t3 !== "number")
      return this.getTransform$2$bailout(7, t1, 0, t5, t3, t2, 0, t7);
    t4 = t2.x;
    if (typeof t4 !== "number")
      return this.getTransform$2$bailout(8, t1, 0, t5, t3, t2, t4, t7);
    t4 = t3 * t4;
    t5 = t5.col2.y;
    if (typeof t5 !== "number")
      return this.getTransform$2$bailout(9, t1, 0, t5, 0, t2, t4, t7);
    t2 = t2.y;
    if (typeof t2 !== "number")
      return this.getTransform$2$bailout(10, t1, 0, t5, 0, t2, t4, t7);
    t1.y = t7 - (t4 + t5 * t2);
  },
  getTransform$2$bailout: function(state0, t1, t6, t5, t3, t2, t4, t7) {
    switch (state0) {
      case 0:
        t1 = xf.position;
        if (typeof alpha !== "number")
          throw $.iae(alpha);
        t2 = 1 - alpha;
        t3 = this.centerZero;
        t4 = t3.x;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t5 = this.center;
        t6 = t5.x;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t1.x = t2 * t4 + alpha * t6;
        t3 = t3.y;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t5 = t5.y;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t1.y = t2 * t3 + alpha * t5;
        t5 = xf.rotation;
        t3 = this.angleZero;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t6 = this.angle;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t5.setAngle$1(t2 * t3 + alpha * t6);
        t6 = t1.x;
      case 1:
        state0 = 0;
        t3 = t5.col1.x;
      case 2:
        state0 = 0;
        t2 = this.localCenter;
        t4 = t2.x;
      case 3:
        state0 = 0;
        t4 = $.$mul$n(t3, t4);
        t3 = t5.col2.x;
      case 4:
        state0 = 0;
        t7 = t2.y;
      case 5:
        state0 = 0;
        t1.x = $.$sub$n(t6, $.$add$ns(t4, $.$mul$n(t3, t7)));
        t7 = t1.y;
      case 6:
        state0 = 0;
        t3 = t5.col1.y;
      case 7:
        state0 = 0;
        t4 = t2.x;
      case 8:
        state0 = 0;
        t4 = $.$mul$n(t3, t4);
        t5 = t5.col2.y;
      case 9:
        state0 = 0;
        t2 = t2.y;
      case 10:
        state0 = 0;
        t1.y = $.$sub$n(t7, $.$add$ns(t4, $.$mul$n(t5, t2)));
    }
  },
  advance$1: function(time) {
    var t1, t2, t3, t4, t5;
    t1 = this.centerZero;
    if (typeof time !== "number")
      throw $.iae(time);
    t2 = 1 - time;
    t3 = t1.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = this.center;
    t5 = t4.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t1.x = t2 * t3 + time * t5;
    t5 = t1.y;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t4 = t4.y;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t1.y = t2 * t5 + time * t4;
    t4 = this.angleZero;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = this.angle;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    this.angleZero = t2 * t4 + time * t5;
  }
},

Transform: {"": "Object;position>,rotation<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.position;
    if (t1.$eq(t1, $.get$position$x(other))) {
      t1 = this.rotation;
      t1 = t1.$eq(t1, other.get$rotation());
    } else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.position;
    t2 = $.get$position$x(other);
    t3 = $.getInterceptor$x(t2);
    t4 = t3.get$x(t2);
    t2 = t3.get$y(t2);
    t1.x = t4;
    t1.y = t2;
    t2 = this.rotation;
    t1 = other.get$rotation();
    t4 = t2.col1;
    t3 = t1.col1;
    t4.setFrom$1;
    t5 = t3.x;
    t3 = t3.y;
    t4.x = t5;
    t4.y = t3;
    t2 = t2.col2;
    t1 = t1.col2;
    t2.setFrom$1;
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
  }
},

Vector: {"": "Object;x*,y*",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = $.getInterceptor$x(other);
    return $.$eq(this.x, t1.get$x(other)) && $.$eq(this.y, t1.get$y(other));
  },
  subLocal$1: function(other) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.subLocal$1$bailout(1, other, t1);
    t2 = other.x;
    if (typeof t2 !== "number")
      return this.subLocal$1$bailout(2, other, t1, t2);
    this.x = t1 - t2;
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.subLocal$1$bailout(3, other, 0, t2);
    t1 = other.y;
    if (typeof t1 !== "number")
      return this.subLocal$1$bailout(4, 0, t1, t2);
    this.y = t2 - t1;
    return this;
  },
  subLocal$1$bailout: function(state0, other, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = other.x;
      case 2:
        state0 = 0;
        this.x = $.$sub$n(t1, t2);
        t2 = this.y;
      case 3:
        state0 = 0;
        t1 = other.y;
      case 4:
        state0 = 0;
        this.y = $.$sub$n(t2, t1);
        return this;
    }
  },
  setCoords$2: function(xCoord, yCoord) {
    this.x = xCoord;
    this.y = yCoord;
    return this;
  },
  setFrom$1: function(v) {
    var t1, t2;
    t1 = $.getInterceptor$x(v);
    t2 = t1.get$x(v);
    t1 = t1.get$y(v);
    this.x = t2;
    this.y = t1;
    return this;
  },
  get$length: function(_) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.get$length$bailout(1, t1);
    t1 *= t1;
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.get$length$bailout(2, t1, t2);
    t2 = t1 + t2 * t2;
    return Math.sqrt(t2);
  },
  get$length$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        t2 = this.y;
      case 2:
        state0 = 0;
        t2 = $.$add$ns(t1, $.$mul$n(t2, t2));
        if (typeof t2 !== "number")
          $.throwExpression(new $.ArgumentError(t2));
        return Math.sqrt(t2);
    }
  },
  get$lengthSquared: function() {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.get$lengthSquared$bailout(1, t1);
    t1 *= t1;
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.get$lengthSquared$bailout(2, t1, t2);
    return t1 + t2 * t2;
  },
  get$lengthSquared$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        t2 = this.y;
      case 2:
        state0 = 0;
        return $.$add$ns(t1, $.$mul$n(t2, t2));
    }
  },
  normalize$0: function() {
    var t1, t2, len, invLength;
    t1 = this.x;
    t1 = $.$mul$n(t1, t1);
    t2 = this.y;
    t2 = $.$add$ns(t1, $.$mul$n(t2, t2));
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    len = Math.sqrt(t2);
    if (len < 1.192e-7)
      return 0;
    invLength = 1 / len;
    this.x = $.$mul$n(this.x, invLength);
    this.y = $.$mul$n(this.y, invLength);
    return len;
  },
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  }
},

Vector3: {"": "Object;x*,y*,z>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isVector3)
      t1 = $.$eq(this.x, other.x) && $.$eq(this.y, other.y) && $.$eq(this.z, other.z);
    else
      t1 = false;
    return t1;
  },
  setFrom$1: function(argVec) {
    var t1 = $.getInterceptor$x(argVec);
    this.x = t1.get$x(argVec);
    this.y = t1.get$y(argVec);
    this.z = t1.get$z(argVec);
    return this;
  },
  add$1: function(_, argVec) {
    var t1 = $.getInterceptor$x(argVec);
    return new $.Vector3($.$add$ns(this.x, t1.get$x(argVec)), $.$add$ns(this.y, t1.get$y(argVec)), $.$add$ns(this.z, t1.get$z(argVec)));
  },
  subLocal$1: function(argVec) {
    this.x = $.$sub$n(this.x, argVec.x);
    this.y = $.$sub$n(this.y, argVec.y);
    this.z = $.$sub$n(this.z, argVec.get$z(argVec));
    return this;
  },
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ", " + $.S(this.z) + ")";
  },
  $isVector3: true
},

Body: {"": "Object;world,flags@,contactList<,sleepTime@,userData@,_linearVelocity,_angularVelocity,mass<,invMass<,next@,prev@,fixtureList<,fixtureCount,jointList@,_force<,_torque@,_inertia,invInertia<,linearDamping<,angularDamping<,_type,islandIndex?,originTransform<,sweep<,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
  createFixture$1: function(def) {
    var fixture, broadPhase, t1, node;
    fixture = $.Fixture$();
    fixture.create$2(this, def);
    if ((this.flags & 32) === 32) {
      broadPhase = this.world._contactManager.broadPhase;
      t1 = fixture.box;
      fixture.shape.computeAxisAlignedBox$2(t1, this.originTransform);
      node = broadPhase._tree.createProxy$2(t1, fixture);
      broadPhase.proxyCount = broadPhase.proxyCount + 1;
      broadPhase.moveBuffer.push(node);
      fixture.proxy = node;
    }
    fixture.next = this.fixtureList;
    this.fixtureList = fixture;
    this.fixtureCount = this.fixtureCount + 1;
    fixture.body = this;
    t1 = fixture.density;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0)
      this.resetMassData$0();
    t1 = this.world;
    t1._flags = (t1._flags | 1) >>> 0;
    return fixture;
  },
  get$position: function(_) {
    return this.originTransform.position;
  },
  get$angle: function() {
    return this.sweep.angle;
  },
  get$worldCenter: function() {
    return this.sweep.center;
  },
  get$localCenter: function() {
    return this.sweep.localCenter;
  },
  get$linearVelocity: function() {
    return this._linearVelocity;
  },
  get$angularVelocity: function() {
    return this._angularVelocity;
  },
  set$angularVelocity: function(w) {
    if (!$.$eq(this._type, 0)) {
      if ($.$gt$n($.$mul$n(w, w), 0))
        this.set$awake(true);
      this._angularVelocity = w;
    }
  },
  get$inertia: function() {
    var t1, t2, t3, t4;
    t1 = this._inertia;
    t2 = this.mass;
    t3 = this.sweep.localCenter;
    t4 = t3.x;
    t4 = $.$mul$n(t4, t4);
    t3 = t3.y;
    t3 = $.$add$ns(t4, $.$mul$n(t3, t3));
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return t1 + t2 * t3;
  },
  getMassData$1: function(data) {
    var lc, t1, t2, t3, t4;
    data.mass = this.mass;
    lc = this.sweep.localCenter;
    t1 = this._inertia;
    t2 = this.mass;
    t3 = lc.x;
    t3 = $.$mul$n(t3, t3);
    t4 = lc.y;
    t4 = $.$add$ns(t3, $.$mul$n(t4, t4));
    if (typeof t4 !== "number")
      throw $.iae(t4);
    data.inertia = t1 + t2 * t4;
    t4 = data.center;
    t4.x = lc.x;
    t4.y = lc.y;
  },
  resetMassData$0: function() {
    var t1, t2, t3, t4, t5, massData, f, t6, temp, t7, tempY;
    this.mass = 0;
    this.invMass = 0;
    this._inertia = 0;
    this.invInertia = 0;
    t1 = this.sweep;
    t2 = t1.localCenter;
    t2.x = 0;
    t2.y = 0;
    if ($.$eq(this._type, 0) || $.$eq(this._type, 1)) {
      t2 = t1.center;
      t3 = this.originTransform.position;
      t4 = t3.x;
      t5 = t3.y;
      t2.x = t4;
      t2.y = t5;
      t1 = t1.centerZero;
      t5 = t3.x;
      t3 = t3.y;
      t1.x = t5;
      t1.y = t3;
      return;
    }
    t3 = this.tempCenter;
    t3.x = 0;
    t3.y = 0;
    massData = this._pmd;
    for (f = this.fixtureList, t4 = massData.center; f != null; f = f.get$next()) {
      if (f.get$density() === 0)
        continue;
      f.getMassData$1(massData);
      t5 = this.mass;
      t6 = massData.mass;
      if (typeof t6 !== "number")
        throw $.iae(t6);
      this.mass = t5 + t6;
      temp = new $.Vector(t4.x, t4.y);
      t6 = massData.mass;
      temp.x = $.$mul$n(temp.x, t6);
      temp.y = $.$mul$n(temp.y, t6);
      t3.x = $.$add$ns(t3.x, temp.x);
      t3.y = $.$add$ns(t3.y, temp.y);
      this._inertia = this._inertia + massData.inertia;
    }
    t4 = this.mass;
    if (t4 > 0) {
      this.invMass = 1 / t4;
      t4 = this.invMass;
      t3.x = $.$mul$n(t3.x, t4);
      t3.y = $.$mul$n(t3.y, t4);
    } else {
      this.mass = 1;
      this.invMass = 1;
    }
    t4 = this._inertia;
    if (t4 > 0 && (this.flags & 16) === 0) {
      t5 = this.mass;
      t6 = t3.x;
      t6 = $.$mul$n(t6, t6);
      t7 = t3.y;
      t7 = $.$add$ns(t6, $.$mul$n(t7, t7));
      if (typeof t7 !== "number")
        throw $.iae(t7);
      this._inertia = t4 - t5 * t7;
      this.invInertia = 1 / this._inertia;
    } else {
      this._inertia = 0;
      this.invInertia = 0;
    }
    t4 = this.oldCenter;
    t5 = t1.center;
    t6 = t5.x;
    t7 = t5.y;
    t4.x = t6;
    t4.y = t7;
    t7 = t3.x;
    t3 = t3.y;
    t2.x = t7;
    t2.y = t3;
    t1 = t1.centerZero;
    $.Transform_mulToOut(this.originTransform, t2, t1);
    t2 = t1.x;
    t1 = t1.y;
    t5.x = t2;
    t5.y = t1;
    temp = new $.Vector(t5.x, t5.y);
    temp.x = $.$sub$n(temp.x, t4.x);
    temp.y = $.$sub$n(temp.y, t4.y);
    t4 = this._angularVelocity;
    t5 = $.getInterceptor$n(t4);
    tempY = t5.$mul(t4, temp.x);
    t4 = t5.$negate(t4);
    t5 = temp.y;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    temp.x = t4 * t5;
    temp.y = tempY;
    t5 = this._linearVelocity;
    t5.x = $.$add$ns(t5.x, temp.x);
    t5.y = $.$add$ns(t5.y, temp.y);
  },
  getWorldPoint$1: function(localPoint) {
    var v = new $.Vector(0, 0);
    $.Transform_mulToOut(this.originTransform, localPoint, v);
    return v;
  },
  getWorldPointToOut$2: function(localPoint, out) {
    $.Transform_mulToOut(this.originTransform, localPoint, out);
  },
  getWorldVector$1: function(localVector) {
    var out = new $.Vector(0, 0);
    $.Matrix22_mulMatrixAndVectorToOut(this.originTransform.rotation, localVector, out);
    return out;
  },
  getWorldVectorToOut$2: function(localVector, out) {
    $.Matrix22_mulMatrixAndVectorToOut(this.originTransform.rotation, localVector, out);
  },
  getLocalPoint$1: function(worldPoint) {
    var out = new $.Vector(0, 0);
    $.Transform_mulTransToOut(this.originTransform, worldPoint, out);
    return out;
  },
  get$type: function(_) {
    return this._type;
  },
  set$type: function(_, otherType) {
    var t1, ce;
    if ($.$eq(this._type, otherType))
      return;
    this._type = otherType;
    this.resetMassData$0();
    if ($.$eq(this._type, 0)) {
      t1 = this._linearVelocity;
      t1.x = 0;
      t1.y = 0;
      this._angularVelocity = 0;
    }
    this.set$awake(true);
    t1 = this._force;
    t1.x = 0;
    t1.y = 0;
    this._torque = 0;
    for (ce = this.contactList; ce != null; ce = ce.get$next())
      ce.get$contact().flagForFiltering$0();
  },
  get$bullet: function() {
    return (this.flags & 8) === 8;
  },
  set$awake: function(flag) {
    var t1;
    if (flag) {
      t1 = this.flags;
      if ((t1 & 2) === 0) {
        this.flags = (t1 | 2) >>> 0;
        this.sleepTime = 0;
      }
    } else {
      this.flags = (this.flags & 4294967293) >>> 0;
      this.sleepTime = 0;
      t1 = this._linearVelocity;
      t1.x = 0;
      t1.y = 0;
      this._angularVelocity = 0;
      t1 = this._force;
      t1.x = 0;
      t1.y = 0;
      this._torque = 0;
    }
  },
  get$awake: function() {
    return (this.flags & 2) === 2;
  },
  get$active: function() {
    return (this.flags & 32) === 32;
  },
  synchronizeFixtures$0: function() {
    var xf1, t1, t2, t3, t4, broadPhase, f;
    xf1 = this._pxf;
    t1 = xf1.rotation;
    t2 = this.sweep;
    t1.setAngle$1(t2.angleZero);
    t3 = xf1.position;
    $.Matrix22_mulMatrixAndVectorToOut(t1, t2.localCenter, t3);
    t1 = t3.x;
    if (typeof t1 !== "number")
      return this.synchronizeFixtures$0$bailout(1, xf1, t1, t2, t3);
    t3.x = t1 * -1;
    t1 = t3.y;
    if (typeof t1 !== "number")
      return this.synchronizeFixtures$0$bailout(2, xf1, t1, t2, t3);
    t3.y = t1 * -1;
    t2 = t2.centerZero;
    t1 = t3.x;
    if (typeof t1 !== "number")
      return this.synchronizeFixtures$0$bailout(3, xf1, t1, t2, t3);
    t4 = t2.x;
    if (typeof t4 !== "number")
      return this.synchronizeFixtures$0$bailout(4, xf1, t1, t2, t3, t4);
    t3.x = t1 + t4;
    t4 = t3.y;
    if (typeof t4 !== "number")
      return this.synchronizeFixtures$0$bailout(5, xf1, 0, t2, t3, t4);
    t2 = t2.y;
    if (typeof t2 !== "number")
      return this.synchronizeFixtures$0$bailout(6, xf1, 0, t2, t3, t4);
    t3.y = t4 + t2;
    broadPhase = this.world._contactManager.broadPhase;
    for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.get$next())
      f.synchronize$3(broadPhase, xf1, t1);
  },
  synchronizeFixtures$0$bailout: function(state0, xf1, t1, t2, t3, t4) {
    switch (state0) {
      case 0:
        xf1 = this._pxf;
        t1 = xf1.rotation;
        t2 = this.sweep;
        t1.setAngle$1(t2.angleZero);
        t3 = xf1.position;
        $.Matrix22_mulMatrixAndVectorToOut(t1, t2.localCenter, t3);
        t1 = t3.x;
      case 1:
        state0 = 0;
        t3.x = $.$mul$n(t1, -1);
        t1 = t3.y;
      case 2:
        state0 = 0;
        t3.y = $.$mul$n(t1, -1);
        t2 = t2.centerZero;
        t1 = t3.x;
      case 3:
        state0 = 0;
        t4 = t2.x;
      case 4:
        state0 = 0;
        t3.x = $.$add$ns(t1, t4);
        t4 = t3.y;
      case 5:
        state0 = 0;
        t2 = t2.y;
      case 6:
        var broadPhase, f;
        state0 = 0;
        t3.y = $.$add$ns(t4, t2);
        broadPhase = this.world._contactManager.broadPhase;
        for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.get$next())
          f.synchronize$3(broadPhase, xf1, t1);
    }
  },
  synchronizeTransform$0: function() {
    var t1, t2, c, s, t, r, p;
    t1 = this.sweep;
    t2 = t1.angle;
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    c = Math.cos(t2);
    t2 = t1.angle;
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    s = Math.sin(t2);
    t = this.originTransform;
    r = t.rotation;
    p = t.position;
    r.col1.x = c;
    r.col2.x = -s;
    r.col1.y = s;
    r.col2.y = c;
    t2 = t1.localCenter;
    t1 = t1.center;
    p.x = $.$add$ns($.$mul$n($.$add$ns($.$mul$n(r.col1.x, t2.x), $.$mul$n(r.col2.x, t2.y)), -1), t1.x);
    p.y = $.$add$ns($.$mul$n($.$add$ns($.$mul$n(r.col1.y, t2.x), $.$mul$n(r.col2.y, t2.y)), -1), t1.y);
  },
  advance$1: function(t) {
    var t1, t2, t3, t4;
    t1 = this.sweep;
    t1.advance$1(t);
    t2 = t1.center;
    t3 = t1.centerZero;
    t4 = t3.x;
    t3 = t3.y;
    t2.x = t4;
    t2.y = t3;
    t1.angle = t1.angleZero;
    this.synchronizeTransform$0();
  },
  Body$2: function(bd, world) {
    var t1, t2, t3, t4;
    if (bd.bullet)
      this.flags = (this.flags | 8) >>> 0;
    if (bd.fixedRotation)
      this.flags = (this.flags | 16) >>> 0;
    if (bd.allowSleep)
      this.flags = (this.flags | 4) >>> 0;
    if (bd.awake)
      this.flags = (this.flags | 2) >>> 0;
    if (bd.active)
      this.flags = (this.flags | 32) >>> 0;
    t1 = this.originTransform;
    t2 = t1.position;
    t3 = bd.position;
    t4 = t3.x;
    t3 = t3.y;
    t2.x = t4;
    t2.y = t3;
    t1.rotation.setAngle$1(bd.angle);
    t3 = this.sweep;
    t2 = t3.localCenter;
    t2.x = 0;
    t2.y = 0;
    t4 = t3.centerZero;
    $.Transform_mulToOut(t1, t2, t4);
    t2 = t3.center;
    t1 = t4.x;
    t4 = t4.y;
    t2.x = t1;
    t2.y = t4;
    t3.angle = bd.angle;
    t3.angleZero = bd.angle;
    if ($.$eq(this._type, 2)) {
      this.mass = 1;
      this.invMass = 1;
    } else {
      this.mass = 0;
      this.invMass = 0;
    }
  }
},

BodyDef: {"": "Object;type*,angle<,userData@,position>,linearVelocity<,angularVelocity@,fixedRotation,isSleeping,bullet<,allowSleep,linearDamping<,angularDamping<,awake@,active<"},

ContactManager: {"": "Object;broadPhase,contactList<,contactCount,contactFilter,contactListener,pool",
  addPair$2: function(fixtureA, fixtureB) {
    var bodyA, bodyB, edge, t1, fA, fB, c;
    bodyA = fixtureA.body;
    bodyB = fixtureB.body;
    if (bodyA == null ? bodyB == null : bodyA === bodyB)
      return;
    edge = bodyB.contactList;
    for (; edge != null;) {
      if ($.$eq(edge.get$other(), bodyA)) {
        t1 = edge.get$contact();
        fA = t1.get$fixtureA();
        fB = t1.get$fixtureB();
        if ((fA == null ? fixtureA == null : fA === fixtureA) && (fB == null ? fixtureB == null : fB === fixtureB))
          return;
        if ((fA == null ? fixtureB == null : fA === fixtureB) && (fB == null ? fixtureA == null : fB === fixtureA))
          return;
      }
      edge = edge.get$next();
    }
    bodyB.shouldCollide$1;
    t1 = bodyB._type;
    if (typeof t1 !== "number")
      return this.addPair$2$bailout(1, fixtureA, fixtureB, bodyA, t1);
    if (t1 !== 2) {
      t1 = bodyA._type;
      if (typeof t1 !== "number")
        return this.addPair$2$bailout(2, fixtureA, fixtureB, 0, t1);
      t1 = t1 !== 2;
    } else
      t1 = false;
    if (t1)
      return;
    if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
      return;
    c = this.pool.popContact$2(fixtureA, fixtureB);
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = fixtureA.body;
    bodyB = fixtureB.body;
    c.set$prev(null);
    c.set$next(this.contactList);
    t1 = this.contactList;
    if (t1 != null)
      t1.set$prev(c);
    this.contactList = c;
    c.get$edge1().contact = c;
    c.get$edge1().other = bodyB;
    c.get$edge1().prev = null;
    c.get$edge1().next = bodyA.contactList;
    t1 = bodyA.contactList;
    if (t1 != null)
      t1.set$prev(c.get$edge1());
    bodyA.contactList = c.get$edge1();
    c.get$edge2().contact = c;
    c.get$edge2().other = bodyA;
    c.get$edge2().prev = null;
    c.get$edge2().next = bodyB.contactList;
    t1 = bodyB.contactList;
    if (t1 != null)
      t1.set$prev(c.get$edge2());
    bodyB.contactList = c.get$edge2();
    this.contactCount = this.contactCount + 1;
  },
  addPair$2$bailout: function(state0, fixtureA, fixtureB, bodyA, t1) {
    switch (state0) {
      case 0:
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        if (bodyA == null ? bodyB == null : bodyA === bodyB)
          return;
        edge = bodyB.contactList;
        for (; edge != null;) {
          if ($.$eq(edge.get$other(), bodyA)) {
            t1 = edge.get$contact();
            fA = t1.get$fixtureA();
            fB = t1.get$fixtureB();
            if ((fA == null ? fixtureA == null : fA === fixtureA) && (fB == null ? fixtureB == null : fB === fixtureB))
              return;
            if ((fA == null ? fixtureB == null : fA === fixtureB) && (fB == null ? fixtureA == null : fB === fixtureA))
              return;
          }
          edge = edge.get$next();
        }
        bodyB.shouldCollide$1;
        t1 = bodyB._type;
      case 1:
        state0 = 0;
      case 2:
        var bodyB, edge, fA, fB, c;
        if (state0 === 2 || state0 === 0 && !$.$eq(t1, 2))
          switch (state0) {
            case 0:
              t1 = bodyA._type;
            case 2:
              state0 = 0;
              t1 = !$.$eq(t1, 2);
          }
        else
          t1 = false;
        if (t1)
          return;
        if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
          return;
        c = this.pool.popContact$2(fixtureA, fixtureB);
        fixtureA = c.get$fixtureA();
        fixtureB = c.get$fixtureB();
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        c.set$prev(null);
        c.set$next(this.contactList);
        t1 = this.contactList;
        if (t1 != null)
          t1.set$prev(c);
        this.contactList = c;
        c.get$edge1().contact = c;
        c.get$edge1().other = bodyB;
        c.get$edge1().prev = null;
        c.get$edge1().next = bodyA.contactList;
        t1 = bodyA.contactList;
        if (t1 != null)
          t1.set$prev(c.get$edge1());
        bodyA.contactList = c.get$edge1();
        c.get$edge2().contact = c;
        c.get$edge2().other = bodyA;
        c.get$edge2().prev = null;
        c.get$edge2().next = bodyB.contactList;
        t1 = bodyB.contactList;
        if (t1 != null)
          t1.set$prev(c.get$edge2());
        bodyB.contactList = c.get$edge2();
        this.contactCount = this.contactCount + 1;
    }
  },
  destroy$1: function(c) {
    var fixtureA, fixtureB, bodyA, bodyB, t1, t2;
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = fixtureA.body;
    bodyB = fixtureB.body;
    t1 = this.contactListener;
    if (t1 != null && c.get$touching())
      t1.endContact$1(c);
    t1 = c.get$prev();
    if (t1 != null)
      t1.set$next(c.get$next());
    t1 = c.get$next();
    if (t1 != null)
      t1.set$prev(c.get$prev());
    if ($.$eq(c, this.contactList))
      this.contactList = c.get$next();
    t1 = c.get$edge1();
    t2 = t1.prev;
    if (t2 != null)
      t2.set$next(t1.next);
    t1 = c.get$edge1();
    t2 = t1.next;
    if (t2 != null)
      t2.set$prev(t1.prev);
    t1 = c.get$edge1();
    if (t1 === bodyA.contactList)
      bodyA.contactList = t1.next;
    t1 = c.get$edge2();
    t2 = t1.prev;
    if (t2 != null)
      t2.set$next(t1.next);
    t1 = c.get$edge2();
    t2 = t1.next;
    if (t2 != null)
      t2.set$prev(t1.prev);
    t1 = c.get$edge2();
    if (t1 === bodyB.contactList)
      bodyB.contactList = t1.next;
    this.pool.pushContact$1(c);
    this.contactCount = this.contactCount - 1;
  },
  collide$0: function() {
    var c, t1, t2, fixtureA, fixtureB, bodyA, bodyB, t3, c0, proxyIdA, proxyIdB;
    c = this.contactList;
    for (t1 = this.contactFilter, t2 = this.contactListener; c != null;) {
      fixtureA = c.get$fixtureA();
      fixtureB = c.get$fixtureB();
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      bodyA.get$awake;
      if ((bodyA.flags & 2) !== 2) {
        bodyB.get$awake;
        t3 = (bodyB.flags & 2) !== 2;
      } else
        t3 = false;
      if (t3) {
        c = c.get$next();
        continue;
      }
      if ($.$and$n(c.get$flags(), 8) === 8) {
        bodyB.shouldCollide$1;
        if (!$.$eq(bodyB._type, 2) && !$.$eq(bodyA._type, 2)) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        if (!t1.shouldCollide$2(fixtureA, fixtureB)) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        c.set$flags($.$and$n(c.get$flags(), 4294967287));
      }
      proxyIdA = fixtureA.proxy;
      proxyIdB = fixtureB.proxy;
      if (!$.AxisAlignedBox_testOverlap(proxyIdA.get$box(), proxyIdB.get$box())) {
        c0 = c.get$next();
        this.destroy$1(c);
        c = c0;
        continue;
      }
      c.update$1(t2);
      c = c.get$next();
    }
  }
},

Filter: {"": "Object;categoryBits<,maskBits<,groupIndex<",
  setFrom$1: function(other) {
    this.categoryBits = other.get$categoryBits();
    this.maskBits = other.get$maskBits();
    this.groupIndex = other.get$groupIndex();
  }
},

Fixture: {"": "Object;box<,density<,next@,body,shape>,friction@,restitution@,proxy<,filter,isSensor,userData@,_poolOne,_poolTwo",
  create$2: function(b, def) {
    var t1, t2;
    this.userData = def.userData;
    this.friction = def.friction;
    this.restitution = def.restitution;
    this.body = b;
    this.next = null;
    t1 = this.filter;
    t2 = def.filter;
    t1.categoryBits = t2.categoryBits;
    t1.maskBits = t2.maskBits;
    t1.groupIndex = t2.groupIndex;
    this.isSensor = def.isSensor;
    t2 = def.shape;
    this.shape = t2.clone$0(t2);
    this.density = def.density;
  },
  synchronize$3: function(broadPhase, transformOne, transformTwo) {
    var t1, t2, t3, t4, t5, t6, disp;
    if (this.proxy == null)
      return;
    t1 = this._poolOne;
    this.shape.computeAxisAlignedBox$2(t1, transformOne);
    t2 = this._poolTwo;
    this.shape.computeAxisAlignedBox$2(t2, transformTwo);
    t3 = this.box;
    t4 = t3.lowerBound;
    t5 = t1.lowerBound.x;
    if (typeof t5 !== "number")
      return this.synchronize$3$bailout(1, broadPhase, transformOne, transformTwo, t2, t3, t4, t1, t5);
    t6 = t2.lowerBound.x;
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(2, broadPhase, transformOne, transformTwo, t2, t3, t4, t1, t5, t6);
    if (t5 < t6)
      ;
    else
      t5 = t6;
    t4.x = t5;
    t5 = t3.lowerBound;
    t4 = t1.lowerBound.y;
    if (typeof t4 !== "number")
      return this.synchronize$3$bailout(3, broadPhase, transformOne, transformTwo, t2, t3, t5, t1, t4);
    t6 = t2.lowerBound.y;
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(4, broadPhase, transformOne, transformTwo, t2, t3, t5, t1, t4, t6);
    if (t4 < t6)
      ;
    else
      t4 = t6;
    t5.y = t4;
    t4 = t3.upperBound;
    t5 = t1.upperBound.x;
    if (typeof t5 !== "number")
      return this.synchronize$3$bailout(5, broadPhase, transformOne, transformTwo, t2, t3, t4, t1, t5);
    t6 = t2.upperBound.x;
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(6, broadPhase, transformOne, transformTwo, t2, t3, t4, t1, t5, t6);
    if (t5 > t6)
      ;
    else
      t5 = t6;
    t4.x = t5;
    t5 = t3.upperBound;
    t4 = t1.upperBound.y;
    if (typeof t4 !== "number")
      return this.synchronize$3$bailout(7, broadPhase, transformOne, transformTwo, t2, t3, t5, t1, t4);
    t2 = t2.upperBound.y;
    if (typeof t2 !== "number")
      return this.synchronize$3$bailout(8, broadPhase, transformOne, transformTwo, t2, t3, t5, t1, t4);
    if (t4 > t2)
      t2 = t4;
    t5.y = t2;
    disp = t1.lowerBound;
    t1 = transformTwo.position;
    t2 = t1.x;
    if (typeof t2 !== "number")
      return this.synchronize$3$bailout(9, broadPhase, transformOne, 0, t2, t3, 0, t1, 0, 0, disp);
    t5 = transformOne.position;
    t4 = t5.x;
    if (typeof t4 !== "number")
      return this.synchronize$3$bailout(10, broadPhase, 0, 0, t2, t3, t5, t1, t4, 0, disp);
    disp.x = t2 - t4;
    t1 = t1.y;
    if (typeof t1 !== "number")
      return this.synchronize$3$bailout(11, broadPhase, 0, 0, 0, t3, t5, t1, 0, 0, disp);
    t5 = t5.y;
    if (typeof t5 !== "number")
      return this.synchronize$3$bailout(12, broadPhase, 0, 0, 0, t3, t5, t1, 0, 0, disp);
    disp.y = t1 - t5;
    t5 = this.proxy;
    if (broadPhase._tree.moveProxy$3(t5, t3, disp))
      broadPhase.moveBuffer.push(t5);
  },
  synchronize$3$bailout: function(state0, broadPhase, transformOne, transformTwo, t2, t3, t4, t1, t5, t6, disp) {
    switch (state0) {
      case 0:
        if (this.proxy == null)
          return;
        t1 = this._poolOne;
        this.shape.computeAxisAlignedBox$2(t1, transformOne);
        t2 = this._poolTwo;
        this.shape.computeAxisAlignedBox$2(t2, transformTwo);
        t3 = this.box;
        t4 = t3.lowerBound;
        t5 = t1.lowerBound.x;
      case 1:
        state0 = 0;
        t6 = t2.lowerBound.x;
      case 2:
        state0 = 0;
        t4.x = $.$lt$n(t5, t6) ? t5 : t6;
        t4 = t3.lowerBound;
        t5 = t1.lowerBound.y;
      case 3:
        state0 = 0;
        t6 = t2.lowerBound.y;
      case 4:
        state0 = 0;
        t4.y = $.$lt$n(t5, t6) ? t5 : t6;
        t4 = t3.upperBound;
        t5 = t1.upperBound.x;
      case 5:
        state0 = 0;
        t6 = t2.upperBound.x;
      case 6:
        state0 = 0;
        t4.x = $.$gt$n(t5, t6) ? t5 : t6;
        t4 = t3.upperBound;
        t5 = t1.upperBound.y;
      case 7:
        state0 = 0;
        t2 = t2.upperBound.y;
      case 8:
        state0 = 0;
        t4.y = $.$gt$n(t5, t2) ? t5 : t2;
        disp = t1.lowerBound;
        t1 = transformTwo.position;
        t2 = t1.x;
      case 9:
        state0 = 0;
        t4 = transformOne.position;
        t5 = t4.x;
      case 10:
        state0 = 0;
        disp.x = $.$sub$n(t2, t5);
        t1 = t1.y;
      case 11:
        state0 = 0;
        t4 = t4.y;
      case 12:
        state0 = 0;
        disp.y = $.$sub$n(t1, t4);
        t4 = this.proxy;
        if (broadPhase._tree.moveProxy$3(t4, t3, disp))
          broadPhase.moveBuffer.push(t4);
    }
  },
  getMassData$1: function(massData) {
    this.shape.computeMass$2(massData, this.density);
  },
  get$type: function(_) {
    return this.shape.type;
  }
},

FixtureDef: {"": "Object;shape>,userData@,friction@,restitution@,density<,isSensor,filter",
  FixtureDef$0: function() {
    var t1 = this.filter;
    t1.categoryBits = 1;
    t1.maskBits = 65535;
    t1.groupIndex = 0;
  }
},

Island: {"": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
  init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
    var t1, old, t2, i;
    this.bodyCapacity = argBodyCapacity;
    this.contactCapacity = argContactCapacity;
    this.jointCapacity = argJointCapacity;
    this.bodyCount = 0;
    this.contactCount = 0;
    this.listener = argListener;
    t1 = this.bodies;
    if (t1 == null || $.$gt$n(this.bodyCapacity, t1.length))
      this.bodies = $.List_List(this.bodyCapacity);
    t1 = this.contacts;
    if (t1 == null || $.$gt$n(this.contactCapacity, t1.length))
      this.contacts = $.List_List(this.contactCapacity);
    t1 = this.joints;
    if (t1 == null || $.$gt$n(this.jointCapacity, t1.length))
      this.joints = $.List_List(this.jointCapacity);
    old = this.velocities;
    t1 = old == null;
    if (t1 || $.$gt$n(this.bodyCapacity, old.length)) {
      if (t1)
        old = $.List_List(0);
      this.velocities = $.List_List(this.bodyCapacity);
      t1 = this.velocities;
      t2 = old.length;
      t1.setRange$4;
      if (!!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, t2, old, 0);
      for (i = old.length; t1 = this.velocities, i < t1.length; ++i) {
        t2 = new $.Velocity(null, null);
        t2.v = new $.Vector(0, 0);
        t2.a = 0;
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    old = this.positions;
    t1 = old == null;
    if (t1 || $.$gt$n(this.bodyCapacity, old.length)) {
      if (t1)
        old = $.List_List(0);
      this.positions = $.List_List(this.bodyCapacity);
      t1 = this.positions;
      t2 = old.length;
      t1.setRange$4;
      if (!!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, t2, old, 0);
      for (i = old.length; t1 = this.positions, i < t1.length; ++i) {
        t2 = new $.Position(null, null);
        t2.x = new $.Vector(0, 0);
        t2.a = 0;
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
  },
  solve$3: function(step, gravity, allowSleep) {
    var i, t1, b, t2, t3, t4, t5, velocityDelta, a, a1, a2, b1, i1, i2, fixtureA, fixtureB, bodyA, bodyB, nonStatic, temp, j, ratio, rotation, t6, contactsOkay, jointsOkay, jointOkay, minSleepTime;
    i = 0;
    while (true) {
      t1 = this.bodyCount;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      c$0: {
        t1 = this.bodies;
        if (i >= t1.length)
          throw $.ioore(i);
        b = t1[i];
        t1 = $.get$type$x(b);
        if (typeof t1 !== "number")
          return this.solve$3$bailout(1, step, b, gravity, i, allowSleep, t1);
        if (t1 !== 2)
          break c$0;
        t1 = b.get$_force();
        t2 = t1.x;
        if (typeof t2 !== "number")
          return this.solve$3$bailout(2, step, b, gravity, i, allowSleep, t1, t2);
        t3 = b.get$invMass();
        t2 *= t3;
        t4 = gravity.x;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(3, step, b, gravity, i, allowSleep, t1, t2, t3, t4);
        t5 = step.dt;
        t4 = (t2 + t4) * t5;
        t1 = t1.y;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(4, step, b, gravity, i, allowSleep, t1, t5, t3, t4);
        t3 = t1 * t3;
        t1 = gravity.y;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(5, step, b, gravity, i, allowSleep, t1, t5, t3, t4);
        velocityDelta = new $.Vector(t4, (t3 + t1) * t5);
        t5 = b.get$linearVelocity();
        t1 = t5.x;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(6, step, b, gravity, i, allowSleep, t1, t5, 0, 0, velocityDelta);
        t3 = velocityDelta.x;
        if (typeof t3 !== "number")
          return this.solve$3$bailout(7, step, b, gravity, i, allowSleep, t1, t5, t3, 0, velocityDelta);
        t5.x = t1 + t3;
        t3 = t5.y;
        if (typeof t3 !== "number")
          return this.solve$3$bailout(8, step, b, gravity, i, allowSleep, 0, t5, t3, 0, velocityDelta);
        t1 = velocityDelta.y;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(9, step, b, gravity, i, allowSleep, t1, t5, t3);
        t5.y = t3 + t1;
        t1 = b.get$angularVelocity();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(10, step, b, gravity, i, allowSleep, t1);
        b.set$angularVelocity(t1 + step.dt * b.get$invInertia() * b.get$_torque());
        a = 1 - step.dt * b.get$linearDamping();
        t1 = a < 1;
        if (0 > (t1 ? a : 1))
          a1 = 0;
        else
          a1 = t1 ? a : 1;
        t1 = b.get$linearVelocity();
        t2 = t1.x;
        if (typeof t2 !== "number")
          return this.solve$3$bailout(11, step, b, gravity, i, allowSleep, t1, t2, 0, 0, 0, a1);
        t1.x = t2 * a1;
        t2 = t1.y;
        if (typeof t2 !== "number")
          return this.solve$3$bailout(12, step, b, gravity, i, allowSleep, t1, t2, 0, 0, 0, a1);
        t1.y = t2 * a1;
        a2 = 1 - step.dt * b.get$angularDamping();
        b1 = a2 < 1 ? a2 : 1;
        t1 = b.get$angularVelocity();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(13, step, b, gravity, i, allowSleep, t1, 0, 0, 0, 0, 0, b1);
        b.set$angularVelocity(t1 * (0 > b1 ? 0 : b1));
      }
      ++i;
    }
    t1 = this.contacts;
    i1 = -1;
    i2 = 0;
    while (true) {
      t2 = this.contactCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i2 < t2))
        break;
      t2 = t1.length;
      if (i2 >= t2)
        throw $.ioore(i2);
      t3 = t1[i2];
      fixtureA = t3.get$fixtureA();
      fixtureB = t3.get$fixtureB();
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      bodyA.get$type;
      t4 = bodyA._type;
      if (typeof t4 !== "number")
        return this.solve$3$bailout(14, step, 0, 0, 0, allowSleep, t4, 0, 0, 0, 0, 0, 0, i1, bodyB, i2);
      if (t4 !== 0) {
        bodyB.get$type;
        t4 = bodyB._type;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(15, step, 0, 0, 0, allowSleep, t4, 0, 0, 0, 0, 0, 0, i1, 0, i2);
        nonStatic = t4 !== 0;
      } else
        nonStatic = false;
      if (nonStatic) {
        ++i1;
        if (i1 >= t2)
          throw $.ioore(i1);
        temp = t1[i1];
        t1[i1] = t3;
        t1[i2] = temp;
      }
      ++i2;
    }
    t3 = this._contactSolver;
    t3.init$3(t1, t2, step.dtRatio);
    t3.warmStart$0();
    i = 0;
    while (true) {
      t1 = this.jointCount;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.joints;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].initVelocityConstraints$1(step);
      ++i;
    }
    for (i = 0; i < step.velocityIterations; ++i) {
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (j >= t1.length)
          throw $.ioore(j);
        t1[j].solveVelocityConstraints$1(step);
        ++j;
      }
      t3.solveVelocityConstraints$0();
    }
    t3.storeImpulses$0();
    temp = new $.Vector(0, 0);
    t1 = this._translation;
    i = 0;
    while (true) {
      t2 = this.bodyCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      c$0: {
        t2 = this.bodies;
        if (i >= t2.length)
          throw $.ioore(i);
        b = t2[i];
        t2 = $.get$type$x(b);
        if (typeof t2 !== "number")
          return this.solve$3$bailout(16, step, b, 0, i, allowSleep, t1, t3, t2, 0, 0, 0, 0, 0, 0, 0, temp);
        if (t2 === 0)
          break c$0;
        t2 = b.get$linearVelocity();
        t4 = t2.x;
        t2 = t2.y;
        t1.x = t4;
        t1.y = t2;
        t2 = step.dt;
        t4 = t1.x;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(17, step, b, 0, i, allowSleep, t1, t3, t2, t4, 0, 0, 0, 0, 0, 0, temp);
        t1.x = t4 * t2;
        t4 = t1.y;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(18, step, b, 0, i, allowSleep, t1, t3, t2, t4, 0, 0, 0, 0, 0, 0, temp);
        t1.y = t4 * t2;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return this.solve$3$bailout(19, step, b, 0, i, allowSleep, t1, t3, t2, 0, 0, 0, 0, 0, 0, 0, temp);
        t4 = t2 * t2;
        t5 = t1.y;
        if (typeof t5 !== "number")
          return this.solve$3$bailout(20, step, b, 0, i, allowSleep, t1, t3, t2, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, temp, t4, t5);
        t5 = t4 + t5 * t5;
        if (t5 > 4) {
          ratio = 2 / Math.sqrt(t5);
          t2 = b.get$linearVelocity();
          t4 = t2.x;
          if (typeof t4 !== "number")
            return this.solve$3$bailout(21, step, b, 0, i, allowSleep, t1, t3, t2, t4, 0, 0, 0, 0, 0, 0, temp, 0, 0, ratio);
          t2.x = t4 * ratio;
          t4 = t2.y;
          if (typeof t4 !== "number")
            return this.solve$3$bailout(22, step, b, 0, i, allowSleep, t1, t3, t2, t4, 0, 0, 0, 0, 0, 0, temp, 0, 0, ratio);
          t2.y = t4 * ratio;
        }
        t2 = step.dt;
        t4 = b.get$angularVelocity();
        if (typeof t4 !== "number")
          throw $.iae(t4);
        rotation = t2 * t4;
        if (rotation * rotation > 2.4674011002723395) {
          ratio = 1.5707963267948966 / Math.abs(rotation);
          t2 = b.get$angularVelocity();
          if (typeof t2 !== "number")
            return this.solve$3$bailout(23, step, b, 0, i, allowSleep, t1, t3, t2, 0, 0, 0, 0, 0, 0, 0, temp, 0, 0, ratio);
          b.set$angularVelocity(t2 * ratio);
        }
        t2 = b.get$sweep();
        t4 = t2.centerZero;
        t2 = t2.center;
        t5 = t2.x;
        t2 = t2.y;
        t4.x = t5;
        t4.y = t2;
        t2 = b.get$sweep();
        t2.angleZero = t2.angle;
        t2 = b.get$linearVelocity();
        t4 = t2.x;
        t2 = t2.y;
        temp.x = t4;
        temp.y = t2;
        t2 = step.dt;
        t4 = temp.x;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(24, step, b, 0, i, allowSleep, t1, t3, t2, t4, 0, 0, 0, 0, 0, 0, temp);
        temp.x = t4 * t2;
        t4 = temp.y;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(25, step, b, 0, i, allowSleep, t1, t3, t2, t4, 0, 0, 0, 0, 0, 0, temp);
        temp.y = t4 * t2;
        t2 = b.get$sweep().center;
        t4 = t2.x;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(26, step, b, 0, i, allowSleep, t1, t3, t2, t4, 0, 0, 0, 0, 0, 0, temp);
        t5 = temp.x;
        if (typeof t5 !== "number")
          return this.solve$3$bailout(27, step, b, 0, i, allowSleep, t1, t3, t2, t4, 0, 0, 0, 0, 0, 0, temp, t5);
        t2.x = t4 + t5;
        t5 = t2.y;
        if (typeof t5 !== "number")
          return this.solve$3$bailout(28, step, b, 0, i, allowSleep, t1, t3, t2, 0, 0, 0, 0, 0, 0, 0, temp, t5);
        t4 = temp.y;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(29, step, b, 0, i, allowSleep, t1, t3, t2, t4, 0, 0, 0, 0, 0, 0, temp, t5);
        t2.y = t5 + t4;
        t4 = b.get$sweep();
        t5 = t4.angle;
        if (typeof t5 !== "number")
          return this.solve$3$bailout(30, step, b, 0, i, allowSleep, t1, t3, 0, t4, 0, 0, 0, 0, 0, 0, temp, t5);
        t2 = step.dt;
        t6 = b.get$angularVelocity();
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t4.angle = t5 + t2 * t6;
        b.synchronizeTransform$0();
      }
      ++i;
    }
    for (i = 0; i < step.positionIterations; ++i) {
      contactsOkay = t3.solvePositionConstraints$1(0.2);
      jointsOkay = true;
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (j >= t1.length)
          throw $.ioore(j);
        jointOkay = t1[j].solvePositionConstraints$1(0.2);
        jointsOkay = jointsOkay && jointOkay === true;
        ++j;
      }
      if (contactsOkay && jointsOkay)
        break;
    }
    this.report$1(t3.constraints);
    if (allowSleep) {
      minSleepTime = 99999999999999;
      i = 0;
      while (true) {
        t1 = this.bodyCount;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        if (!(i < t1))
          break;
        c$0: {
          t1 = this.bodies;
          if (i >= t1.length)
            throw $.ioore(i);
          b = t1[i];
          t1 = $.get$type$x(b);
          if (typeof t1 !== "number")
            return this.solve$3$bailout(31, step, b, 0, i, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if (t1 === 0)
            break c$0;
          t1 = b.get$flags();
          if (t1 !== (t1 | 0))
            return this.solve$3$bailout(32, step, b, 0, i, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) === 0) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          }
          t1 = b.get$flags();
          if (t1 !== (t1 | 0))
            return this.solve$3$bailout(34, step, b, 0, i, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) !== 0) {
            t1 = b.get$angularVelocity();
            if (typeof t1 !== "number")
              return this.solve$3$bailout(35, step, b, 0, i, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            t2 = b.get$angularVelocity();
            if (typeof t2 !== "number")
              return this.solve$3$bailout(36, step, b, 0, i, 0, t1, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            if (!(t1 * t2 > 0.0012184696791468343)) {
              t1 = b.get$linearVelocity();
              t2 = b.get$linearVelocity();
              t3 = t1.x;
              if (typeof t3 !== "number")
                return this.solve$3$bailout(37, step, b, 0, i, 0, t1, t2, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
              t4 = t2.x;
              if (typeof t4 !== "number")
                return this.solve$3$bailout(38, step, b, 0, i, 0, t1, t2, t3, t4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
              t4 = t3 * t4;
              t1 = t1.y;
              if (typeof t1 !== "number")
                return this.solve$3$bailout(39, step, b, 0, i, 0, t1, t2, 0, t4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
              t2 = t2.y;
              if (typeof t2 !== "number")
                return this.solve$3$bailout(40, step, b, 0, i, 0, t1, t2, 0, t4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
              t2 = t4 + t1 * t2 > 0.0001;
              t1 = t2;
            } else
              t1 = true;
          } else
            t1 = true;
          if (t1) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          } else {
            b.set$sleepTime(b.get$sleepTime() + step.dt);
            minSleepTime = $.min(minSleepTime, b.get$sleepTime());
          }
        }
        ++i;
      }
      if (minSleepTime >= 0.5) {
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (typeof t1 !== "number")
            throw $.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.bodies;
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].set$awake(false);
          ++i;
        }
      }
    }
  },
  solve$3$bailout: function(state0, step, b, gravity, i, allowSleep, t1, t2, t3, t4, velocityDelta, a1, b1, i1, bodyB, i2, temp, t5, t6, ratio, minSleepTime) {
    switch (state0) {
      case 0:
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.bodyCount;
                if (typeof t1 !== "number")
                  throw $.iae(t1);
                if (!$.JSNumber_methods.$lt(i, t1))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t1 = this.bodies;
                      if (i >= t1.length)
                        throw $.ioore(i);
                      b = t1[i];
                      t1 = $.get$type$x(b);
                    case 1:
                      state0 = 0;
                      if (!$.$eq(t1, 2))
                        break c$0;
                      t1 = b.get$_force();
                      t2 = t1.x;
                    case 2:
                      state0 = 0;
                      t3 = b.get$invMass();
                      t2 = $.$mul$n(t2, t3);
                      t4 = gravity.x;
                    case 3:
                      state0 = 0;
                      t4 = $.$add$ns(t2, t4);
                      t2 = step.dt;
                      t4 = $.$mul$n(t4, t2);
                      t1 = t1.y;
                    case 4:
                      state0 = 0;
                      t3 = $.$mul$n(t1, t3);
                      t1 = gravity.y;
                    case 5:
                      state0 = 0;
                      velocityDelta = new $.Vector(t4, $.$mul$n($.$add$ns(t3, t1), t2));
                      t2 = b.get$linearVelocity();
                      t1 = t2.x;
                    case 6:
                      state0 = 0;
                      t3 = velocityDelta.x;
                    case 7:
                      state0 = 0;
                      t2.x = $.$add$ns(t1, t3);
                      t3 = t2.y;
                    case 8:
                      state0 = 0;
                      t1 = velocityDelta.y;
                    case 9:
                      state0 = 0;
                      t2.y = $.$add$ns(t3, t1);
                      t1 = b.get$angularVelocity();
                    case 10:
                      state0 = 0;
                      b.set$angularVelocity($.$add$ns(t1, step.dt * b.get$invInertia() * b.get$_torque()));
                      a = 1 - step.dt * b.get$linearDamping();
                      t1 = a < 1;
                      if (0 > (t1 ? a : 1))
                        a1 = 0;
                      else
                        a1 = t1 ? a : 1;
                      t1 = b.get$linearVelocity();
                      t2 = t1.x;
                    case 11:
                      state0 = 0;
                      t1.x = $.$mul$n(t2, a1);
                      t2 = t1.y;
                    case 12:
                      state0 = 0;
                      t1.y = $.$mul$n(t2, a1);
                      a2 = 1 - step.dt * b.get$angularDamping();
                      b1 = a2 < 1 ? a2 : 1;
                      t1 = b.get$angularVelocity();
                    case 13:
                      state0 = 0;
                      b.set$angularVelocity($.$mul$n(t1, 0 > b1 ? 0 : b1));
                  }
                }
                ++i;
            }
        i1 = -1;
        i2 = 0;
      case 14:
      case 15:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.contactCount;
                if (typeof t1 !== "number")
                  throw $.iae(t1);
                t2 = $.JSNumber_methods.$lt(i2, t1);
                t3 = this.contacts;
                if (!t2)
                  break L1;
                if (i2 >= t3.length)
                  throw $.ioore(i2);
                t1 = t3[i2];
                fixtureA = t1.get$fixtureA();
                fixtureB = t1.get$fixtureB();
                bodyA = fixtureA.body;
                bodyB = fixtureB.body;
                bodyA.get$type;
                t1 = bodyA._type;
              case 14:
                state0 = 0;
              case 15:
                if (state0 === 15 || state0 === 0 && !$.$eq(t1, 0))
                  switch (state0) {
                    case 0:
                      bodyB.get$type;
                      t1 = bodyB._type;
                    case 15:
                      state0 = 0;
                      nonStatic = !$.$eq(t1, 0);
                  }
                else
                  nonStatic = false;
                if (nonStatic) {
                  ++i1;
                  t1 = this.contacts;
                  t2 = t1.length;
                  if (i1 >= t2)
                    throw $.ioore(i1);
                  temp = t1[i1];
                  if (i2 >= t2)
                    throw $.ioore(i2);
                  t1[i1] = t1[i2];
                  t1[i2] = temp;
                }
                ++i2;
            }
        t2 = this._contactSolver;
        t2.init$3(t3, t1, step.dtRatio);
        t2.warmStart$0();
        i = 0;
        while (true) {
          t1 = this.jointCount;
          if (typeof t1 !== "number")
            throw $.iae(t1);
          if (!$.JSNumber_methods.$lt(i, t1))
            break;
          t1 = this.joints;
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].initVelocityConstraints$1(step);
          ++i;
        }
        for (i = 0; i < step.velocityIterations; ++i) {
          j = 0;
          while (true) {
            t1 = this.jointCount;
            if (typeof t1 !== "number")
              throw $.iae(t1);
            if (!$.JSNumber_methods.$lt(j, t1))
              break;
            t1 = this.joints;
            if (j >= t1.length)
              throw $.ioore(j);
            t1[j].solveVelocityConstraints$1(step);
            ++j;
          }
          t2.solveVelocityConstraints$0();
        }
        t2.storeImpulses$0();
        temp = new $.Vector(0, 0);
        t1 = this._translation;
        i = 0;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
        L2:
          while (true)
            switch (state0) {
              case 0:
                t3 = this.bodyCount;
                if (typeof t3 !== "number")
                  throw $.iae(t3);
                if (!$.JSNumber_methods.$lt(i, t3))
                  break L2;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t3 = this.bodies;
                      if (i >= t3.length)
                        throw $.ioore(i);
                      b = t3[i];
                      t3 = $.get$type$x(b);
                    case 16:
                      state0 = 0;
                      if ($.$eq(t3, 0))
                        break c$0;
                      t3 = b.get$linearVelocity();
                      t4 = t3.x;
                      t3 = t3.y;
                      t1.x = t4;
                      t1.y = t3;
                      t3 = step.dt;
                      t4 = t1.x;
                    case 17:
                      state0 = 0;
                      t1.x = $.$mul$n(t4, t3);
                      t4 = t1.y;
                    case 18:
                      state0 = 0;
                      t1.y = $.$mul$n(t4, t3);
                      t3 = t1.x;
                    case 19:
                      state0 = 0;
                      t4 = $.getInterceptor$n(t3);
                      t5 = t4.$mul(t3, t3);
                      t6 = t1.y;
                    case 20:
                      state0 = 0;
                      t7 = $.getInterceptor$n(t6);
                    default:
                      if (state0 === 22 || state0 === 21 || state0 === 0 && $.$gt$n($.$add$ns(t5, t7.$mul(t6, t6)), 4))
                        switch (state0) {
                          case 0:
                            t3 = $.$add$ns(t4.$mul(t3, t3), t7.$mul(t6, t6));
                            if (typeof t3 !== "number")
                              $.throwExpression(new $.ArgumentError(t3));
                            ratio = 2 / Math.sqrt(t3);
                            t3 = b.get$linearVelocity();
                            t4 = t3.x;
                          case 21:
                            state0 = 0;
                            t3.x = $.$mul$n(t4, ratio);
                            t4 = t3.y;
                          case 22:
                            state0 = 0;
                            t3.y = $.$mul$n(t4, ratio);
                        }
                      t3 = step.dt;
                      t4 = b.get$angularVelocity();
                      if (typeof t4 !== "number")
                        throw $.iae(t4);
                      rotation = t3 * t4;
                    case 23:
                      if (state0 === 23 || state0 === 0 && rotation * rotation > 2.4674011002723395)
                        switch (state0) {
                          case 0:
                            ratio = 1.5707963267948966 / Math.abs(rotation);
                            t3 = b.get$angularVelocity();
                          case 23:
                            state0 = 0;
                            b.set$angularVelocity($.$mul$n(t3, ratio));
                        }
                      t3 = b.get$sweep();
                      t4 = t3.centerZero;
                      t3 = t3.center;
                      t5 = t3.x;
                      t3 = t3.y;
                      t4.x = t5;
                      t4.y = t3;
                      t3 = b.get$sweep();
                      t3.angleZero = t3.angle;
                      t3 = b.get$linearVelocity();
                      t4 = t3.x;
                      t3 = t3.y;
                      temp.x = t4;
                      temp.y = t3;
                      t3 = step.dt;
                      t4 = temp.x;
                    case 24:
                      state0 = 0;
                      temp.x = $.$mul$n(t4, t3);
                      t4 = temp.y;
                    case 25:
                      state0 = 0;
                      temp.y = $.$mul$n(t4, t3);
                      t3 = b.get$sweep().center;
                      t4 = t3.x;
                    case 26:
                      state0 = 0;
                      t5 = temp.x;
                    case 27:
                      state0 = 0;
                      t3.x = $.$add$ns(t4, t5);
                      t5 = t3.y;
                    case 28:
                      state0 = 0;
                      t4 = temp.y;
                    case 29:
                      state0 = 0;
                      t3.y = $.$add$ns(t5, t4);
                      t4 = b.get$sweep();
                      t5 = t4.angle;
                    case 30:
                      state0 = 0;
                      t3 = step.dt;
                      t6 = b.get$angularVelocity();
                      if (typeof t6 !== "number")
                        throw $.iae(t6);
                      t4.angle = $.$add$ns(t5, t3 * t6);
                      b.synchronizeTransform$0();
                  }
                }
                ++i;
            }
        for (i = 0; i < step.positionIterations; ++i) {
          contactsOkay = t2.solvePositionConstraints$1(0.2);
          jointsOkay = true;
          j = 0;
          while (true) {
            t1 = this.jointCount;
            if (typeof t1 !== "number")
              throw $.iae(t1);
            if (!$.JSNumber_methods.$lt(j, t1))
              break;
            t1 = this.joints;
            if (j >= t1.length)
              throw $.ioore(j);
            jointOkay = t1[j].solvePositionConstraints$1(0.2);
            jointsOkay = jointsOkay && jointOkay === true;
            ++j;
          }
          if (contactsOkay && jointsOkay)
            break;
        }
        this.report$1(t2.constraints);
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
        var a, a2, fixtureA, fixtureB, bodyA, nonStatic, j, t7, rotation, contactsOkay, jointsOkay, jointOkay;
        if (state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 34 || state0 === 33 || state0 === 32 || state0 === 31 || state0 === 0 && allowSleep)
          switch (state0) {
            case 0:
              minSleepTime = 99999999999999;
              i = 0;
            default:
              L3:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = this.bodyCount;
                      if (typeof t1 !== "number")
                        throw $.iae(t1);
                      if (!$.JSNumber_methods.$lt(i, t1))
                        break L3;
                    default:
                      c$0: {
                        switch (state0) {
                          case 0:
                            t1 = this.bodies;
                            if (i >= t1.length)
                              throw $.ioore(i);
                            b = t1[i];
                            t1 = $.get$type$x(b);
                          case 31:
                            state0 = 0;
                            if ($.$eq(t1, 0))
                              break c$0;
                            t1 = b.get$flags();
                          case 32:
                            state0 = 0;
                            if ($.$and$n(t1, 4) === 0) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            }
                          case 33:
                            state0 = 0;
                            t1 = b.get$flags();
                          case 34:
                            state0 = 0;
                          default:
                            if (state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 0 && $.$and$n(t1, 4) !== 0)
                              switch (state0) {
                                case 0:
                                  t1 = b.get$angularVelocity();
                                case 35:
                                  state0 = 0;
                                  t2 = b.get$angularVelocity();
                                case 36:
                                  state0 = 0;
                                default:
                                  if (state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 0 && !$.$gt$n($.$mul$n(t1, t2), 0.0012184696791468343))
                                    switch (state0) {
                                      case 0:
                                        t1 = b.get$linearVelocity();
                                        t2 = b.get$linearVelocity();
                                        t3 = t1.x;
                                      case 37:
                                        state0 = 0;
                                        t4 = t2.x;
                                      case 38:
                                        state0 = 0;
                                        t4 = $.$mul$n(t3, t4);
                                        t1 = t1.y;
                                      case 39:
                                        state0 = 0;
                                        t2 = t2.y;
                                      case 40:
                                        state0 = 0;
                                        t2 = $.$gt$n($.$add$ns(t4, $.$mul$n(t1, t2)), 0.0001);
                                        t1 = t2;
                                    }
                                  else
                                    t1 = true;
                              }
                            else
                              t1 = true;
                            if (t1) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            } else {
                              b.set$sleepTime(b.get$sleepTime() + step.dt);
                              minSleepTime = $.min(minSleepTime, b.get$sleepTime());
                            }
                        }
                      }
                      ++i;
                  }
              if (minSleepTime >= 0.5) {
                i = 0;
                while (true) {
                  t1 = this.bodyCount;
                  if (typeof t1 !== "number")
                    throw $.iae(t1);
                  if (!$.JSNumber_methods.$lt(i, t1))
                    break;
                  t1 = this.bodies;
                  if (i >= t1.length)
                    throw $.ioore(i);
                  t1[i].set$awake(false);
                  ++i;
                }
              }
          }
    }
  },
  report$1: function(constraints) {
    var t1, t2, t3, t4, t5, t6, t7, t8, i, c, cc, t9, j, t10;
    t1 = this.listener;
    if (t1 == null)
      return;
    for (t2 = this.impulse, t3 = t2.normalImpulses, t4 = t3.length, t5 = t2.tangentImpulses, t6 = t5.length, t7 = this.contacts, t8 = constraints.length, i = 0; $.JSNumber_methods.$lt(i, this.contactCount); ++i) {
      if (i >= t7.length)
        throw $.ioore(i);
      c = t7[i];
      if (i >= t8)
        throw $.ioore(i);
      cc = constraints[i];
      for (t9 = $.getInterceptor$x(cc), j = 0; $.JSNumber_methods.$lt(j, cc.get$pointCount()); ++j) {
        t10 = $.$index$asx(t9.get$points(cc), j).get$normalImpulse();
        if (j >= t4)
          throw $.ioore(j);
        t3[j] = t10;
        t10 = $.$index$asx(t9.get$points(cc), j).get$tangentImpulse();
        if (j >= t6)
          throw $.ioore(j);
        t5[j] = t10;
      }
      t1.postSolve$2(c, t2);
    }
  }
},

Position: {"": "Object;x*,a@",
  Position$0: function() {
    this.x = new $.Vector(0, 0);
    this.a = 0;
  }
},

Velocity: {"": "Object;v<,a@",
  Velocity$0: function() {
    this.v = new $.Vector(0, 0);
    this.a = 0;
  }
},

TimeStep: {"": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting"},

World: {"": "Object;_flags,_contactManager,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center<,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
  _addType$3: function(creatorStack, type1, type2) {
    var register, t1, t2, register2;
    register = new $.ContactRegister(null, false);
    register.creator = creatorStack;
    register.primary = true;
    t1 = this._contactStacks;
    t2 = t1.length;
    if (type1 < 0 || type1 >= t2)
      throw $.ioore(type1);
    $.$indexSet$ax(t1[type1], type2, register);
    if (type1 !== type2) {
      register2 = new $.ContactRegister(null, false);
      register2.creator = creatorStack;
      register2.primary = false;
      if (type2 < 0 || type2 >= t2)
        throw $.ioore(type2);
      $.$indexSet$ax(t1[type2], type1, register2);
    }
  },
  _initializeRegisters$0: function() {
    var t1 = this._pool;
    this._addType$3(t1.getCircleContactStack$0(), 0, 0);
    this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
    this._addType$3(t1.getPolyContactStack$0(), 1, 1);
  },
  popContact$2: function(fixtureA, fixtureB) {
    var type1, type2, t1, reg, creator, c;
    fixtureA.get$type;
    type1 = fixtureA.shape.type;
    fixtureB.get$type;
    type2 = fixtureB.shape.type;
    t1 = this._contactStacks;
    if (type1 >>> 0 !== type1 || type1 >= t1.length)
      throw $.ioore(type1);
    reg = $.$index$asx(t1[type1], type2);
    creator = reg.get$creator();
    if (creator != null) {
      creator.get$isEmpty;
      if (creator._head === creator._tail)
        creator = this._getFreshContactStack$2(type1, type2);
      if (reg.get$primary()) {
        c = creator.removeFirst$0();
        c.init$2(fixtureA, fixtureB);
        return c;
      } else {
        c = creator.removeFirst$0();
        c.init$2(fixtureB, fixtureA);
        return c;
      }
    } else
      return;
  },
  _getFreshContactStack$2: function(type1, type2) {
    var t1, t2;
    if (type1 === 0 && $.$eq(type2, 0))
      return this._pool.getCircleContactStack$0();
    else {
      t1 = type1 === 1 && $.$eq(type2, 1);
      t2 = this._pool;
      if (t1)
        return t2.getPolyContactStack$0();
      else
        return t2.getPolyCircleContactStack$0();
    }
  },
  pushContact$1: function(contact) {
    var t1, type1, type2;
    if ($.$gt$n(contact.get$manifold().get$pointCount(), 0)) {
      contact.get$fixtureA().body.set$awake(true);
      contact.get$fixtureB().body.set$awake(true);
    }
    t1 = contact.get$fixtureA();
    t1.get$type;
    type1 = t1.shape.type;
    t1 = contact.get$fixtureB();
    t1.get$type;
    type2 = t1.shape.type;
    t1 = this._contactStacks;
    if (type1 >>> 0 !== type1 || type1 >= t1.length)
      throw $.ioore(type1);
    $.$index$asx(t1[type1], type2).get$creator().addFirst$1(contact);
  },
  createBody$1: function(def) {
    var b, t1;
    if ((this._flags & 2) === 2)
      return;
    b = $.Body$(def, this);
    b.prev = null;
    b.next = this._bodyList;
    t1 = this._bodyList;
    if (t1 != null)
      t1.prev = b;
    this._bodyList = b;
    this._bodyCount = this._bodyCount + 1;
    return b;
  },
  createJoint$1: function(def) {
    var j, t1, bodyA, bodyB, edge;
    if ((this._flags & 2) === 2)
      return;
    j = $.Joint_Joint$create(this, def);
    j.set$_prev(null);
    j.set$_liblib1$_next(this._jointList);
    t1 = this._jointList;
    if (t1 != null)
      t1._prev = j;
    this._jointList = j;
    this._jointCount = this._jointCount + 1;
    j.get$edgeA().joint = j;
    j.get$edgeA().other = j.get$bodyB();
    j.get$edgeA().prev = null;
    j.get$edgeA().next = j.get$bodyA().get$jointList();
    if (j.get$bodyA().get$jointList() != null)
      j.get$bodyA().get$jointList().set$prev(j.get$edgeA());
    j.get$bodyA().set$jointList(j.get$edgeA());
    j.get$edgeB().joint = j;
    j.get$edgeB().other = j.get$bodyA();
    j.get$edgeB().prev = null;
    j.get$edgeB().next = j.get$bodyB().get$jointList();
    if (j.get$bodyB().get$jointList() != null)
      j.get$bodyB().get$jointList().set$prev(j.get$edgeB());
    j.get$bodyB().set$jointList(j.get$edgeB());
    bodyA = def.bodyA;
    bodyB = def.bodyB;
    if (!def.collideConnected) {
      edge = bodyB.get$contactList();
      for (; edge != null;) {
        if ($.$eq(edge.get$other(), bodyA))
          edge.get$contact().flagForFiltering$0();
        edge = edge.get$next();
      }
    }
    return j;
  },
  step$3: function(_, dt, velocityIterations, positionIterations) {
    var t1;
    if ((this._flags & 1) === 1) {
      t1 = this._contactManager;
      t1.findNewContacts$0;
      t1.broadPhase.updatePairs$1(t1);
      this._flags = (this._flags & 4294967294) >>> 0;
    }
    this._flags = (this._flags | 2) >>> 0;
    t1 = this.timestep;
    t1.dt = dt;
    t1.velocityIterations = velocityIterations;
    t1.positionIterations = positionIterations;
    if (dt > 0)
      t1.inv_dt = 1 / dt;
    else
      t1.inv_dt = 0;
    t1.dtRatio = this._inverseTimestep * dt;
    t1.warmStarting = this._warmStarting;
    this._contactManager.collide$0();
    if (t1.dt > 0)
      this.solve$1(t1);
    if (this._continuousPhysics && t1.dt > 0)
      this.solveTimeOfImpact$0();
    if (t1.dt > 0)
      this._inverseTimestep = t1.inv_dt;
    if ((this._flags & 4) === 4)
      this.clearForces$0();
    this._flags = (this._flags & 4294967293) >>> 0;
  },
  clearForces$0: function() {
    var body, t1;
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = body.get$_force();
      t1.x = 0;
      t1.y = 0;
      body.set$_torque(0);
    }
  },
  drawDebugData$0: function() {
    var t1, drawFlags, xf, color, b, t2, t3, t4, t5, t6, t7, f, j, c, fixtureA, fixtureB, c0, aabb, vs, i;
    t1 = this._debugDraw;
    if (t1 == null)
      return;
    drawFlags = t1.flags;
    if ((drawFlags & 1) === 1) {
      xf = new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null));
      color = new $.Color3(0, 0, 0);
      for (b = this._bodyList, t1 = xf.position, t2 = xf.rotation; t3 = $.getInterceptor(b), b != null; b = b.get$next()) {
        t4 = b.get$originTransform();
        t5 = t4.position;
        t6 = t5.x;
        t5 = t5.y;
        t1.x = t6;
        t1.y = t5;
        t4 = t4.rotation;
        t5 = t2.col1;
        t6 = t4.col1;
        t5.setFrom$1;
        t7 = t6.x;
        t6 = t6.y;
        t5.x = t7;
        t5.y = t6;
        t6 = t2.col2;
        t4 = t4.col2;
        t6.setFrom$1;
        t5 = t4.x;
        t4 = t4.y;
        t6.x = t5;
        t6.y = t4;
        for (f = b.get$fixtureList(); f != null; f = f.get$next())
          if (!b.get$active()) {
            color.setFromRGBF$3(0.5, 0.5, 0.3);
            this.drawShape$3(f, xf, color);
          } else if ($.$eq(t3.get$type(b), 0)) {
            color.setFromRGBF$3(0.5, 0.9, 0.3);
            this.drawShape$3(f, xf, color);
          } else if ($.$eq(t3.get$type(b), 1)) {
            color.setFromRGBF$3(0.5, 0.5, 0.9);
            this.drawShape$3(f, xf, color);
          } else if (!b.get$awake()) {
            color.setFromRGBF$3(0.9, 0.9, 0.9);
            this.drawShape$3(f, xf, color);
          } else {
            color.setFromRGBF$3(0.9, 0.7, 0.7);
            this.drawShape$3(f, xf, color);
          }
      }
    }
    if ((drawFlags & 2) === 2)
      for (j = this._jointList; j != null; j = j._liblib1$_next)
        this.drawJoint$1(j);
    if ((drawFlags & 8) === 8) {
      color = $.Color3$fromRGBF(0.3, 0.9, 0.9);
      for (c = this._contactManager.contactList, t1 = this.cA, t2 = this.cB; c != null; c = c.get$next()) {
        fixtureA = c.get$fixtureA();
        fixtureB = c.get$fixtureB();
        t3 = fixtureA.box;
        t4 = t3.lowerBound;
        c0 = new $.Vector(t4.x, t4.y);
        t3 = t3.upperBound;
        c0.x = $.$add$ns(c0.x, t3.x);
        c0.y = $.$add$ns(c0.y, t3.y);
        c0.x = $.$mul$n(c0.x, 0.5);
        c0.y = $.$mul$n(c0.y, 0.5);
        t3 = c0.x;
        t4 = c0.y;
        t1.x = t3;
        t1.y = t4;
        t4 = fixtureB.box;
        t3 = t4.lowerBound;
        c0 = new $.Vector(t3.x, t3.y);
        t4 = t4.upperBound;
        c0.x = $.$add$ns(c0.x, t4.x);
        c0.y = $.$add$ns(c0.y, t4.y);
        c0.x = $.$mul$n(c0.x, 0.5);
        c0.y = $.$mul$n(c0.y, 0.5);
        t4 = c0.x;
        t3 = c0.y;
        t2.x = t4;
        t2.y = t3;
        this._debugDraw.drawSegment$3(t1, t2, color);
      }
    }
    if ((drawFlags & 4) === 4) {
      color = $.Color3$fromRGBF(0.9, 0.3, 0.9);
      for (b = this._bodyList, t1 = 0 !== (drawFlags & 64); b != null; b = b.get$next()) {
        if (!b.get$active())
          continue;
        for (f = b.get$fixtureList(); f != null; f = f.get$next()) {
          aabb = f.get$proxy().get$box();
          vs = $.List_List(4);
          for (i = 0; i < 4; ++i)
            vs[i] = new $.Vector(0, 0);
          t2 = vs[0];
          t3 = aabb.lowerBound;
          t2.setCoords$2(t3.x, t3.y);
          vs[1].setCoords$2(aabb.upperBound.x, aabb.lowerBound.y);
          t3 = vs[2];
          t2 = aabb.upperBound;
          t3.setCoords$2(t2.x, t2.y);
          vs[3].setCoords$2(aabb.lowerBound.x, aabb.upperBound.y);
          t2 = this._debugDraw;
          if (t1) {
            t2.drawPolygon$3;
            t2._pathPolygon$3(vs, 4, color);
            $.stroke$0$x(t2.ctx);
          } else {
            t2.drawSolidPolygon$3;
            t2._pathPolygon$3(vs, 4, color);
            $.fill$0$x(t2.ctx);
          }
        }
      }
    }
    if ((drawFlags & 16) === 16) {
      xf = new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null));
      color = new $.Color3(1, 0, 0);
      for (b = this._bodyList, t1 = xf.position, t2 = xf.rotation; b != null; b = b.get$next()) {
        t3 = b.get$originTransform();
        t4 = t3.position;
        t5 = t4.x;
        t4 = t4.y;
        t1.x = t5;
        t1.y = t4;
        t3 = t3.rotation;
        t4 = t2.col1;
        t5 = t3.col1;
        t4.setFrom$1;
        t6 = t5.x;
        t5 = t5.y;
        t4.x = t6;
        t4.y = t5;
        t5 = t2.col2;
        t3 = t3.col2;
        t5.setFrom$1;
        t4 = t3.x;
        t3 = t3.y;
        t5.x = t4;
        t5.y = t3;
        t3 = b.get$worldCenter();
        t5 = t3.x;
        t3 = t3.y;
        t1.x = t5;
        t1.y = t3;
        t3 = this._debugDraw;
        t3.drawTransform$2;
        t3._pathCircle$3(t1, 0.1 * t3.viewportTransform.scale, color);
        $.stroke$0$x(t3.ctx);
      }
    }
  },
  get$contactList: function() {
    return this._contactManager.contactList;
  },
  get$jointList: function() {
    return this._jointList;
  },
  solve$1: function(timeStep) {
    var t1, t2, t3, b, c, j, stackSize, seed, t4, stackCount, t5, ce, contact, sensorA, sensorB, other, stackCount0, je, t6, i;
    t1 = this.island;
    t2 = this._bodyCount;
    t3 = this._contactManager;
    t1.init$4(t2, t3.contactCount, this._jointCount, t3.contactListener);
    for (b = this._bodyList; b != null; b = b.get$next())
      b.set$flags($.$and$n(b.get$flags(), 4294967294));
    for (c = this._contactManager.contactList; c != null; c = c.get$next())
      c.set$flags($.$and$n(c.get$flags(), 4294967294));
    for (j = this._jointList; j != null; j = j._liblib1$_next)
      j.islandFlag = false;
    stackSize = this._bodyCount;
    if (this.stack.length < stackSize)
      this.stack = $.List_List(stackSize);
    for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; seed != null; seed = seed.get$next()) {
      if ($.$and$n(seed.get$flags(), 1) === 1)
        continue;
      if (!seed.get$awake() || !seed.get$active())
        continue;
      if ($.$eq($.get$type$x(seed), 0))
        continue;
      t1.bodyCount = 0;
      t1.contactCount = 0;
      t1.jointCount = 0;
      t4 = this.stack;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = seed;
      seed.set$flags($.$or$n(seed.get$flags(), 1));
      for (stackCount = 1; stackCount > 0;) {
        t4 = this.stack;
        --stackCount;
        if (stackCount >= t4.length)
          throw $.ioore(stackCount);
        b = t4[stackCount];
        b.set$islandIndex(t1.bodyCount);
        t4 = t1.bodies;
        t5 = t1.bodyCount;
        t1.bodyCount = $.$add$ns(t5, 1);
        if (t5 >>> 0 !== t5 || t5 >= t4.length)
          throw $.ioore(t5);
        t4[t5] = b;
        b.set$awake(true);
        if ($.$eq($.get$type$x(b), 0))
          continue;
        for (ce = b.get$contactList(); ce != null; ce = ce.get$next()) {
          contact = ce.get$contact();
          if ($.$and$n(contact.get$flags(), 1) === 1)
            continue;
          if (!contact.get$enabled() || !contact.get$touching())
            continue;
          sensorA = contact.get$fixtureA().isSensor;
          sensorB = contact.get$fixtureB().isSensor;
          if (sensorA === true || sensorB === true)
            continue;
          t4 = t1.contacts;
          t5 = t1.contactCount;
          t1.contactCount = $.$add$ns(t5, 1);
          if (t5 >>> 0 !== t5 || t5 >= t4.length)
            throw $.ioore(t5);
          t4[t5] = contact;
          contact.set$flags($.$or$n(contact.get$flags(), 1));
          other = ce.get$other();
          if ($.$and$n(other.get$flags(), 1) === 1)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags($.$or$n(other.get$flags(), 1));
          stackCount = stackCount0;
        }
        for (je = b.get$jointList(); je != null; je = je.get$next()) {
          if (je.get$joint().islandFlag)
            continue;
          other = je.get$other();
          if (!other.get$active())
            continue;
          t4 = je.get$joint();
          t5 = t1.joints;
          t6 = t1.jointCount;
          t1.jointCount = $.$add$ns(t6, 1);
          if (t6 >>> 0 !== t6 || t6 >= t5.length)
            throw $.ioore(t6);
          t5[t6] = t4;
          je.get$joint().islandFlag = true;
          if ($.$and$n(other.get$flags(), 1) === 1)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags($.$or$n(other.get$flags(), 1));
          stackCount = stackCount0;
        }
      }
      t1.solve$3(timeStep, t2, t3);
      for (i = 0; $.JSNumber_methods.$lt(i, t1.bodyCount); ++i) {
        t4 = t1.bodies;
        if (i >= t4.length)
          throw $.ioore(i);
        b = t4[i];
        if ($.$eq($.get$type$x(b), 0))
          b.set$flags($.$and$n(b.get$flags(), 4294967294));
      }
    }
    for (b = this._bodyList; b != null; b = b.get$next()) {
      if ($.$and$n(b.get$flags(), 1) === 0)
        continue;
      if ($.$eq($.get$type$x(b), 0))
        continue;
      b.synchronizeFixtures$0();
    }
    t1 = this._contactManager;
    t1.findNewContacts$0;
    t1.broadPhase.updatePairs$1(t1);
  },
  solveTimeOfImpact$0: function() {
    var c, body, t1, t2;
    for (c = this._contactManager.contactList; c != null; c = c.get$next()) {
      c.set$flags($.$or$n(c.get$flags(), 4));
      c.set$toiCount(0);
    }
    for (body = this._bodyList; t1 = $.getInterceptor(body), body != null; body = body.get$next()) {
      t1 = $.$and$n(body.get$flags(), 1) === 0 || $.$eq(t1.get$type(body), 1) || $.$eq(t1.get$type(body), 0);
      t2 = body.get$flags();
      if (t1)
        body.set$flags($.$or$n(t2, 64));
      else
        body.set$flags($.$and$n(t2, 4294967231));
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      if ($.$and$n(body.get$flags(), 64) === 64)
        continue;
      if (body.get$bullet())
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      body.set$flags($.$or$n(body.get$flags(), 64));
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      if ($.$and$n(body.get$flags(), 64) === 64)
        continue;
      if (!body.get$bullet())
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      body.set$flags($.$or$n(body.get$flags(), 64));
    }
  },
  solveTimeOfImpactGivenBody$1: function(body) {
    var bullet, t1, t2, t3, t4, t5, t6, t7, toiContact, toi, toiOther, iter, ce, found, count, other, type, t8, contact, fixtureA, fixtureB, bodyA, bodyB, i;
    bullet = body.get$bullet();
    t1 = this.toiOutput;
    t2 = this.toiInput;
    t3 = t2.proxyA;
    t4 = t2.proxyB;
    t5 = t2.sweepA;
    t6 = t2.sweepB;
    t7 = this._pool;
    toiContact = null;
    toi = 1;
    toiOther = null;
    iter = 0;
    do {
      for (ce = body.get$contactList(), found = false, count = 0; ce != null; ce = ce.get$next()) {
        if ($.$eq(ce.get$contact(), toiContact))
          continue;
        other = ce.get$other();
        type = $.get$type$x(other);
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(1, body, bullet, type, t1, other, iter, t2, toiContact, t3, toiOther, t4, toi, t5, t6, count, ce, found, t7);
        if (bullet) {
          t8 = other.get$flags();
          if (typeof t8 !== "number")
            throw t8.$and();
          if ((t8 & 64) === 0)
            continue;
          if (type !== 0) {
            t8 = ce.get$contact().get$flags();
            if (t8 !== (t8 | 0))
              return this.solveTimeOfImpactGivenBody$1$bailout(2, body, bullet, 0, t1, other, iter, t2, toiContact, t3, toiOther, t4, toi, t5, t6, count, ce, found, t7, t8);
            t8 = (t8 & 16) !== 0;
          } else
            t8 = false;
          if (t8)
            continue;
        } else if (type === 2)
          continue;
        contact = ce.get$contact();
        if (!contact.get$enabled())
          continue;
        t8 = contact.get$toiCount();
        if (typeof t8 !== "number")
          throw t8.$gt();
        if (t8 > 10)
          continue;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.isSensor === true || fixtureB.isSensor === true)
          continue;
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        t3.setFromShape$1(fixtureA.shape);
        t4.setFromShape$1(fixtureB.shape);
        t5.setFrom$1(bodyA.sweep);
        t6.setFrom$1(bodyB.sweep);
        t2.tMax = toi;
        t7.timeOfImpact.timeOfImpact$2(t1, t2);
        if (t1.state === 3) {
          t8 = t1.t;
          if (typeof t8 !== "number")
            return this.solveTimeOfImpactGivenBody$1$bailout(3, body, bullet, 0, t1, other, iter, t2, toiContact, t3, toiOther, t4, toi, t5, t6, count, ce, found, t7, t8, contact);
          t8 = t8 < toi;
        } else
          t8 = false;
        if (t8) {
          toi = t1.t;
          if (typeof toi !== "number")
            return this.solveTimeOfImpactGivenBody$1$bailout(4, body, bullet, 0, t1, other, iter, t2, 0, t3, 0, t4, toi, t5, t6, count, ce, 0, t7, 0, contact);
          toiOther = other;
          toiContact = contact;
          found = true;
        }
        ++count;
      }
      ++iter;
    } while (found && count > 1 && iter < 50);
    if (toiContact == null) {
      body.advance$1(1);
      return;
    }
    t1 = this.backup;
    t1.setFrom$1(body.get$sweep());
    body.advance$1(toi);
    toiContact.update$1(this._contactManager.contactListener);
    if (!toiContact.get$enabled()) {
      body.get$sweep().setFrom$1(t1);
      this.solveTimeOfImpactGivenBody$1(body);
    }
    t1 = toiContact.get$toiCount();
    if (typeof t1 !== "number")
      throw t1.$add();
    toiContact.set$toiCount(t1 + 1);
    t1 = this.contacts;
    if (t1.length < 32)
      this.contacts = $.List_List(32);
    ce = body.get$contactList();
    count = 0;
    while (true) {
      if (!(ce != null && count < 32))
        break;
      c$0: {
        type = $.get$type$x(ce.get$other());
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(6, body, 0, type, 0, 0, 0, 0, toiContact, 0, toiOther, 0, 0, 0, 0, count, ce);
        if (type === 2)
          break c$0;
        contact = ce.get$contact();
        if (!contact.get$enabled())
          break c$0;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.isSensor === true || fixtureB.isSensor === true)
          break c$0;
        if (!$.$eq(contact, toiContact))
          contact.update$1(this._contactManager.contactListener);
        if (!contact.get$enabled())
          break c$0;
        if (!contact.get$touching())
          break c$0;
        t1 = this.contacts;
        if (count >= t1.length)
          throw $.ioore(count);
        t1[count] = contact;
        ++count;
      }
      ce = ce.get$next();
    }
    t1 = this.toiSolver;
    t1.initialize$3(t1, this.contacts, count, body);
    for (i = 0; i < 20; ++i)
      if (t1.solve$1(0.75))
        break;
    t1 = $.get$type$x(toiOther);
    if (typeof t1 !== "number")
      return this.solveTimeOfImpactGivenBody$1$bailout(7, 0, 0, 0, t1, 0, 0, 0, toiContact);
    if (t1 !== 0) {
      t1 = toiContact.get$flags();
      if (typeof t1 !== "number")
        throw t1.$or();
      toiContact.set$flags((t1 | 16) >>> 0);
    }
  },
  solveTimeOfImpactGivenBody$1$bailout: function(state0, body, bullet, type, t1, other, iter, t2, toiContact, t3, toiOther, t4, toi, t5, t6, count, ce, found, t7, t8, contact) {
    switch (state0) {
      case 0:
        bullet = body.get$bullet();
        t1 = this.toiOutput;
        t2 = this.toiInput;
        t3 = t2.proxyA;
        t4 = t2.proxyB;
        t5 = t2.sweepA;
        t6 = t2.sweepB;
        t7 = this._pool;
        toiContact = null;
        toi = 1;
        toiOther = null;
        iter = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                ce = body.get$contactList();
                found = false;
                count = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(ce != null))
                          break L1;
                      default:
                        c$1: {
                          switch (state0) {
                            case 0:
                              if ($.$eq(ce.get$contact(), toiContact))
                                break c$1;
                              other = ce.get$other();
                              type = $.get$type$x(other);
                            case 1:
                              state0 = 0;
                            case 2:
                              if (state0 === 2 || state0 === 0 && bullet)
                                switch (state0) {
                                  case 0:
                                    t8 = other.get$flags();
                                    if (typeof t8 !== "number")
                                      throw t8.$and();
                                    if ($.$and$n(t8, 64) === 0)
                                      break c$1;
                                  case 2:
                                    if (state0 === 2 || state0 === 0 && !$.$eq(type, 0))
                                      switch (state0) {
                                        case 0:
                                          t8 = ce.get$contact().get$flags();
                                        case 2:
                                          state0 = 0;
                                          t8 = $.$and$n(t8, 16) !== 0;
                                      }
                                    else
                                      t8 = false;
                                    if (t8)
                                      break c$1;
                                }
                              else if ($.$eq(type, 2))
                                break c$1;
                              contact = ce.get$contact();
                              if (!contact.get$enabled())
                                break c$1;
                              t8 = contact.get$toiCount();
                              if (typeof t8 !== "number")
                                throw t8.$gt();
                              if ($.$gt$n(t8, 10))
                                break c$1;
                              fixtureA = contact.get$fixtureA();
                              fixtureB = contact.get$fixtureB();
                              if (fixtureA.isSensor === true || fixtureB.isSensor === true)
                                break c$1;
                              bodyA = fixtureA.body;
                              bodyB = fixtureB.body;
                              t3.setFromShape$1(fixtureA.shape);
                              t4.setFromShape$1(fixtureB.shape);
                              t5.setFrom$1(bodyA.sweep);
                              t6.setFrom$1(bodyB.sweep);
                              t2.tMax = toi;
                              t7.timeOfImpact.timeOfImpact$2(t1, t2);
                            case 3:
                              if (state0 === 3 || state0 === 0 && t1.state === 3)
                                switch (state0) {
                                  case 0:
                                    t8 = t1.t;
                                  case 3:
                                    state0 = 0;
                                    t8 = $.$lt$n(t8, toi);
                                }
                              else
                                t8 = false;
                            case 4:
                              if (state0 === 4 || state0 === 0 && t8)
                                switch (state0) {
                                  case 0:
                                    toi = t1.t;
                                  case 4:
                                    state0 = 0;
                                    toiOther = other;
                                    toiContact = contact;
                                    found = true;
                                }
                              ++count;
                          }
                        }
                        ce = ce.get$next();
                    }
                ++iter;
                if (!(found && count > 1 && iter < 50))
                  break L0;
            }
        if (toiContact == null) {
          body.advance$1(1);
          return;
        }
        t1 = this.backup;
        t1.setFrom$1(body.get$sweep());
        body.advance$1(toi);
        toiContact.update$1(this._contactManager.contactListener);
        t2 = toiContact.get$enabled();
      case 5:
        state0 = 0;
        if (!t2) {
          body.get$sweep().setFrom$1(t1);
          this.solveTimeOfImpactGivenBody$1(body);
        }
        t1 = toiContact.get$toiCount();
        if (typeof t1 !== "number")
          throw t1.$add();
        toiContact.set$toiCount($.$add$ns(t1, 1));
        t1 = this.contacts;
        if (t1.length < 32)
          this.contacts = $.List_List(32);
        ce = body.get$contactList();
        count = 0;
      case 6:
        L2:
          while (true)
            switch (state0) {
              case 0:
                if (!(ce != null && count < 32))
                  break L2;
              case 6:
                c$0: {
                  switch (state0) {
                    case 0:
                      type = $.get$type$x(ce.get$other());
                    case 6:
                      state0 = 0;
                      if ($.$eq(type, 2))
                        break c$0;
                      contact = ce.get$contact();
                      if (!contact.get$enabled())
                        break c$0;
                      fixtureA = contact.get$fixtureA();
                      fixtureB = contact.get$fixtureB();
                      if (fixtureA.isSensor === true || fixtureB.isSensor === true)
                        break c$0;
                      if (!$.$eq(contact, toiContact))
                        contact.update$1(this._contactManager.contactListener);
                      if (!contact.get$enabled())
                        break c$0;
                      if (!contact.get$touching())
                        break c$0;
                      t1 = this.contacts;
                      if (count >= t1.length)
                        throw $.ioore(count);
                      t1[count] = contact;
                      ++count;
                  }
                }
                ce = ce.get$next();
            }
        t1 = this.toiSolver;
        t1.initialize$3(t1, this.contacts, count, body);
        for (i = 0; i < 20; ++i)
          if (t1.solve$1(0.75))
            break;
        t1 = $.get$type$x(toiOther);
      case 7:
        var fixtureA, fixtureB, bodyA, bodyB, i;
        state0 = 0;
        if (!$.$eq(t1, 0)) {
          t1 = toiContact.get$flags();
          if (typeof t1 !== "number")
            throw t1.$or();
          toiContact.set$flags($.$or$n(t1, 16));
        }
    }
  },
  drawShape$3: function(fixture, xf, color) {
    var t1, circle, radius, t2, t3, t4, t5, poly, vertexCount, vertices, i;
    t1 = $.getInterceptor$x(fixture);
    switch (t1.get$type(fixture)) {
      case 0:
        circle = t1.get$shape(fixture);
        t1 = this.center;
        $.Transform_mulToOut(xf, $.get$position$x(circle), t1);
        radius = circle.get$radius();
        t2 = this.axis;
        t3 = xf.rotation.col1;
        t4 = t3.x;
        t3 = t3.y;
        t2.x = t4;
        t2.y = t3;
        t2 = this._debugDraw;
        t3 = t2.flags;
        t4 = t2.viewportTransform;
        t5 = $.getInterceptor$n(radius);
        if (0 !== (t3 & 64)) {
          t2.drawCircle$4;
          t2._pathCircle$3(t1, t5.$mul(radius, t4.scale), color);
          $.stroke$0$x(t2.ctx);
        } else {
          t2.drawSolidCircle$4;
          t2._pathCircle$3(t1, t5.$mul(radius, t4.scale), color);
          $.fill$0$x(t2.ctx);
        }
        break;
      case 1:
        poly = t1.get$shape(fixture);
        vertexCount = poly.get$vertexCount();
        vertices = $.List_List(vertexCount);
        for (i = 0; i < vertexCount; ++i) {
          if (i >= vertexCount)
            throw $.ioore(i);
          vertices[i] = new $.Vector(0, 0);
        }
        for (i = 0; i < vertexCount; ++i) {
          t1 = poly.get$vertices();
          if (i >= t1.length)
            throw $.ioore(i);
          t1 = t1[i];
          if (i >= vertexCount)
            throw $.ioore(i);
          $.Transform_mulToOut(xf, t1, vertices[i]);
        }
        t1 = this._debugDraw;
        if (0 !== (t1.flags & 64)) {
          t1.drawPolygon$3;
          t1._pathPolygon$3(vertices, vertexCount, color);
          $.stroke$0$x(t1.ctx);
        } else if (vertexCount > 2) {
          t1.drawSolidPolygon$3;
          t1._pathPolygon$3(vertices, vertexCount, color);
          $.fill$0$x(t1.ctx);
        } else {
          t1.drawPolygon$3;
          t1._pathPolygon$3(vertices, vertexCount, color);
          $.stroke$0$x(t1.ctx);
        }
        break;
    }
  },
  drawJoint$1: function(joint) {
    var bodyA, bodyB, xf1, t1, x1, x2, p1, p2, color, t2, t3, t4;
    bodyA = joint.bodyA;
    bodyB = joint.bodyB;
    xf1 = bodyA.get$originTransform();
    t1 = xf1.position;
    x1 = new $.Vector(t1.x, t1.y);
    t1 = bodyB.get$originTransform().position;
    x2 = new $.Vector(t1.x, t1.y);
    p1 = new $.Vector(0, 0);
    p2 = new $.Vector(0, 0);
    joint.getAnchorA$1(p1);
    joint.getAnchorB$1(p2);
    color = $.Color3$fromRGBF(0.5, 0.3, 0.3);
    switch (joint.type) {
      case 3:
        this._debugDraw.drawSegment$3(p1, p2, color);
        break;
      case 4:
        throw $.wrapException(new $.UnimplementedError(null));
      case 9:
        this._debugDraw.drawSegment$3(x1, x2, color);
        break;
      case 10:
      case 5:
        break;
      default:
        t1 = p1.x;
        t2 = p1.y;
        t3 = p2.x;
        t4 = p2.y;
        this._debugDraw.drawSegment$3(x1, p1, color);
        this._debugDraw.drawSegment$3(new $.Vector(t1, t2), p2, color);
        this._debugDraw.drawSegment$3(x2, new $.Vector(t3, t4), color);
        break;
    }
  },
  World$3: function(gravity, doSleep, argPool) {
    var t1, t2, i;
    this._contactManager = new $.ContactManager($.BroadPhase$(), null, 0, new $.ContactFilter(), null, this);
    for (t1 = this._contactStacks, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = $.List_List(2);
    this._initializeRegisters$0();
  }
},

WorldQueryWrapper: {"": "Object;broadPhase,callback"},

CircleContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collideCircles$5(argManifold, this.fixtureA.shape, xfA, this.fixtureB.shape, xfB);
  }
},

Contact: {"": "Object;flags@,prev@,next@,edge1<,edge2<,fixtureA<,fixtureB<,manifold@,toiCount@",
  init$2: function(fixA, fixB) {
    var t1;
    this.flags = 0;
    this.fixtureA = fixA;
    this.fixtureB = fixB;
    this.manifold.set$pointCount(0);
    this.prev = null;
    this.next = null;
    t1 = this.edge1;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    t1 = this.edge2;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    this.toiCount = 0;
  },
  get$touching: function() {
    return $.$and$n(this.flags, 2) === 2;
  },
  get$enabled: function() {
    return $.$and$n(this.flags, 4) === 4;
  },
  flagForFiltering$0: function() {
    this.flags = $.$or$n(this.flags, 8);
  },
  update$1: function(listener) {
    var t1, wasTouching, t2, sensorA, t3, sensorB, sensor, bodyA, bodyB, xfA, xfB, shapeA, shapeB, touching, i, t4, mp2, id2, j, mp1;
    t1 = this._oldManifold;
    t1.setFrom$1(this.manifold);
    this.flags = $.$or$n(this.flags, 4);
    wasTouching = $.$and$n(this.flags, 2) === 2;
    t2 = this.fixtureA;
    sensorA = t2.isSensor;
    t3 = this.fixtureB;
    sensorB = t3.isSensor;
    sensor = sensorA === true || sensorB === true;
    bodyA = t2.body;
    bodyB = t3.body;
    xfA = bodyA.originTransform;
    xfB = bodyB.originTransform;
    if (sensor) {
      shapeA = t2.shape;
      shapeB = t3.shape;
      touching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
      this.manifold.set$pointCount(0);
    } else {
      this.evaluate$3(this.manifold, xfA, xfB);
      touching = $.$gt$n(this.manifold.get$pointCount(), 0);
      for (t2 = t1.points, t3 = t2.length, i = 0; t4 = this.manifold, $.JSNumber_methods.$lt(i, t4.get$pointCount()); ++i) {
        mp2 = $.$index$asx($.get$points$x(t4), i);
        mp2.set$normalImpulse(0);
        mp2.set$tangentImpulse(0);
        id2 = $.get$id$x(mp2);
        for (j = 0; $.JSNumber_methods.$lt(j, t1.pointCount); ++j) {
          if (j >= t3)
            throw $.ioore(j);
          mp1 = t2[j];
          if ($.get$id$x(mp1).isEqual$1(id2)) {
            mp2.set$normalImpulse(mp1.get$normalImpulse());
            mp2.set$tangentImpulse(mp1.get$tangentImpulse());
            break;
          }
        }
      }
      if (touching !== wasTouching) {
        bodyA.set$awake(true);
        bodyB.set$awake(true);
      }
    }
    t2 = this.flags;
    if (touching)
      this.flags = $.$or$n(t2, 2);
    else
      this.flags = $.$and$n(t2, 4294967293);
    if (listener == null)
      return;
    if (!wasTouching && touching)
      listener.beginContact$1(this);
    if (wasTouching && !touching)
      listener.endContact$1(this);
    if (!sensor && touching)
      listener.preSolve$2(this, t1);
  }
},

ContactConstraint: {"": "Object;points>,localNormal<,localPoint<,normal<,normalMass<,K<,bodyA@,bodyB@,type*,radius@,friction@,restitution@,pointCount@,manifold@",
  setFrom$1: function(cp) {
    var t1, t2, t3, t4, t5, i;
    this.pointCount = cp.get$pointCount();
    t1 = this.localNormal;
    t2 = cp.get$localNormal();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.localPoint;
    t1 = cp.get$localPoint();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    t1 = this.normal;
    t2 = cp.get$normal();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.normalMass;
    t1 = cp.get$normalMass();
    t3 = t2.col1;
    t4 = t1.get$col1();
    t3.setFrom$1;
    t5 = t4.x;
    t4 = t4.y;
    t3.x = t5;
    t3.y = t4;
    t2 = t2.col2;
    t1 = t1.get$col2();
    t2.setFrom$1;
    t4 = t1.x;
    t1 = t1.y;
    t2.x = t4;
    t2.y = t1;
    t1 = this.K;
    t2 = cp.get$K();
    t4 = t1.col1;
    t3 = t2.col1;
    t4.setFrom$1;
    t5 = t3.x;
    t3 = t3.y;
    t4.x = t5;
    t4.y = t3;
    t1 = t1.col2;
    t2 = t2.col2;
    t1.setFrom$1;
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    this.bodyA = cp.get$bodyA();
    this.bodyB = cp.get$bodyB();
    t2 = $.getInterceptor$x(cp);
    this.type = t2.get$type(cp);
    this.radius = cp.get$radius();
    this.friction = cp.get$friction();
    this.restitution = cp.get$restitution();
    this.manifold = cp.get$manifold();
    for (t1 = this.points, t3 = t1.length, i = 0; $.JSNumber_methods.$lt(i, cp.get$pointCount()); ++i) {
      if (i >= t3)
        throw $.ioore(i);
      t1[i].setFrom$1($.$index$asx(t2.get$points(cp), i));
    }
  },
  toString$0: function(_) {
    return "localNormal: \"" + $.S(this.localNormal) + "\", localPoint: \"" + $.S(this.localPoint) + "\" normal: \"" + $.S(this.normal) + "\", radius: \"" + $.S(this.radius) + "\" friction: \"" + $.S(this.friction) + "\" restitution: \"" + $.S(this.restitution) + "\", pointCount: \"" + $.S(this.pointCount) + "\"";
  },
  ContactConstraint$0: function() {
    var t1, t2, i, t3;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      t3 = $.ContactConstraintPoint$();
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = t3;
    }
  }
},

ContactConstraintPoint: {"": "Object;localPoint<,rA<,rB<,normalImpulse@,tangentImpulse@,normalMass@,tangentMass@,velocityBias@",
  setFrom$1: function(cp) {
    var t1, t2, t3;
    t1 = this.localPoint;
    t2 = cp.get$localPoint();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.rA;
    t1 = cp.get$rA();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    t1 = this.rB;
    t2 = cp.get$rB();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    this.normalImpulse = cp.get$normalImpulse();
    this.tangentImpulse = cp.get$tangentImpulse();
    this.normalMass = cp.get$normalMass();
    this.tangentMass = cp.get$tangentMass();
    this.velocityBias = cp.get$velocityBias();
  },
  toString$0: function(_) {
    return "normal impulse: " + $.S(this.normalImpulse) + ", tangentImpulse: " + $.S(this.tangentImpulse) + ", normalMass: " + $.S(this.normalMass) + ", tangentMass: " + $.S(this.tangentMass) + ", velocityBias: " + $.S(this.velocityBias) + ", localPoint: " + $.S(this.localPoint) + ", rA: " + $.S(this.rA) + ", rB: " + $.S(this.rB);
  }
},

ContactEdge: {"": "Object;other<,contact<,prev@,next@"},

ContactRegister: {"": "Object;creator<,primary<"},

ContactSolver: {"": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x>,d,P1,P2,psolver,rA<,rB<",
  init$3: function(contacts, contactCount, impulseRatio) {
    var t1, i, t2, t3, t4, t5, t6, t7, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, t8, friction, restitution, restitution0, vA, vB, wA, wB, cc, t9, t10, t11, t12, j, t13, cp, ccp, t14, t15, t16, rnA, rnB, rtA, rtB, a, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
    this.constraintCount = contactCount;
    t1 = this.constraints;
    i = t1.length;
    if (i < contactCount) {
      this.constraints = $.List_List($.max(i * 2, this.constraintCount));
      t2 = this.constraints;
      if (!!t2.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t2, 0, i, t1, 0);
      for (; t1 = this.constraints, i < t1.length; ++i)
        t1[i] = $.ContactConstraint$();
    }
    for (t1 = this.worldManifold, t2 = t1.points, t3 = t2.length, t4 = this.tangent, t5 = this.temp2, t6 = this.temp1, t7 = t1.normal, i = 0; $.JSNumber_methods.$lt(i, this.constraintCount); ++i) {
      if (i >= contacts.length)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      shapeA = fixtureA.shape;
      shapeB = fixtureB.shape;
      radiusA = shapeA.radius;
      radiusB = shapeB.radius;
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      manifold = contact.get$manifold();
      t8 = $.$mul$n(fixtureA.friction, fixtureB.friction);
      friction = Math.sqrt(t8);
      restitution = fixtureA.restitution;
      restitution0 = fixtureB.restitution;
      restitution = $.$gt$n(restitution, restitution0) ? restitution : restitution0;
      if (typeof restitution !== "number")
        return this.init$3$bailout(1, contacts, impulseRatio, radiusA, radiusB, bodyA, bodyB, t4, i, friction, t3, t5, restitution, t7, t6, t1, t2, manifold);
      bodyA.get$linearVelocity;
      vA = bodyA._linearVelocity;
      bodyB.get$linearVelocity;
      vB = bodyB._linearVelocity;
      bodyA.get$angularVelocity;
      wA = bodyA._angularVelocity;
      if (typeof wA !== "number")
        return this.init$3$bailout(2, contacts, impulseRatio, radiusA, radiusB, bodyA, bodyB, t4, i, friction, t3, t5, restitution, t7, t6, t1, t2, manifold, vA, vB, wA);
      bodyB.get$angularVelocity;
      wB = bodyB._angularVelocity;
      if (typeof wB !== "number")
        return this.init$3$bailout(3, contacts, impulseRatio, radiusA, radiusB, bodyA, bodyB, t4, i, friction, t3, t5, restitution, t7, t6, t1, t2, manifold, vA, vB, wA, wB);
      t1.initialize$5(t1, manifold, bodyA.originTransform, radiusA, bodyB.originTransform, radiusB);
      t8 = this.constraints;
      if (i >= t8.length)
        throw $.ioore(i);
      cc = t8[i];
      cc.set$bodyA(bodyA);
      cc.set$bodyB(bodyB);
      cc.set$manifold(manifold);
      cc.get$normal().x = t7.x;
      cc.get$normal().y = t7.y;
      cc.set$pointCount(manifold.get$pointCount());
      cc.set$friction(friction);
      cc.set$restitution(restitution);
      cc.get$localNormal().x = manifold.get$localNormal().x;
      cc.get$localNormal().y = manifold.get$localNormal().y;
      cc.get$localPoint().x = manifold.get$localPoint().x;
      cc.get$localPoint().y = manifold.get$localPoint().y;
      cc.set$radius($.$add$ns(radiusA, radiusB));
      t8 = $.getInterceptor$x(manifold);
      t9 = $.getInterceptor$x(cc);
      t9.set$type(cc, t8.get$type(manifold));
      for (t10 = -restitution, t11 = -wA, t12 = -wB, j = 0; t13 = cc.get$pointCount(), $.JSNumber_methods.$lt(j, t13); ++j) {
        cp = $.$index$asx(t8.get$points(manifold), j);
        ccp = $.$index$asx(t9.get$points(cc), j);
        t13 = cp.get$normalImpulse();
        if (typeof t13 !== "number")
          throw $.iae(t13);
        ccp.set$normalImpulse(impulseRatio * t13);
        t13 = cp.get$tangentImpulse();
        if (typeof t13 !== "number")
          throw $.iae(t13);
        ccp.set$tangentImpulse(impulseRatio * t13);
        ccp.get$localPoint().x = cp.get$localPoint().x;
        ccp.get$localPoint().y = cp.get$localPoint().y;
        t13 = ccp.get$rA();
        if (j >= t3)
          throw $.ioore(j);
        t14 = t2[j];
        t15 = $.getInterceptor$x(t14);
        t16 = bodyA.sweep.center;
        t13.x = $.$sub$n(t15.get$x(t14), t16.x);
        ccp.get$rA().y = $.$sub$n(t15.get$y(t14), t16.y);
        t16 = bodyB.sweep.center;
        ccp.get$rB().x = $.$sub$n(t15.get$x(t14), t16.x);
        ccp.get$rB().y = $.$sub$n(t15.get$y(t14), t16.y);
        t16 = ccp.get$rA();
        t14 = t16.x;
        t15 = cc.get$normal();
        t13 = t15.y;
        t14 = $.$mul$n(t14, t13);
        t16 = t16.y;
        t15 = t15.x;
        rnA = $.$sub$n(t14, $.$mul$n(t16, t15));
        t16 = ccp.get$rB();
        rnB = $.$sub$n($.$mul$n(t16.x, t13), $.$mul$n(t16.y, t15));
        rnA = $.$mul$n(rnA, rnA);
        rnB = $.$mul$n(rnB, rnB);
        t15 = bodyA.invMass;
        t16 = bodyB.invMass;
        t13 = bodyA.invInertia;
        if (typeof rnA !== "number")
          throw $.iae(rnA);
        t14 = bodyB.invInertia;
        if (typeof rnB !== "number")
          throw $.iae(rnB);
        ccp.set$normalMass(1 / (t15 + t16 + t13 * rnA + t14 * rnB));
        t14 = cc.get$normal().y;
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t4.x = 1 * t14;
        t14 = cc.get$normal().x;
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t4.y = -1 * t14;
        t14 = ccp.get$rA();
        t13 = t14.x;
        t16 = t4.y;
        t13 = $.$mul$n(t13, t16);
        t14 = t14.y;
        t15 = t4.x;
        rtA = $.$sub$n(t13, $.$mul$n(t14, t15));
        t14 = ccp.get$rB();
        rtB = $.$sub$n($.$mul$n(t14.x, t16), $.$mul$n(t14.y, t15));
        rtA = $.$mul$n(rtA, rtA);
        rtB = $.$mul$n(rtB, rtB);
        t15 = bodyA.invMass;
        t14 = bodyB.invMass;
        t16 = bodyA.invInertia;
        if (typeof rtA !== "number")
          throw $.iae(rtA);
        t13 = bodyB.invInertia;
        if (typeof rtB !== "number")
          throw $.iae(rtB);
        ccp.set$tangentMass(1 / (t15 + t14 + t16 * rtA + t13 * rtB));
        ccp.set$velocityBias(0);
        t13 = ccp.get$rA().y;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t5.x = t11 * t13;
        t13 = ccp.get$rA().x;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t5.y = wA * t13;
        t13 = ccp.get$rB().y;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t16 = vB.x;
        if (typeof t16 !== "number")
          throw $.iae(t16);
        t14 = vA.x;
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t15 = t5.x;
        if (typeof t15 !== "number")
          throw $.iae(t15);
        t6.x = t12 * t13 + t16 - t14 - t15;
        t15 = ccp.get$rB().x;
        if (typeof t15 !== "number")
          throw $.iae(t15);
        t14 = vB.y;
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t16 = vA.y;
        if (typeof t16 !== "number")
          throw $.iae(t16);
        t13 = t5.y;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t6.y = wB * t15 + t14 - t16 - t13;
        a = cc.get$normal();
        vRel = $.$add$ns($.$mul$n(a.x, t6.x), $.$mul$n(a.y, t6.y));
        if ($.$lt$n(vRel, -1)) {
          if (typeof vRel !== "number")
            throw $.iae(vRel);
          ccp.set$velocityBias(t10 * vRel);
        }
      }
      if ($.$eq(t13, 2)) {
        t8 = t9.get$points(cc);
        t9 = $.getInterceptor$asx(t8);
        ccp1 = t9.$index(t8, 0);
        ccp2 = t9.$index(t8, 1);
        invMassA = bodyA.invMass;
        invIA = bodyA.invInertia;
        invMassB = bodyB.invMass;
        invIB = bodyB.invInertia;
        t8 = ccp1.get$rA();
        t9 = cc.get$normal();
        t10 = t8.x;
        t11 = t9.y;
        t10 = $.$mul$n(t10, t11);
        t8 = t8.y;
        t9 = t9.x;
        rn1A = $.$sub$n(t10, $.$mul$n(t8, t9));
        t8 = ccp1.get$rB();
        rn1B = $.$sub$n($.$mul$n(t8.x, t11), $.$mul$n(t8.y, t9));
        t8 = ccp2.get$rA();
        rn2A = $.$sub$n($.$mul$n(t8.x, t11), $.$mul$n(t8.y, t9));
        t8 = ccp2.get$rB();
        rn2B = $.$sub$n($.$mul$n(t8.x, t11), $.$mul$n(t8.y, t9));
        t9 = invMassA + invMassB;
        if (typeof rn1A !== "number")
          throw $.iae(rn1A);
        t8 = invIA * rn1A;
        if (typeof rn1B !== "number")
          throw $.iae(rn1B);
        t11 = invIB * rn1B;
        k11 = t9 + t8 * rn1A + t11 * rn1B;
        if (typeof rn2A !== "number")
          throw $.iae(rn2A);
        if (typeof rn2B !== "number")
          throw $.iae(rn2B);
        k22 = t9 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
        k12 = t9 + t8 * rn2A + t11 * rn2B;
        if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
          cc.get$K().col1.x = k11;
          cc.get$K().col1.y = k12;
          cc.get$K().col2.x = k12;
          cc.get$K().col2.y = k22;
          cc.get$normalMass().get$col1().x = cc.get$K().col1.x;
          cc.get$normalMass().get$col1().y = cc.get$K().col1.y;
          cc.get$normalMass().get$col2().x = cc.get$K().col2.x;
          cc.get$normalMass().get$col2().y = cc.get$K().col2.y;
          cc.get$normalMass().invertLocal$0();
        } else
          cc.set$pointCount(1);
      }
    }
  },
  init$3$bailout: function(state0, contacts, impulseRatio, radiusA, radiusB, bodyA, bodyB, t4, i, friction, t3, t5, restitution, t7, t6, t1, t2, manifold, vA, vB, wA, wB) {
    switch (state0) {
      case 0:
        this.constraintCount = contactCount;
        t1 = this.constraints;
        i = t1.length;
        if (i < contactCount) {
          this.constraints = $.List_List($.max(i * 2, this.constraintCount));
          t2 = this.constraints;
          if (!!t2.immutable$list)
            $.throwExpression(new $.UnsupportedError("set range"));
          $.IterableMixinWorkaround_setRangeList(t2, 0, i, t1, 0);
          for (; t1 = this.constraints, i < t1.length; ++i)
            t1[i] = $.ContactConstraint$();
        }
        t1 = this.worldManifold;
        t2 = t1.points;
        t3 = t2.length;
        t4 = this.tangent;
        t5 = this.temp2;
        t6 = this.temp1;
        t7 = t1.normal;
        i = 0;
      default:
        var contact, fixtureA, fixtureB, shapeA, shapeB, t8, restitution0, cc, t9, t10, t11, t12, j, t13, cp, ccp, t14, t15, t16, rnA, rnB, rtA, rtB, t17, a, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.JSNumber_methods.$lt(i, this.constraintCount))
                  break L0;
                if (i >= contacts.length)
                  throw $.ioore(i);
                contact = contacts[i];
                fixtureA = contact.get$fixtureA();
                fixtureB = contact.get$fixtureB();
                shapeA = fixtureA.shape;
                shapeB = fixtureB.shape;
                radiusA = shapeA.radius;
                radiusB = shapeB.radius;
                bodyA = fixtureA.body;
                bodyB = fixtureB.body;
                manifold = contact.get$manifold();
                t8 = $.$mul$n(fixtureA.friction, fixtureB.friction);
                friction = Math.sqrt(t8);
                restitution = fixtureA.restitution;
                restitution0 = fixtureB.restitution;
                restitution = $.$gt$n(restitution, restitution0) ? restitution : restitution0;
              case 1:
                state0 = 0;
                bodyA.get$linearVelocity;
                vA = bodyA._linearVelocity;
                bodyB.get$linearVelocity;
                vB = bodyB._linearVelocity;
                bodyA.get$angularVelocity;
                wA = bodyA._angularVelocity;
              case 2:
                state0 = 0;
                bodyB.get$angularVelocity;
                wB = bodyB._angularVelocity;
              case 3:
                state0 = 0;
                t1.initialize$5(t1, manifold, bodyA.originTransform, radiusA, bodyB.originTransform, radiusB);
                t8 = this.constraints;
                if (i >= t8.length)
                  throw $.ioore(i);
                cc = t8[i];
                cc.set$bodyA(bodyA);
                cc.set$bodyB(bodyB);
                cc.set$manifold(manifold);
                cc.get$normal().x = t7.x;
                cc.get$normal().y = t7.y;
                cc.set$pointCount(manifold.get$pointCount());
                cc.set$friction(friction);
                cc.set$restitution(restitution);
                cc.get$localNormal().x = manifold.get$localNormal().x;
                cc.get$localNormal().y = manifold.get$localNormal().y;
                cc.get$localPoint().x = manifold.get$localPoint().x;
                cc.get$localPoint().y = manifold.get$localPoint().y;
                cc.set$radius($.$add$ns(radiusA, radiusB));
                t8 = $.getInterceptor$x(manifold);
                t9 = $.getInterceptor$x(cc);
                t9.set$type(cc, t8.get$type(manifold));
                for (t10 = $.getInterceptor$n(restitution), t11 = $.getInterceptor$n(wA), t12 = $.getInterceptor$n(wB), j = 0; t13 = cc.get$pointCount(), $.JSNumber_methods.$lt(j, t13); ++j) {
                  cp = $.$index$asx(t8.get$points(manifold), j);
                  ccp = $.$index$asx(t9.get$points(cc), j);
                  t13 = cp.get$normalImpulse();
                  if (typeof t13 !== "number")
                    throw $.iae(t13);
                  ccp.set$normalImpulse(impulseRatio * t13);
                  t13 = cp.get$tangentImpulse();
                  if (typeof t13 !== "number")
                    throw $.iae(t13);
                  ccp.set$tangentImpulse(impulseRatio * t13);
                  ccp.get$localPoint().x = cp.get$localPoint().x;
                  ccp.get$localPoint().y = cp.get$localPoint().y;
                  t13 = ccp.get$rA();
                  if (j >= t3)
                    throw $.ioore(j);
                  t14 = t2[j];
                  t15 = $.getInterceptor$x(t14);
                  t16 = bodyA.sweep.center;
                  t13.x = $.$sub$n(t15.get$x(t14), t16.x);
                  ccp.get$rA().y = $.$sub$n(t15.get$y(t14), t16.y);
                  t16 = bodyB.sweep.center;
                  ccp.get$rB().x = $.$sub$n(t15.get$x(t14), t16.x);
                  ccp.get$rB().y = $.$sub$n(t15.get$y(t14), t16.y);
                  t16 = ccp.get$rA();
                  t14 = t16.x;
                  t15 = cc.get$normal();
                  t13 = t15.y;
                  t14 = $.$mul$n(t14, t13);
                  t16 = t16.y;
                  t15 = t15.x;
                  rnA = $.$sub$n(t14, $.$mul$n(t16, t15));
                  t16 = ccp.get$rB();
                  rnB = $.$sub$n($.$mul$n(t16.x, t13), $.$mul$n(t16.y, t15));
                  rnA = $.$mul$n(rnA, rnA);
                  rnB = $.$mul$n(rnB, rnB);
                  t15 = bodyA.invMass;
                  t16 = bodyB.invMass;
                  t13 = bodyA.invInertia;
                  if (typeof rnA !== "number")
                    throw $.iae(rnA);
                  t14 = bodyB.invInertia;
                  if (typeof rnB !== "number")
                    throw $.iae(rnB);
                  ccp.set$normalMass(1 / (t15 + t16 + t13 * rnA + t14 * rnB));
                  t14 = cc.get$normal().y;
                  if (typeof t14 !== "number")
                    throw $.iae(t14);
                  t4.x = 1 * t14;
                  t14 = cc.get$normal().x;
                  if (typeof t14 !== "number")
                    throw $.iae(t14);
                  t4.y = -1 * t14;
                  t14 = ccp.get$rA();
                  t13 = t14.x;
                  t16 = t4.y;
                  t13 = $.$mul$n(t13, t16);
                  t14 = t14.y;
                  t15 = t4.x;
                  rtA = $.$sub$n(t13, $.$mul$n(t14, t15));
                  t14 = ccp.get$rB();
                  rtB = $.$sub$n($.$mul$n(t14.x, t16), $.$mul$n(t14.y, t15));
                  rtA = $.$mul$n(rtA, rtA);
                  rtB = $.$mul$n(rtB, rtB);
                  t15 = bodyA.invMass;
                  t14 = bodyB.invMass;
                  t16 = bodyA.invInertia;
                  if (typeof rtA !== "number")
                    throw $.iae(rtA);
                  t13 = bodyB.invInertia;
                  if (typeof rtB !== "number")
                    throw $.iae(rtB);
                  ccp.set$tangentMass(1 / (t15 + t14 + t16 * rtA + t13 * rtB));
                  ccp.set$velocityBias(0);
                  t13 = t11.$negate(wA);
                  t16 = ccp.get$rA().y;
                  if (typeof t16 !== "number")
                    throw $.iae(t16);
                  t5.x = t13 * t16;
                  t5.y = t11.$mul(wA, ccp.get$rA().x);
                  t16 = t12.$negate(wB);
                  t13 = ccp.get$rB().y;
                  if (typeof t13 !== "number")
                    throw $.iae(t13);
                  t14 = vB.x;
                  if (typeof t14 !== "number")
                    throw $.iae(t14);
                  t15 = vA.x;
                  if (typeof t15 !== "number")
                    throw $.iae(t15);
                  t17 = t5.x;
                  if (typeof t17 !== "number")
                    throw $.iae(t17);
                  t6.x = t16 * t13 + t14 - t15 - t17;
                  t6.y = $.$sub$n($.$sub$n($.$add$ns(t12.$mul(wB, ccp.get$rB().x), vB.y), vA.y), t5.y);
                  a = cc.get$normal();
                  vRel = $.$add$ns($.$mul$n(a.x, t6.x), $.$mul$n(a.y, t6.y));
                  if ($.$lt$n(vRel, -1)) {
                    t13 = t10.$negate(restitution);
                    if (typeof vRel !== "number")
                      throw $.iae(vRel);
                    ccp.set$velocityBias(t13 * vRel);
                  }
                }
                if ($.$eq(t13, 2)) {
                  t8 = t9.get$points(cc);
                  t9 = $.getInterceptor$asx(t8);
                  ccp1 = t9.$index(t8, 0);
                  ccp2 = t9.$index(t8, 1);
                  invMassA = bodyA.invMass;
                  invIA = bodyA.invInertia;
                  invMassB = bodyB.invMass;
                  invIB = bodyB.invInertia;
                  t8 = ccp1.get$rA();
                  t9 = cc.get$normal();
                  t10 = t8.x;
                  t11 = t9.y;
                  t10 = $.$mul$n(t10, t11);
                  t8 = t8.y;
                  t9 = t9.x;
                  rn1A = $.$sub$n(t10, $.$mul$n(t8, t9));
                  t8 = ccp1.get$rB();
                  rn1B = $.$sub$n($.$mul$n(t8.x, t11), $.$mul$n(t8.y, t9));
                  t8 = ccp2.get$rA();
                  rn2A = $.$sub$n($.$mul$n(t8.x, t11), $.$mul$n(t8.y, t9));
                  t8 = ccp2.get$rB();
                  rn2B = $.$sub$n($.$mul$n(t8.x, t11), $.$mul$n(t8.y, t9));
                  t9 = invMassA + invMassB;
                  if (typeof rn1A !== "number")
                    throw $.iae(rn1A);
                  t8 = invIA * rn1A;
                  if (typeof rn1B !== "number")
                    throw $.iae(rn1B);
                  t11 = invIB * rn1B;
                  k11 = t9 + t8 * rn1A + t11 * rn1B;
                  if (typeof rn2A !== "number")
                    throw $.iae(rn2A);
                  if (typeof rn2B !== "number")
                    throw $.iae(rn2B);
                  k22 = t9 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
                  k12 = t9 + t8 * rn2A + t11 * rn2B;
                  if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
                    cc.get$K().col1.x = k11;
                    cc.get$K().col1.y = k12;
                    cc.get$K().col2.x = k12;
                    cc.get$K().col2.y = k22;
                    cc.get$normalMass().get$col1().x = cc.get$K().col1.x;
                    cc.get$normalMass().get$col1().y = cc.get$K().col1.y;
                    cc.get$normalMass().get$col2().x = cc.get$K().col2.x;
                    cc.get$normalMass().get$col2().y = cc.get$K().col2.y;
                    cc.get$normalMass().invertLocal$0();
                  } else
                    cc.set$pointCount(1);
                }
                ++i;
            }
    }
  },
  warmStart$0: function() {
    var t1, i, t2, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, normal, t3, j, ccp, t4, t5, t6, t7, Px, Py;
    for (t1 = this.tangent, i = 0; $.JSNumber_methods.$lt(i, this.constraintCount); ++i) {
      t2 = this.constraints;
      if (i >= t2.length)
        throw $.ioore(i);
      c = t2[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      invMassA = bodyA.get$invMass();
      invIA = bodyA.get$invInertia();
      invMassB = bodyB.get$invMass();
      invIB = bodyB.get$invInertia();
      normal = c.get$normal();
      t2 = normal.x;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t3 = normal.y;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t1.x = 1 * t3;
      t1.y = -1 * t2;
      for (t2 = $.getInterceptor$x(c), j = 0; $.JSNumber_methods.$lt(j, c.get$pointCount()); ++j) {
        ccp = $.$index$asx(t2.get$points(c), j);
        t3 = ccp.get$normalImpulse();
        t4 = $.getInterceptor$n(t3);
        t5 = t4.$mul(t3, normal.x);
        t6 = ccp.get$tangentImpulse();
        t7 = $.getInterceptor$n(t6);
        Px = $.$add$ns(t5, t7.$mul(t6, t1.x));
        Py = $.$add$ns(t4.$mul(t3, normal.y), t7.$mul(t6, t1.y));
        t6 = bodyA.get$angularVelocity();
        t7 = ccp.get$rA();
        t7 = $.$sub$n($.$mul$n(t7.x, Py), $.$mul$n(t7.y, Px));
        if (typeof t7 !== "number")
          throw $.iae(t7);
        bodyA.set$angularVelocity($.$sub$n(t6, invIA * t7));
        t7 = bodyA.get$linearVelocity();
        t6 = $.getInterceptor$n(Px);
        t7.x = $.$sub$n(t7.x, t6.$mul(Px, invMassA));
        t7 = bodyA.get$linearVelocity();
        t3 = $.getInterceptor$n(Py);
        t7.y = $.$sub$n(t7.y, t3.$mul(Py, invMassA));
        t7 = bodyB.get$angularVelocity();
        t4 = ccp.get$rB();
        t4 = $.$sub$n($.$mul$n(t4.x, Py), $.$mul$n(t4.y, Px));
        if (typeof t4 !== "number")
          throw $.iae(t4);
        bodyB.set$angularVelocity($.$add$ns(t7, invIB * t4));
        t4 = bodyB.get$linearVelocity();
        t4.x = $.$add$ns(t4.x, t6.$mul(Px, invMassB));
        t6 = bodyB.get$linearVelocity();
        t6.y = $.$add$ns(t6.y, t3.$mul(Py, invMassB));
      }
    }
  },
  solveVelocityConstraints$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, i, t11, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, j, t12, ccp, a, t13, t14, lambda, maxFriction, newImpulse, Px, Py, t15, t16, a1, b, cp2, vn1, t17, vn2;
    t1 = this.dv;
    t2 = this.tangent;
    t3 = this.d;
    t4 = this.x;
    t5 = this.P1;
    t6 = this.P2;
    t7 = this.temp1;
    t8 = this.temp2;
    t9 = this.dv1;
    t10 = this.dv2;
    i = 0;
    while (true) {
      t11 = this.constraintCount;
      if (typeof t11 !== "number")
        throw $.iae(t11);
      if (!(i < t11))
        break;
      t11 = this.constraints;
      if (i >= t11.length)
        throw $.ioore(i);
      c = t11[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.solveVelocityConstraints$0$bailout(1, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.solveVelocityConstraints$0$bailout(2, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      invMassA = bodyA.get$invMass();
      invIA = bodyA.get$invInertia();
      invMassB = bodyB.get$invMass();
      invIB = bodyB.get$invInertia();
      t11 = c.get$normal().y;
      if (typeof t11 !== "number")
        throw $.iae(t11);
      t2.x = 1 * t11;
      t11 = c.get$normal().x;
      if (typeof t11 !== "number")
        throw $.iae(t11);
      t2.y = -1 * t11;
      friction = c.get$friction();
      if (typeof friction !== "number")
        return this.solveVelocityConstraints$0$bailout(3, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB);
      t11 = $.getInterceptor$x(c);
      j = 0;
      while (true) {
        t12 = c.get$pointCount();
        if (typeof t12 !== "number")
          throw $.iae(t12);
        if (!(j < t12))
          break;
        t12 = t11.get$points(c);
        if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !$.isJsIndexable(t12, t12[$.dispatchPropertyName]))
          throw t12.$index();
        if (j >= t12.length)
          throw $.ioore(j);
        ccp = t12[j];
        a = ccp.get$rA();
        t12 = ccp.get$rB().y;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t13 = vB.x;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t14 = vA.x;
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t14 = -wB * t12 + t13 - t14;
        t13 = a.y;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(4, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, $.JSNumber_methods, $.JSDouble_methods, ccp, t14, t13, j);
        t1.x = t14 + wA * t13;
        t13 = ccp.get$rB().x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(5, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, $.JSNumber_methods, $.JSDouble_methods, ccp, 0, t13, j, $.JSNumber_methods);
        t13 = wB * t13;
        t14 = vB.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(6, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, $.JSNumber_methods, $.JSDouble_methods, ccp, t14, t13, j, $.JSNumber_methods);
        t14 = t13 + t14;
        t13 = vA.y;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(7, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, $.JSNumber_methods, $.JSDouble_methods, ccp, t14, t13, j, $.JSNumber_methods);
        t13 = t14 - t13;
        t14 = a.x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(8, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, t14, t13, j, $.JSNumber_methods);
        t1.y = t13 - wA * t14;
        t14 = t1.x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(9, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, t14, 0, j, $.JSNumber_methods);
        t13 = t2.x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(10, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, t14, t13, j, $.JSNumber_methods);
        t13 = t14 * t13;
        t14 = t1.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(11, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, t14, t13, j, $.JSNumber_methods);
        t12 = t2.y;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(12, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, t14, t13, j, $.JSNumber_methods, t12);
        lambda = ccp.get$tangentMass() * -(t13 + t14 * t12);
        t12 = ccp.get$normalImpulse();
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(13, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, 0, 0, j, $.JSNumber_methods, t12, lambda);
        maxFriction = friction * t12;
        t12 = ccp.get$tangentImpulse();
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(14, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, 0, 0, j, $.JSNumber_methods, t12, lambda, maxFriction);
        newImpulse = $.max(-maxFriction, $.min(t12 + lambda, maxFriction));
        t12 = ccp.get$tangentImpulse();
        if (typeof t12 !== "number")
          throw $.iae(t12);
        lambda = newImpulse - t12;
        t12 = t2.x;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(15, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, 0, 0, j, $.JSNumber_methods, t12, lambda, 0, newImpulse);
        Px = t12 * lambda;
        t12 = t2.y;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(16, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, 0, 0, j, $.JSNumber_methods, t12, lambda, 0, newImpulse, Px);
        Py = t12 * lambda;
        t12 = vA.x;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(17, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, 0, 0, j, $.JSNumber_methods, t12, 0, 0, newImpulse, Px, Py);
        vA.x = t12 - Px * invMassA;
        t12 = vA.y;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(18, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, $.JSNumber_methods, 0, j, $.JSNumber_methods, t12, 0, 0, newImpulse, Px, Py);
        vA.y = t12 - Py * invMassA;
        t12 = ccp.get$rA();
        t14 = t12.x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(19, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, $.JSNumber_methods, $.JSNumber_methods, j, $.JSNumber_methods, t12, 0, 0, newImpulse, Px, Py, t14);
        t14 *= Py;
        t12 = t12.y;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(20, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, $.JSNumber_methods, $.JSNumber_methods, j, $.JSNumber_methods, t12, 0, 0, newImpulse, Px, Py, t14);
        wA -= invIA * (t14 - t12 * Px);
        t12 = vB.x;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(21, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, $.JSNumber_methods, $.JSNumber_methods, j, 0, t12, 0, 0, newImpulse, Px, Py);
        vB.x = t12 + Px * invMassB;
        t12 = vB.y;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(22, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, t12, $.JSNumber_methods, j, 0, 0, 0, 0, newImpulse, Px, Py);
        vB.y = t12 + Py * invMassB;
        t12 = ccp.get$rB();
        t14 = t12.x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(23, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, t14, t12, j, 0, 0, 0, 0, newImpulse, Px, Py);
        t14 *= Py;
        t12 = t12.y;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(24, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSDouble_methods, ccp, t14, t12, j, 0, 0, 0, 0, newImpulse, Px);
        wB += invIB * (t14 - t12 * Px);
        ccp.set$tangentImpulse(newImpulse);
        ++j;
      }
      t12 = t12 === 1;
      t13 = vA.x;
      t14 = vB.x;
      t11 = t11.get$points(c);
      if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !$.isJsIndexable(t11, t11[$.dispatchPropertyName]))
        return this.solveVelocityConstraints$0$bailout(25, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, t13, t12, 0, 0, 0, 0, $.JSNumber_methods, t14);
      t15 = t11.length;
      t16 = -wB;
      ccp = t11[0];
      if (t12) {
        if (0 >= t15)
          throw $.ioore(0);
        a1 = ccp.get$rA();
        t11 = ccp.get$rB().y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        if (typeof t14 !== "number")
          throw $.iae(t14);
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t13 = t16 * t11 + t14 - t13;
        t14 = a1.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(26, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, t13, 0, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, a1);
        t1.x = t13 + wA * t14;
        t14 = ccp.get$rB().x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(27, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, 0, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, a1);
        t14 = wB * t14;
        t13 = vB.y;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(28, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, t13, 0, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, a1);
        t13 = t14 + t13;
        t14 = vA.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(29, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, t13, 0, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, a1);
        t14 = t13 - t14;
        t13 = a1.x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(30, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, t13, 0, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14);
        t1.y = t14 - wA * t13;
        b = c.get$normal();
        t13 = t1.x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(31, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, t13, 0, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b);
        t14 = b.x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(32, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, t13, 0, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, b);
        t13 *= t14;
        t11 = t1.y;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(33, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, t13, t11, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, b);
        t16 = b.y;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(34, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t16, 0, t13, t11, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14);
        t12 = ccp.get$normalMass();
        if (typeof t12 !== "number")
          throw t12.$negate();
        lambda = -t12 * (t13 + t11 * t16 - ccp.get$velocityBias());
        t11 = ccp.get$normalImpulse();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(35, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t16, 0, t11, 0, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, lambda);
        a = t11 + lambda;
        newImpulse = a > 0 ? a : 0;
        lambda = newImpulse - t11;
        Px = t14 * lambda;
        Py = t16 * lambda;
        t11 = vA.x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(36, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, 0, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, newImpulse, Px, Py);
        vA.x = t11 - Px * invMassA;
        t11 = vA.y;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(37, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, $.JSNumber_methods, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, newImpulse, Px, Py);
        vA.y = t11 - Py * invMassA;
        t11 = ccp.get$rA();
        t12 = t11.x;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(38, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSNumber_methods, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t12, 0, 0, newImpulse, Px, Py);
        t12 *= Py;
        t11 = t11.y;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(39, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSNumber_methods, ccp, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t12, 0, 0, newImpulse, Px, Py);
        wA -= invIA * (t12 - t11 * Px);
        t11 = vB.x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(40, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, invMassB, invIB, t11, 0, $.JSNumber_methods, $.JSNumber_methods, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, newImpulse, Px, Py);
        vB.x = t11 + Px * invMassB;
        t11 = vB.y;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(41, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, invMassB, invIB, 0, 0, $.JSNumber_methods, t11, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, newImpulse, Px, Py);
        vB.y = t11 + Py * invMassB;
        t11 = ccp.get$rB();
        t12 = t11.x;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(42, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t11, t12, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, newImpulse, Px, Py);
        t12 *= Py;
        t11 = t11.y;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(43, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t11, t12, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, newImpulse, Px);
        wB += invIB * (t12 - t11 * Px);
        ccp.set$normalImpulse(newImpulse);
      } else {
        if (0 >= t15)
          throw $.ioore(0);
        if (1 >= t15)
          throw $.ioore(1);
        cp2 = t11[1];
        a = new $.Vector(ccp.get$normalImpulse(), cp2.get$normalImpulse());
        t11 = ccp.get$rB().y;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        if (typeof t14 !== "number")
          throw $.iae(t14);
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t13 = t16 * t11 + t14 - t13;
        t14 = ccp.get$rA().y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(44, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t13, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t9.x = t13 + wA * t14;
        t14 = ccp.get$rB().x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(45, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t14 = wB * t14;
        t13 = vB.y;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(46, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t13, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t13 = t14 + t13;
        t14 = vA.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(47, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t13, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t14 = t13 - t14;
        t13 = ccp.get$rA().x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(48, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t13, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t9.y = t14 - wA * t13;
        t13 = cp2.get$rB().y;
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t14 = vB.x;
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t11 = vA.x;
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t11 = t16 * t13 + t14 - t11;
        t14 = cp2.get$rA().y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(49, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t10.x = t11 + wA * t14;
        t14 = cp2.get$rB().x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(50, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t14 = wB * t14;
        t11 = vB.y;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(51, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t11 = t14 + t11;
        t14 = vA.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(52, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t14 = t11 - t14;
        t11 = cp2.get$rA().x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(53, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t10.y = t14 - wA * t11;
        t11 = t9.x;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(54, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t14 = c.get$normal();
        t13 = t14.x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(55, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t11 *= t13;
        t16 = t9.y;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(56, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        t14 = t14.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(57, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
        vn1 = t11 + t16 * t14;
        t16 = t10.x;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(58, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, vn1);
        t13 = t16 * t13;
        t16 = t10.y;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(59, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, vn1);
        b = new $.Vector(vn1 - ccp.get$velocityBias(), t13 + t16 * t14 - cp2.get$velocityBias());
        t14 = c.get$K();
        t16 = t14.col1.x;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(60, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        t13 = a.x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(61, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        t13 = t16 * t13;
        t14 = t14.col2.x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(62, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        t16 = a.y;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(63, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        t8.x = t13 + t14 * t16;
        t16 = c.get$K();
        t14 = t16.col1.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(64, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        t13 = a.x;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(65, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        t13 = t14 * t13;
        t16 = t16.col2.y;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(66, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        t14 = a.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(67, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t13, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        t8.y = t13 + t16 * t14;
        t14 = b.x;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(68, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        t16 = t8.x;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(69, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        b.x = t14 - t16;
        t16 = b.y;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(70, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        t14 = t8.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(71, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, t16, t14, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
        b.y = t16 - t14;
        $loop$1: {
          $.Matrix22_mulMatrixAndVectorToOut(c.get$normalMass(), b, t4);
          t11 = t4.x;
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(72, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          t4.x = t11 * -1;
          t11 = t4.y;
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(73, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          t4.y = t11 * -1;
          t11 = t4.x;
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(74, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          if (t11 >= 0) {
            t12 = t4.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(75, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
            t12 = t12 >= 0;
          } else
            t12 = false;
          if (t12) {
            t12 = t4.y;
            t3.x = t11;
            t3.y = t12;
            t12 = t3.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(76, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = a.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(77, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t3.x = t12 - t11;
            t11 = t3.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(78, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = a.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(79, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t3.y = t11 - t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t5.x = t11;
            t5.y = t12;
            t12 = t3.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(80, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(81, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t5.x = t11 * t12;
            t11 = t5.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(82, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t5.y = t11 * t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t6.x = t11;
            t6.y = t12;
            t12 = t3.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(83, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(84, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t6.x = t11 * t12;
            t11 = t6.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(85, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t6.y = t11 * t12;
            t12 = t5.x;
            t11 = t5.y;
            t7.x = t12;
            t7.y = t11;
            t11 = t7.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(86, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t6.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(87, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.x = t11 + t12;
            t12 = t7.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(88, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(89, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.y = t12 + t11;
            t11 = t7.x;
            t12 = t7.y;
            t8.x = t11;
            t8.y = t12;
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(90, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.x = t12 * invMassA;
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(91, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.y = t12 * invMassA;
            t12 = vA.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(92, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(93, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vA.x = t12 - t11;
            t11 = vA.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(94, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(95, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vA.y = t11 - t12;
            t12 = t7.x;
            t11 = t7.y;
            t8.x = t12;
            t8.y = t11;
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(96, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.x = t11 * invMassB;
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(97, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.y = t11 * invMassB;
            t11 = vB.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(98, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(99, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.x = t11 + t12;
            t12 = vB.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(100, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(101, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.y = t12 + t11;
            t11 = ccp.get$rA();
            t12 = t11.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(102, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t13 = t5.y;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(103, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 *= t13;
            t11 = t11.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(104, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t14 = t5.x;
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(105, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t12 - t11 * t14;
            t12 = cp2.get$rA();
            t15 = t12.x;
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(106, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t16 = t6.y;
            if (typeof t16 !== "number")
              return this.solveVelocityConstraints$0$bailout(107, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2);
            t15 *= t16;
            t12 = t12.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(108, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2);
            t17 = t6.x;
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(109, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            wA -= invIA * (t11 + (t15 - t12 * t17));
            t12 = ccp.get$rB();
            t15 = t12.x;
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(110, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, t15, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t13 = t15 * t13;
            t12 = t12.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(111, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t14 = t13 - t12 * t14;
            t12 = cp2.get$rB();
            t13 = t12.x;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(112, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t16 = t13 * t16;
            t12 = t12.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(113, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            wB += invIB * (t14 + (t16 - t12 * t17));
            ccp.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          t11 = ccp.get$normalMass();
          if (typeof t11 !== "number")
            throw t11.$negate();
          t12 = b.x;
          if (typeof t12 !== "number")
            throw $.iae(t12);
          t4.x = -t11 * t12;
          t4.y = 0;
          t12 = c.get$K().col1.y;
          if (typeof t12 !== "number")
            return this.solveVelocityConstraints$0$bailout(114, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          t11 = t4.x;
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(115, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          t12 *= t11;
          t13 = b.y;
          if (typeof t13 !== "number")
            return this.solveVelocityConstraints$0$bailout(116, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          if (t11 >= 0 && t12 + t13 >= 0) {
            t12 = t4.y;
            t3.x = t11;
            t3.y = t12;
            t12 = t3.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(117, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = a.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(118, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t3.x = t12 - t11;
            t11 = t3.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(119, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = a.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(120, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t3.y = t11 - t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t5.x = t11;
            t5.y = t12;
            t12 = t3.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(121, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(122, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t5.x = t11 * t12;
            t11 = t5.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(123, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t5.y = t11 * t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t6.x = t11;
            t6.y = t12;
            t12 = t3.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(124, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(125, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t6.x = t11 * t12;
            t11 = t6.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(126, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t6.y = t11 * t12;
            t12 = t5.x;
            t11 = t5.y;
            t7.x = t12;
            t7.y = t11;
            t11 = t7.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(127, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t6.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(128, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.x = t11 + t12;
            t12 = t7.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(129, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(130, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.y = t12 + t11;
            t11 = t7.x;
            t12 = t7.y;
            t8.x = t11;
            t8.y = t12;
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(131, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.x = t12 * invMassA;
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(132, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.y = t12 * invMassA;
            t12 = vA.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(133, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(134, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vA.x = t12 - t11;
            t11 = vA.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(135, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(136, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vA.y = t11 - t12;
            t12 = t7.x;
            t11 = t7.y;
            t8.x = t12;
            t8.y = t11;
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(137, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.x = t11 * invMassB;
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(138, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.y = t11 * invMassB;
            t11 = vB.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(139, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(140, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.x = t11 + t12;
            t12 = vB.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(141, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(142, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.y = t12 + t11;
            t11 = ccp.get$rA();
            t12 = t11.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(143, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t13 = t5.y;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(144, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 *= t13;
            t11 = t11.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(145, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t14 = t5.x;
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(146, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t12 - t11 * t14;
            t12 = cp2.get$rA();
            t15 = t12.x;
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(147, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t16 = t6.y;
            if (typeof t16 !== "number")
              return this.solveVelocityConstraints$0$bailout(148, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2);
            t15 *= t16;
            t12 = t12.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(149, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2);
            t17 = t6.x;
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(150, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            wA -= invIA * (t11 + (t15 - t12 * t17));
            t12 = ccp.get$rB();
            t15 = t12.x;
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(151, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, t15, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t13 = t15 * t13;
            t12 = t12.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(152, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t14 = t13 - t12 * t14;
            t12 = cp2.get$rB();
            t13 = t12.x;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(153, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t16 = t13 * t16;
            t12 = t12.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(154, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            wB += invIB * (t14 + (t16 - t12 * t17));
            ccp.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          t4.x = 0;
          t11 = cp2.get$normalMass();
          if (typeof t11 !== "number")
            throw t11.$negate();
          t12 = b.y;
          if (typeof t12 !== "number")
            throw $.iae(t12);
          t4.y = -t11 * t12;
          t12 = c.get$K().col2.x;
          if (typeof t12 !== "number")
            return this.solveVelocityConstraints$0$bailout(155, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          t11 = t4.y;
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(156, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          t12 *= t11;
          t13 = b.x;
          if (typeof t13 !== "number")
            return this.solveVelocityConstraints$0$bailout(157, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2);
          if (t11 >= 0 && t12 + t13 >= 0) {
            t3.x = t4.x;
            t3.y = t11;
            t11 = t3.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(158, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = a.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(159, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t3.x = t11 - t12;
            t12 = t3.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(160, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = a.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(161, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t3.y = t12 - t11;
            t11 = c.get$normal();
            t12 = t11.x;
            t11 = t11.y;
            t5.x = t12;
            t5.y = t11;
            t11 = t3.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(162, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t5.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(163, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t5.x = t12 * t11;
            t12 = t5.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(164, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t5.y = t12 * t11;
            t11 = c.get$normal();
            t12 = t11.x;
            t11 = t11.y;
            t6.x = t12;
            t6.y = t11;
            t11 = t3.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(165, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t6.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(166, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t6.x = t12 * t11;
            t12 = t6.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(167, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t6.y = t12 * t11;
            t11 = t5.x;
            t12 = t5.y;
            t7.x = t11;
            t7.y = t12;
            t12 = t7.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(168, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(169, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.x = t12 + t11;
            t11 = t7.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(170, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t6.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(171, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.y = t11 + t12;
            t12 = t7.x;
            t11 = t7.y;
            t8.x = t12;
            t8.y = t11;
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(172, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.x = t11 * invMassA;
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(173, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.y = t11 * invMassA;
            t11 = vA.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(174, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(175, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vA.x = t11 - t12;
            t12 = vA.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(176, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(177, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vA.y = t12 - t11;
            t11 = t7.x;
            t12 = t7.y;
            t8.x = t11;
            t8.y = t12;
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(178, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.x = t12 * invMassB;
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(179, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.y = t12 * invMassB;
            t12 = vB.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(180, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(181, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.x = t12 + t11;
            t11 = vB.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(182, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(183, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.y = t11 + t12;
            t12 = ccp.get$rA();
            t11 = t12.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(184, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t13 = t5.y;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(185, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 *= t13;
            t12 = t12.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(186, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t14 = t5.x;
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(187, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t11 - t12 * t14;
            t11 = cp2.get$rA();
            t15 = t11.x;
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(188, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t16 = t6.y;
            if (typeof t16 !== "number")
              return this.solveVelocityConstraints$0$bailout(189, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2);
            t15 *= t16;
            t11 = t11.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(190, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2);
            t17 = t6.x;
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(191, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            wA -= invIA * (t12 + (t15 - t11 * t17));
            t11 = ccp.get$rB();
            t15 = t11.x;
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(192, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, t11, 0, t13, 0, 0, 0, $.JSNumber_methods, 0, t15, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t13 = t15 * t13;
            t11 = t11.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(193, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, t11, 0, t13, 0, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t14 = t13 - t11 * t14;
            t11 = cp2.get$rB();
            t13 = t11.x;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(194, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, t11, 0, t13, 0, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t16 = t13 * t16;
            t11 = t11.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(195, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            wB += invIB * (t14 + (t16 - t11 * t17));
            ccp.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          t4.x = 0;
          t4.y = 0;
          vn1 = b.x;
          if (typeof vn1 !== "number")
            return this.solveVelocityConstraints$0$bailout(196, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, b, ccp, cp2, vn1);
          vn2 = b.y;
          if (typeof vn2 !== "number")
            return this.solveVelocityConstraints$0$bailout(197, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2, vn1, 0, vn2);
          if (vn1 >= 0 && vn2 >= 0) {
            t11 = t4.x;
            t12 = t4.y;
            t3.x = t11;
            t3.y = t12;
            t12 = t3.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(198, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = a.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(199, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t3.x = t12 - t11;
            t11 = t3.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(200, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = a.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(201, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t3.y = t11 - t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t5.x = t11;
            t5.y = t12;
            t12 = t3.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(202, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(203, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t5.x = t11 * t12;
            t11 = t5.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(204, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t5.y = t11 * t12;
            t12 = c.get$normal();
            t11 = t12.x;
            t12 = t12.y;
            t6.x = t11;
            t6.y = t12;
            t12 = t3.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(205, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(206, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t6.x = t11 * t12;
            t11 = t6.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(207, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t6.y = t11 * t12;
            t12 = t5.x;
            t11 = t5.y;
            t7.x = t12;
            t7.y = t11;
            t11 = t7.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(208, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t6.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(209, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.x = t11 + t12;
            t12 = t7.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(210, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t6.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(211, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t7.y = t12 + t11;
            t11 = t7.x;
            t12 = t7.y;
            t8.x = t11;
            t8.y = t12;
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(212, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.x = t12 * invMassA;
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(213, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.y = t12 * invMassA;
            t12 = vA.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(214, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(215, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vA.x = t12 - t11;
            t11 = vA.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(216, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(217, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vA.y = t11 - t12;
            t12 = t7.x;
            t11 = t7.y;
            t8.x = t12;
            t8.y = t11;
            t11 = t8.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(218, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.x = t11 * invMassB;
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(219, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, invMassB, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t8.y = t11 * invMassB;
            t11 = vB.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(220, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 = t8.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(221, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.x = t11 + t12;
            t12 = vB.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(222, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t8.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(223, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            vB.y = t12 + t11;
            t11 = ccp.get$rA();
            t12 = t11.x;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(224, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t13 = t5.y;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(225, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t12 *= t13;
            t11 = t11.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(226, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t14 = t5.x;
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(227, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t11 = t12 - t11 * t14;
            t12 = cp2.get$rA();
            t15 = t12.x;
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(228, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, 0, 0, 0, ccp, cp2);
            t16 = t6.y;
            if (typeof t16 !== "number")
              return this.solveVelocityConstraints$0$bailout(229, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2);
            t15 *= t16;
            t12 = t12.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(230, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2);
            t17 = t6.x;
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(231, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, invIA, 0, invIB, t11, 0, t13, t12, 0, t15, $.JSNumber_methods, 0, $.JSNumber_methods, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            wA -= invIA * (t11 + (t15 - t12 * t17));
            t12 = ccp.get$rB();
            t15 = t12.x;
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(232, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, t15, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t13 = t15 * t13;
            t12 = t12.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(233, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t14 = t13 - t12 * t14;
            t12 = cp2.get$rB();
            t13 = t12.x;
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(234, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, t13, t12, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            t16 = t13 * t16;
            t12 = t12.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(235, t9, 0, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, t12, 0, 0, $.JSNumber_methods, 0, 0, t14, 0, 0, 0, 0, 0, t16, 0, 0, ccp, cp2, 0, t17);
            wB += invIB * (t14 + (t16 - t12 * t17));
            ccp.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          break $loop$1;
        }
      }
      t11 = bodyA.get$linearVelocity();
      t12 = vA.x;
      t13 = vA.y;
      t11.x = t12;
      t11.y = t13;
      bodyA.set$angularVelocity(wA);
      t13 = bodyB.get$linearVelocity();
      t11 = vB.x;
      t12 = vB.y;
      t13.x = t11;
      t13.y = t12;
      bodyB.set$angularVelocity(wB);
      ++i;
    }
  },
  solveVelocityConstraints$0$bailout: function(state0, t9, c, i, t10, t7, t3, t4, bodyA, t2, wA, bodyB, t8, t5, t1, t6, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t11, a, t13, t12, ccp, t17, t16, j, t15, t14, lambda, maxFriction, newImpulse, Px, Py, t18, a1, b, cp1, cp2, vn1, t19, vn2) {
    switch (state0) {
      case 0:
        t1 = this.dv;
        t2 = this.tangent;
        t3 = this.d;
        t4 = this.x;
        t5 = this.P1;
        t6 = this.P2;
        t7 = this.temp1;
        t8 = this.temp2;
        t9 = this.dv1;
        t10 = this.dv2;
        i = 0;
      default:
        var vt, vn;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t11 = this.constraintCount;
                if (typeof t11 !== "number")
                  throw $.iae(t11);
                if (!$.JSNumber_methods.$lt(i, t11))
                  break L0;
                t11 = this.constraints;
                if (i >= t11.length)
                  throw $.ioore(i);
                c = t11[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                wA = bodyA.get$angularVelocity();
              case 1:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 2:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                invMassA = bodyA.get$invMass();
                invIA = bodyA.get$invInertia();
                invMassB = bodyB.get$invMass();
                invIB = bodyB.get$invInertia();
                t11 = c.get$normal().y;
                if (typeof t11 !== "number")
                  throw $.iae(t11);
                t2.x = 1 * t11;
                t11 = c.get$normal().x;
                if (typeof t11 !== "number")
                  throw $.iae(t11);
                t2.y = -1 * t11;
                friction = c.get$friction();
              case 3:
                state0 = 0;
                t11 = $.getInterceptor$x(c);
                t12 = $.getInterceptor$n(friction);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t13 = c.get$pointCount();
                        if (typeof t13 !== "number")
                          throw $.iae(t13);
                        if (!$.JSNumber_methods.$lt(j, t13))
                          break L1;
                        t13 = t11.get$points(c);
                        if (typeof t13 !== "object" || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !$.isJsIndexable(t13, t13[$.dispatchPropertyName]))
                          throw t13.$index();
                        ccp = $.$index$asx(t13, j);
                        a = ccp.get$rA();
                        t13 = $.getInterceptor$n(wB);
                        t14 = t13.$negate(wB);
                        t15 = ccp.get$rB().y;
                        if (typeof t15 !== "number")
                          throw $.iae(t15);
                        t16 = vB.x;
                        if (typeof t16 !== "number")
                          throw $.iae(t16);
                        t17 = vA.x;
                        if (typeof t17 !== "number")
                          throw $.iae(t17);
                        t17 = t14 * t15 + t16 - t17;
                        t16 = a.y;
                      case 4:
                        state0 = 0;
                        t15 = $.getInterceptor$n(wA);
                        t16 = t15.$mul(wA, t16);
                        if (typeof t16 !== "number")
                          throw $.iae(t16);
                        t1.x = t17 + t16;
                        t16 = ccp.get$rB().x;
                      case 5:
                        state0 = 0;
                        t16 = t13.$mul(wB, t16);
                        t17 = vB.y;
                      case 6:
                        state0 = 0;
                        t17 = $.$add$ns(t16, t17);
                        t16 = vA.y;
                      case 7:
                        state0 = 0;
                        t16 = $.$sub$n(t17, t16);
                        t17 = a.x;
                      case 8:
                        state0 = 0;
                        t1.y = $.$sub$n(t16, t15.$mul(wA, t17));
                        t17 = t1.x;
                      case 9:
                        state0 = 0;
                        t16 = t2.x;
                      case 10:
                        state0 = 0;
                        t16 = $.$mul$n(t17, t16);
                        t17 = t1.y;
                      case 11:
                        state0 = 0;
                        t14 = t2.y;
                      case 12:
                        state0 = 0;
                        vt = $.$add$ns(t16, $.$mul$n(t17, t14));
                        lambda = ccp.get$tangentMass() * $.$negate$n(vt);
                        t14 = ccp.get$normalImpulse();
                      case 13:
                        state0 = 0;
                        maxFriction = t12.$mul(friction, t14);
                        t14 = ccp.get$tangentImpulse();
                      case 14:
                        state0 = 0;
                        newImpulse = $.max(-maxFriction, $.min($.$add$ns(t14, lambda), maxFriction));
                        t14 = ccp.get$tangentImpulse();
                        if (typeof t14 !== "number")
                          throw $.iae(t14);
                        lambda = newImpulse - t14;
                        t14 = t2.x;
                      case 15:
                        state0 = 0;
                        Px = $.$mul$n(t14, lambda);
                        t14 = t2.y;
                      case 16:
                        state0 = 0;
                        Py = $.$mul$n(t14, lambda);
                        t14 = vA.x;
                      case 17:
                        state0 = 0;
                        t17 = $.getInterceptor$n(Px);
                        vA.x = $.$sub$n(t14, t17.$mul(Px, invMassA));
                        t14 = vA.y;
                      case 18:
                        state0 = 0;
                        t16 = $.getInterceptor$n(Py);
                        vA.y = $.$sub$n(t14, t16.$mul(Py, invMassA));
                        t14 = ccp.get$rA();
                        t18 = t14.x;
                      case 19:
                        state0 = 0;
                        t18 = $.$mul$n(t18, Py);
                        t14 = t14.y;
                      case 20:
                        state0 = 0;
                        t14 = $.$sub$n(t18, $.$mul$n(t14, Px));
                        if (typeof t14 !== "number")
                          throw $.iae(t14);
                        wA = t15.$sub(wA, invIA * t14);
                        t14 = vB.x;
                      case 21:
                        state0 = 0;
                        vB.x = $.$add$ns(t14, t17.$mul(Px, invMassB));
                        t17 = vB.y;
                      case 22:
                        state0 = 0;
                        vB.y = $.$add$ns(t17, t16.$mul(Py, invMassB));
                        t16 = ccp.get$rB();
                        t17 = t16.x;
                      case 23:
                        state0 = 0;
                        t17 = $.$mul$n(t17, Py);
                        t16 = t16.y;
                      case 24:
                        state0 = 0;
                        t16 = $.$sub$n(t17, $.$mul$n(t16, Px));
                        if (typeof t16 !== "number")
                          throw $.iae(t16);
                        wB = t13.$add(wB, invIB * t16);
                        ccp.set$tangentImpulse(newImpulse);
                        ++j;
                    }
                t12 = $.$eq(t13, 1);
                t13 = vA.x;
                t14 = vB.x;
                t15 = $.getInterceptor$n(wA);
                t11 = t11.get$points(c);
              case 25:
                state0 = 0;
                t16 = $.getInterceptor$n(wB);
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
              case 82:
              case 83:
              case 84:
              case 85:
              case 86:
              case 87:
              case 88:
              case 89:
              case 90:
              case 91:
              case 92:
              case 93:
              case 94:
              case 95:
              case 96:
              case 97:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
              case 103:
              case 104:
              case 105:
              case 106:
              case 107:
              case 108:
              case 109:
              case 110:
              case 111:
              case 112:
              case 113:
              case 114:
              case 115:
              case 116:
              case 117:
              case 118:
              case 119:
              case 120:
              case 121:
              case 122:
              case 123:
              case 124:
              case 125:
              case 126:
              case 127:
              case 128:
              case 129:
              case 130:
              case 131:
              case 132:
              case 133:
              case 134:
              case 135:
              case 136:
              case 137:
              case 138:
              case 139:
              case 140:
              case 141:
              case 142:
              case 143:
              case 144:
              case 145:
              case 146:
              case 147:
              case 148:
              case 149:
              case 150:
              case 151:
              case 152:
              case 153:
              case 154:
              case 155:
              case 156:
              case 157:
              case 158:
              case 159:
              case 160:
              case 161:
              case 162:
              case 163:
              case 164:
              case 165:
              case 166:
              case 167:
              case 168:
              case 169:
              case 170:
              case 171:
              case 172:
              case 173:
              case 174:
              case 175:
              case 176:
              case 177:
              case 178:
              case 179:
              case 180:
              case 181:
              case 182:
              case 183:
              case 184:
              case 185:
              case 186:
              case 187:
              case 188:
              case 189:
              case 190:
              case 191:
              case 192:
              case 193:
              case 194:
              case 195:
              case 196:
              case 197:
              case 198:
              case 199:
              case 200:
              case 201:
              case 202:
              case 203:
              case 204:
              case 205:
              case 206:
              case 207:
              case 208:
              case 209:
              case 210:
              case 211:
              case 212:
              case 213:
              case 214:
              case 215:
              case 216:
              case 217:
              case 218:
              case 219:
              case 220:
              case 221:
              case 222:
              case 223:
              case 224:
              case 225:
              case 226:
              case 227:
              case 228:
              case 229:
              case 230:
              case 231:
              case 232:
              case 233:
              case 234:
              case 235:
                if (state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 34 || state0 === 33 || state0 === 32 || state0 === 31 || state0 === 30 || state0 === 29 || state0 === 28 || state0 === 27 || state0 === 26 || state0 === 0 && t12)
                  switch (state0) {
                    case 0:
                      ccp = $.$index$asx(t11, 0);
                      a1 = ccp.get$rA();
                      t11 = t16.$negate(wB);
                      t12 = ccp.get$rB().y;
                      if (typeof t12 !== "number")
                        throw $.iae(t12);
                      if (typeof t14 !== "number")
                        throw $.iae(t14);
                      if (typeof t13 !== "number")
                        throw $.iae(t13);
                      t13 = t11 * t12 + t14 - t13;
                      t14 = a1.y;
                    case 26:
                      state0 = 0;
                      t14 = t15.$mul(wA, t14);
                      if (typeof t14 !== "number")
                        throw $.iae(t14);
                      t1.x = t13 + t14;
                      t14 = ccp.get$rB().x;
                    case 27:
                      state0 = 0;
                      t14 = t16.$mul(wB, t14);
                      t13 = vB.y;
                    case 28:
                      state0 = 0;
                      t13 = $.$add$ns(t14, t13);
                      t14 = vA.y;
                    case 29:
                      state0 = 0;
                      t14 = $.$sub$n(t13, t14);
                      t13 = a1.x;
                    case 30:
                      state0 = 0;
                      t1.y = $.$sub$n(t14, t15.$mul(wA, t13));
                      b = c.get$normal();
                      t13 = t1.x;
                    case 31:
                      state0 = 0;
                      t14 = b.x;
                    case 32:
                      state0 = 0;
                      t13 = $.$mul$n(t13, t14);
                      t12 = t1.y;
                    case 33:
                      state0 = 0;
                      t11 = b.y;
                    case 34:
                      state0 = 0;
                      vn = $.$add$ns(t13, $.$mul$n(t12, t11));
                      t12 = ccp.get$normalMass();
                      if (typeof t12 !== "number")
                        throw t12.$negate();
                      t12 = $.$negate$n(t12);
                      t13 = $.$sub$n(vn, ccp.get$velocityBias());
                      if (typeof t13 !== "number")
                        throw $.iae(t13);
                      lambda = t12 * t13;
                      t13 = ccp.get$normalImpulse();
                    case 35:
                      state0 = 0;
                      a = $.$add$ns(t13, lambda);
                      newImpulse = $.$gt$n(a, 0) ? a : 0;
                      lambda = $.$sub$n(newImpulse, t13);
                      Px = $.$mul$n(t14, lambda);
                      Py = $.$mul$n(t11, lambda);
                      t11 = vA.x;
                    case 36:
                      state0 = 0;
                      t12 = $.getInterceptor$n(Px);
                      vA.x = $.$sub$n(t11, t12.$mul(Px, invMassA));
                      t11 = vA.y;
                    case 37:
                      state0 = 0;
                      t13 = $.getInterceptor$n(Py);
                      vA.y = $.$sub$n(t11, t13.$mul(Py, invMassA));
                      t11 = ccp.get$rA();
                      t14 = t11.x;
                    case 38:
                      state0 = 0;
                      t14 = $.$mul$n(t14, Py);
                      t11 = t11.y;
                    case 39:
                      state0 = 0;
                      t11 = $.$sub$n(t14, $.$mul$n(t11, Px));
                      if (typeof t11 !== "number")
                        throw $.iae(t11);
                      wA = t15.$sub(wA, invIA * t11);
                      t11 = vB.x;
                    case 40:
                      state0 = 0;
                      vB.x = $.$add$ns(t11, t12.$mul(Px, invMassB));
                      t12 = vB.y;
                    case 41:
                      state0 = 0;
                      vB.y = $.$add$ns(t12, t13.$mul(Py, invMassB));
                      t13 = ccp.get$rB();
                      t12 = t13.x;
                    case 42:
                      state0 = 0;
                      t12 = $.$mul$n(t12, Py);
                      t13 = t13.y;
                    case 43:
                      state0 = 0;
                      t13 = $.$sub$n(t12, $.$mul$n(t13, Px));
                      if (typeof t13 !== "number")
                        throw $.iae(t13);
                      wB = t16.$add(wB, invIB * t13);
                      ccp.set$normalImpulse(newImpulse);
                  }
                else
                  switch (state0) {
                    case 0:
                      t12 = $.getInterceptor$asx(t11);
                      cp1 = t12.$index(t11, 0);
                      cp2 = t12.$index(t11, 1);
                      a = new $.Vector(cp1.get$normalImpulse(), cp2.get$normalImpulse());
                      t11 = t16.$negate(wB);
                      t12 = cp1.get$rB().y;
                      if (typeof t12 !== "number")
                        throw $.iae(t12);
                      if (typeof t14 !== "number")
                        throw $.iae(t14);
                      if (typeof t13 !== "number")
                        throw $.iae(t13);
                      t13 = t11 * t12 + t14 - t13;
                      t14 = cp1.get$rA().y;
                    case 44:
                      state0 = 0;
                      t14 = t15.$mul(wA, t14);
                      if (typeof t14 !== "number")
                        throw $.iae(t14);
                      t9.x = t13 + t14;
                      t14 = cp1.get$rB().x;
                    case 45:
                      state0 = 0;
                      t14 = t16.$mul(wB, t14);
                      t13 = vB.y;
                    case 46:
                      state0 = 0;
                      t13 = $.$add$ns(t14, t13);
                      t14 = vA.y;
                    case 47:
                      state0 = 0;
                      t14 = $.$sub$n(t13, t14);
                      t13 = cp1.get$rA().x;
                    case 48:
                      state0 = 0;
                      t9.y = $.$sub$n(t14, t15.$mul(wA, t13));
                      t13 = t16.$negate(wB);
                      t14 = cp2.get$rB().y;
                      if (typeof t14 !== "number")
                        throw $.iae(t14);
                      t12 = vB.x;
                      if (typeof t12 !== "number")
                        throw $.iae(t12);
                      t11 = vA.x;
                      if (typeof t11 !== "number")
                        throw $.iae(t11);
                      t11 = t13 * t14 + t12 - t11;
                      t12 = cp2.get$rA().y;
                    case 49:
                      state0 = 0;
                      t12 = t15.$mul(wA, t12);
                      if (typeof t12 !== "number")
                        throw $.iae(t12);
                      t10.x = t11 + t12;
                      t12 = cp2.get$rB().x;
                    case 50:
                      state0 = 0;
                      t12 = t16.$mul(wB, t12);
                      t11 = vB.y;
                    case 51:
                      state0 = 0;
                      t11 = $.$add$ns(t12, t11);
                      t12 = vA.y;
                    case 52:
                      state0 = 0;
                      t12 = $.$sub$n(t11, t12);
                      t11 = cp2.get$rA().x;
                    case 53:
                      state0 = 0;
                      t10.y = $.$sub$n(t12, t15.$mul(wA, t11));
                      t11 = t9.x;
                    case 54:
                      state0 = 0;
                      t12 = c.get$normal();
                      t14 = t12.x;
                    case 55:
                      state0 = 0;
                      t11 = $.$mul$n(t11, t14);
                      t13 = t9.y;
                    case 56:
                      state0 = 0;
                      t12 = t12.y;
                    case 57:
                      state0 = 0;
                      vn1 = $.$add$ns(t11, $.$mul$n(t13, t12));
                      t13 = t10.x;
                    case 58:
                      state0 = 0;
                      t14 = $.$mul$n(t13, t14);
                      t13 = t10.y;
                    case 59:
                      state0 = 0;
                      vn2 = $.$add$ns(t14, $.$mul$n(t13, t12));
                      b = new $.Vector($.$sub$n(vn1, cp1.get$velocityBias()), $.$sub$n(vn2, cp2.get$velocityBias()));
                      t12 = c.get$K();
                      t13 = t12.col1.x;
                    case 60:
                      state0 = 0;
                      t14 = a.x;
                    case 61:
                      state0 = 0;
                      t14 = $.$mul$n(t13, t14);
                      t12 = t12.col2.x;
                    case 62:
                      state0 = 0;
                      t13 = a.y;
                    case 63:
                      state0 = 0;
                      t8.x = $.$add$ns(t14, $.$mul$n(t12, t13));
                      t13 = c.get$K();
                      t12 = t13.col1.y;
                    case 64:
                      state0 = 0;
                      t14 = a.x;
                    case 65:
                      state0 = 0;
                      t14 = $.$mul$n(t12, t14);
                      t13 = t13.col2.y;
                    case 66:
                      state0 = 0;
                      t12 = a.y;
                    case 67:
                      state0 = 0;
                      t8.y = $.$add$ns(t14, $.$mul$n(t13, t12));
                      t12 = b.x;
                    case 68:
                      state0 = 0;
                      t13 = t8.x;
                    case 69:
                      state0 = 0;
                      b.x = $.$sub$n(t12, t13);
                      t13 = b.y;
                    case 70:
                      state0 = 0;
                      t12 = t8.y;
                    case 71:
                      state0 = 0;
                      b.y = $.$sub$n(t13, t12);
                    default:
                      $loop$1: {
                        switch (state0) {
                          case 0:
                            $.Matrix22_mulMatrixAndVectorToOut(c.get$normalMass(), b, t4);
                            t11 = t4.x;
                          case 72:
                            state0 = 0;
                            t4.x = $.$mul$n(t11, -1);
                            t11 = t4.y;
                          case 73:
                            state0 = 0;
                            t4.y = $.$mul$n(t11, -1);
                            t11 = t4.x;
                          case 74:
                            state0 = 0;
                          case 75:
                            if (state0 === 75 || state0 === 0 && $.$ge$n(t11, 0))
                              switch (state0) {
                                case 0:
                                  t12 = t4.y;
                                case 75:
                                  state0 = 0;
                                  t12 = $.$ge$n(t12, 0);
                              }
                            else
                              t12 = false;
                          default:
                            if (state0 === 113 || state0 === 112 || state0 === 111 || state0 === 110 || state0 === 109 || state0 === 108 || state0 === 107 || state0 === 106 || state0 === 105 || state0 === 104 || state0 === 103 || state0 === 102 || state0 === 101 || state0 === 100 || state0 === 99 || state0 === 98 || state0 === 97 || state0 === 96 || state0 === 95 || state0 === 94 || state0 === 93 || state0 === 92 || state0 === 91 || state0 === 90 || state0 === 89 || state0 === 88 || state0 === 87 || state0 === 86 || state0 === 85 || state0 === 84 || state0 === 83 || state0 === 82 || state0 === 81 || state0 === 80 || state0 === 79 || state0 === 78 || state0 === 77 || state0 === 76 || state0 === 0 && t12)
                              switch (state0) {
                                case 0:
                                  t12 = t4.y;
                                  t3.x = t11;
                                  t3.y = t12;
                                  t12 = t3.x;
                                case 76:
                                  state0 = 0;
                                  t11 = a.x;
                                case 77:
                                  state0 = 0;
                                  t3.x = $.$sub$n(t12, t11);
                                  t11 = t3.y;
                                case 78:
                                  state0 = 0;
                                  t12 = a.y;
                                case 79:
                                  state0 = 0;
                                  t3.y = $.$sub$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t5.x = t11;
                                  t5.y = t12;
                                  t12 = t3.x;
                                case 80:
                                  state0 = 0;
                                  t11 = t5.x;
                                case 81:
                                  state0 = 0;
                                  t5.x = $.$mul$n(t11, t12);
                                  t11 = t5.y;
                                case 82:
                                  state0 = 0;
                                  t5.y = $.$mul$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t6.x = t11;
                                  t6.y = t12;
                                  t12 = t3.y;
                                case 83:
                                  state0 = 0;
                                  t11 = t6.x;
                                case 84:
                                  state0 = 0;
                                  t6.x = $.$mul$n(t11, t12);
                                  t11 = t6.y;
                                case 85:
                                  state0 = 0;
                                  t6.y = $.$mul$n(t11, t12);
                                  t12 = t5.x;
                                  t11 = t5.y;
                                  t7.x = t12;
                                  t7.y = t11;
                                  t11 = t7.x;
                                case 86:
                                  state0 = 0;
                                  t12 = t6.x;
                                case 87:
                                  state0 = 0;
                                  t7.x = $.$add$ns(t11, t12);
                                  t12 = t7.y;
                                case 88:
                                  state0 = 0;
                                  t11 = t6.y;
                                case 89:
                                  state0 = 0;
                                  t7.y = $.$add$ns(t12, t11);
                                  t11 = t7.x;
                                  t12 = t7.y;
                                  t8.x = t11;
                                  t8.y = t12;
                                  t12 = t8.x;
                                case 90:
                                  state0 = 0;
                                  t8.x = $.$mul$n(t12, invMassA);
                                  t12 = t8.y;
                                case 91:
                                  state0 = 0;
                                  t8.y = $.$mul$n(t12, invMassA);
                                  t12 = vA.x;
                                case 92:
                                  state0 = 0;
                                  t11 = t8.x;
                                case 93:
                                  state0 = 0;
                                  vA.x = $.$sub$n(t12, t11);
                                  t11 = vA.y;
                                case 94:
                                  state0 = 0;
                                  t12 = t8.y;
                                case 95:
                                  state0 = 0;
                                  vA.y = $.$sub$n(t11, t12);
                                  t12 = t7.x;
                                  t11 = t7.y;
                                  t8.x = t12;
                                  t8.y = t11;
                                  t11 = t8.x;
                                case 96:
                                  state0 = 0;
                                  t8.x = $.$mul$n(t11, invMassB);
                                  t11 = t8.y;
                                case 97:
                                  state0 = 0;
                                  t8.y = $.$mul$n(t11, invMassB);
                                  t11 = vB.x;
                                case 98:
                                  state0 = 0;
                                  t12 = t8.x;
                                case 99:
                                  state0 = 0;
                                  vB.x = $.$add$ns(t11, t12);
                                  t12 = vB.y;
                                case 100:
                                  state0 = 0;
                                  t11 = t8.y;
                                case 101:
                                  state0 = 0;
                                  vB.y = $.$add$ns(t12, t11);
                                  t11 = cp1.get$rA();
                                  t12 = t11.x;
                                case 102:
                                  state0 = 0;
                                  t13 = t5.y;
                                case 103:
                                  state0 = 0;
                                  t12 = $.$mul$n(t12, t13);
                                  t11 = t11.y;
                                case 104:
                                  state0 = 0;
                                  t14 = t5.x;
                                case 105:
                                  state0 = 0;
                                  t11 = $.$sub$n(t12, $.$mul$n(t11, t14));
                                  t12 = cp2.get$rA();
                                  t17 = t12.x;
                                case 106:
                                  state0 = 0;
                                  t18 = t6.y;
                                case 107:
                                  state0 = 0;
                                  t17 = $.$mul$n(t17, t18);
                                  t12 = t12.y;
                                case 108:
                                  state0 = 0;
                                  t19 = t6.x;
                                case 109:
                                  state0 = 0;
                                  t12 = $.$add$ns(t11, $.$sub$n(t17, $.$mul$n(t12, t19)));
                                  if (typeof t12 !== "number")
                                    throw $.iae(t12);
                                  wA = t15.$sub(wA, invIA * t12);
                                  t12 = cp1.get$rB();
                                  t15 = t12.x;
                                case 110:
                                  state0 = 0;
                                  t13 = $.$mul$n(t15, t13);
                                  t12 = t12.y;
                                case 111:
                                  state0 = 0;
                                  t14 = $.$sub$n(t13, $.$mul$n(t12, t14));
                                  t12 = cp2.get$rB();
                                  t13 = t12.x;
                                case 112:
                                  state0 = 0;
                                  t18 = $.$mul$n(t13, t18);
                                  t12 = t12.y;
                                case 113:
                                  state0 = 0;
                                  t19 = $.$add$ns(t14, $.$sub$n(t18, $.$mul$n(t12, t19)));
                                  if (typeof t19 !== "number")
                                    throw $.iae(t19);
                                  wB = t16.$add(wB, invIB * t19);
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            t11 = cp1.get$normalMass();
                            if (typeof t11 !== "number")
                              throw t11.$negate();
                            t11 = $.$negate$n(t11);
                            t12 = b.x;
                            if (typeof t12 !== "number")
                              throw $.iae(t12);
                            t4.x = t11 * t12;
                            t4.y = 0;
                            t12 = c.get$K().col1.y;
                          case 114:
                            state0 = 0;
                            t11 = t4.x;
                          case 115:
                            state0 = 0;
                            t12 = $.$mul$n(t12, t11);
                            t13 = b.y;
                          case 116:
                            state0 = 0;
                            vn2 = $.$add$ns(t12, t13);
                          case 117:
                          case 118:
                          case 119:
                          case 120:
                          case 121:
                          case 122:
                          case 123:
                          case 124:
                          case 125:
                          case 126:
                          case 127:
                          case 128:
                          case 129:
                          case 130:
                          case 131:
                          case 132:
                          case 133:
                          case 134:
                          case 135:
                          case 136:
                          case 137:
                          case 138:
                          case 139:
                          case 140:
                          case 141:
                          case 142:
                          case 143:
                          case 144:
                          case 145:
                          case 146:
                          case 147:
                          case 148:
                          case 149:
                          case 150:
                          case 151:
                          case 152:
                          case 153:
                          case 154:
                            if (state0 === 154 || state0 === 153 || state0 === 152 || state0 === 151 || state0 === 150 || state0 === 149 || state0 === 148 || state0 === 147 || state0 === 146 || state0 === 145 || state0 === 144 || state0 === 143 || state0 === 142 || state0 === 141 || state0 === 140 || state0 === 139 || state0 === 138 || state0 === 137 || state0 === 136 || state0 === 135 || state0 === 134 || state0 === 133 || state0 === 132 || state0 === 131 || state0 === 130 || state0 === 129 || state0 === 128 || state0 === 127 || state0 === 126 || state0 === 125 || state0 === 124 || state0 === 123 || state0 === 122 || state0 === 121 || state0 === 120 || state0 === 119 || state0 === 118 || state0 === 117 || state0 === 0 && $.$ge$n(t11, 0) && $.$ge$n(vn2, 0))
                              switch (state0) {
                                case 0:
                                  t12 = t4.y;
                                  t3.x = t11;
                                  t3.y = t12;
                                  t12 = t3.x;
                                case 117:
                                  state0 = 0;
                                  t11 = a.x;
                                case 118:
                                  state0 = 0;
                                  t3.x = $.$sub$n(t12, t11);
                                  t11 = t3.y;
                                case 119:
                                  state0 = 0;
                                  t12 = a.y;
                                case 120:
                                  state0 = 0;
                                  t3.y = $.$sub$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t5.x = t11;
                                  t5.y = t12;
                                  t12 = t3.x;
                                case 121:
                                  state0 = 0;
                                  t11 = t5.x;
                                case 122:
                                  state0 = 0;
                                  t5.x = $.$mul$n(t11, t12);
                                  t11 = t5.y;
                                case 123:
                                  state0 = 0;
                                  t5.y = $.$mul$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t6.x = t11;
                                  t6.y = t12;
                                  t12 = t3.y;
                                case 124:
                                  state0 = 0;
                                  t11 = t6.x;
                                case 125:
                                  state0 = 0;
                                  t6.x = $.$mul$n(t11, t12);
                                  t11 = t6.y;
                                case 126:
                                  state0 = 0;
                                  t6.y = $.$mul$n(t11, t12);
                                  t12 = t5.x;
                                  t11 = t5.y;
                                  t7.x = t12;
                                  t7.y = t11;
                                  t11 = t7.x;
                                case 127:
                                  state0 = 0;
                                  t12 = t6.x;
                                case 128:
                                  state0 = 0;
                                  t7.x = $.$add$ns(t11, t12);
                                  t12 = t7.y;
                                case 129:
                                  state0 = 0;
                                  t11 = t6.y;
                                case 130:
                                  state0 = 0;
                                  t7.y = $.$add$ns(t12, t11);
                                  t11 = t7.x;
                                  t12 = t7.y;
                                  t8.x = t11;
                                  t8.y = t12;
                                  t12 = t8.x;
                                case 131:
                                  state0 = 0;
                                  t8.x = $.$mul$n(t12, invMassA);
                                  t12 = t8.y;
                                case 132:
                                  state0 = 0;
                                  t8.y = $.$mul$n(t12, invMassA);
                                  t12 = vA.x;
                                case 133:
                                  state0 = 0;
                                  t11 = t8.x;
                                case 134:
                                  state0 = 0;
                                  vA.x = $.$sub$n(t12, t11);
                                  t11 = vA.y;
                                case 135:
                                  state0 = 0;
                                  t12 = t8.y;
                                case 136:
                                  state0 = 0;
                                  vA.y = $.$sub$n(t11, t12);
                                  t12 = t7.x;
                                  t11 = t7.y;
                                  t8.x = t12;
                                  t8.y = t11;
                                  t11 = t8.x;
                                case 137:
                                  state0 = 0;
                                  t8.x = $.$mul$n(t11, invMassB);
                                  t11 = t8.y;
                                case 138:
                                  state0 = 0;
                                  t8.y = $.$mul$n(t11, invMassB);
                                  t11 = vB.x;
                                case 139:
                                  state0 = 0;
                                  t12 = t8.x;
                                case 140:
                                  state0 = 0;
                                  vB.x = $.$add$ns(t11, t12);
                                  t12 = vB.y;
                                case 141:
                                  state0 = 0;
                                  t11 = t8.y;
                                case 142:
                                  state0 = 0;
                                  vB.y = $.$add$ns(t12, t11);
                                  t11 = cp1.get$rA();
                                  t12 = t11.x;
                                case 143:
                                  state0 = 0;
                                  t13 = t5.y;
                                case 144:
                                  state0 = 0;
                                  t12 = $.$mul$n(t12, t13);
                                  t11 = t11.y;
                                case 145:
                                  state0 = 0;
                                  t14 = t5.x;
                                case 146:
                                  state0 = 0;
                                  t11 = $.$sub$n(t12, $.$mul$n(t11, t14));
                                  t12 = cp2.get$rA();
                                  t17 = t12.x;
                                case 147:
                                  state0 = 0;
                                  t18 = t6.y;
                                case 148:
                                  state0 = 0;
                                  t17 = $.$mul$n(t17, t18);
                                  t12 = t12.y;
                                case 149:
                                  state0 = 0;
                                  t19 = t6.x;
                                case 150:
                                  state0 = 0;
                                  t12 = $.$add$ns(t11, $.$sub$n(t17, $.$mul$n(t12, t19)));
                                  if (typeof t12 !== "number")
                                    throw $.iae(t12);
                                  wA = t15.$sub(wA, invIA * t12);
                                  t12 = cp1.get$rB();
                                  t15 = t12.x;
                                case 151:
                                  state0 = 0;
                                  t13 = $.$mul$n(t15, t13);
                                  t12 = t12.y;
                                case 152:
                                  state0 = 0;
                                  t14 = $.$sub$n(t13, $.$mul$n(t12, t14));
                                  t12 = cp2.get$rB();
                                  t13 = t12.x;
                                case 153:
                                  state0 = 0;
                                  t18 = $.$mul$n(t13, t18);
                                  t12 = t12.y;
                                case 154:
                                  state0 = 0;
                                  t19 = $.$add$ns(t14, $.$sub$n(t18, $.$mul$n(t12, t19)));
                                  if (typeof t19 !== "number")
                                    throw $.iae(t19);
                                  wB = t16.$add(wB, invIB * t19);
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            t4.x = 0;
                            t11 = cp2.get$normalMass();
                            if (typeof t11 !== "number")
                              throw t11.$negate();
                            t11 = $.$negate$n(t11);
                            t12 = b.y;
                            if (typeof t12 !== "number")
                              throw $.iae(t12);
                            t4.y = t11 * t12;
                            t12 = c.get$K().col2.x;
                          case 155:
                            state0 = 0;
                            t11 = t4.y;
                          case 156:
                            state0 = 0;
                            t12 = $.$mul$n(t12, t11);
                            t13 = b.x;
                          case 157:
                            state0 = 0;
                            vn1 = $.$add$ns(t12, t13);
                          case 158:
                          case 159:
                          case 160:
                          case 161:
                          case 162:
                          case 163:
                          case 164:
                          case 165:
                          case 166:
                          case 167:
                          case 168:
                          case 169:
                          case 170:
                          case 171:
                          case 172:
                          case 173:
                          case 174:
                          case 175:
                          case 176:
                          case 177:
                          case 178:
                          case 179:
                          case 180:
                          case 181:
                          case 182:
                          case 183:
                          case 184:
                          case 185:
                          case 186:
                          case 187:
                          case 188:
                          case 189:
                          case 190:
                          case 191:
                          case 192:
                          case 193:
                          case 194:
                          case 195:
                            if (state0 === 195 || state0 === 194 || state0 === 193 || state0 === 192 || state0 === 191 || state0 === 190 || state0 === 189 || state0 === 188 || state0 === 187 || state0 === 186 || state0 === 185 || state0 === 184 || state0 === 183 || state0 === 182 || state0 === 181 || state0 === 180 || state0 === 179 || state0 === 178 || state0 === 177 || state0 === 176 || state0 === 175 || state0 === 174 || state0 === 173 || state0 === 172 || state0 === 171 || state0 === 170 || state0 === 169 || state0 === 168 || state0 === 167 || state0 === 166 || state0 === 165 || state0 === 164 || state0 === 163 || state0 === 162 || state0 === 161 || state0 === 160 || state0 === 159 || state0 === 158 || state0 === 0 && $.$ge$n(t11, 0) && $.$ge$n(vn1, 0))
                              switch (state0) {
                                case 0:
                                  t3.x = t4.x;
                                  t3.y = t11;
                                  t11 = t3.x;
                                case 158:
                                  state0 = 0;
                                  t12 = a.x;
                                case 159:
                                  state0 = 0;
                                  t3.x = $.$sub$n(t11, t12);
                                  t12 = t3.y;
                                case 160:
                                  state0 = 0;
                                  t11 = a.y;
                                case 161:
                                  state0 = 0;
                                  t3.y = $.$sub$n(t12, t11);
                                  t11 = c.get$normal();
                                  t12 = t11.x;
                                  t11 = t11.y;
                                  t5.x = t12;
                                  t5.y = t11;
                                  t11 = t3.x;
                                case 162:
                                  state0 = 0;
                                  t12 = t5.x;
                                case 163:
                                  state0 = 0;
                                  t5.x = $.$mul$n(t12, t11);
                                  t12 = t5.y;
                                case 164:
                                  state0 = 0;
                                  t5.y = $.$mul$n(t12, t11);
                                  t11 = c.get$normal();
                                  t12 = t11.x;
                                  t11 = t11.y;
                                  t6.x = t12;
                                  t6.y = t11;
                                  t11 = t3.y;
                                case 165:
                                  state0 = 0;
                                  t12 = t6.x;
                                case 166:
                                  state0 = 0;
                                  t6.x = $.$mul$n(t12, t11);
                                  t12 = t6.y;
                                case 167:
                                  state0 = 0;
                                  t6.y = $.$mul$n(t12, t11);
                                  t11 = t5.x;
                                  t12 = t5.y;
                                  t7.x = t11;
                                  t7.y = t12;
                                  t12 = t7.x;
                                case 168:
                                  state0 = 0;
                                  t11 = t6.x;
                                case 169:
                                  state0 = 0;
                                  t7.x = $.$add$ns(t12, t11);
                                  t11 = t7.y;
                                case 170:
                                  state0 = 0;
                                  t12 = t6.y;
                                case 171:
                                  state0 = 0;
                                  t7.y = $.$add$ns(t11, t12);
                                  t12 = t7.x;
                                  t11 = t7.y;
                                  t8.x = t12;
                                  t8.y = t11;
                                  t11 = t8.x;
                                case 172:
                                  state0 = 0;
                                  t8.x = $.$mul$n(t11, invMassA);
                                  t11 = t8.y;
                                case 173:
                                  state0 = 0;
                                  t8.y = $.$mul$n(t11, invMassA);
                                  t11 = vA.x;
                                case 174:
                                  state0 = 0;
                                  t12 = t8.x;
                                case 175:
                                  state0 = 0;
                                  vA.x = $.$sub$n(t11, t12);
                                  t12 = vA.y;
                                case 176:
                                  state0 = 0;
                                  t11 = t8.y;
                                case 177:
                                  state0 = 0;
                                  vA.y = $.$sub$n(t12, t11);
                                  t11 = t7.x;
                                  t12 = t7.y;
                                  t8.x = t11;
                                  t8.y = t12;
                                  t12 = t8.x;
                                case 178:
                                  state0 = 0;
                                  t8.x = $.$mul$n(t12, invMassB);
                                  t12 = t8.y;
                                case 179:
                                  state0 = 0;
                                  t8.y = $.$mul$n(t12, invMassB);
                                  t12 = vB.x;
                                case 180:
                                  state0 = 0;
                                  t11 = t8.x;
                                case 181:
                                  state0 = 0;
                                  vB.x = $.$add$ns(t12, t11);
                                  t11 = vB.y;
                                case 182:
                                  state0 = 0;
                                  t12 = t8.y;
                                case 183:
                                  state0 = 0;
                                  vB.y = $.$add$ns(t11, t12);
                                  t12 = cp1.get$rA();
                                  t11 = t12.x;
                                case 184:
                                  state0 = 0;
                                  t13 = t5.y;
                                case 185:
                                  state0 = 0;
                                  t11 = $.$mul$n(t11, t13);
                                  t12 = t12.y;
                                case 186:
                                  state0 = 0;
                                  t14 = t5.x;
                                case 187:
                                  state0 = 0;
                                  t12 = $.$sub$n(t11, $.$mul$n(t12, t14));
                                  t11 = cp2.get$rA();
                                  t17 = t11.x;
                                case 188:
                                  state0 = 0;
                                  t18 = t6.y;
                                case 189:
                                  state0 = 0;
                                  t17 = $.$mul$n(t17, t18);
                                  t11 = t11.y;
                                case 190:
                                  state0 = 0;
                                  t19 = t6.x;
                                case 191:
                                  state0 = 0;
                                  t11 = $.$add$ns(t12, $.$sub$n(t17, $.$mul$n(t11, t19)));
                                  if (typeof t11 !== "number")
                                    throw $.iae(t11);
                                  wA = t15.$sub(wA, invIA * t11);
                                  t11 = cp1.get$rB();
                                  t15 = t11.x;
                                case 192:
                                  state0 = 0;
                                  t13 = $.$mul$n(t15, t13);
                                  t11 = t11.y;
                                case 193:
                                  state0 = 0;
                                  t14 = $.$sub$n(t13, $.$mul$n(t11, t14));
                                  t11 = cp2.get$rB();
                                  t13 = t11.x;
                                case 194:
                                  state0 = 0;
                                  t18 = $.$mul$n(t13, t18);
                                  t11 = t11.y;
                                case 195:
                                  state0 = 0;
                                  t19 = $.$add$ns(t14, $.$sub$n(t18, $.$mul$n(t11, t19)));
                                  if (typeof t19 !== "number")
                                    throw $.iae(t19);
                                  wB = t16.$add(wB, invIB * t19);
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            t4.x = 0;
                            t4.y = 0;
                            vn1 = b.x;
                          case 196:
                            state0 = 0;
                            vn2 = b.y;
                          case 197:
                            state0 = 0;
                          case 198:
                          case 199:
                          case 200:
                          case 201:
                          case 202:
                          case 203:
                          case 204:
                          case 205:
                          case 206:
                          case 207:
                          case 208:
                          case 209:
                          case 210:
                          case 211:
                          case 212:
                          case 213:
                          case 214:
                          case 215:
                          case 216:
                          case 217:
                          case 218:
                          case 219:
                          case 220:
                          case 221:
                          case 222:
                          case 223:
                          case 224:
                          case 225:
                          case 226:
                          case 227:
                          case 228:
                          case 229:
                          case 230:
                          case 231:
                          case 232:
                          case 233:
                          case 234:
                          case 235:
                            if (state0 === 235 || state0 === 234 || state0 === 233 || state0 === 232 || state0 === 231 || state0 === 230 || state0 === 229 || state0 === 228 || state0 === 227 || state0 === 226 || state0 === 225 || state0 === 224 || state0 === 223 || state0 === 222 || state0 === 221 || state0 === 220 || state0 === 219 || state0 === 218 || state0 === 217 || state0 === 216 || state0 === 215 || state0 === 214 || state0 === 213 || state0 === 212 || state0 === 211 || state0 === 210 || state0 === 209 || state0 === 208 || state0 === 207 || state0 === 206 || state0 === 205 || state0 === 204 || state0 === 203 || state0 === 202 || state0 === 201 || state0 === 200 || state0 === 199 || state0 === 198 || state0 === 0 && $.$ge$n(vn1, 0) && $.$ge$n(vn2, 0))
                              switch (state0) {
                                case 0:
                                  t11 = t4.x;
                                  t12 = t4.y;
                                  t3.x = t11;
                                  t3.y = t12;
                                  t12 = t3.x;
                                case 198:
                                  state0 = 0;
                                  t11 = a.x;
                                case 199:
                                  state0 = 0;
                                  t3.x = $.$sub$n(t12, t11);
                                  t11 = t3.y;
                                case 200:
                                  state0 = 0;
                                  t12 = a.y;
                                case 201:
                                  state0 = 0;
                                  t3.y = $.$sub$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t5.x = t11;
                                  t5.y = t12;
                                  t12 = t3.x;
                                case 202:
                                  state0 = 0;
                                  t11 = t5.x;
                                case 203:
                                  state0 = 0;
                                  t5.x = $.$mul$n(t11, t12);
                                  t11 = t5.y;
                                case 204:
                                  state0 = 0;
                                  t5.y = $.$mul$n(t11, t12);
                                  t12 = c.get$normal();
                                  t11 = t12.x;
                                  t12 = t12.y;
                                  t6.x = t11;
                                  t6.y = t12;
                                  t12 = t3.y;
                                case 205:
                                  state0 = 0;
                                  t11 = t6.x;
                                case 206:
                                  state0 = 0;
                                  t6.x = $.$mul$n(t11, t12);
                                  t11 = t6.y;
                                case 207:
                                  state0 = 0;
                                  t6.y = $.$mul$n(t11, t12);
                                  t12 = t5.x;
                                  t11 = t5.y;
                                  t7.x = t12;
                                  t7.y = t11;
                                  t11 = t7.x;
                                case 208:
                                  state0 = 0;
                                  t12 = t6.x;
                                case 209:
                                  state0 = 0;
                                  t7.x = $.$add$ns(t11, t12);
                                  t12 = t7.y;
                                case 210:
                                  state0 = 0;
                                  t11 = t6.y;
                                case 211:
                                  state0 = 0;
                                  t7.y = $.$add$ns(t12, t11);
                                  t11 = t7.x;
                                  t12 = t7.y;
                                  t8.x = t11;
                                  t8.y = t12;
                                  t12 = t8.x;
                                case 212:
                                  state0 = 0;
                                  t8.x = $.$mul$n(t12, invMassA);
                                  t12 = t8.y;
                                case 213:
                                  state0 = 0;
                                  t8.y = $.$mul$n(t12, invMassA);
                                  t12 = vA.x;
                                case 214:
                                  state0 = 0;
                                  t11 = t8.x;
                                case 215:
                                  state0 = 0;
                                  vA.x = $.$sub$n(t12, t11);
                                  t11 = vA.y;
                                case 216:
                                  state0 = 0;
                                  t12 = t8.y;
                                case 217:
                                  state0 = 0;
                                  vA.y = $.$sub$n(t11, t12);
                                  t12 = t7.x;
                                  t11 = t7.y;
                                  t8.x = t12;
                                  t8.y = t11;
                                  t11 = t8.x;
                                case 218:
                                  state0 = 0;
                                  t8.x = $.$mul$n(t11, invMassB);
                                  t11 = t8.y;
                                case 219:
                                  state0 = 0;
                                  t8.y = $.$mul$n(t11, invMassB);
                                  t11 = vB.x;
                                case 220:
                                  state0 = 0;
                                  t12 = t8.x;
                                case 221:
                                  state0 = 0;
                                  vB.x = $.$add$ns(t11, t12);
                                  t12 = vB.y;
                                case 222:
                                  state0 = 0;
                                  t11 = t8.y;
                                case 223:
                                  state0 = 0;
                                  vB.y = $.$add$ns(t12, t11);
                                  t11 = cp1.get$rA();
                                  t12 = t11.x;
                                case 224:
                                  state0 = 0;
                                  t13 = t5.y;
                                case 225:
                                  state0 = 0;
                                  t12 = $.$mul$n(t12, t13);
                                  t11 = t11.y;
                                case 226:
                                  state0 = 0;
                                  t14 = t5.x;
                                case 227:
                                  state0 = 0;
                                  t11 = $.$sub$n(t12, $.$mul$n(t11, t14));
                                  t12 = cp2.get$rA();
                                  t17 = t12.x;
                                case 228:
                                  state0 = 0;
                                  t18 = t6.y;
                                case 229:
                                  state0 = 0;
                                  t17 = $.$mul$n(t17, t18);
                                  t12 = t12.y;
                                case 230:
                                  state0 = 0;
                                  t19 = t6.x;
                                case 231:
                                  state0 = 0;
                                  t12 = $.$add$ns(t11, $.$sub$n(t17, $.$mul$n(t12, t19)));
                                  if (typeof t12 !== "number")
                                    throw $.iae(t12);
                                  wA = t15.$sub(wA, invIA * t12);
                                  t12 = cp1.get$rB();
                                  t15 = t12.x;
                                case 232:
                                  state0 = 0;
                                  t13 = $.$mul$n(t15, t13);
                                  t12 = t12.y;
                                case 233:
                                  state0 = 0;
                                  t14 = $.$sub$n(t13, $.$mul$n(t12, t14));
                                  t12 = cp2.get$rB();
                                  t13 = t12.x;
                                case 234:
                                  state0 = 0;
                                  t18 = $.$mul$n(t13, t18);
                                  t12 = t12.y;
                                case 235:
                                  state0 = 0;
                                  t19 = $.$add$ns(t14, $.$sub$n(t18, $.$mul$n(t12, t19)));
                                  if (typeof t19 !== "number")
                                    throw $.iae(t19);
                                  wB = t16.$add(wB, invIB * t19);
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            break $loop$1;
                        }
                      }
                  }
                t11 = bodyA.get$linearVelocity();
                t12 = vA.x;
                t13 = vA.y;
                t11.x = t12;
                t11.y = t13;
                bodyA.set$angularVelocity(wA);
                t13 = bodyB.get$linearVelocity();
                t11 = vB.x;
                t12 = vB.y;
                t13.x = t11;
                t13.y = t12;
                bodyB.set$angularVelocity(wB);
                ++i;
            }
    }
  },
  storeImpulses$0: function() {
    var i, t1, c, m, t2, j;
    for (i = 0; $.JSNumber_methods.$lt(i, this.constraintCount); ++i) {
      t1 = this.constraints;
      if (i >= t1.length)
        throw $.ioore(i);
      c = t1[i];
      m = c.get$manifold();
      for (t1 = $.getInterceptor$x(m), t2 = $.getInterceptor$x(c), j = 0; $.JSNumber_methods.$lt(j, c.get$pointCount()); ++j) {
        $.$index$asx(t1.get$points(m), j).set$normalImpulse($.$index$asx(t2.get$points(c), j).get$normalImpulse());
        $.$index$asx(t1.get$points(m), j).set$tangentImpulse($.$index$asx(t2.get$points(c), j).get$tangentImpulse());
      }
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    var t1, t2, t3, t4, psm, normal, point, minSeparation, i, t5, c, bodyA, bodyB, t6, invMassA, invIA, invMassB, invIB, j, separation, t7, t8, C, t9, rnA, rnB, K, impulse, t10;
    t1 = this.P;
    t2 = this.temp1;
    t3 = this.rA;
    t4 = this.rB;
    psm = this.psolver;
    normal = psm.normal;
    point = psm.point;
    minSeparation = 0;
    i = 0;
    while (true) {
      t5 = this.constraintCount;
      if (typeof t5 !== "number")
        throw $.iae(t5);
      if (!(i < t5))
        break;
      t5 = this.constraints;
      if (i >= t5.length)
        throw $.ioore(i);
      c = t5[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      t5 = bodyA.get$mass();
      t6 = bodyA.get$invMass();
      if (typeof t5 !== "number")
        throw t5.$mul();
      invMassA = t5 * t6;
      invIA = t5 * bodyA.get$invInertia();
      t5 = bodyB.get$mass();
      t6 = bodyB.get$invMass();
      if (typeof t5 !== "number")
        throw t5.$mul();
      invMassB = t5 * t6;
      invIB = t5 * bodyB.get$invInertia();
      t5 = invMassA + invMassB;
      j = 0;
      while (true) {
        t6 = c.get$pointCount();
        if (typeof t6 !== "number")
          throw $.iae(t6);
        if (!(j < t6))
          break;
        psm.initialize$2(psm, c, j);
        separation = psm.separation;
        if (typeof separation !== "number")
          return this.solvePositionConstraints$1$bailout(1, baumgarte, t5, t1, invIB, normal, point, separation, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c);
        t6 = point.x;
        t7 = point.y;
        t3.x = t6;
        t3.y = t7;
        t7 = bodyA.get$sweep().center;
        t6 = t3.x;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(2, baumgarte, t5, t1, invIB, normal, point, separation, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7);
        t8 = t7.x;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(3, baumgarte, t5, t1, invIB, normal, point, separation, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8);
        t3.x = t6 - t8;
        t8 = t3.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(4, baumgarte, t5, t1, invIB, normal, point, separation, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, 0, t7, t8);
        t7 = t7.y;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(5, baumgarte, t5, t1, invIB, normal, point, separation, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, 0, t7, t8);
        t3.y = t8 - t7;
        t7 = point.x;
        t8 = point.y;
        t4.x = t7;
        t4.y = t8;
        t8 = bodyB.get$sweep().center;
        t7 = t4.x;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(6, baumgarte, t5, t1, invIB, normal, point, separation, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, 0, t7, t8);
        t6 = t8.x;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(7, baumgarte, t5, t1, invIB, normal, point, separation, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8);
        t4.x = t7 - t6;
        t6 = t4.y;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(8, baumgarte, t5, t1, invIB, normal, point, separation, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, 0, t8);
        t8 = t8.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(9, baumgarte, t5, t1, invIB, normal, point, separation, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, 0, t8);
        t4.y = t6 - t8;
        minSeparation = $.min(minSeparation, separation);
        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        t8 = t3.x;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(10, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, 0, 0, t8, C);
        t6 = normal.y;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(11, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, 0, t8, C);
        t8 *= t6;
        t7 = t3.y;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(12, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8, C);
        t9 = normal.x;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(13, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8, C, t9);
        rnA = t8 - t7 * t9;
        t7 = t4.x;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(14, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, 0, C, t9, rnA);
        t7 *= t6;
        t8 = t4.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(15, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8, C, t9, rnA);
        rnB = t7 - t8 * t9;
        K = t5 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t1.x = t9;
        t1.y = t6;
        t6 = t1.x;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(16, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, 0, 0, 0, 0, 0, impulse);
        t1.x = t6 * impulse;
        t6 = t1.y;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(17, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, 0, 0, 0, 0, 0, impulse);
        t1.y = t6 * impulse;
        t6 = t1.x;
        t7 = t1.y;
        t2.x = t6;
        t2.y = t7;
        t7 = t2.x;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(18, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, 0, t7);
        t2.x = t7 * invMassA;
        t7 = t2.y;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(19, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, 0, t7);
        t2.y = t7 * invMassA;
        t7 = bodyA.get$sweep().center;
        t6 = t7.x;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(20, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7);
        t8 = t2.x;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(21, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8);
        t7.x = t6 - t8;
        t8 = t7.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(22, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, 0, t7, t8);
        t6 = t2.y;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(23, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8);
        t7.y = t8 - t6;
        t6 = bodyA.get$sweep();
        t8 = t6.angle;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(24, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, 0, t8);
        t7 = t3.x;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(25, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8);
        t9 = t1.y;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(26, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8, 0, t9);
        t9 = t7 * t9;
        t7 = t3.y;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(27, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8, 0, t9);
        t10 = t1.x;
        if (typeof t10 !== "number")
          return this.solvePositionConstraints$1$bailout(28, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8, 0, t9, 0, 0, t10);
        t6.angle = t8 - invIA * (t9 - t7 * t10);
        bodyA.synchronizeTransform$0();
        t10 = t1.x;
        t7 = t1.y;
        t2.x = t10;
        t2.y = t7;
        t7 = t2.x;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(29, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, 0, 0, t7);
        t2.x = t7 * invMassB;
        t7 = t2.y;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(30, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, 0, 0, t7);
        t2.y = t7 * invMassB;
        t7 = bodyB.get$sweep().center;
        t10 = t7.x;
        if (typeof t10 !== "number")
          return this.solvePositionConstraints$1$bailout(31, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, 0, 0, t7, 0, 0, 0, 0, t10);
        t9 = t2.x;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(32, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t9, 0, t7, 0, 0, 0, 0, t10);
        t7.x = t10 + t9;
        t9 = t7.y;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(33, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t9, 0, t7);
        t10 = t2.y;
        if (typeof t10 !== "number")
          return this.solvePositionConstraints$1$bailout(34, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t9, 0, t7, 0, 0, 0, 0, t10);
        t7.y = t9 + t10;
        t10 = bodyB.get$sweep();
        t9 = t10.angle;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(35, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t9, 0, 0, 0, 0, 0, 0, t10);
        t7 = t4.x;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(36, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t9, 0, t7, 0, 0, 0, 0, t10);
        t8 = t1.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(37, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t9, t8, t7, 0, 0, 0, 0, t10);
        t8 = t7 * t8;
        t7 = t4.y;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(38, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t9, t8, t7, 0, 0, 0, 0, t10);
        t6 = t1.x;
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(39, baumgarte, t5, t1, invIB, normal, point, 0, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t9, t8, t7, 0, t6, 0, 0, t10);
        t10.angle = t9 + invIB * (t8 - t7 * t6);
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solvePositionConstraints$1$bailout: function(state0, baumgarte, t5, t1, invIB, normal, point, separation, minSeparation, i, psm, t2, t4, j, bodyA, bodyB, invMassA, t3, invIA, invMassB, c, t6, t7, t8, C, t9, rnA, impulse, t10) {
    switch (state0) {
      case 0:
        t1 = this.P;
        t2 = this.temp1;
        t3 = this.rA;
        t4 = this.rB;
        psm = this.psolver;
        normal = psm.normal;
        point = psm.point;
        minSeparation = 0;
        i = 0;
      default:
        var rnB, K;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t5 = this.constraintCount;
                if (typeof t5 !== "number")
                  throw $.iae(t5);
                if (!$.JSNumber_methods.$lt(i, t5))
                  break L0;
                t5 = this.constraints;
                if (i >= t5.length)
                  throw $.ioore(i);
                c = t5[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                t5 = bodyA.get$mass();
                t6 = bodyA.get$invMass();
                t7 = $.getInterceptor$n(t5);
                if (typeof t5 !== "number")
                  throw t5.$mul();
                invMassA = t7.$mul(t5, t6);
                invIA = t7.$mul(t5, bodyA.get$invInertia());
                t5 = bodyB.get$mass();
                t7 = bodyB.get$invMass();
                t6 = $.getInterceptor$n(t5);
                if (typeof t5 !== "number")
                  throw t5.$mul();
                invMassB = t6.$mul(t5, t7);
                invIB = t6.$mul(t5, bodyB.get$invInertia());
                t5 = invMassA + invMassB;
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t6 = c.get$pointCount();
                        if (typeof t6 !== "number")
                          throw $.iae(t6);
                        if (!$.JSNumber_methods.$lt(j, t6))
                          break L1;
                        psm.initialize$2(psm, c, j);
                        separation = psm.separation;
                      case 1:
                        state0 = 0;
                        t6 = point.x;
                        t7 = point.y;
                        t3.x = t6;
                        t3.y = t7;
                        t7 = bodyA.get$sweep().center;
                        t6 = t3.x;
                      case 2:
                        state0 = 0;
                        t8 = t7.x;
                      case 3:
                        state0 = 0;
                        t3.x = $.$sub$n(t6, t8);
                        t8 = t3.y;
                      case 4:
                        state0 = 0;
                        t7 = t7.y;
                      case 5:
                        state0 = 0;
                        t3.y = $.$sub$n(t8, t7);
                        t7 = point.x;
                        t8 = point.y;
                        t4.x = t7;
                        t4.y = t8;
                        t8 = bodyB.get$sweep().center;
                        t7 = t4.x;
                      case 6:
                        state0 = 0;
                        t6 = t8.x;
                      case 7:
                        state0 = 0;
                        t4.x = $.$sub$n(t7, t6);
                        t6 = t4.y;
                      case 8:
                        state0 = 0;
                        t8 = t8.y;
                      case 9:
                        state0 = 0;
                        t4.y = $.$sub$n(t6, t8);
                        minSeparation = $.min(minSeparation, separation);
                        t8 = $.$add$ns(separation, 0.005);
                        if (typeof t8 !== "number")
                          throw $.iae(t8);
                        C = $.max(-0.2, $.min(baumgarte * t8, 0));
                        t8 = t3.x;
                      case 10:
                        state0 = 0;
                        t6 = normal.y;
                      case 11:
                        state0 = 0;
                        t8 = $.$mul$n(t8, t6);
                        t7 = t3.y;
                      case 12:
                        state0 = 0;
                        t9 = normal.x;
                      case 13:
                        state0 = 0;
                        rnA = $.$sub$n(t8, $.$mul$n(t7, t9));
                        t7 = t4.x;
                      case 14:
                        state0 = 0;
                        t7 = $.$mul$n(t7, t6);
                        t8 = t4.y;
                      case 15:
                        state0 = 0;
                        rnB = $.$sub$n(t7, $.$mul$n(t8, t9));
                        if (typeof rnA !== "number")
                          throw $.iae(rnA);
                        if (typeof rnB !== "number")
                          throw $.iae(rnB);
                        K = t5 + invIA * rnA * rnA + invIB * rnB * rnB;
                        impulse = K > 0 ? -C / K : 0;
                        t1.x = t9;
                        t1.y = t6;
                        t6 = t1.x;
                      case 16:
                        state0 = 0;
                        t1.x = $.$mul$n(t6, impulse);
                        t6 = t1.y;
                      case 17:
                        state0 = 0;
                        t1.y = $.$mul$n(t6, impulse);
                        t6 = t1.x;
                        t7 = t1.y;
                        t2.x = t6;
                        t2.y = t7;
                        t7 = t2.x;
                      case 18:
                        state0 = 0;
                        t2.x = $.$mul$n(t7, invMassA);
                        t7 = t2.y;
                      case 19:
                        state0 = 0;
                        t2.y = $.$mul$n(t7, invMassA);
                        t7 = bodyA.get$sweep().center;
                        t6 = t7.x;
                      case 20:
                        state0 = 0;
                        t8 = t2.x;
                      case 21:
                        state0 = 0;
                        t7.x = $.$sub$n(t6, t8);
                        t8 = t7.y;
                      case 22:
                        state0 = 0;
                        t6 = t2.y;
                      case 23:
                        state0 = 0;
                        t7.y = $.$sub$n(t8, t6);
                        t6 = bodyA.get$sweep();
                        t8 = t6.angle;
                      case 24:
                        state0 = 0;
                        t7 = t3.x;
                      case 25:
                        state0 = 0;
                        t9 = t1.y;
                      case 26:
                        state0 = 0;
                        t9 = $.$mul$n(t7, t9);
                        t7 = t3.y;
                      case 27:
                        state0 = 0;
                        t10 = t1.x;
                      case 28:
                        state0 = 0;
                        t10 = $.$sub$n(t9, $.$mul$n(t7, t10));
                        if (typeof t10 !== "number")
                          throw $.iae(t10);
                        t6.angle = $.$sub$n(t8, invIA * t10);
                        bodyA.synchronizeTransform$0();
                        t10 = t1.x;
                        t8 = t1.y;
                        t2.x = t10;
                        t2.y = t8;
                        t8 = t2.x;
                      case 29:
                        state0 = 0;
                        t2.x = $.$mul$n(t8, invMassB);
                        t8 = t2.y;
                      case 30:
                        state0 = 0;
                        t2.y = $.$mul$n(t8, invMassB);
                        t8 = bodyB.get$sweep().center;
                        t10 = t8.x;
                      case 31:
                        state0 = 0;
                        t6 = t2.x;
                      case 32:
                        state0 = 0;
                        t8.x = $.$add$ns(t10, t6);
                        t6 = t8.y;
                      case 33:
                        state0 = 0;
                        t10 = t2.y;
                      case 34:
                        state0 = 0;
                        t8.y = $.$add$ns(t6, t10);
                        t10 = bodyB.get$sweep();
                        t6 = t10.angle;
                      case 35:
                        state0 = 0;
                        t8 = t4.x;
                      case 36:
                        state0 = 0;
                        t7 = t1.y;
                      case 37:
                        state0 = 0;
                        t7 = $.$mul$n(t8, t7);
                        t8 = t4.y;
                      case 38:
                        state0 = 0;
                        t9 = t1.x;
                      case 39:
                        state0 = 0;
                        t9 = $.$sub$n(t7, $.$mul$n(t8, t9));
                        if (typeof t9 !== "number")
                          throw $.iae(t9);
                        t10.angle = $.$add$ns(t6, invIB * t9);
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  },
  ContactSolver$0: function() {
    var i, t1;
    for (i = 0; t1 = this.constraints, i < t1.length; ++i)
      t1[i] = $.ContactConstraint$();
  }
},

PositionSolverManifold: {"": "Object;normal<,point,separation,pointA<,pointB<,temp,planePoint,clipPoint",
  initialize$2: function(_, cc, index) {
    var t1, t2, t3, t4, t5, t6;
    t1 = $.getInterceptor$x(cc);
    switch (t1.get$type(cc)) {
      case 0:
        t2 = this.pointA;
        cc.get$bodyA().getWorldPointToOut$2(cc.get$localPoint(), t2);
        t3 = this.pointB;
        cc.get$bodyB().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), 0).get$localPoint(), t3);
        t1 = this.normal;
        if ($.$gt$n($.MathBox_distanceSquared(t2, t3), 1.4208639999999999e-14)) {
          t4 = t3.x;
          t5 = t3.y;
          t1.x = t4;
          t1.y = t5;
          t1.x = $.$sub$n(t1.x, t2.x);
          t1.y = $.$sub$n(t1.y, t2.y);
          t1.normalize$0();
        } else {
          t1.x = 1;
          t1.y = 0;
        }
        t1 = this.point;
        t4 = t2.x;
        t5 = t2.y;
        t1.x = t4;
        t1.y = t5;
        t1.x = $.$add$ns(t1.x, t3.x);
        t1.y = $.$add$ns(t1.y, t3.y);
        t1.x = $.$mul$n(t1.x, 0.5);
        t1.y = $.$mul$n(t1.y, 0.5);
        t1 = this.temp;
        t5 = t3.x;
        t3 = t3.y;
        t1.x = t5;
        t1.y = t3;
        t1.x = $.$sub$n(t1.x, t2.x);
        t1.y = $.$sub$n(t1.y, t2.y);
        t2 = this.normal;
        this.separation = $.$sub$n($.$add$ns($.$mul$n(t1.x, t2.x), $.$mul$n(t1.y, t2.y)), cc.get$radius());
        break;
      case 1:
        t2 = this.normal;
        cc.get$bodyA().getWorldVectorToOut$2(cc.get$localNormal(), t2);
        t3 = this.planePoint;
        cc.get$bodyA().getWorldPointToOut$2(cc.get$localPoint(), t3);
        t4 = this.clipPoint;
        cc.get$bodyB().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), index).get$localPoint(), t4);
        t1 = this.temp;
        t5 = t4.x;
        t6 = t4.y;
        t1.x = t5;
        t1.y = t6;
        t1.x = $.$sub$n(t1.x, t3.x);
        t1.y = $.$sub$n(t1.y, t3.y);
        this.separation = $.$sub$n($.$add$ns($.$mul$n(t1.x, t2.x), $.$mul$n(t1.y, t2.y)), cc.get$radius());
        t2 = this.point;
        t1 = t4.x;
        t4 = t4.y;
        t2.x = t1;
        t2.y = t4;
        break;
      case 2:
        t2 = this.normal;
        cc.get$bodyB().getWorldVectorToOut$2(cc.get$localNormal(), t2);
        t3 = this.planePoint;
        cc.get$bodyB().getWorldPointToOut$2(cc.get$localPoint(), t3);
        t4 = this.clipPoint;
        cc.get$bodyA().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), index).get$localPoint(), t4);
        t1 = this.temp;
        t5 = t4.x;
        t6 = t4.y;
        t1.x = t5;
        t1.y = t6;
        t1.x = $.$sub$n(t1.x, t3.x);
        t1.y = $.$sub$n(t1.y, t3.y);
        this.separation = $.$sub$n($.$add$ns($.$mul$n(t1.x, t2.x), $.$mul$n(t1.y, t2.y)), cc.get$radius());
        t1 = this.point;
        t3 = t4.x;
        t4 = t4.y;
        t1.x = t3;
        t1.y = t4;
        t2.x = $.$negate$n(t2.x);
        t2.y = $.$negate$n(t2.y);
        break;
    }
  }
},

PolygonAndCircleContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygonAndCircle$5(argManifold, this.fixtureA.shape, xfA, this.fixtureB.shape, xfB);
  }
},

PolygonContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygons$5(argManifold, this.fixtureA.shape, xfA, this.fixtureB.shape, xfB);
  }
},

TimeOfImpactConstraint: {"": "Object;localPoints<,localNormal<,localPoint<,type*,radius@,pointCount@,bodyA@,bodyB@",
  setFrom$1: function(argOther) {
    var t1, t2, i, t3, t4;
    for (t1 = this.localPoints, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      t4 = argOther.get$localPoints();
      if (i >= t4.length)
        throw $.ioore(i);
      t3.setFrom$1(t4[i]);
    }
    t1 = this.localNormal;
    t2 = argOther.get$localNormal();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.localPoint;
    t1 = argOther.get$localPoint();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    this.type = $.get$type$x(argOther);
    this.radius = argOther.get$radius();
    this.pointCount = argOther.get$pointCount();
    this.bodyA = argOther.get$bodyA();
    this.bodyB = argOther.get$bodyB();
  },
  TimeOfImpactConstraint$0: function() {
    var t1, t2, i;
    for (t1 = this.localPoints, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector(0, 0);
  }
},

TimeOfImpactSolver: {"": "Object;constraints,count@,toiBody,psm,rA<,rB<,P,temp",
  initialize$3: function(_, contacts, argCount, argToiBody) {
    var t1, t2, i, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, t3, t4, j, cp;
    this.count = argCount;
    this.toiBody = argToiBody;
    t1 = this.count;
    t2 = this.constraints;
    i = t2.length;
    if ($.$ge$n(t1, i)) {
      this.constraints = $.List_List($.max(t1, i * 2));
      t1 = this.constraints;
      if (!!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, i, t2, 0);
      for (; t1 = this.constraints, i < t1.length; ++i)
        t1[i] = $.TimeOfImpactConstraint$();
    }
    for (t1 = contacts.length, i = 0; $.JSNumber_methods.$lt(i, this.count); ++i) {
      if (i >= t1)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      shapeA = fixtureA.shape;
      shapeB = fixtureB.shape;
      radiusA = shapeA.radius;
      radiusB = shapeB.radius;
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      manifold = contact.get$manifold();
      t2 = this.constraints;
      if (i >= t2.length)
        throw $.ioore(i);
      constraint = t2[i];
      constraint.set$bodyA(bodyA);
      constraint.set$bodyB(bodyB);
      t2 = constraint.get$localNormal();
      t3 = manifold.get$localNormal();
      t4 = t3.x;
      t3 = t3.y;
      t2.x = t4;
      t2.y = t3;
      t3 = constraint.get$localPoint();
      t2 = manifold.get$localPoint();
      t4 = t2.x;
      t2 = t2.y;
      t3.x = t4;
      t3.y = t2;
      t2 = $.getInterceptor$x(manifold);
      $.set$type$x(constraint, t2.get$type(manifold));
      constraint.set$pointCount(manifold.get$pointCount());
      constraint.set$radius($.$add$ns(radiusA, radiusB));
      for (j = 0; $.JSNumber_methods.$lt(j, constraint.get$pointCount()); ++j) {
        cp = $.$index$asx(t2.get$points(manifold), j);
        t3 = constraint.get$localPoints();
        t4 = cp.get$localPoint();
        if (j >= t3.length)
          throw $.ioore(j);
        t3[j] = t4;
      }
    }
  },
  solve$1: function(baumgarte) {
    var t1, t2, t3, t4, t5, normal, point, minSeparation, i, t6, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, j, t7, separation, t8, t9, C, t10, rnA, rnB, K, impulse, t11;
    t1 = this.P;
    t2 = this.temp;
    t3 = this.rA;
    t4 = this.rB;
    t5 = this.psm;
    normal = t5.normal;
    point = t5.point;
    minSeparation = 0;
    i = 0;
    while (true) {
      t6 = this.count;
      if (typeof t6 !== "number")
        throw $.iae(t6);
      if (!(i < t6))
        break;
      t6 = this.constraints;
      if (i >= t6.length)
        throw $.ioore(i);
      c = t6[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      massA = bodyA.get$mass();
      if (typeof massA !== "number")
        return this.solve$1$bailout(1, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, massA, point, t2, t4);
      massB = bodyB.get$mass();
      if (typeof massB !== "number")
        return this.solve$1$bailout(2, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, massA, point, t2, t4, massB);
      if ($.$eq(bodyA, this.toiBody))
        massB = 0;
      else
        massA = 0;
      invMassA = massA * bodyA.get$invMass();
      invIA = massA * bodyA.get$invInertia();
      invMassB = massB * bodyB.get$invMass();
      invIB = massB * bodyB.get$invInertia();
      t6 = invMassA + invMassB;
      j = 0;
      while (true) {
        t7 = c.get$pointCount();
        if (typeof t7 !== "number")
          throw $.iae(t7);
        if (!(j < t7))
          break;
        t5.initialize$2(t5, c, j);
        separation = t5.separation;
        if (typeof separation !== "number")
          return this.solve$1$bailout(3, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, separation, t6, j);
        t7 = point.x;
        t8 = point.y;
        t3.x = t7;
        t3.y = t8;
        t8 = bodyA.get$sweep().center;
        t7 = t3.x;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(4, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, separation, t6, j, t8, t7);
        t9 = t8.x;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(5, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, separation, t6, j, t8, t7, t9);
        t3.x = t7 - t9;
        t9 = t3.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(6, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, separation, t6, j, t8, 0, t9);
        t8 = t8.y;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(7, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, separation, t6, j, t8, 0, t9);
        t3.y = t9 - t8;
        t8 = point.x;
        t9 = point.y;
        t4.x = t8;
        t4.y = t9;
        t9 = bodyB.get$sweep().center;
        t8 = t4.x;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(8, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, separation, t6, j, t8, 0, t9);
        t7 = t9.x;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(9, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, separation, t6, j, t8, t7, t9);
        t4.x = t8 - t7;
        t7 = t4.y;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(10, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, separation, t6, j, 0, t7, t9);
        t9 = t9.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(11, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, separation, t6, j, 0, t7, t9);
        t4.y = t7 - t9;
        minSeparation = $.min(minSeparation, separation);
        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        t9 = t3.x;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(12, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, 0, t9, C);
        t7 = normal.y;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(13, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, t7, t9, C);
        t9 *= t7;
        t8 = t3.y;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(14, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7, t9, C);
        t10 = normal.x;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(15, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7, t9, C, t10);
        rnA = t9 - t8 * t10;
        t8 = t4.x;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(16, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7, 0, C, t10, rnA);
        t8 *= t7;
        t9 = t4.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(17, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7, t9, C, t10, rnA);
        rnB = t8 - t9 * t10;
        K = t6 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t1.x = t10;
        t1.y = t7;
        t7 = t1.x;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(18, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, t7, 0, 0, 0, 0, impulse);
        t1.x = t7 * impulse;
        t7 = t1.y;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(19, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, t7, 0, 0, 0, 0, impulse);
        t1.y = t7 * impulse;
        t7 = t1.x;
        t8 = t1.y;
        t2.x = t7;
        t2.y = t8;
        t8 = t2.x;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(20, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8);
        t2.x = t8 * invMassA;
        t8 = t2.y;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(21, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8);
        t2.y = t8 * invMassA;
        t8 = bodyA.get$sweep().center;
        t7 = t8.x;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(22, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7);
        t9 = t2.x;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(23, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7, t9);
        t8.x = t7 - t9;
        t9 = t8.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(24, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, 0, t9);
        t7 = t2.y;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(25, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7, t9);
        t8.y = t9 - t7;
        t7 = bodyA.get$sweep();
        t9 = t7.angle;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(26, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, t7, t9);
        t8 = t3.x;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(27, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7, t9);
        t10 = t1.y;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(28, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7, t9, 0, t10);
        t10 = t8 * t10;
        t8 = t3.y;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(29, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7, t9, 0, t10);
        t11 = t1.x;
        if (typeof t11 !== "number")
          return this.solve$1$bailout(30, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t8, t7, t9, 0, t10, 0, 0, t11);
        t7.angle = t9 - invIA * (t10 - t8 * t11);
        bodyA.synchronizeTransform$0();
        t11 = t1.x;
        t8 = t1.y;
        t2.x = t11;
        t2.y = t8;
        t8 = t2.x;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(31, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, 0, t8);
        t2.x = t8 * invMassB;
        t8 = t2.y;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(32, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, 0, t8);
        t2.y = t8 * invMassB;
        t8 = bodyB.get$sweep().center;
        t11 = t8.x;
        if (typeof t11 !== "number")
          return this.solve$1$bailout(33, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, 0, t8, 0, 0, 0, 0, t11);
        t10 = t2.x;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(34, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, t10, t8, 0, 0, 0, 0, t11);
        t8.x = t11 + t10;
        t10 = t8.y;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(35, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, t10, t8);
        t11 = t2.y;
        if (typeof t11 !== "number")
          return this.solve$1$bailout(36, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, t10, t8, 0, 0, 0, 0, t11);
        t8.y = t10 + t11;
        t11 = bodyB.get$sweep();
        t10 = t11.angle;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(37, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, t10, 0, 0, 0, 0, 0, t11);
        t8 = t4.x;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(38, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, 0, t10, t8, 0, 0, 0, 0, t11);
        t9 = t1.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(39, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t9, t10, t8, 0, 0, 0, 0, t11);
        t9 = t8 * t9;
        t8 = t4.y;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(40, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t9, t10, t8, 0, 0, 0, 0, t11);
        t7 = t1.x;
        if (typeof t7 !== "number")
          return this.solve$1$bailout(41, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, 0, point, t2, t4, 0, invMassA, invIA, invMassB, invIB, 0, t6, j, t9, t10, t8, 0, t7, 0, 0, t11);
        t11.angle = t10 + invIB * (t9 - t8 * t7);
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solve$1$bailout: function(state0, baumgarte, minSeparation, i, t3, c, t5, normal, bodyA, bodyB, t1, massA, point, t2, t4, massB, invMassA, invIA, invMassB, invIB, separation, t6, j, t8, t7, t9, C, t10, rnA, impulse, t11) {
    switch (state0) {
      case 0:
        t1 = this.P;
        t2 = this.temp;
        t3 = this.rA;
        t4 = this.rB;
        t5 = this.psm;
        normal = t5.normal;
        point = t5.point;
        minSeparation = 0;
        i = 0;
      default:
        var rnB, K;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t6 = this.count;
                if (typeof t6 !== "number")
                  throw $.iae(t6);
                if (!$.JSNumber_methods.$lt(i, t6))
                  break L0;
                t6 = this.constraints;
                if (i >= t6.length)
                  throw $.ioore(i);
                c = t6[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                massA = bodyA.get$mass();
              case 1:
                state0 = 0;
                massB = bodyB.get$mass();
              case 2:
                state0 = 0;
                if ($.$eq(bodyA, this.toiBody))
                  massB = 0;
                else
                  massA = 0;
                t6 = $.getInterceptor$n(massA);
                invMassA = t6.$mul(massA, bodyA.get$invMass());
                invIA = t6.$mul(massA, bodyA.get$invInertia());
                t6 = $.getInterceptor$n(massB);
                invMassB = t6.$mul(massB, bodyB.get$invMass());
                invIB = t6.$mul(massB, bodyB.get$invInertia());
                t6 = invMassA + invMassB;
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t7 = c.get$pointCount();
                        if (typeof t7 !== "number")
                          throw $.iae(t7);
                        if (!$.JSNumber_methods.$lt(j, t7))
                          break L1;
                        t5.initialize$2(t5, c, j);
                        separation = t5.separation;
                      case 3:
                        state0 = 0;
                        t7 = point.x;
                        t8 = point.y;
                        t3.x = t7;
                        t3.y = t8;
                        t8 = bodyA.get$sweep().center;
                        t7 = t3.x;
                      case 4:
                        state0 = 0;
                        t9 = t8.x;
                      case 5:
                        state0 = 0;
                        t3.x = $.$sub$n(t7, t9);
                        t9 = t3.y;
                      case 6:
                        state0 = 0;
                        t8 = t8.y;
                      case 7:
                        state0 = 0;
                        t3.y = $.$sub$n(t9, t8);
                        t8 = point.x;
                        t9 = point.y;
                        t4.x = t8;
                        t4.y = t9;
                        t9 = bodyB.get$sweep().center;
                        t8 = t4.x;
                      case 8:
                        state0 = 0;
                        t7 = t9.x;
                      case 9:
                        state0 = 0;
                        t4.x = $.$sub$n(t8, t7);
                        t7 = t4.y;
                      case 10:
                        state0 = 0;
                        t9 = t9.y;
                      case 11:
                        state0 = 0;
                        t4.y = $.$sub$n(t7, t9);
                        minSeparation = $.min(minSeparation, separation);
                        t9 = $.$add$ns(separation, 0.005);
                        if (typeof t9 !== "number")
                          throw $.iae(t9);
                        C = $.max(-0.2, $.min(baumgarte * t9, 0));
                        t9 = t3.x;
                      case 12:
                        state0 = 0;
                        t7 = normal.y;
                      case 13:
                        state0 = 0;
                        t9 = $.$mul$n(t9, t7);
                        t8 = t3.y;
                      case 14:
                        state0 = 0;
                        t10 = normal.x;
                      case 15:
                        state0 = 0;
                        rnA = $.$sub$n(t9, $.$mul$n(t8, t10));
                        t8 = t4.x;
                      case 16:
                        state0 = 0;
                        t8 = $.$mul$n(t8, t7);
                        t9 = t4.y;
                      case 17:
                        state0 = 0;
                        rnB = $.$sub$n(t8, $.$mul$n(t9, t10));
                        if (typeof rnA !== "number")
                          throw $.iae(rnA);
                        if (typeof rnB !== "number")
                          throw $.iae(rnB);
                        K = t6 + invIA * rnA * rnA + invIB * rnB * rnB;
                        impulse = K > 0 ? -C / K : 0;
                        t1.x = t10;
                        t1.y = t7;
                        t7 = t1.x;
                      case 18:
                        state0 = 0;
                        t1.x = $.$mul$n(t7, impulse);
                        t7 = t1.y;
                      case 19:
                        state0 = 0;
                        t1.y = $.$mul$n(t7, impulse);
                        t7 = t1.x;
                        t8 = t1.y;
                        t2.x = t7;
                        t2.y = t8;
                        t8 = t2.x;
                      case 20:
                        state0 = 0;
                        t2.x = $.$mul$n(t8, invMassA);
                        t8 = t2.y;
                      case 21:
                        state0 = 0;
                        t2.y = $.$mul$n(t8, invMassA);
                        t8 = bodyA.get$sweep().center;
                        t7 = t8.x;
                      case 22:
                        state0 = 0;
                        t9 = t2.x;
                      case 23:
                        state0 = 0;
                        t8.x = $.$sub$n(t7, t9);
                        t9 = t8.y;
                      case 24:
                        state0 = 0;
                        t7 = t2.y;
                      case 25:
                        state0 = 0;
                        t8.y = $.$sub$n(t9, t7);
                        t7 = bodyA.get$sweep();
                        t9 = t7.angle;
                      case 26:
                        state0 = 0;
                        t8 = t3.x;
                      case 27:
                        state0 = 0;
                        t10 = t1.y;
                      case 28:
                        state0 = 0;
                        t10 = $.$mul$n(t8, t10);
                        t8 = t3.y;
                      case 29:
                        state0 = 0;
                        t11 = t1.x;
                      case 30:
                        state0 = 0;
                        t11 = $.$sub$n(t10, $.$mul$n(t8, t11));
                        if (typeof t11 !== "number")
                          throw $.iae(t11);
                        t7.angle = $.$sub$n(t9, invIA * t11);
                        bodyA.synchronizeTransform$0();
                        t11 = t1.x;
                        t9 = t1.y;
                        t2.x = t11;
                        t2.y = t9;
                        t9 = t2.x;
                      case 31:
                        state0 = 0;
                        t2.x = $.$mul$n(t9, invMassB);
                        t9 = t2.y;
                      case 32:
                        state0 = 0;
                        t2.y = $.$mul$n(t9, invMassB);
                        t9 = bodyB.get$sweep().center;
                        t11 = t9.x;
                      case 33:
                        state0 = 0;
                        t7 = t2.x;
                      case 34:
                        state0 = 0;
                        t9.x = $.$add$ns(t11, t7);
                        t7 = t9.y;
                      case 35:
                        state0 = 0;
                        t11 = t2.y;
                      case 36:
                        state0 = 0;
                        t9.y = $.$add$ns(t7, t11);
                        t11 = bodyB.get$sweep();
                        t7 = t11.angle;
                      case 37:
                        state0 = 0;
                        t9 = t4.x;
                      case 38:
                        state0 = 0;
                        t8 = t1.y;
                      case 39:
                        state0 = 0;
                        t8 = $.$mul$n(t9, t8);
                        t9 = t4.y;
                      case 40:
                        state0 = 0;
                        t10 = t1.x;
                      case 41:
                        state0 = 0;
                        t10 = $.$sub$n(t8, $.$mul$n(t9, t10));
                        if (typeof t10 !== "number")
                          throw $.iae(t10);
                        t11.angle = $.$add$ns(t7, invIB * t10);
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  },
  TimeOfImpactSolver$0: function() {
    var i, t1;
    for (i = 0; t1 = this.constraints, i < t1.length; ++i)
      t1[i] = $.TimeOfImpactConstraint$();
  }
},

TimeOfImpactSolverManifold: {"": "Object;normal<,point,separation,pointA<,pointB<,temp,planePoint,clipPoint",
  initialize$2: function(_, cc, index) {
    var t1, t2, t3, t4, t5, t6;
    switch ($.get$type$x(cc)) {
      case 0:
        t1 = this.pointA;
        t2 = cc.get$bodyA().getWorldPoint$1(cc.get$localPoint());
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.pointB;
        t3 = cc.get$bodyB();
        t4 = cc.get$localPoints();
        if (0 >= t4.length)
          throw $.ioore(0);
        t4 = t3.getWorldPoint$1(t4[0]);
        t3 = t4.x;
        t4 = t4.y;
        t2.x = t3;
        t2.y = t4;
        t3 = this.normal;
        if ($.$gt$n($.MathBox_distanceSquared(t1, t2), 1.4208639999999999e-14)) {
          t4 = t2.x;
          t5 = t2.y;
          t3.x = t4;
          t3.y = t5;
          t3.x = $.$sub$n(t3.x, t1.x);
          t3.y = $.$sub$n(t3.y, t1.y);
          t3.normalize$0();
        } else {
          t3.x = 1;
          t3.y = 0;
        }
        t3 = this.point;
        t4 = t1.x;
        t5 = t1.y;
        t3.x = t4;
        t3.y = t5;
        t3.x = $.$add$ns(t3.x, t2.x);
        t3.y = $.$add$ns(t3.y, t2.y);
        t3.x = $.$mul$n(t3.x, 0.5);
        t3.y = $.$mul$n(t3.y, 0.5);
        t3 = this.temp;
        t5 = t2.x;
        t2 = t2.y;
        t3.x = t5;
        t3.y = t2;
        t3.x = $.$sub$n(t3.x, t1.x);
        t3.y = $.$sub$n(t3.y, t1.y);
        t1 = this.normal;
        this.separation = $.$sub$n($.$add$ns($.$mul$n(t3.x, t1.x), $.$mul$n(t3.y, t1.y)), cc.get$radius());
        break;
      case 1:
        t1 = this.normal;
        t2 = cc.get$bodyA().getWorldVector$1(cc.get$localNormal());
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.planePoint;
        t3 = cc.get$bodyA().getWorldPoint$1(cc.get$localPoint());
        t4 = t3.x;
        t3 = t3.y;
        t2.x = t4;
        t2.y = t3;
        t3 = this.clipPoint;
        t4 = cc.get$bodyB();
        t5 = cc.get$localPoints();
        if (index < 0 || index >= t5.length)
          throw $.ioore(index);
        t5 = t4.getWorldPoint$1(t5[index]);
        t4 = t5.x;
        t5 = t5.y;
        t3.x = t4;
        t3.y = t5;
        t5 = this.temp;
        t4 = t3.x;
        t6 = t3.y;
        t5.x = t4;
        t5.y = t6;
        t5.x = $.$sub$n(t5.x, t2.x);
        t5.y = $.$sub$n(t5.y, t2.y);
        this.separation = $.$sub$n($.$add$ns($.$mul$n(t5.x, t1.x), $.$mul$n(t5.y, t1.y)), cc.get$radius());
        t1 = this.point;
        t5 = t3.x;
        t3 = t3.y;
        t1.x = t5;
        t1.y = t3;
        break;
      case 2:
        t1 = this.normal;
        t2 = cc.get$bodyB().getWorldVector$1(cc.get$localNormal());
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.planePoint;
        t3 = cc.get$bodyB().getWorldPoint$1(cc.get$localPoint());
        t4 = t3.x;
        t3 = t3.y;
        t2.x = t4;
        t2.y = t3;
        t3 = this.clipPoint;
        t4 = cc.get$bodyA();
        t5 = cc.get$localPoints();
        if (index < 0 || index >= t5.length)
          throw $.ioore(index);
        t5 = t4.getWorldPoint$1(t5[index]);
        t4 = t5.x;
        t5 = t5.y;
        t3.x = t4;
        t3.y = t5;
        t5 = this.temp;
        t4 = t3.x;
        t6 = t3.y;
        t5.x = t4;
        t5.y = t6;
        t5.x = $.$sub$n(t5.x, t2.x);
        t5.y = $.$sub$n(t5.y, t2.y);
        this.separation = $.$sub$n($.$add$ns($.$mul$n(t5.x, t1.x), $.$mul$n(t5.y, t1.y)), cc.get$radius());
        t5 = this.point;
        t2 = t3.x;
        t3 = t3.y;
        t5.x = t2;
        t5.y = t3;
        t1.x = $.$negate$n(t1.x);
        t1.y = $.$negate$n(t1.y);
        break;
    }
  }
},

ConstantVolumeJoint: {"": "Joint;bodies,targetLengths,targetVolume,normals,step,_impulse,_world,distanceJoints,frequencyHz,dampingRatio,type,_prev,_liblib1$_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
  step$1: function($receiver, arg0) {
    return this.step.call$1(arg0);
  },
  get$area: function() {
    var t1, t2, t3, t4, result, i;
    t1 = this.bodies;
    t2 = t1.length;
    t3 = t2 - 1;
    if (t3 < 0)
      throw $.ioore(t3);
    t4 = t1[t3].get$worldCenter().x;
    if (0 >= t2)
      throw $.ioore(0);
    t2 = t1[0];
    t2 = $.$sub$n($.$mul$n(t4, t2.get$worldCenter().y), $.$mul$n(t2.get$worldCenter().x, t1[t3].get$worldCenter().y));
    if (typeof t2 !== "number")
      throw $.iae(t2);
    result = 0 + t2;
    for (i = 0; i < t3;) {
      t2 = t1[i];
      ++i;
      t2 = $.$sub$n($.$mul$n(t2.get$worldCenter().x, t1[i].get$worldCenter().y), $.$mul$n(t1[i].get$worldCenter().x, t2.get$worldCenter().y));
      if (typeof t2 !== "number")
        throw $.iae(t2);
      result += t2;
    }
    return result * 0.5;
  },
  constrainEdges$1: function(argStep) {
    var perimeter, i, t1, t2, next, t3, dx, dy, dist, delta, toExtrude, done, t4, t5, norm;
    for (perimeter = 0, i = 0; t1 = this.bodies, t2 = t1.length, i < t2; ++i) {
      next = i === t2 - 1 ? 0 : i + 1;
      if (next >= t2)
        throw $.ioore(next);
      t2 = t1[next];
      t3 = t2.get$worldCenter().x;
      t1 = t1[i];
      dx = $.$sub$n(t3, t1.get$worldCenter().x);
      dy = $.$sub$n(t2.get$worldCenter().y, t1.get$worldCenter().y);
      t1 = $.getInterceptor$n(dx);
      t2 = $.getInterceptor$n(dy);
      t3 = $.$add$ns(t1.$mul(dx, dx), t2.$mul(dy, dy));
      if (typeof t3 !== "number")
        $.throwExpression(new $.ArgumentError(t3));
      dist = Math.sqrt(t3);
      if (dist < 1.192e-7)
        dist = 1;
      t3 = this.normals;
      if (i >= t3.length)
        throw $.ioore(i);
      $.set$x$x(t3[i], t2.$div(dy, dist));
      t2 = this.normals;
      if (i >= t2.length)
        throw $.ioore(i);
      $.set$y$x(t2[i], t1.$negate(dx) / dist);
      perimeter += dist;
    }
    delta = new $.Vector(0, 0);
    toExtrude = 0.5 * $.$sub$n(this.targetVolume, this.get$area()) / perimeter;
    for (done = true, i = 0; t1 = this.bodies.length, i < t1; ++i) {
      next = i === t1 - 1 ? 0 : i + 1;
      t1 = this.normals;
      t2 = t1.length;
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = $.getInterceptor$x(t3);
      t5 = t4.get$x(t3);
      if (next >= t2)
        throw $.ioore(next);
      t1 = t1[next];
      t2 = $.getInterceptor$x(t1);
      t5 = $.$add$ns(t5, t2.get$x(t1));
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t1 = $.$add$ns(t4.get$y(t3), t2.get$y(t1));
      if (typeof t1 !== "number")
        throw $.iae(t1);
      delta.x = toExtrude * t5;
      delta.y = toExtrude * t1;
      t1 = delta.x;
      t1 = $.$mul$n(t1, t1);
      t5 = delta.y;
      t5 = $.$add$ns(t1, $.$mul$n(t5, t5));
      if (typeof t5 !== "number")
        $.throwExpression(new $.ArgumentError(t5));
      norm = Math.sqrt(t5);
      if (norm > 0.2) {
        t1 = 0.2 / norm;
        delta.x = $.$mul$n(delta.x, t1);
        delta.y = $.$mul$n(delta.y, t1);
      }
      if (norm > 0.005)
        done = false;
      t1 = this.bodies;
      if (next >= t1.length)
        throw $.ioore(next);
      t1 = t1[next].get$sweep().center;
      t1.x = $.$add$ns(t1.x, delta.x);
      t1 = this.bodies;
      if (next >= t1.length)
        throw $.ioore(next);
      t1 = t1[next].get$sweep().center;
      t1.y = $.$add$ns(t1.y, delta.y);
      t1 = this.bodies;
      if (next >= t1.length)
        throw $.ioore(next);
      t1[next].synchronizeTransform$0();
    }
    return done;
  },
  initVelocityConstraints$1: function(argStep) {
    var t1, d, i, t2, t3, prev, next, t4, t5;
    this.step = argStep;
    t1 = this.bodies.length;
    d = $.List_List(t1);
    for (i = 0; i < this.bodies.length; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      d[i] = new $.Vector(0, 0);
    }
    for (i = 0; t2 = this.bodies, t3 = t2.length, i < t3; ++i) {
      prev = i === 0 ? t3 - 1 : i - 1;
      next = i === t3 - 1 ? 0 : i + 1;
      if (i >= t1)
        throw $.ioore(i);
      t4 = d[i];
      if (next >= t3)
        throw $.ioore(next);
      t4.setFrom$1(t2[next].get$worldCenter());
      t2 = d[i];
      t4 = this.bodies;
      if (prev < 0 || prev >= t4.length)
        throw $.ioore(prev);
      t2.subLocal$1(t4[prev].get$worldCenter());
    }
    t2 = this.step;
    if (t2.warmStarting) {
      this._impulse = this._impulse * t2.dtRatio;
      for (i = 0; t2 = this.bodies, i < t2.length; ++i) {
        t2 = t2[i].get$linearVelocity();
        t3 = t2.x;
        t4 = this.bodies;
        if (i >= t4.length)
          throw $.ioore(i);
        t4 = t4[i].get$invMass();
        if (i >= t1)
          throw $.ioore(i);
        t5 = $.get$y$x(d[i]);
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t2.x = $.$add$ns(t3, t4 * t5 * 0.5 * this._impulse);
        t5 = this.bodies;
        if (i >= t5.length)
          throw $.ioore(i);
        t5 = t5[i].get$linearVelocity();
        t4 = t5.y;
        t3 = this.bodies;
        if (i >= t3.length)
          throw $.ioore(i);
        t5.y = $.$add$ns(t4, t3[i].get$invMass() * $.$negate$n($.get$x$x(d[i])) * 0.5 * this._impulse);
      }
    } else
      this._impulse = 0;
  },
  solvePositionConstraints$1: function(baumgarte) {
    return this.constrainEdges$1(this.step);
  },
  solveVelocityConstraints$1: function(argStep) {
    var t1, d, i, crossMassSum, dotMassSum, t2, t3, prev, next, t4, lambda, t5;
    t1 = this.bodies.length;
    d = $.List_List(t1);
    for (i = 0; i < this.bodies.length; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      d[i] = new $.Vector(0, 0);
    }
    for (crossMassSum = 0, dotMassSum = 0, i = 0; t2 = this.bodies, t3 = t2.length, i < t3; ++i) {
      prev = i === 0 ? t3 - 1 : i - 1;
      next = i === t3 - 1 ? 0 : i + 1;
      if (i >= t1)
        throw $.ioore(i);
      t4 = d[i];
      if (next >= t3)
        throw $.ioore(next);
      t4.setFrom$1(t2[next].get$worldCenter());
      t2 = d[i];
      t4 = this.bodies;
      if (prev < 0 || prev >= t4.length)
        throw $.ioore(prev);
      t2.subLocal$1(t4[prev].get$worldCenter());
      t2 = t2.get$lengthSquared();
      t4 = this.bodies;
      if (i >= t4.length)
        throw $.ioore(i);
      t4 = t4[i];
      dotMassSum += $.$div$n(t2, t4.get$mass());
      t4 = t4.get$linearVelocity();
      t2 = d[i];
      t3 = $.getInterceptor$x(t2);
      t2 = $.$sub$n($.$mul$n(t4.x, t3.get$y(t2)), $.$mul$n(t4.y, t3.get$x(t2)));
      if (typeof t2 !== "number")
        throw $.iae(t2);
      crossMassSum += t2;
    }
    lambda = -2 * crossMassSum / dotMassSum;
    this._impulse = this._impulse + lambda;
    for (i = 0; t2 = this.bodies, i < t2.length; ++i) {
      t2 = t2[i].get$linearVelocity();
      t3 = t2.x;
      t4 = this.bodies;
      if (i >= t4.length)
        throw $.ioore(i);
      t4 = t4[i].get$invMass();
      if (i >= t1)
        throw $.ioore(i);
      t5 = $.get$y$x(d[i]);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t2.x = $.$add$ns(t3, t4 * t5 * 0.5 * lambda);
      t5 = this.bodies;
      if (i >= t5.length)
        throw $.ioore(i);
      t5 = t5[i].get$linearVelocity();
      t4 = t5.y;
      t3 = this.bodies;
      if (i >= t3.length)
        throw $.ioore(i);
      t5.y = $.$add$ns(t4, t3[i].get$invMass() * $.$negate$n($.get$x$x(d[i])) * 0.5 * lambda);
    }
  },
  solveVelocityConstraints$1$bailout1: function(state0, lambda, t1, d) {
    var i, t2, t3, t4, t5;
    this._impulse = this._impulse + lambda;
    for (i = 0; t2 = this.bodies, i < t2.length; ++i) {
      t2 = t2[i].get$linearVelocity();
      t3 = t2.x;
      t4 = this.bodies;
      if (i >= t4.length)
        throw $.ioore(i);
      t4 = t4[i].get$invMass();
      if (i >= t1)
        throw $.ioore(i);
      t5 = $.get$y$x(d[i]);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t2.x = $.$add$ns(t3, t4 * t5 * 0.5 * lambda);
      t5 = this.bodies;
      if (i >= t5.length)
        throw $.ioore(i);
      t5 = t5[i].get$linearVelocity();
      t4 = t5.y;
      t3 = this.bodies;
      if (i >= t3.length)
        throw $.ioore(i);
      t5.y = $.$add$ns(t4, t3[i].get$invMass() * $.$negate$n($.get$x$x(d[i])) * 0.5 * lambda);
    }
  },
  getAnchorA$1: function(argOut) {
    throw $.wrapException(new $.UnimplementedError(null));
  },
  getAnchorB$1: function(argOut) {
    throw $.wrapException(new $.UnimplementedError(null));
  },
  ConstantVolumeJoint$2: function(_world, def) {
    var t1, i, next, t2, t3, temp, dist, djd, t4;
    t1 = def.get$bodies();
    if (t1.length <= 2)
      throw $.wrapException(new $.ArgumentError("You cannot create a constant volume joint with less than three bodies."));
    this.bodies = $.List_List$from(t1, true);
    this.targetLengths = $.List_List(this.bodies.length);
    for (i = 0; t1 = this.targetLengths.length, i < t1; ++i) {
      next = i === t1 - 1 ? 0 : i + 1;
      t1 = this.bodies;
      t2 = t1.length;
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i].get$worldCenter();
      temp = new $.Vector(t3.x, t3.y);
      if (next >= t2)
        throw $.ioore(next);
      t1 = t1[next].get$worldCenter();
      temp.x = $.$sub$n(temp.x, t1.x);
      temp.y = $.$sub$n(temp.y, t1.y);
      t1 = temp.x;
      t1 = $.$mul$n(t1, t1);
      t2 = temp.y;
      t2 = $.$add$ns(t1, $.$mul$n(t2, t2));
      if (typeof t2 !== "number")
        $.throwExpression(new $.ArgumentError(t2));
      dist = Math.sqrt(t2);
      t1 = this.targetLengths;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = dist;
    }
    this.targetVolume = this.get$area();
    t1 = def.get$joints();
    if (t1 != null && !$.$eq($.get$length$asx(t1), def.get$bodies().length))
      throw $.wrapException(new $.ArgumentError("Incorrect joint definition.  Joints have to correspond to the bodies"));
    t1 = def.get$joints();
    if (t1 == null) {
      djd = $.DistanceJointDef$();
      this.distanceJoints = $.List_List(this.bodies.length);
      for (t1 = this._world, i = 0; t2 = this.targetLengths.length, i < t2; ++i) {
        next = i === t2 - 1 ? 0 : i + 1;
        djd.frequencyHz = def.get$frequencyHz();
        djd.dampingRatio = def.get$dampingRatio();
        t2 = this.bodies;
        t3 = t2.length;
        if (i >= t3)
          throw $.ioore(i);
        t4 = t2[i];
        if (next >= t3)
          throw $.ioore(next);
        t2 = t2[next];
        djd.initialize$4(djd, t4, t2, t4.get$worldCenter(), t2.get$worldCenter());
        t2 = this.distanceJoints;
        t4 = t1.createJoint$1(djd);
        if (i >= t2.length)
          throw $.ioore(i);
        t2[i] = t4;
      }
    } else {
      this.distanceJoints = $.List_List($.get$length$asx(t1));
      t1 = this.distanceJoints;
      t2 = def.get$joints();
      t3 = $.get$length$asx(t2);
      t1.setRange$4;
      if (!!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, t3, t2, 0);
    }
    this.frequencyHz = def.get$frequencyHz();
    this.dampingRatio = def.get$dampingRatio();
    this.normals = $.List_List(this.bodies.length);
    for (t1 = this.normals, i = 0; i < t1.length; ++i)
      t1[i] = new $.Vector(0, 0);
    t1 = this.bodies;
    if (0 >= t1.length)
      throw $.ioore(0);
    this.bodyA = t1[0];
    t1 = this.bodies;
    if (1 >= t1.length)
      throw $.ioore(1);
    this.bodyB = t1[1];
    this.collideConnected = false;
  }
},

ConstantVolumeJointDef: {"": "JointDef;frequencyHz<,dampingRatio<,bodies<,joints<,type,userData,bodyA,bodyB,collideConnected",
  addBody$1: function(argBody) {
    var t1;
    this.bodies.push(argBody);
    t1 = this.bodies.length;
    if (t1 === 1)
      this.bodyA = argBody;
    else if (t1 === 2)
      this.bodyB = argBody;
  },
  ConstantVolumeJointDef$0: function() {
    this.type = 10;
    this.collideConnected = false;
  }
},

DistanceJoint: {"": "Joint;localAnchor1,localAnchor2,u,impulse,mass<,length>,frequencyHz,dampingRatio,gamma,bias,type,_prev,_liblib1$_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
  getAnchorA$1: function(argOut) {
    this.bodyA.getWorldPointToOut$2(this.localAnchor1, argOut);
  },
  getAnchorB$1: function(argOut) {
    this.bodyB.getWorldPointToOut$2(this.localAnchor2, argOut);
  },
  initVelocityConstraints$1: function(step) {
    var b1, b2, r1, r2, t1, t2, t3, len, t4, t5, cr1u, cr2u, invMass, omega, k, P;
    b1 = this.bodyA;
    b2 = this.bodyB;
    r1 = new $.Vector(0, 0);
    r2 = new $.Vector(0, 0);
    t1 = this.localAnchor1;
    t2 = t1.x;
    t1 = t1.y;
    r1.x = t2;
    r1.y = t1;
    t1 = b1.get$localCenter();
    r1.x = $.$sub$n(r1.x, t1.x);
    r1.y = $.$sub$n(r1.y, t1.y);
    t1 = this.localAnchor2;
    t2 = t1.x;
    t1 = t1.y;
    r2.x = t2;
    r2.y = t1;
    t1 = b2.get$localCenter();
    r2.x = $.$sub$n(r2.x, t1.x);
    r2.y = $.$sub$n(r2.y, t1.y);
    $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().rotation, r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().rotation, r2, r2);
    t1 = this.u;
    t1.x = $.$sub$n($.$sub$n($.$add$ns(b2.get$sweep().center.x, r2.x), b1.get$sweep().center.x), r1.x);
    t1.y = $.$sub$n($.$sub$n($.$add$ns(b2.get$sweep().center.y, r2.y), b1.get$sweep().center.y), r1.y);
    t2 = t1.x;
    t2 = $.$mul$n(t2, t2);
    t3 = t1.y;
    t3 = $.$add$ns(t2, $.$mul$n(t3, t3));
    if (typeof t3 !== "number")
      $.throwExpression(new $.ArgumentError(t3));
    len = Math.sqrt(t3);
    if (len > 0.005) {
      t2 = 1 / len;
      t1.x = $.$mul$n(t1.x, t2);
      t1.y = $.$mul$n(t1.y, t2);
    } else {
      t1.x = 0;
      t1.y = 0;
    }
    t2 = r1.x;
    t3 = t1.y;
    t2 = $.$mul$n(t2, t3);
    t4 = r1.y;
    t5 = t1.x;
    cr1u = $.$sub$n(t2, $.$mul$n(t4, t5));
    cr2u = $.$sub$n($.$mul$n(r2.x, t3), $.$mul$n(r2.y, t5));
    t5 = b1.get$invMass();
    t3 = b1.get$invInertia();
    if (typeof cr1u !== "number")
      throw $.iae(cr1u);
    t4 = b2.get$invMass();
    t2 = b2.get$invInertia();
    if (typeof cr2u !== "number")
      throw $.iae(cr2u);
    invMass = t5 + t3 * cr1u * cr1u + t4 + t2 * cr2u * cr2u;
    this.mass = 1 / invMass;
    t2 = this.frequencyHz;
    if (t2 > 0) {
      t3 = this.length;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      omega = 6.283185307179586 * t2;
      t2 = this.mass;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t4 = this.dampingRatio;
      k = t2 * omega * omega;
      t5 = step.dt;
      this.gamma = t5 * (2 * t2 * t4 * omega + t5 * k);
      t2 = this.gamma;
      this.gamma = t2 !== 0 ? 1 / t2 : 0;
      this.bias = (len - t3) * step.dt * k * this.gamma;
      this.mass = invMass + this.gamma;
      t2 = this.mass;
      if (t2 !== 0) {
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t2 = 1 / t2;
      } else
        t2 = 0;
      this.mass = t2;
    }
    if (step.warmStarting) {
      this.impulse = this.impulse * step.dtRatio;
      P = new $.Vector(0, 0);
      t2 = t1.x;
      t1 = t1.y;
      P.x = t2;
      P.y = t1;
      t1 = this.impulse;
      P.x = $.$mul$n(P.x, t1);
      P.y = $.$mul$n(P.y, t1);
      t1 = b1.get$linearVelocity();
      t2 = t1.x;
      t3 = b1.get$invMass();
      t4 = P.x;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t1.x = $.$sub$n(t2, t3 * t4);
      t4 = b1.get$linearVelocity();
      t3 = t4.y;
      t2 = b1.get$invMass();
      t1 = P.y;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t4.y = $.$sub$n(t3, t2 * t1);
      t1 = b1.get$angularVelocity();
      t2 = b1.get$invInertia();
      t3 = $.$sub$n($.$mul$n(r1.x, P.y), $.$mul$n(r1.y, P.x));
      if (typeof t3 !== "number")
        throw $.iae(t3);
      b1.set$angularVelocity($.$sub$n(t1, t2 * t3));
      t3 = b2.get$linearVelocity();
      t2 = t3.x;
      t1 = b2.get$invMass();
      t4 = P.x;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t3.x = $.$add$ns(t2, t1 * t4);
      t4 = b2.get$linearVelocity();
      t1 = t4.y;
      t2 = b2.get$invMass();
      t3 = P.y;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t4.y = $.$add$ns(t1, t2 * t3);
      t3 = b2.get$angularVelocity();
      t2 = b2.get$invInertia();
      t1 = $.$sub$n($.$mul$n(r2.x, P.y), $.$mul$n(r2.y, P.x));
      if (typeof t1 !== "number")
        throw $.iae(t1);
      b2.set$angularVelocity($.$add$ns(t3, t2 * t1));
    } else
      this.impulse = 0;
  },
  solveVelocityConstraints$1: function(step) {
    var b1, b2, r1, r2, t1, t2, v1, v2, tempY, Cdot, t3, t4, t5, imp, Px, Py;
    b1 = this.bodyA;
    b2 = this.bodyB;
    r1 = new $.Vector(0, 0);
    r2 = new $.Vector(0, 0);
    t1 = this.localAnchor1;
    t2 = t1.x;
    t1 = t1.y;
    r1.x = t2;
    r1.y = t1;
    t1 = b1.get$localCenter();
    r1.x = $.$sub$n(r1.x, t1.x);
    r1.y = $.$sub$n(r1.y, t1.y);
    t1 = this.localAnchor2;
    t2 = t1.x;
    t1 = t1.y;
    r2.x = t2;
    r2.y = t1;
    t1 = b2.get$localCenter();
    r2.x = $.$sub$n(r2.x, t1.x);
    r2.y = $.$sub$n(r2.y, t1.y);
    $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().rotation, r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().rotation, r2, r2);
    v1 = new $.Vector(0, 0);
    v2 = new $.Vector(0, 0);
    t1 = b1.get$angularVelocity();
    t2 = $.getInterceptor$n(t1);
    tempY = t2.$mul(t1, r1.x);
    t1 = t2.$negate(t1);
    t2 = r1.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    v1.x = t1 * t2;
    v1.y = tempY;
    t2 = b2.get$angularVelocity();
    t1 = $.getInterceptor$n(t2);
    tempY = t1.$mul(t2, r2.x);
    t2 = t1.$negate(t2);
    t1 = r2.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    v2.x = t2 * t1;
    v2.y = tempY;
    t1 = b1.get$linearVelocity();
    v1.x = $.$add$ns(v1.x, t1.x);
    v1.y = $.$add$ns(v1.y, t1.y);
    t1 = b2.get$linearVelocity();
    v2.x = $.$add$ns(v2.x, t1.x);
    v2.y = $.$add$ns(v2.y, t1.y);
    t1 = this.u;
    v2.x = $.$sub$n(v2.x, v1.x);
    v2.y = $.$sub$n(v2.y, v1.y);
    Cdot = $.$add$ns($.$mul$n(t1.x, v2.x), $.$mul$n(t1.y, v2.y));
    t2 = $.$negate$n(this.mass);
    t3 = $.$add$ns(Cdot, this.bias);
    t4 = this.gamma;
    t5 = this.impulse;
    t4 = $.$add$ns(t3, t4 * t5);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    imp = t2 * t4;
    this.impulse = t5 + imp;
    t5 = t1.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    Px = imp * t5;
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    Py = imp * t1;
    t1 = b1.get$linearVelocity();
    t1.x = $.$sub$n(t1.x, b1.get$invMass() * Px);
    t1 = b1.get$linearVelocity();
    t1.y = $.$sub$n(t1.y, b1.get$invMass() * Py);
    t1 = b1.get$angularVelocity();
    t5 = b1.get$invInertia();
    t4 = $.$sub$n($.$mul$n(r1.x, Py), $.$mul$n(r1.y, Px));
    if (typeof t4 !== "number")
      throw $.iae(t4);
    b1.set$angularVelocity($.$sub$n(t1, t5 * t4));
    t4 = b2.get$linearVelocity();
    t4.x = $.$add$ns(t4.x, b2.get$invMass() * Px);
    t4 = b2.get$linearVelocity();
    t4.y = $.$add$ns(t4.y, b2.get$invMass() * Py);
    t4 = b2.get$angularVelocity();
    t5 = b2.get$invInertia();
    t1 = $.$sub$n($.$mul$n(r2.x, Py), $.$mul$n(r2.y, Px));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    b2.set$angularVelocity($.$add$ns(t4, t5 * t1));
  },
  solvePositionConstraints$1: function(baumgarte) {
    var b1, b2, r1, r2, d, t1, t2, len, C, imp, t3, Px, Py, t4;
    if (this.frequencyHz > 0)
      return true;
    b1 = this.bodyA;
    b2 = this.bodyB;
    r1 = new $.Vector(0, 0);
    r2 = new $.Vector(0, 0);
    d = new $.Vector(0, 0);
    t1 = this.localAnchor1;
    t2 = t1.x;
    t1 = t1.y;
    r1.x = t2;
    r1.y = t1;
    t1 = b1.get$localCenter();
    r1.x = $.$sub$n(r1.x, t1.x);
    r1.y = $.$sub$n(r1.y, t1.y);
    t1 = this.localAnchor2;
    t2 = t1.x;
    t1 = t1.y;
    r2.x = t2;
    r2.y = t1;
    t1 = b2.get$localCenter();
    r2.x = $.$sub$n(r2.x, t1.x);
    r2.y = $.$sub$n(r2.y, t1.y);
    $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().rotation, r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().rotation, r2, r2);
    d.x = $.$sub$n($.$sub$n($.$add$ns(b2.get$sweep().center.x, r2.x), b1.get$sweep().center.x), r1.x);
    d.y = $.$sub$n($.$sub$n($.$add$ns(b2.get$sweep().center.y, r2.y), b1.get$sweep().center.y), r1.y);
    len = d.normalize$0();
    t1 = this.length;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    C = $.max(-0.2, $.min(len - t1, 0.2));
    imp = $.$negate$n(this.mass) * C;
    t1 = this.u;
    t2 = d.x;
    t3 = d.y;
    t1.x = t2;
    t1.y = t3;
    t3 = t1.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    Px = imp * t3;
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    Py = imp * t1;
    t1 = b1.get$sweep().center;
    t1.x = $.$sub$n(t1.x, b1.get$invMass() * Px);
    t1 = b1.get$sweep().center;
    t1.y = $.$sub$n(t1.y, b1.get$invMass() * Py);
    t1 = b1.get$sweep();
    t3 = t1.angle;
    t2 = b1.get$invInertia();
    t4 = $.$sub$n($.$mul$n(r1.x, Py), $.$mul$n(r1.y, Px));
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t1.angle = $.$sub$n(t3, t2 * t4);
    t4 = b2.get$sweep().center;
    t4.x = $.$add$ns(t4.x, b2.get$invMass() * Px);
    t4 = b2.get$sweep().center;
    t4.y = $.$add$ns(t4.y, b2.get$invMass() * Py);
    t4 = b2.get$sweep();
    t2 = t4.angle;
    t3 = b2.get$invInertia();
    t1 = $.$sub$n($.$mul$n(r2.x, Py), $.$mul$n(r2.y, Px));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t4.angle = $.$add$ns(t2, t3 * t1);
    b1.synchronizeTransform$0();
    b2.synchronizeTransform$0();
    return $.JSNumber_methods.abs$0(C) < 0.005;
  }
},

DistanceJointDef: {"": "JointDef;localAnchorA<,localAnchorB<,length>,frequencyHz<,dampingRatio<,type,userData,bodyA,bodyB,collideConnected",
  initialize$4: function(_, b1, b2, anchor1, anchor2) {
    var t1, t2, t3, d;
    this.bodyA = b1;
    this.bodyB = b2;
    t1 = this.localAnchorA;
    t2 = this.bodyA.getLocalPoint$1(anchor1);
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.localAnchorB;
    t1 = this.bodyB.getLocalPoint$1(anchor2);
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    d = new $.Vector(anchor2.x, anchor2.y);
    t1 = d.x;
    if (typeof t1 !== "number")
      return this.initialize$4$bailout(1, anchor1, d, t1);
    t2 = anchor1.x;
    if (typeof t2 !== "number")
      return this.initialize$4$bailout(2, anchor1, d, t1, t2);
    d.x = t1 - t2;
    t2 = d.y;
    if (typeof t2 !== "number")
      return this.initialize$4$bailout(3, anchor1, d, 0, t2);
    t1 = anchor1.y;
    if (typeof t1 !== "number")
      return this.initialize$4$bailout(4, 0, d, t1, t2);
    d.y = t2 - t1;
    t1 = d.x;
    if (typeof t1 !== "number")
      return this.initialize$4$bailout(5, 0, d, t1);
    t1 *= t1;
    t2 = d.y;
    if (typeof t2 !== "number")
      return this.initialize$4$bailout(6, 0, 0, t1, t2);
    t2 = t1 + t2 * t2;
    this.length = Math.sqrt(t2);
  },
  initialize$4$bailout: function(state0, anchor1, d, t1, t2) {
    switch (state0) {
      case 0:
        this.bodyA = b1;
        this.bodyB = b2;
        t1 = this.localAnchorA;
        t2 = this.bodyA.getLocalPoint$1(anchor1);
        t3 = t2.x;
        t2 = t2.y;
        t1.x = t3;
        t1.y = t2;
        t2 = this.localAnchorB;
        t1 = this.bodyB.getLocalPoint$1(anchor2);
        t3 = t1.x;
        t1 = t1.y;
        t2.x = t3;
        t2.y = t1;
        d = new $.Vector(anchor2.x, anchor2.y);
        t1 = d.x;
      case 1:
        state0 = 0;
        t2 = anchor1.x;
      case 2:
        state0 = 0;
        d.x = $.$sub$n(t1, t2);
        t2 = d.y;
      case 3:
        state0 = 0;
        t1 = anchor1.y;
      case 4:
        state0 = 0;
        d.y = $.$sub$n(t2, t1);
        t1 = d.x;
      case 5:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        t2 = d.y;
      case 6:
        var t3;
        state0 = 0;
        t2 = $.$add$ns(t1, $.$mul$n(t2, t2));
        if (typeof t2 !== "number")
          $.throwExpression(new $.ArgumentError(t2));
        this.length = Math.sqrt(t2);
    }
  },
  DistanceJointDef$0: function() {
    this.type = 3;
  }
},

FrictionJoint: {"": "Joint;_localAnchorA,_localAnchorB,_linearImpulse,_angularImpulse,_maxForce,_maxTorque,type,_prev,_liblib1$_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
  initVelocityConstraints$1: function(step) {
    var r1, r2, t1, t2, K, t3, t4, t5, t6, t7, linearMass, P;
    r1 = new $.Vector(0, 0);
    r2 = new $.Vector(0, 0);
    t1 = this._localAnchorA;
    t2 = t1.x;
    t1 = t1.y;
    r1.x = t2;
    r1.y = t1;
    t1 = this.bodyA.get$localCenter();
    r1.x = $.$sub$n(r1.x, t1.x);
    r1.y = $.$sub$n(r1.y, t1.y);
    t1 = this._localAnchorB;
    t2 = t1.x;
    t1 = t1.y;
    r2.x = t2;
    r2.y = t1;
    t1 = this.bodyB.get$localCenter();
    r2.x = $.$sub$n(r2.x, t1.x);
    r2.y = $.$sub$n(r2.y, t1.y);
    $.Matrix22_mulMatrixAndVectorToOut(this.bodyA.get$originTransform().rotation, r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(this.bodyB.get$originTransform().rotation, r2, r2);
    K = $.Matrix22$(null, null);
    t1 = K.col1;
    t2 = this.bodyA;
    t3 = t2.get$invMass();
    t4 = this.bodyB;
    t5 = t4.get$invMass();
    t2 = t2.get$invInertia();
    t6 = r1.y;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t4 = t4.get$invInertia();
    t7 = r2.y;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t1.x = t3 + t5 + t2 * t6 * t6 + t4 * t7 * t7;
    t7 = K.col1;
    t4 = this.bodyA.get$invInertia();
    t6 = r1.x;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t2 = r1.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t5 = this.bodyB.get$invInertia();
    t3 = r2.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t1 = r2.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t7.y = -t4 * t6 * t2 - t5 * t3 * t1;
    K.col2.x = K.col1.y;
    t1 = K.col2;
    t3 = this.bodyA;
    t5 = t3.get$invMass();
    t2 = this.bodyB;
    t6 = t2.get$invMass();
    t3 = t3.get$invInertia();
    t4 = r1.x;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t2 = t2.get$invInertia();
    t7 = r2.x;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t1.y = t5 + t6 + t3 * t4 * t4 + t2 * t7 * t7;
    linearMass = $.Matrix22$(null, null);
    t7 = linearMass.col1;
    t2 = K.col1;
    t7.setFrom$1;
    t4 = t2.x;
    t2 = t2.y;
    t7.x = t4;
    t7.y = t2;
    t2 = linearMass.col2;
    t7 = K.col2;
    t2.setFrom$1;
    t4 = t7.x;
    t7 = t7.y;
    t2.x = t4;
    t2.y = t7;
    linearMass.invertLocal$0();
    if (this.bodyA.get$invInertia() + this.bodyB.get$invInertia() > 0)
      ;
    t1 = this._linearImpulse;
    if (step.warmStarting) {
      t2 = step.dtRatio;
      t1.x = $.$mul$n(t1.x, t2);
      t1.y = $.$mul$n(t1.y, t2);
      this._angularImpulse = this._angularImpulse * step.dtRatio;
      P = new $.Vector(0, 0);
      t2 = t1.x;
      t1 = t1.y;
      P.x = t2;
      P.y = t1;
      t1 = this.bodyA.get$linearVelocity();
      t2 = t1.x;
      t3 = this.bodyA.get$invMass();
      t4 = P.x;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t1.x = $.$sub$n(t2, t3 * t4);
      t4 = this.bodyA.get$linearVelocity();
      t3 = t4.y;
      t2 = this.bodyA.get$invMass();
      t1 = P.y;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t4.y = $.$sub$n(t3, t2 * t1);
      t1 = this.bodyA;
      t2 = t1.get$angularVelocity();
      t3 = this.bodyA.get$invInertia();
      t4 = $.$add$ns($.$sub$n($.$mul$n(r1.x, P.y), $.$mul$n(r1.y, P.x)), this._angularImpulse);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t1.set$angularVelocity($.$sub$n(t2, t3 * t4));
      t4 = this.bodyB.get$linearVelocity();
      t3 = t4.x;
      t2 = this.bodyB.get$invMass();
      t1 = P.x;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t4.x = $.$add$ns(t3, t2 * t1);
      t1 = this.bodyB.get$linearVelocity();
      t2 = t1.y;
      t3 = this.bodyB.get$invMass();
      t4 = P.y;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t1.y = $.$add$ns(t2, t3 * t4);
      t4 = this.bodyB;
      t3 = t4.get$angularVelocity();
      t2 = this.bodyB.get$invInertia();
      t1 = $.$add$ns($.$sub$n($.$mul$n(r2.x, P.y), $.$mul$n(r2.y, P.x)), this._angularImpulse);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t4.set$angularVelocity($.$add$ns(t3, t2 * t1));
    } else {
      t1.x = 0;
      t1.y = 0;
      this._angularImpulse = 0;
    }
  },
  solveVelocityConstraints$1: function(step) {
    var Cdot, angularMass, oldImpulse, t1, t2, maxImpulse, impulse, r1, r2, temp, tempY, K, t3, t4, t5, t6, t7, linearMass;
    Cdot = $.$sub$n(this.bodyB.get$angularVelocity(), this.bodyA.get$angularVelocity());
    angularMass = this.bodyA.get$invInertia() + this.bodyB.get$invInertia();
    if (angularMass > 0)
      angularMass = 1 / angularMass;
    if (typeof Cdot !== "number")
      throw $.iae(Cdot);
    oldImpulse = this._angularImpulse;
    t1 = step.dt;
    t2 = this._maxTorque;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    maxImpulse = t1 * t2;
    this._angularImpulse = $.max(-maxImpulse, $.min(oldImpulse + -angularMass * Cdot, maxImpulse));
    impulse = this._angularImpulse - oldImpulse;
    t2 = this.bodyA;
    t2.set$angularVelocity($.$sub$n(t2.get$angularVelocity(), this.bodyA.get$invInertia() * impulse));
    t2 = this.bodyB;
    t2.set$angularVelocity($.$add$ns(t2.get$angularVelocity(), this.bodyB.get$invInertia() * impulse));
    r1 = new $.Vector(0, 0);
    r2 = new $.Vector(0, 0);
    t2 = this._localAnchorA;
    t1 = t2.x;
    t2 = t2.y;
    r1.x = t1;
    r1.y = t2;
    t2 = this.bodyA.get$localCenter();
    r1.x = $.$sub$n(r1.x, t2.x);
    r1.y = $.$sub$n(r1.y, t2.y);
    t2 = this._localAnchorB;
    t1 = t2.x;
    t2 = t2.y;
    r2.x = t1;
    r2.y = t2;
    t2 = this.bodyB.get$localCenter();
    r2.x = $.$sub$n(r2.x, t2.x);
    r2.y = $.$sub$n(r2.y, t2.y);
    $.Matrix22_mulMatrixAndVectorToOut(this.bodyA.get$originTransform().rotation, r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(this.bodyB.get$originTransform().rotation, r2, r2);
    temp = new $.Vector(0, 0);
    Cdot = new $.Vector(0, 0);
    t2 = this.bodyA.get$angularVelocity();
    t1 = $.getInterceptor$n(t2);
    tempY = t1.$mul(t2, r1.x);
    t2 = t1.$negate(t2);
    t1 = r1.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    temp.x = t2 * t1;
    temp.y = tempY;
    t1 = this.bodyB.get$angularVelocity();
    t2 = $.getInterceptor$n(t1);
    tempY = t2.$mul(t1, r2.x);
    t1 = t2.$negate(t1);
    t2 = r2.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    Cdot.x = t1 * t2;
    Cdot.y = tempY;
    t2 = this.bodyB.get$linearVelocity();
    Cdot.x = $.$add$ns(Cdot.x, t2.x);
    Cdot.y = $.$add$ns(Cdot.y, t2.y);
    t2 = this.bodyA.get$linearVelocity();
    Cdot.x = $.$sub$n(Cdot.x, t2.x);
    Cdot.y = $.$sub$n(Cdot.y, t2.y);
    Cdot.x = $.$sub$n(Cdot.x, temp.x);
    Cdot.y = $.$sub$n(Cdot.y, temp.y);
    K = $.Matrix22$(null, null);
    t2 = K.col1;
    t1 = this.bodyA;
    t3 = t1.get$invMass();
    t4 = this.bodyB;
    t5 = t4.get$invMass();
    t1 = t1.get$invInertia();
    t6 = r1.y;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t4 = t4.get$invInertia();
    t7 = r2.y;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t2.x = t3 + t5 + t1 * t6 * t6 + t4 * t7 * t7;
    t7 = K.col1;
    t4 = this.bodyA.get$invInertia();
    t6 = r1.x;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t1 = r1.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t5 = this.bodyB.get$invInertia();
    t3 = r2.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t2 = r2.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t7.y = -t4 * t6 * t1 - t5 * t3 * t2;
    K.col2.x = K.col1.y;
    t2 = K.col2;
    t3 = this.bodyA;
    t5 = t3.get$invMass();
    t1 = this.bodyB;
    t6 = t1.get$invMass();
    t3 = t3.get$invInertia();
    t4 = r1.x;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t1 = t1.get$invInertia();
    t7 = r2.x;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t2.y = t5 + t6 + t3 * t4 * t4 + t1 * t7 * t7;
    linearMass = $.Matrix22$(null, null);
    t7 = linearMass.col1;
    t1 = K.col1;
    t7.setFrom$1;
    t4 = t1.x;
    t1 = t1.y;
    t7.x = t4;
    t7.y = t1;
    t1 = linearMass.col2;
    t7 = K.col2;
    t1.setFrom$1;
    t4 = t7.x;
    t7 = t7.y;
    t1.x = t4;
    t1.y = t7;
    linearMass.invertLocal$0();
    impulse = new $.Vector(0, 0);
    $.Matrix22_mulMatrixAndVectorToOut(linearMass, Cdot, impulse);
    impulse.x = $.$negate$n(impulse.x);
    impulse.y = $.$negate$n(impulse.y);
    oldImpulse = new $.Vector(0, 0);
    t7 = this._linearImpulse;
    t1 = t7.x;
    t4 = t7.y;
    oldImpulse.x = t1;
    oldImpulse.y = t4;
    t7.x = $.$add$ns(t7.x, impulse.x);
    t7.y = $.$add$ns(t7.y, impulse.y);
    t4 = step.dt;
    t1 = this._maxForce;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    maxImpulse = t4 * t1;
    t1 = t7.x;
    t1 = $.$mul$n(t1, t1);
    t2 = t7.y;
    if ($.$gt$n($.$add$ns(t1, $.$mul$n(t2, t2)), maxImpulse * maxImpulse)) {
      t7.normalize$0();
      t7.x = $.$mul$n(t7.x, maxImpulse);
      t7.y = $.$mul$n(t7.y, maxImpulse);
    }
    t1 = t7.x;
    t7 = t7.y;
    impulse.x = t1;
    impulse.y = t7;
    impulse.x = $.$sub$n(impulse.x, oldImpulse.x);
    impulse.y = $.$sub$n(impulse.y, oldImpulse.y);
    t7 = this.bodyA.get$linearVelocity();
    t7.x = $.$sub$n(t7.x, $.$mul$n(impulse.x, this.bodyA.get$invMass()));
    t7 = this.bodyA.get$linearVelocity();
    t7.y = $.$sub$n(t7.y, $.$mul$n(impulse.y, this.bodyA.get$invMass()));
    t7 = this.bodyA;
    t1 = t7.get$angularVelocity();
    t2 = this.bodyA.get$invInertia();
    t3 = $.$sub$n($.$mul$n(r1.x, impulse.y), $.$mul$n(r1.y, impulse.x));
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t7.set$angularVelocity($.$sub$n(t1, t2 * t3));
    t3 = this.bodyB.get$linearVelocity();
    t3.x = $.$add$ns(t3.x, $.$mul$n(impulse.x, this.bodyB.get$invMass()));
    t3 = this.bodyB.get$linearVelocity();
    t3.y = $.$add$ns(t3.y, $.$mul$n(impulse.y, this.bodyB.get$invMass()));
    t3 = this.bodyB;
    t2 = t3.get$angularVelocity();
    t1 = this.bodyB.get$invInertia();
    t7 = $.$sub$n($.$mul$n(r2.x, impulse.y), $.$mul$n(r2.y, impulse.x));
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t3.set$angularVelocity($.$add$ns(t2, t1 * t7));
  },
  solvePositionConstraints$1: function(baumgarte) {
    return true;
  }
},

Joint: {"": "Object;type*,_prev?,_liblib1$_next?,edgeA<,edgeB<,bodyA@,bodyB@,islandFlag,collideConnected,userData@,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
  getAnchorA$1: function(argOut) {
  },
  getAnchorB$1: function(argOut) {
  },
  get$active: function() {
    return this.bodyA.get$active() && this.bodyB.get$active();
  },
  initVelocityConstraints$1: function(step) {
  },
  solveVelocityConstraints$1: function(step) {
  },
  solvePositionConstraints$1: function(baumgarte) {
  }
},

JointDef: {"": "Object;type*,userData@,bodyA@,bodyB@,collideConnected"},

JointEdge: {"": "Object;other<,joint<,prev@,next@"},

RevoluteJoint: {"": "Joint;localAnchor1,localAnchor2,impulse,_motorImpulse,mass<,motorMass,_enableMotor,_maxMotorTorque,_motorSpeed,_enableLimit,referenceAngle,lowerAngle,upperAngle,limitState,type,_prev,_liblib1$_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
  initVelocityConstraints$1: function(step) {
    var b1, b2, r1, r2, t1, t2, m1, m2, i1, i2, t3, t4, t5, t6, t7, jointAngle, temp, P;
    b1 = this.bodyA;
    b2 = this.bodyB;
    if (this._enableMotor === true || this._enableLimit === true)
      ;
    r1 = new $.Vector(0, 0);
    r2 = new $.Vector(0, 0);
    t1 = this.localAnchor1;
    t2 = t1.x;
    t1 = t1.y;
    r1.x = t2;
    r1.y = t1;
    t1 = b1.get$localCenter();
    r1.x = $.$sub$n(r1.x, t1.x);
    r1.y = $.$sub$n(r1.y, t1.y);
    t1 = this.localAnchor2;
    t2 = t1.x;
    t1 = t1.y;
    r2.x = t2;
    r2.y = t1;
    t1 = b2.get$localCenter();
    r2.x = $.$sub$n(r2.x, t1.x);
    r2.y = $.$sub$n(r2.y, t1.y);
    $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().rotation, r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().rotation, r2, r2);
    m1 = b1.get$invMass();
    m2 = b2.get$invMass();
    i1 = b1.get$invInertia();
    i2 = b2.get$invInertia();
    t1 = this.mass;
    t2 = t1.col1;
    t3 = m1 + m2;
    t4 = r1.y;
    t4 = $.$mul$n($.$mul$n(t4, t4), i1);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = r2.y;
    t5 = $.$mul$n($.$mul$n(t5, t5), i2);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t2.x = t3 + t4 + t5;
    t5 = t1.col2;
    t4 = $.$negate$n(r1.y);
    t6 = r1.x;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t7 = $.$mul$n($.$mul$n(r2.y, r2.x), i2);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t5.x = t4 * t6 * i1 - t7;
    t1 = t1.col3;
    t7 = $.$negate$n(r1.y);
    t6 = $.$mul$n(r2.y, i2);
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t1.x = t7 * i1 - t6;
    t2.y = t5.x;
    t6 = r1.x;
    t6 = $.$mul$n($.$mul$n(t6, t6), i1);
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t7 = r2.x;
    t7 = $.$mul$n($.$mul$n(t7, t7), i2);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t5.y = t3 + t6 + t7;
    t1.y = $.$add$ns($.$mul$n(r1.x, i1), $.$mul$n(r2.x, i2));
    t2.z = t1.x;
    t5.z = t1.y;
    t5 = i1 + i2;
    t1.z = t5;
    this.motorMass = t5;
    t1 = this.motorMass;
    if ($.$gt$n(t1, 0)) {
      if (typeof t1 !== "number")
        throw $.iae(t1);
      this.motorMass = 1 / t1;
    }
    if ($.$eq(this._enableMotor, false))
      this._motorImpulse = 0;
    if (this._enableLimit === true) {
      jointAngle = $.$sub$n($.$sub$n(b2.get$sweep().angle, b1.get$sweep().angle), this.referenceAngle);
      if ($.abs$0$n($.$sub$n(this.upperAngle, this.lowerAngle)) < 0.06981317007977318)
        this.limitState = 3;
      else {
        t1 = $.getInterceptor$n(jointAngle);
        if (t1.$le(jointAngle, this.lowerAngle)) {
          if (this.limitState !== 1)
            this.impulse.z = 0;
          this.limitState = 1;
        } else if (t1.$ge(jointAngle, this.upperAngle)) {
          if (this.limitState !== 2)
            this.impulse.z = 0;
          this.limitState = 2;
        } else {
          this.limitState = 0;
          this.impulse.z = 0;
        }
      }
    } else
      this.limitState = 0;
    t1 = this.impulse;
    if (step.warmStarting) {
      t2 = step.dtRatio;
      t1.x = $.$mul$n(t1.x, t2);
      t1.y = $.$mul$n(t1.y, t2);
      t1.z = $.$mul$n(t1.z, t2);
      this._motorImpulse = this._motorImpulse * step.dtRatio;
      temp = new $.Vector(0, 0);
      P = new $.Vector(0, 0);
      t2 = t1.x;
      t3 = t1.y;
      P.x = t2;
      P.y = t3;
      t3 = P.x;
      t2 = P.y;
      temp.x = t3;
      temp.y = t2;
      temp.x = $.$mul$n(temp.x, m1);
      temp.y = $.$mul$n(temp.y, m1);
      t2 = b1.get$linearVelocity();
      t2.x = $.$sub$n(t2.x, temp.x);
      t2.y = $.$sub$n(t2.y, temp.y);
      t2 = b1.get$angularVelocity();
      t3 = $.$add$ns($.$add$ns($.$sub$n($.$mul$n(r1.x, P.y), $.$mul$n(r1.y, P.x)), this._motorImpulse), t1.z);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      b1.set$angularVelocity($.$sub$n(t2, i1 * t3));
      t3 = P.x;
      t2 = P.y;
      temp.x = t3;
      temp.y = t2;
      temp.x = $.$mul$n(temp.x, m2);
      temp.y = $.$mul$n(temp.y, m2);
      t2 = b2.get$linearVelocity();
      t2.x = $.$add$ns(t2.x, temp.x);
      t2.y = $.$add$ns(t2.y, temp.y);
      t2 = b2.get$angularVelocity();
      t1 = $.$add$ns($.$add$ns($.$sub$n($.$mul$n(r2.x, P.y), $.$mul$n(r2.y, P.x)), this._motorImpulse), t1.z);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      b2.set$angularVelocity($.$add$ns(t2, i2 * t1));
    } else {
      t1.x = 0;
      t1.y = 0;
      t1.z = 0;
      this._motorImpulse = 0;
    }
  },
  solveVelocityConstraints$1: function(step) {
    var b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, Cdot, imp, oldImpulse, t2, t3, maxImpulse, temp, r1, r2, t4, t5, t6, Cdot1, tempY, Cdot2, P;
    b1 = this.bodyA;
    b2 = this.bodyB;
    v1 = b1.get$linearVelocity();
    w1 = b1.get$angularVelocity();
    v2 = b2.get$linearVelocity();
    w2 = b2.get$angularVelocity();
    m1 = b1.get$invMass();
    m2 = b2.get$invMass();
    i1 = b1.get$invInertia();
    i2 = b2.get$invInertia();
    if (this._enableMotor === true && this.limitState !== 3) {
      t1 = $.getInterceptor$n(w2);
      Cdot = $.$sub$n(t1.$sub(w2, w1), this._motorSpeed);
      imp = $.$mul$n(this.motorMass, $.$negate$n(Cdot));
      oldImpulse = this._motorImpulse;
      t2 = step.dt;
      t3 = this._maxMotorTorque;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      maxImpulse = t2 * t3;
      this._motorImpulse = $.max(-maxImpulse, $.min(oldImpulse + imp, maxImpulse));
      imp = this._motorImpulse - oldImpulse;
      w1 = $.$sub$n(w1, i1 * imp);
      w2 = t1.$add(w2, i2 * imp);
    }
    temp = new $.Vector(0, 0);
    r1 = new $.Vector(0, 0);
    r2 = new $.Vector(0, 0);
    t1 = this._enableLimit === true && this.limitState !== 0;
    t2 = $.getInterceptor$n(w1);
    t3 = $.getInterceptor$n(w2);
    t4 = this.localAnchor1;
    t5 = this.localAnchor2;
    t6 = this.mass;
    if (t1) {
      t1 = t4.x;
      t4 = t4.y;
      r1.x = t1;
      r1.y = t4;
      t4 = b1.get$localCenter();
      r1.x = $.$sub$n(r1.x, t4.x);
      r1.y = $.$sub$n(r1.y, t4.y);
      t4 = t5.x;
      t5 = t5.y;
      r2.x = t4;
      r2.y = t5;
      t5 = b2.get$localCenter();
      r2.x = $.$sub$n(r2.x, t5.x);
      r2.y = $.$sub$n(r2.y, t5.y);
      $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().rotation, r1, r1);
      $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().rotation, r2, r2);
      Cdot1 = new $.Vector(0, 0);
      Cdot = new $.Vector3(0, 0, 0);
      tempY = t2.$mul(w1, r1.x);
      t5 = t2.$negate(w1);
      t4 = r1.y;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      temp.x = t5 * t4;
      temp.y = tempY;
      tempY = t3.$mul(w2, r2.x);
      t4 = t3.$negate(w2);
      t5 = r2.y;
      if (typeof t5 !== "number")
        throw $.iae(t5);
      Cdot1.x = t4 * t5;
      Cdot1.y = tempY;
      Cdot1.x = $.$add$ns(Cdot1.x, v2.x);
      Cdot1.y = $.$add$ns(Cdot1.y, v2.y);
      Cdot1.x = $.$sub$n(Cdot1.x, v1.x);
      Cdot1.y = $.$sub$n(Cdot1.y, v1.y);
      Cdot1.x = $.$sub$n(Cdot1.x, temp.x);
      Cdot1.y = $.$sub$n(Cdot1.y, temp.y);
      Cdot2 = t3.$sub(w2, w1);
      t5 = Cdot1.x;
      t4 = Cdot1.y;
      Cdot.x = t5;
      Cdot.y = t4;
      Cdot.z = Cdot2;
      imp = new $.Vector3(0, 0, 0);
      Cdot.x = $.$negate$n(Cdot.x);
      Cdot.y = $.$negate$n(Cdot.y);
      Cdot.z = $.$negate$n(Cdot.z);
      t6.solve33ToOut$2(Cdot, imp);
      t1 = this.limitState;
      if (t1 === 3) {
        t1 = this.impulse;
        t1.x = $.$add$ns(t1.x, imp.x);
        t1.y = $.$add$ns(t1.y, imp.y);
        t1.z = $.$add$ns(t1.z, imp.z);
      } else if (t1 === 1) {
        t1 = this.impulse;
        if ($.$lt$n($.$add$ns(t1.z, imp.z), 0)) {
          Cdot1.x = $.$negate$n(Cdot1.x);
          Cdot1.y = $.$negate$n(Cdot1.y);
          t6.solve22ToOut$2(Cdot1, temp);
          imp.x = temp.x;
          imp.y = temp.y;
          imp.z = $.$negate$n(t1.z);
          t1.x = $.$add$ns(t1.x, temp.x);
          t1.y = $.$add$ns(t1.y, temp.y);
          t1.z = 0;
        }
      } else if (t1 === 2) {
        t1 = this.impulse;
        if ($.$gt$n($.$add$ns(t1.z, imp.z), 0)) {
          Cdot1.x = $.$negate$n(Cdot1.x);
          Cdot1.y = $.$negate$n(Cdot1.y);
          t6.solve22ToOut$2(Cdot1, temp);
          imp.x = temp.x;
          imp.y = temp.y;
          imp.z = $.$negate$n(t1.z);
          t1.x = $.$add$ns(t1.x, temp.x);
          t1.y = $.$add$ns(t1.y, temp.y);
          t1.z = 0;
        }
      }
      P = new $.Vector(0, 0);
      t1 = imp.x;
      t4 = imp.y;
      P.x = t1;
      P.y = t4;
      t4 = P.x;
      t1 = P.y;
      temp.x = t4;
      temp.y = t1;
      temp.x = $.$mul$n(temp.x, m1);
      temp.y = $.$mul$n(temp.y, m1);
      v1.x = $.$sub$n(v1.x, temp.x);
      v1.y = $.$sub$n(v1.y, temp.y);
      t1 = r1.x;
      t4 = P.y;
      t1 = $.$mul$n(t1, t4);
      t5 = r1.y;
      t6 = P.x;
      t5 = $.$add$ns($.$sub$n(t1, $.$mul$n(t5, t6)), imp.z);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      w1 = t2.$sub(w1, i1 * t5);
      temp.x = t6;
      temp.y = t4;
      temp.x = $.$mul$n(temp.x, m2);
      temp.y = $.$mul$n(temp.y, m2);
      v2.x = $.$add$ns(v2.x, temp.x);
      v2.y = $.$add$ns(v2.y, temp.y);
      t4 = $.$add$ns($.$sub$n($.$mul$n(r2.x, P.y), $.$mul$n(r2.y, P.x)), imp.z);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      w2 = t3.$add(w2, i2 * t4);
    } else {
      t1 = t4.x;
      t4 = t4.y;
      r1.x = t1;
      r1.y = t4;
      t4 = b1.get$localCenter();
      r1.x = $.$sub$n(r1.x, t4.x);
      r1.y = $.$sub$n(r1.y, t4.y);
      t4 = t5.x;
      t5 = t5.y;
      r2.x = t4;
      r2.y = t5;
      t5 = b2.get$localCenter();
      r2.x = $.$sub$n(r2.x, t5.x);
      r2.y = $.$sub$n(r2.y, t5.y);
      $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().rotation, r1, r1);
      $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().rotation, r2, r2);
      Cdot = new $.Vector(0, 0);
      imp = new $.Vector(0, 0);
      tempY = t2.$mul(w1, r1.x);
      t5 = t2.$negate(w1);
      t4 = r1.y;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      temp.x = t5 * t4;
      temp.y = tempY;
      tempY = t3.$mul(w2, r2.x);
      t4 = t3.$negate(w2);
      t5 = r2.y;
      if (typeof t5 !== "number")
        throw $.iae(t5);
      Cdot.x = t4 * t5;
      Cdot.y = tempY;
      Cdot.x = $.$add$ns(Cdot.x, v2.x);
      Cdot.y = $.$add$ns(Cdot.y, v2.y);
      Cdot.x = $.$sub$n(Cdot.x, v1.x);
      Cdot.y = $.$sub$n(Cdot.y, v1.y);
      Cdot.x = $.$sub$n(Cdot.x, temp.x);
      Cdot.y = $.$sub$n(Cdot.y, temp.y);
      Cdot.x = $.$negate$n(Cdot.x);
      Cdot.y = $.$negate$n(Cdot.y);
      t6.solve22ToOut$2(Cdot, imp);
      t6 = this.impulse;
      t6.x = $.$add$ns(t6.x, imp.x);
      t6.y = $.$add$ns(t6.y, imp.y);
      t6 = imp.x;
      t5 = imp.y;
      temp.x = t6;
      temp.y = t5;
      temp.x = $.$mul$n(temp.x, m1);
      temp.y = $.$mul$n(temp.y, m1);
      v1.x = $.$sub$n(v1.x, temp.x);
      v1.y = $.$sub$n(v1.y, temp.y);
      t5 = r1.x;
      t6 = imp.y;
      t5 = $.$mul$n(t5, t6);
      t4 = r1.y;
      t1 = imp.x;
      t4 = $.$sub$n(t5, $.$mul$n(t4, t1));
      if (typeof t4 !== "number")
        throw $.iae(t4);
      w1 = t2.$sub(w1, i1 * t4);
      temp.x = t1;
      temp.y = t6;
      temp.x = $.$mul$n(temp.x, m2);
      temp.y = $.$mul$n(temp.y, m2);
      v2.x = $.$add$ns(v2.x, temp.x);
      v2.y = $.$add$ns(v2.y, temp.y);
      t6 = $.$sub$n($.$mul$n(r2.x, imp.y), $.$mul$n(r2.y, imp.x));
      if (typeof t6 !== "number")
        throw $.iae(t6);
      w2 = t3.$add(w2, i2 * t6);
    }
    b1.set$angularVelocity(w1);
    b2.set$angularVelocity(w2);
  },
  solvePositionConstraints$1: function(baumgarte) {
    var b1, b2, angle, t1, C, limitImpulse, angularError, C0, imp, r1, r2, t2, positionError, invMass1, invMass2, invI1, invI2, t3, u, m, K1, K2, t4, K3;
    b1 = this.bodyA;
    b2 = this.bodyB;
    if (this._enableLimit === true && this.limitState !== 0) {
      angle = $.$sub$n($.$sub$n(b2.get$sweep().angle, b1.get$sweep().angle), this.referenceAngle);
      t1 = this.limitState;
      if (t1 === 3) {
        C = $.max(-0.13962634015954636, $.min($.$sub$n(angle, this.lowerAngle), 0.13962634015954636));
        limitImpulse = $.$negate$n(this.motorMass) * C;
        angularError = $.JSNumber_methods.abs$0(C);
      } else if (t1 === 1) {
        C = $.$sub$n(angle, this.lowerAngle);
        t1 = $.getInterceptor$n(C);
        angularError = t1.$negate(C);
        C = $.max(-0.13962634015954636, $.min(t1.$add(C, 0.03490658503988659), 0));
        limitImpulse = $.$negate$n(this.motorMass) * C;
      } else if (t1 === 2) {
        C = $.$sub$n(angle, this.upperAngle);
        C0 = $.max(0, $.min($.$sub$n(C, 0.03490658503988659), 0.13962634015954636));
        limitImpulse = $.$negate$n(this.motorMass) * C0;
        angularError = C;
      } else {
        angularError = 0;
        limitImpulse = 0;
      }
      t1 = b1.get$sweep();
      t1.angle = $.$sub$n(t1.angle, b1.get$invInertia() * limitImpulse);
      t1 = b2.get$sweep();
      t1.angle = $.$add$ns(t1.angle, b2.get$invInertia() * limitImpulse);
      b1.synchronizeTransform$0();
      b2.synchronizeTransform$0();
    } else
      angularError = 0;
    imp = new $.Vector(0, 0);
    r1 = new $.Vector(0, 0);
    r2 = new $.Vector(0, 0);
    C = new $.Vector(0, 0);
    t1 = this.localAnchor1;
    t2 = t1.x;
    t1 = t1.y;
    r1.x = t2;
    r1.y = t1;
    t1 = b1.get$localCenter();
    r1.x = $.$sub$n(r1.x, t1.x);
    r1.y = $.$sub$n(r1.y, t1.y);
    t1 = this.localAnchor2;
    t2 = t1.x;
    t1 = t1.y;
    r2.x = t2;
    r2.y = t1;
    t1 = b2.get$localCenter();
    r2.x = $.$sub$n(r2.x, t1.x);
    r2.y = $.$sub$n(r2.y, t1.y);
    $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().rotation, r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().rotation, r2, r2);
    t1 = b2.get$sweep().center;
    t2 = t1.x;
    t1 = t1.y;
    C.x = t2;
    C.y = t1;
    C.x = $.$add$ns(C.x, r2.x);
    C.y = $.$add$ns(C.y, r2.y);
    t1 = b1.get$sweep().center;
    C.x = $.$sub$n(C.x, t1.x);
    C.y = $.$sub$n(C.y, t1.y);
    C.x = $.$sub$n(C.x, r1.x);
    C.y = $.$sub$n(C.y, r1.y);
    t1 = C.x;
    t1 = $.$mul$n(t1, t1);
    t2 = C.y;
    t2 = $.$add$ns(t1, $.$mul$n(t2, t2));
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    positionError = Math.sqrt(t2);
    invMass1 = b1.get$invMass();
    invMass2 = b2.get$invMass();
    invI1 = b1.get$invInertia();
    invI2 = b2.get$invInertia();
    t1 = C.x;
    t2 = $.$mul$n(t1, t1);
    t3 = C.y;
    if ($.$gt$n($.$add$ns(t2, $.$mul$n(t3, t3)), 0.0025000000000000005)) {
      u = new $.Vector(0, 0);
      m = invMass1 + invMass2;
      if (m > 0)
        m = 1 / m;
      imp.x = t1;
      imp.y = t3;
      imp.x = $.$negate$n(imp.x);
      imp.y = $.$negate$n(imp.y);
      imp.x = $.$mul$n(imp.x, m);
      imp.y = $.$mul$n(imp.y, m);
      t1 = imp.x;
      t2 = imp.y;
      u.x = t1;
      u.y = t2;
      t2 = 0.5 * invMass1;
      u.x = $.$mul$n(u.x, t2);
      u.y = $.$mul$n(u.y, t2);
      t2 = b1.get$sweep().center;
      t2.x = $.$sub$n(t2.x, u.x);
      t2.y = $.$sub$n(t2.y, u.y);
      t2 = imp.x;
      t1 = imp.y;
      u.x = t2;
      u.y = t1;
      t1 = 0.5 * invMass2;
      u.x = $.$mul$n(u.x, t1);
      u.y = $.$mul$n(u.y, t1);
      t1 = b2.get$sweep().center;
      t1.x = $.$add$ns(t1.x, u.x);
      t1.y = $.$add$ns(t1.y, u.y);
      t1 = b2.get$sweep().center;
      t2 = t1.x;
      t1 = t1.y;
      C.x = t2;
      C.y = t1;
      C.x = $.$add$ns(C.x, r2.x);
      C.y = $.$add$ns(C.y, r2.y);
      t1 = b1.get$sweep().center;
      C.x = $.$sub$n(C.x, t1.x);
      C.y = $.$sub$n(C.y, t1.y);
      C.x = $.$sub$n(C.x, r1.x);
      C.y = $.$sub$n(C.y, r1.y);
    }
    K1 = $.Matrix22$(null, null);
    t1 = invMass1 + invMass2;
    K1.col1.x = t1;
    K1.col2.x = 0;
    K1.col1.y = 0;
    K1.col2.y = t1;
    K2 = $.Matrix22$(null, null);
    t1 = K2.col1;
    t2 = r1.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t1.x = invI1 * t2 * t2;
    t2 = K2.col2;
    t1 = -invI1;
    t3 = r1.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = r1.y;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t2.x = t1 * t3 * t4;
    t4 = K2.col1;
    t3 = r1.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t2 = r1.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t4.y = t1 * t3 * t2;
    t2 = K2.col2;
    t3 = r1.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t2.y = invI1 * t3 * t3;
    K3 = $.Matrix22$(null, null);
    t3 = K3.col1;
    t2 = r2.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3.x = invI2 * t2 * t2;
    t2 = K3.col2;
    t3 = -invI2;
    t1 = r2.x;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t4 = r2.y;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t2.x = t3 * t1 * t4;
    t4 = K3.col1;
    t1 = r2.x;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = r2.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t4.y = t3 * t1 * t2;
    t2 = K3.col2;
    t1 = r2.x;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2.y = invI2 * t1 * t1;
    K1.addLocal$1(K2).addLocal$1(K3);
    C.x = $.$negate$n(C.x);
    C.y = $.$negate$n(C.y);
    K1.solveToOut$2(C, imp);
    t1 = imp.x;
    t2 = imp.y;
    C.x = t1;
    C.y = t2;
    t2 = b1.get$invMass();
    C.x = $.$mul$n(C.x, t2);
    C.y = $.$mul$n(C.y, t2);
    t2 = b1.get$sweep().center;
    t2.x = $.$sub$n(t2.x, C.x);
    t2.y = $.$sub$n(t2.y, C.y);
    t2 = b1.get$sweep();
    t1 = t2.angle;
    t3 = b1.get$invInertia();
    t4 = $.$sub$n($.$mul$n(r1.x, imp.y), $.$mul$n(r1.y, imp.x));
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t2.angle = $.$sub$n(t1, t3 * t4);
    t4 = imp.x;
    t3 = imp.y;
    C.x = t4;
    C.y = t3;
    t3 = b2.get$invMass();
    C.x = $.$mul$n(C.x, t3);
    C.y = $.$mul$n(C.y, t3);
    t3 = b2.get$sweep().center;
    t3.x = $.$add$ns(t3.x, C.x);
    t3.y = $.$add$ns(t3.y, C.y);
    t3 = b2.get$sweep();
    t4 = t3.angle;
    t1 = b2.get$invInertia();
    t2 = $.$sub$n($.$mul$n(r2.x, imp.y), $.$mul$n(r2.y, imp.x));
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3.angle = $.$add$ns(t4, t1 * t2);
    b1.synchronizeTransform$0();
    b2.synchronizeTransform$0();
    return positionError <= 0.005 && $.$le$n(angularError, 0.03490658503988659);
  },
  getAnchorA$1: function(argOut) {
    this.bodyA.getWorldPointToOut$2(this.localAnchor1, argOut);
  },
  getAnchorB$1: function(argOut) {
    this.bodyB.getWorldPointToOut$2(this.localAnchor2, argOut);
  },
  RevoluteJoint$1: function(def) {
    var t1, t2, t3;
    t1 = this.localAnchor1;
    t2 = def.get$localAnchorA();
    t3 = t2.x;
    t2 = t2.y;
    t1.x = t3;
    t1.y = t2;
    t2 = this.localAnchor2;
    t1 = def.get$localAnchorB();
    t3 = t1.x;
    t1 = t1.y;
    t2.x = t3;
    t2.y = t1;
    this.referenceAngle = def.get$referenceAngle();
    this._motorImpulse = 0;
    this.lowerAngle = def.get$lowerAngle();
    this.upperAngle = def.get$upperAngle();
    this._maxMotorTorque = def.get$maxMotorTorque();
    this._motorSpeed = def.get$motorSpeed();
    this._enableLimit = def.get$enableLimit();
    this._enableMotor = def.get$enableMotor();
  }
},

DefaultWorldPool: {"": "Object;collision,timeOfImpact,distance@",
  getCircleContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.CircleContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  getPolyCircleContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.PolygonAndCircleContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  getPolyContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.PolygonContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  DefaultWorldPool$0: function() {
    this.distance = $.Distance$_construct();
    this.collision = $.Collision$_construct(this);
    this.timeOfImpact = $.TimeOfImpact$_construct(this);
  }
},

AxisAlignedBox_testOverlap: function(a, b) {
  var t1, t2, t3;
  t1 = b.lowerBound;
  t2 = t1.x;
  t3 = a.get$upperBound();
  if (!($.$gt$n(t2, t3.x) || $.$gt$n(t1.y, t3.y))) {
    t1 = a.get$lowerBound();
    t2 = t1.x;
    t3 = b.upperBound;
    t1 = $.$gt$n(t2, t3.x) || $.$gt$n(t1.y, t3.y);
  } else
    t1 = true;
  return !t1;
},

Collision$_construct: function(pool) {
  var t1, t2, t3, t4;
  t1 = $.DistanceProxy$();
  t2 = $.DistanceProxy$();
  t3 = $.Matrix22$(null, null);
  t4 = $.Matrix22$(null, null);
  t4 = new $.Collision(pool, $.SimplexCache$(), new $.DistanceInput(t1, t2, new $.Transform(new $.Vector(0, 0), t3), new $.Transform(new $.Vector(0, 0), t4), false), new $.DistanceOutput(new $.Vector(0, 0), new $.Vector(0, 0), null, null), new $.EdgeResults(0, 0), new $.EdgeResults(0, 0), $.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), $.List_List(2), $.List_List(2));
  t4.Collision$_construct$1(pool);
  return t4;
},

Collision_clipSegmentToLine: function(vOut, vIn, norm, offset) {
  var t1, t2, t3, t4, t5, t6, t7, t8, distance0, distance1, numOut, numOut0, interp, vin, vin0;
  t1 = vIn.length;
  if (0 >= t1)
    throw $.ioore(0);
  t2 = vIn[0];
  t3 = t2.get$v();
  t4 = norm.x;
  t5 = $.getInterceptor$n(t4);
  t6 = t5.$mul(t4, t3.x);
  t7 = norm.y;
  t8 = $.getInterceptor$n(t7);
  distance0 = $.$sub$n($.$add$ns(t6, t8.$mul(t7, t3.y)), offset);
  if (1 >= t1)
    throw $.ioore(1);
  t1 = vIn[1].get$v();
  distance1 = $.$sub$n($.$add$ns(t5.$mul(t4, t1.x), t8.$mul(t7, t1.y)), offset);
  t1 = $.getInterceptor$n(distance0);
  if (t1.$le(distance0, 0)) {
    if (0 >= vOut.length)
      throw $.ioore(0);
    vOut[0].setFrom$1(t2);
    numOut = 1;
  } else
    numOut = 0;
  if ($.$le$n(distance1, 0)) {
    numOut0 = numOut + 1;
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].setFrom$1(vIn[1]);
    numOut = numOut0;
  }
  if ($.$lt$n(t1.$mul(distance0, distance1), 0)) {
    interp = t1.$div(distance0, t1.$sub(distance0, distance1));
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    t2 = vOut[numOut];
    t3 = t2.get$v();
    vin = vIn[1];
    t4 = vin.get$v();
    t5 = t4.x;
    t4 = t4.y;
    t3.x = t5;
    t3.y = t4;
    vin0 = vIn[0];
    t4 = vin0.get$v();
    t3.x = $.$sub$n(t3.x, t4.x);
    t3.y = $.$sub$n(t3.y, t4.y);
    t3.x = $.$mul$n(t3.x, interp);
    t3.y = $.$mul$n(t3.y, interp);
    t4 = vin0.get$v();
    t3.x = $.$add$ns(t3.x, t4.x);
    t3.y = $.$add$ns(t3.y, t4.y);
    if (t1.$gt(distance0, 0))
      vin = vin0;
    $.get$id$x(t2).setFrom$1($.get$id$x(vin));
    ++numOut;
  }
  return numOut;
},

Distance$_construct: function() {
  return new $.Distance(0, 0, 20, $.Simplex$(), $.List_List(3), $.List_List(3), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
},

DistanceProxy$: function() {
  var t1 = new $.DistanceProxy($.List_List(8), 0, 0);
  t1.DistanceProxy$0();
  return t1;
},

Manifold$: function() {
  var t1 = new $.Manifold($.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0), null, 0);
  t1.Manifold$0();
  return t1;
},

Simplex$: function() {
  var t1 = new $.Simplex(new $.SimplexVertex(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0, 0), new $.SimplexVertex(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0, 0), new $.SimplexVertex(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0, 0), $.List_List(3), 0, new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
  t1.Simplex$0();
  return t1;
},

SimplexCache$: function() {
  var t1 = new $.SimplexCache(0, 0, $.List_List(3), $.List_List(3));
  t1.SimplexCache$0();
  return t1;
},

TimeOfImpact$_construct: function(argPool) {
  var t1 = new $.TimeOfImpact($.SimplexCache$(), new $.DistanceInput($.DistanceProxy$(), $.DistanceProxy$(), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)), false), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)), new $.DistanceOutput(new $.Vector(0, 0), new $.Vector(0, 0), null, null), $.SeparationFunction$(), $.List_List(2), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), argPool);
  t1.TimeOfImpact$_construct$1(argPool);
  return t1;
},

SeparationFunction$: function() {
  return new $.SeparationFunction($.DistanceProxy$(), $.DistanceProxy$(), 0, new $.Vector(0, 0), new $.Vector(0, 0), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)), new $.Transform(new $.Vector(0, 0), $.Matrix22$(null, null)));
},

WorldManifold$: function() {
  var t1 = new $.WorldManifold(new $.Vector(0, 0), $.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0));
  t1.WorldManifold$0();
  return t1;
},

BroadPhase$: function() {
  var t1 = new $.BroadPhase($.DynamicTree$(), 0, null, null, 16, 0, null);
  t1.BroadPhase$0();
  return t1;
},

DynamicTree$: function() {
  var t1, t2;
  t1 = $.List_List(4);
  t2 = new $.AxisAlignedBox(null, null);
  if (t2.lowerBound == null)
    t2.lowerBound = new $.Vector(0, 0);
  if (t2.upperBound == null)
    t2.upperBound = new $.Vector(0, 0);
  t1 = new $.DynamicTree(null, 0, null, 0, 0, $.ListQueue$(null), t1, 0, new $.Vector(0, 0), t2, new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
  t1.DynamicTree$0();
  return t1;
},

PolygonShape$: function() {
  var t1 = new $.PolygonShape(new $.Vector(0, 0), $.List_List(8), $.List_List(8), 0, 1, 0.01);
  t1.PolygonShape$0();
  return t1;
},

PolygonShape$copy: function(other) {
  var t1, t2, t3, t4, t5;
  t1 = other.radius;
  t2 = other.vertexCount;
  t3 = $.List_List(8);
  t4 = $.List_List(8);
  t5 = other.centroid;
  t1 = new $.PolygonShape(new $.Vector(t5.x, t5.y), t3, t4, t2, 1, t1);
  t1.PolygonShape$copy$1(other);
  return t1;
},

Color3$fromRGBF: function(r, g, b) {
  var t1, truncated, t2, t3;
  t1 = Math.floor(r * 255);
  if (isNaN(t1))
    $.throwExpression(new $.UnsupportedError("NaN"));
  if (t1 == Infinity || t1 == -Infinity)
    $.throwExpression(new $.UnsupportedError("Infinity"));
  truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
  t1 = truncated == -0.0 ? 0 : truncated;
  if (isNaN(t1))
    $.throwExpression(new $.UnsupportedError("NaN"));
  if (t1 == Infinity || t1 == -Infinity)
    $.throwExpression(new $.UnsupportedError("Infinity"));
  truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
  t1 = truncated == -0.0 ? 0 : truncated;
  t2 = Math.floor(g * 255);
  if (isNaN(t2))
    $.throwExpression(new $.UnsupportedError("NaN"));
  if (t2 == Infinity || t2 == -Infinity)
    $.throwExpression(new $.UnsupportedError("Infinity"));
  truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
  t2 = truncated == -0.0 ? 0 : truncated;
  if (isNaN(t2))
    $.throwExpression(new $.UnsupportedError("NaN"));
  if (t2 == Infinity || t2 == -Infinity)
    $.throwExpression(new $.UnsupportedError("Infinity"));
  truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
  t2 = truncated == -0.0 ? 0 : truncated;
  t3 = Math.floor(b * 255);
  if (isNaN(t3))
    $.throwExpression(new $.UnsupportedError("NaN"));
  if (t3 == Infinity || t3 == -Infinity)
    $.throwExpression(new $.UnsupportedError("Infinity"));
  truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
  t3 = truncated == -0.0 ? 0 : truncated;
  if (isNaN(t3))
    $.throwExpression(new $.UnsupportedError("NaN"));
  if (t3 == Infinity || t3 == -Infinity)
    $.throwExpression(new $.UnsupportedError("Infinity"));
  truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
  t3 = truncated == -0.0 ? 0 : truncated;
  return new $.Color3(t1, t2, t3);
},

MathBox_distanceSquared: function(v1, v2) {
  var dx, dy;
  dx = $.$sub$n(v1.x, v2.x);
  dy = $.$sub$n(v1.y, v2.y);
  return $.$add$ns($.$mul$n(dx, dx), $.$mul$n(dy, dy));
},

MathBox_translateAndScale: function(val, fromMin, fromMax, toMin, toMax) {
  return toMin + (val - fromMin) / (fromMax - fromMin) * (toMax - toMin);
},

Matrix22$: function(c1, c2) {
  var t1 = new $.Matrix22(null, null);
  t1.Matrix22$2(c1, c2);
  return t1;
},

Matrix22_mulTransMatrixAndVectorToOut: function(matrix, vector, out) {
  var t1, t2, t3, t4, outx;
  t1 = vector.x;
  if (typeof t1 !== "number")
    return $.Matrix22_mulTransMatrixAndVectorToOut$bailout(1, matrix, vector, out, t1);
  t2 = matrix.col1;
  t3 = t2.x;
  if (typeof t3 !== "number")
    return $.Matrix22_mulTransMatrixAndVectorToOut$bailout(2, matrix, vector, out, t1, t2, t3);
  t3 = t1 * t3;
  t4 = vector.y;
  if (typeof t4 !== "number")
    return $.Matrix22_mulTransMatrixAndVectorToOut$bailout(3, matrix, 0, out, t1, t2, t3, $.JSNumber_methods, t4);
  t2 = t2.y;
  if (typeof t2 !== "number")
    return $.Matrix22_mulTransMatrixAndVectorToOut$bailout(4, matrix, 0, out, t1, t2, t3, $.JSNumber_methods, t4);
  outx = t3 + t4 * t2;
  t2 = matrix.col2;
  t3 = t2.x;
  if (typeof t3 !== "number")
    return $.Matrix22_mulTransMatrixAndVectorToOut$bailout(5, 0, 0, out, t1, t2, t3, $.JSNumber_methods, t4, $.JSNumber_methods, outx);
  t3 = t1 * t3;
  t2 = t2.y;
  if (typeof t2 !== "number")
    return $.Matrix22_mulTransMatrixAndVectorToOut$bailout(6, 0, 0, out, 0, t2, t3, 0, t4, $.JSNumber_methods, outx);
  out.y = t3 + t4 * t2;
  out.x = outx;
},

Matrix22_mulTransMatrixAndVectorToOut$bailout: function(state0, matrix, vector, out, t1, t2, t3, t4, t5, t6, outx) {
  switch (state0) {
    case 0:
      t1 = vector.x;
    case 1:
      state0 = 0;
      t2 = matrix.col1;
      t3 = t2.x;
    case 2:
      state0 = 0;
      t4 = $.getInterceptor$n(t1);
      t3 = t4.$mul(t1, t3);
      t5 = vector.y;
    case 3:
      state0 = 0;
      t2 = t2.y;
    case 4:
      state0 = 0;
      t6 = $.getInterceptor$n(t5);
      outx = $.$add$ns(t3, t6.$mul(t5, t2));
      t2 = matrix.col2;
      t3 = t2.x;
    case 5:
      state0 = 0;
      t3 = t4.$mul(t1, t3);
      t2 = t2.y;
    case 6:
      state0 = 0;
      out.y = $.$add$ns(t3, t6.$mul(t5, t2));
      out.x = outx;
  }
},

Matrix22_mulMatrixAndVectorToOut: function(matrix, vector, out) {
  var t1, t2, t3, t4, t5, t6, tempy;
  t1 = matrix.get$col1();
  t2 = t1.y;
  if (typeof t2 !== "number")
    return $.Matrix22_mulMatrixAndVectorToOut$bailout(1, matrix, vector, out, t2, t1);
  t3 = $.getInterceptor$x(vector);
  t4 = t3.get$x(vector);
  if (typeof t4 !== "number")
    return $.Matrix22_mulMatrixAndVectorToOut$bailout(2, matrix, vector, out, t2, t1, t3, t4);
  t2 *= t4;
  t5 = matrix.get$col2();
  t6 = t5.y;
  if (typeof t6 !== "number")
    return $.Matrix22_mulMatrixAndVectorToOut$bailout(3, 0, vector, out, t2, t1, t3, t4, t5, t6);
  t3 = t3.get$y(vector);
  if (typeof t3 !== "number")
    return $.Matrix22_mulMatrixAndVectorToOut$bailout(4, 0, 0, out, t2, t1, t3, t4, t5, t6);
  tempy = t2 + t6 * t3;
  t1 = t1.x;
  if (typeof t1 !== "number")
    return $.Matrix22_mulMatrixAndVectorToOut$bailout(5, 0, 0, out, 0, t1, t3, t4, t5, 0, tempy);
  t4 = t1 * t4;
  t5 = t5.x;
  if (typeof t5 !== "number")
    return $.Matrix22_mulMatrixAndVectorToOut$bailout(6, 0, 0, out, 0, 0, t3, t4, t5, 0, tempy);
  t1 = $.getInterceptor$x(out);
  t1.set$x(out, t4 + t5 * t3);
  t1.set$y(out, tempy);
},

Matrix22_mulMatrixAndVectorToOut$bailout: function(state0, matrix, vector, out, t2, t1, t3, t4, t5, t6, tempy) {
  switch (state0) {
    case 0:
      t1 = matrix.get$col1();
      t2 = t1.y;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$x(vector);
      t4 = t3.get$x(vector);
    case 2:
      state0 = 0;
      t2 = $.$mul$n(t2, t4);
      t5 = matrix.get$col2();
      t6 = t5.y;
    case 3:
      state0 = 0;
      t3 = t3.get$y(vector);
    case 4:
      state0 = 0;
      tempy = $.$add$ns(t2, $.$mul$n(t6, t3));
      t1 = t1.x;
    case 5:
      state0 = 0;
      t4 = $.$mul$n(t1, t4);
      t5 = t5.x;
    case 6:
      state0 = 0;
      t1 = $.getInterceptor$x(out);
      t1.set$x(out, $.$add$ns(t4, $.$mul$n(t5, t3)));
      t1.set$y(out, tempy);
  }
},

Transform_mulToOut: function(transform, vector, out) {
  var t1, t2, t3, t4, t5, t6, t7, tempY;
  t1 = transform.position;
  t2 = t1.y;
  if (typeof t2 !== "number")
    return $.Transform_mulToOut$bailout(1, transform, vector, out, t1, t2);
  t3 = transform.rotation;
  t4 = t3.col1;
  t5 = t4.y;
  if (typeof t5 !== "number")
    return $.Transform_mulToOut$bailout(2, 0, vector, out, t1, t2, t3, t4, t5);
  t6 = $.getInterceptor$x(vector);
  t7 = t6.get$x(vector);
  if (typeof t7 !== "number")
    return $.Transform_mulToOut$bailout(3, 0, vector, out, t1, t2, t3, t4, t5, t6, t7);
  t5 = t2 + t5 * t7;
  t3 = t3.col2;
  t2 = t3.y;
  if (typeof t2 !== "number")
    return $.Transform_mulToOut$bailout(4, 0, vector, out, t1, t2, t3, t4, t5, t6, t7);
  t6 = t6.get$y(vector);
  if (typeof t6 !== "number")
    return $.Transform_mulToOut$bailout(5, 0, 0, out, t1, t2, t3, t4, t5, t6, t7);
  tempY = t5 + t2 * t6;
  t1 = t1.x;
  if (typeof t1 !== "number")
    return $.Transform_mulToOut$bailout(6, 0, 0, out, t1, 0, t3, t4, 0, t6, t7, tempY);
  t4 = t4.x;
  if (typeof t4 !== "number")
    return $.Transform_mulToOut$bailout(7, 0, 0, out, t1, 0, t3, t4, 0, t6, t7, tempY);
  t7 = t1 + t4 * t7;
  t3 = t3.x;
  if (typeof t3 !== "number")
    return $.Transform_mulToOut$bailout(8, 0, 0, out, 0, 0, t3, 0, 0, t6, t7, tempY);
  t4 = $.getInterceptor$x(out);
  t4.set$x(out, t7 + t3 * t6);
  t4.set$y(out, tempY);
},

Transform_mulToOut$bailout: function(state0, transform, vector, out, t1, t2, t3, t4, t5, t6, t7, tempY) {
  switch (state0) {
    case 0:
      t1 = transform.position;
      t2 = t1.y;
    case 1:
      state0 = 0;
      t3 = transform.rotation;
      t4 = t3.col1;
      t5 = t4.y;
    case 2:
      state0 = 0;
      t6 = $.getInterceptor$x(vector);
      t7 = t6.get$x(vector);
    case 3:
      state0 = 0;
      t5 = $.$add$ns(t2, $.$mul$n(t5, t7));
      t3 = t3.col2;
      t2 = t3.y;
    case 4:
      state0 = 0;
      t6 = t6.get$y(vector);
    case 5:
      state0 = 0;
      tempY = $.$add$ns(t5, $.$mul$n(t2, t6));
      t1 = t1.x;
    case 6:
      state0 = 0;
      t4 = t4.x;
    case 7:
      state0 = 0;
      t7 = $.$add$ns(t1, $.$mul$n(t4, t7));
      t3 = t3.x;
    case 8:
      state0 = 0;
      t4 = $.getInterceptor$x(out);
      t4.set$x(out, $.$add$ns(t7, $.$mul$n(t3, t6)));
      t4.set$y(out, tempY);
  }
},

Transform_mulTransToOut: function(T, v, out) {
  var t1, t2, t3, v1x, v1y, b, b1, tempy;
  t1 = v.x;
  if (typeof t1 !== "number")
    return $.Transform_mulTransToOut$bailout(1, T, v, out, t1);
  t2 = T.position;
  t3 = t2.x;
  if (typeof t3 !== "number")
    return $.Transform_mulTransToOut$bailout(2, T, v, out, t1, t2, t3);
  v1x = t1 - t3;
  t3 = v.y;
  if (typeof t3 !== "number")
    return $.Transform_mulTransToOut$bailout(3, T, 0, out, 0, t2, t3, v1x);
  t2 = t2.y;
  if (typeof t2 !== "number")
    return $.Transform_mulTransToOut$bailout(4, T, 0, out, 0, t2, t3, v1x);
  v1y = t3 - t2;
  t2 = T.rotation;
  b = t2.col1;
  b1 = t2.col2;
  t2 = b1.x;
  if (typeof t2 !== "number")
    return $.Transform_mulTransToOut$bailout(5, 0, 0, out, 0, t2, 0, v1x, b, v1y, b1);
  t2 = v1x * t2;
  t3 = b1.y;
  if (typeof t3 !== "number")
    return $.Transform_mulTransToOut$bailout(6, 0, 0, out, t3, t2, $.JSNumber_methods, v1x, b, v1y);
  tempy = t2 + v1y * t3;
  t3 = b.x;
  if (typeof t3 !== "number")
    return $.Transform_mulTransToOut$bailout(7, 0, 0, out, t3, 0, $.JSNumber_methods, v1x, b, v1y, 0, tempy, $.JSNumber_methods);
  t3 = v1x * t3;
  t2 = b.y;
  if (typeof t2 !== "number")
    return $.Transform_mulTransToOut$bailout(8, 0, 0, out, t3, 0, t2, 0, 0, v1y, 0, tempy, $.JSNumber_methods);
  out.x = t3 + v1y * t2;
  out.y = tempy;
},

Transform_mulTransToOut$bailout: function(state0, T, v, out, t1, t2, t3, v1x, b, v1y, b1, tempy, t4) {
  switch (state0) {
    case 0:
      t1 = v.x;
    case 1:
      state0 = 0;
      t2 = T.position;
      t3 = t2.x;
    case 2:
      state0 = 0;
      v1x = $.$sub$n(t1, t3);
      t3 = v.y;
    case 3:
      state0 = 0;
      t2 = t2.y;
    case 4:
      state0 = 0;
      v1y = $.$sub$n(t3, t2);
      t2 = T.rotation;
      b = t2.col1;
      b1 = t2.col2;
      t2 = b1.x;
    case 5:
      state0 = 0;
      t3 = $.getInterceptor$n(v1x);
      t2 = t3.$mul(v1x, t2);
      t1 = b1.y;
    case 6:
      state0 = 0;
      t4 = $.getInterceptor$n(v1y);
      tempy = $.$add$ns(t2, t4.$mul(v1y, t1));
      t1 = b.x;
    case 7:
      state0 = 0;
      t1 = t3.$mul(v1x, t1);
      t3 = b.y;
    case 8:
      state0 = 0;
      out.x = $.$add$ns(t1, t4.$mul(v1y, t3));
      out.y = tempy;
  }
},

Vector_minToOut: function(a, b, out) {
  var t1, t2;
  t1 = a.x;
  if (typeof t1 !== "number")
    return $.Vector_minToOut$bailout(1, a, b, out, t1);
  t2 = b.x;
  if (typeof t2 !== "number")
    return $.Vector_minToOut$bailout(2, a, b, out, t1, t2);
  if (t1 < t2)
    ;
  else
    t1 = t2;
  out.x = t1;
  t1 = a.y;
  if (typeof t1 !== "number")
    return $.Vector_minToOut$bailout(3, 0, b, out, t1);
  t2 = b.y;
  if (typeof t2 !== "number")
    return $.Vector_minToOut$bailout(4, 0, 0, out, t1, t2);
  if (t1 < t2)
    ;
  else
    t1 = t2;
  out.y = t1;
},

Vector_minToOut$bailout: function(state0, a, b, out, t1, t2) {
  switch (state0) {
    case 0:
      t1 = a.x;
    case 1:
      state0 = 0;
      t2 = b.x;
    case 2:
      state0 = 0;
      out.x = $.$lt$n(t1, t2) ? t1 : t2;
      t1 = a.y;
    case 3:
      state0 = 0;
      t2 = b.y;
    case 4:
      state0 = 0;
      out.y = $.$lt$n(t1, t2) ? t1 : t2;
  }
},

Vector_maxToOut: function(a, b, out) {
  var t1, t2;
  t1 = a.x;
  if (typeof t1 !== "number")
    return $.Vector_maxToOut$bailout(1, a, b, out, t1);
  t2 = b.x;
  if (typeof t2 !== "number")
    return $.Vector_maxToOut$bailout(2, a, b, out, t1, t2);
  if (t1 > t2)
    ;
  else
    t1 = t2;
  out.x = t1;
  t1 = a.y;
  if (typeof t1 !== "number")
    return $.Vector_maxToOut$bailout(3, 0, b, out, t1);
  t2 = b.y;
  if (typeof t2 !== "number")
    return $.Vector_maxToOut$bailout(4, 0, 0, out, t1, t2);
  if (t1 > t2)
    ;
  else
    t1 = t2;
  out.y = t1;
},

Vector_maxToOut$bailout: function(state0, a, b, out, t1, t2) {
  switch (state0) {
    case 0:
      t1 = a.x;
    case 1:
      state0 = 0;
      t2 = b.x;
    case 2:
      state0 = 0;
      out.x = $.$gt$n(t1, t2) ? t1 : t2;
      t1 = a.y;
    case 3:
      state0 = 0;
      t2 = b.y;
    case 4:
      state0 = 0;
      out.y = $.$gt$n(t1, t2) ? t1 : t2;
  }
},

Vector3_crossToOut: function(a, b, out) {
  var t1, t2, t3, t4, t5, t6, t7, tempy, t8, tempz;
  t1 = a.z;
  t2 = b.x;
  t3 = $.getInterceptor$n(t1);
  t4 = t3.$mul(t1, t2);
  t5 = a.x;
  t6 = b.z;
  t7 = $.getInterceptor$n(t5);
  tempy = $.$sub$n(t4, t7.$mul(t5, t6));
  t4 = b.y;
  t5 = t7.$mul(t5, t4);
  t7 = a.y;
  t8 = $.getInterceptor$n(t7);
  tempz = $.$sub$n(t5, t8.$mul(t7, t2));
  out.x = $.$sub$n(t8.$mul(t7, t6), t3.$mul(t1, t4));
  out.y = tempy;
  out.z = tempz;
},

Body$: function(bd, world) {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.Matrix22$(null, null);
  t2 = bd.linearVelocity;
  t3 = t2.x;
  t2 = t2.y;
  t4 = bd.userData;
  t5 = $.FixtureDef$();
  t6 = $.Matrix22$(null, null);
  t6 = new $.Body(world, 0, null, 0, t4, new $.Vector(t3, t2), 0, null, null, null, null, null, 0, null, new $.Vector(0, 0), 0, 0, 0, bd.linearDamping, bd.angularDamping, bd.type, null, new $.Transform(new $.Vector(0, 0), t1), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), t5, new $.MassData(0, new $.Vector(0, 0), 0), new $.Transform(new $.Vector(0, 0), t6), new $.Vector(0, 0), new $.Vector(0, 0));
  t6.Body$2(bd, world);
  return t6;
},

BodyDef$: function() {
  return new $.BodyDef(0, 0, null, new $.Vector(0, 0), new $.Vector(0, 0), 0, false, null, false, true, 0, 0, true, true);
},

Fixture$: function() {
  var t1, t2, t3;
  t1 = new $.AxisAlignedBox(null, null);
  if (t1.lowerBound == null)
    t1.lowerBound = new $.Vector(0, 0);
  if (t1.upperBound == null)
    t1.upperBound = new $.Vector(0, 0);
  t2 = new $.AxisAlignedBox(null, null);
  if (t2.lowerBound == null)
    t2.lowerBound = new $.Vector(0, 0);
  if (t2.upperBound == null)
    t2.upperBound = new $.Vector(0, 0);
  t3 = new $.AxisAlignedBox(null, null);
  if (t3.lowerBound == null)
    t3.lowerBound = new $.Vector(0, 0);
  if (t3.upperBound == null)
    t3.upperBound = new $.Vector(0, 0);
  return new $.Fixture(t1, null, null, null, null, null, null, null, new $.Filter(0, 0, 0), null, null, t2, t3);
},

FixtureDef$: function() {
  var t1 = new $.FixtureDef(null, null, 0.2, 0, 0, false, new $.Filter(0, 0, 0));
  t1.FixtureDef$0();
  return t1;
},

World$: function(gravity, doSleep, argPool) {
  var t1 = new $.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, $.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0), new $.TimeStep(0, 0, 0, 0, 0, true), new $.Vector(0, 0), new $.Vector(0, 0), new $.WorldQueryWrapper(null, null), new $.TimeOfImpactInput($.DistanceProxy$(), $.DistanceProxy$(), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), 0), new $.TimeOfImpactOutput(0, 0), new $.Sweep(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0), $.TimeOfImpactSolver$(), $.List_List(32), new $.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, $.ContactSolver$(), new $.Vector(0, 0), new $.ContactImpulse($.List_List(2), $.List_List(2))), $.List_List(10));
  t1.World$3(gravity, doSleep, argPool);
  return t1;
},

ContactConstraint$: function() {
  var t1 = new $.ContactConstraint($.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), $.Matrix22$(null, null), $.Matrix22$(null, null), null, null, null, null, null, null, 0, null);
  t1.ContactConstraint$0();
  return t1;
},

ContactConstraintPoint$: function() {
  return new $.ContactConstraintPoint(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0, 0, 0, 0);
},

ContactSolver$: function() {
  var t1 = new $.ContactSolver($.List_List(256), null, $.WorldManifold$(), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), $.PositionSolverManifold$(), new $.Vector(0, 0), new $.Vector(0, 0));
  t1.ContactSolver$0();
  return t1;
},

PositionSolverManifold$: function() {
  return new $.PositionSolverManifold(new $.Vector(0, 0), new $.Vector(0, 0), 0, new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
},

TimeOfImpactConstraint$: function() {
  var t1 = new $.TimeOfImpactConstraint($.List_List(2), new $.Vector(0, 0), new $.Vector(0, 0), 0, 0, 0, null, null);
  t1.TimeOfImpactConstraint$0();
  return t1;
},

TimeOfImpactSolver$: function() {
  var t1 = new $.TimeOfImpactSolver($.List_List(4), 0, null, $.TimeOfImpactSolverManifold$(), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
  t1.TimeOfImpactSolver$0();
  return t1;
},

TimeOfImpactSolverManifold$: function() {
  return new $.TimeOfImpactSolverManifold(new $.Vector(0, 0), new $.Vector(0, 0), 0, new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector(0, 0));
},

ConstantVolumeJoint$: function(_world, def) {
  var t1 = new $.ConstantVolumeJoint(null, null, null, null, null, 0, _world, null, null, null, def.type, null, null, new $.JointEdge(null, null, null, null), new $.JointEdge(null, null, null, null), def.bodyA, def.bodyB, false, def.collideConnected, def.userData, new $.Vector(0, 0), new $.Vector(0, 0), null, null, null, null);
  t1.ConstantVolumeJoint$2(_world, def);
  return t1;
},

ConstantVolumeJointDef$: function() {
  var t1 = new $.ConstantVolumeJointDef(0, 0, $.List_List($), null, 0, null, null, null, false);
  t1.ConstantVolumeJointDef$0();
  return t1;
},

DistanceJoint$: function(def) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = def.type;
  t2 = def.bodyA;
  t3 = def.bodyB;
  t4 = def.collideConnected;
  t5 = def.userData;
  t6 = def.get$localAnchorA();
  t7 = t6.x;
  t6 = t6.y;
  t8 = def.get$localAnchorB();
  return new $.DistanceJoint(new $.Vector(t7, t6), new $.Vector(t8.x, t8.y), new $.Vector(0, 0), 0, null, def.get$length(def), def.get$frequencyHz(), def.get$dampingRatio(), 0, 0, t1, null, null, new $.JointEdge(null, null, null, null), new $.JointEdge(null, null, null, null), t2, t3, false, t4, t5, new $.Vector(0, 0), new $.Vector(0, 0), null, null, null, null);
},

DistanceJointDef$: function() {
  var t1 = new $.DistanceJointDef(new $.Vector(0, 0), new $.Vector(0, 0), 1, 0, 0, 0, null, null, null, false);
  t1.DistanceJointDef$0();
  return t1;
},

FrictionJoint$: function(def) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = def.type;
  t2 = def.bodyA;
  t3 = def.bodyB;
  t4 = def.collideConnected;
  t5 = def.userData;
  t6 = def.get$localAnchorA();
  t7 = t6.x;
  t6 = t6.y;
  t8 = def.get$localAnchorB();
  return new $.FrictionJoint(new $.Vector(t7, t6), new $.Vector(t8.x, t8.y), new $.Vector(0, 0), 0, def.get$maxForce(), def.get$maxTorque(), t1, null, null, new $.JointEdge(null, null, null, null), new $.JointEdge(null, null, null, null), t2, t3, false, t4, t5, new $.Vector(0, 0), new $.Vector(0, 0), null, null, null, null);
},

Joint_Joint$create: function(argWorld, def) {
  switch (def.type) {
    case 5:
      throw $.wrapException(new $.UnimplementedError(null));
    case 3:
      return $.DistanceJoint$(def);
    case 2:
      throw $.wrapException(new $.UnimplementedError(null));
    case 1:
      return $.RevoluteJoint$(def);
    case 8:
      throw $.wrapException(new $.UnimplementedError(null));
    case 9:
      return $.FrictionJoint$(def);
    case 7:
      throw $.wrapException(new $.UnimplementedError(null));
    case 6:
      throw $.wrapException(new $.UnimplementedError(null));
    case 4:
      throw $.wrapException(new $.UnimplementedError(null));
    case 10:
      return $.ConstantVolumeJoint$(argWorld, def);
  }
  return;
},

RevoluteJoint$: function(def) {
  var t1 = new $.RevoluteJoint(new $.Vector(0, 0), new $.Vector(0, 0), new $.Vector3(0, 0, 0), 0, new $.Matrix33(new $.Vector3(0, 0, 0), new $.Vector3(0, 0, 0), new $.Vector3(0, 0, 0)), null, null, null, null, null, null, null, null, null, def.type, null, null, new $.JointEdge(null, null, null, null), new $.JointEdge(null, null, null, null), def.bodyA, def.bodyB, false, def.collideConnected, def.userData, new $.Vector(0, 0), new $.Vector(0, 0), null, null, null, null);
  t1.RevoluteJoint$1(def);
  return t1;
}}],
["box2d_browser", {
CanvasDraw: {"": "DebugDraw;ctx,flags,viewportTransform",
  _pathPolygon$3: function(vertices, vertexCount, color) {
    var t1, t2, i, t3, t4;
    $.setStrokeColorRgb$4$x(this.ctx, color.x, color.y, color.z, 0.9);
    $.setFillColorRgb$4$x(this.ctx, color.x, color.y, color.z, 0.8);
    for (t1 = vertices.length, t2 = this.viewportTransform, i = 0; i < vertexCount; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      t3 = vertices[i];
      t2.getWorldToScreen$2(t3, t3);
    }
    $.beginPath$0$x(this.ctx);
    t2 = this.ctx;
    if (0 >= t1)
      throw $.ioore(0);
    t3 = vertices[0];
    t4 = $.getInterceptor$x(t3);
    $.moveTo$2$x(t2, t4.get$x(t3), t4.get$y(t3));
    for (i = 1; t2 = this.ctx, i < vertexCount; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      t3 = vertices[i];
      t4 = $.getInterceptor$x(t3);
      $.lineTo$2$x(t2, t4.get$x(t3), t4.get$y(t3));
    }
    t1 = vertices[0];
    t3 = $.getInterceptor$x(t1);
    $.lineTo$2$x(t2, t3.get$x(t1), t3.get$y(t1));
    $.closePath$0$x(this.ctx);
  },
  drawSegment$3: function(p1, p2, color) {
    var t1;
    $.setStrokeColorRgb$4$x(this.ctx, color.x, color.y, color.z, 0.9);
    $.setFillColorRgb$4$x(this.ctx, color.x, color.y, color.z, 0.8);
    t1 = this.viewportTransform;
    t1.getWorldToScreen$2(p1, p1);
    t1.getWorldToScreen$2(p2, p2);
    $.beginPath$0$x(this.ctx);
    $.moveTo$2$x(this.ctx, p1.x, p1.y);
    $.lineTo$2$x(this.ctx, p2.x, p2.y);
    $.closePath$0$x(this.ctx);
    $.stroke$0$x(this.ctx);
  },
  _pathCircle$3: function(center, radius, color) {
    $.setStrokeColorRgb$4$x(this.ctx, color.x, color.y, color.z, 0.9);
    $.setFillColorRgb$4$x(this.ctx, color.x, color.y, color.z, 0.8);
    this.viewportTransform.getWorldToScreen$2(center, center);
    $.beginPath$0$x(this.ctx);
    $.arc$6$x(this.ctx, center.x, center.y, radius, 0, 6.283185307179586, true);
    $.closePath$0$x(this.ctx);
  },
  CanvasDraw$2: function(viewport, ctx) {
  }
},

CanvasViewportTransform: {"": "IViewportTransform;yFlip,extents,scale,center",
  CanvasViewportTransform$2: function(_extents, _center) {
    this.yFlip = true;
  }
}}],
["dart._collection.dev", {
ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new $.ListIterator(this, this.get$length(this), 0, null);
  },
  skip$1: function(_, count) {
    return new $.SubListIterable(this, count, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else
      result = $.List_List(this.get$length(this));
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  $asIterable: null
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (typeof t2 !== "number")
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if ($.$ge$n(t1, $length))
          return 0;
        t2 = this._endOrLength;
      case 3:
        state0 = 0;
        if (t2 == null || $.$ge$n(t2, $length))
          return $.$sub$n($length, t1);
        return $.$sub$n(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(3, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
    }
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
      case 3:
        if (state0 === 3 || state0 === 0 && !$.$lt$n(index, 0))
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t1 = $.$ge$n(realIndex, t1);
          }
        else
          t1 = true;
        if (t1) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
        }
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if (count < 0)
      throw $.wrapException(new $.ArgumentError(count));
    return new $.SubListIterable(this._iterable, $.$add$ns(this._start, count), this._endOrLength);
  },
  $asIterable: null
},

ListIterator: {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, $length, t2;
    t1 = this._iterable;
    $length = $.get$length$asx(t1);
    if (typeof $length !== "number")
      return this.moveNext$0$bailout(1, t1, $length);
    t2 = this._liblib$_length;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, $length, t2);
    if (t2 !== $length)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t2 = this._index;
    if (t2 >= $length) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = $.elementAt$1$ax(t1, t2);
    this._index = this._index + 1;
    return true;
  },
  moveNext$0$bailout: function(state0, t1, $length, t2) {
    switch (state0) {
      case 0:
        t1 = this._iterable;
        $length = $.get$length$asx(t1);
      case 1:
        state0 = 0;
        t2 = this._liblib$_length;
      case 2:
        state0 = 0;
        if (!$.$eq(t2, $length))
          throw $.wrapException(new $.ConcurrentModificationError(t1));
        t2 = this._index;
        if ($.JSNumber_methods.$ge(t2, $length)) {
          this._liblib$_current = null;
          return false;
        }
        this._liblib$_current = $.elementAt$1$ax(t1, t2);
        this._index = this._index + 1;
        return true;
    }
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return new $.MappedIterator(null, t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterable: function (S, T) { return [T]; }
},

MappedIterator: {"": "Iterator;_liblib$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
},

MappedListIterable: {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._source, index));
  },
  $asIterable: function (S, T) { return [T]; }
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    return new $.WhereIterator($.get$iterator$ax(this._iterable), this._f);
  },
  $asIterable: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    var t1, t2;
    if (n < 0)
      throw $.wrapException(new $.ArgumentError(n));
    t1 = new $.SkipIterable(this._iterable, $.$add$ns(this._skipCount, n));
    t2 = t1._skipCount;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0))
      $.throwExpression(new $.ArgumentError(t2));
    return t1;
  },
  get$iterator: function(_) {
    return new $.SkipIterator($.get$iterator$ax(this._iterable), this._skipCount);
  },
  SkipIterable$2: function(_iterable, _skipCount) {
    var t1 = this._skipCount;
    if (typeof t1 !== "number" || Math.floor(t1) !== t1 || $.$lt$n(t1, 0))
      throw $.wrapException(new $.ArgumentError(t1));
  },
  $asIterable: null
},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount) {
  }
},

ToString__emitPair_closure: {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  }
},

Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.isJsIndexable(src, src[$.dispatchPropertyName])))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart) {
    i = srcStart + count - 1;
    j = dstStart + count - 1;
    if (j !== (j | 0))
      return $.Arrays_copy$bailout(2, src, srcStart, dst, 0, 0, i, j);
    t1 = src.length;
    for (; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t2 = src[i];
      if (j < 0 || j >= dst.length)
        throw $.ioore(j);
      dst[j] = t2;
    }
  } else
    for (t1 = src.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t2 = src[i];
      if (j < 0 || j >= dst.length)
        throw $.ioore(j);
      dst[j] = t2;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count, i, j) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    case 2:
      var t1, t2;
      if (state0 === 2 || state0 === 0 && srcStart < dstStart)
        switch (state0) {
          case 0:
            i = srcStart + count - 1;
            j = dstStart + count - 1;
          case 2:
            state0 = 0;
            t1 = $.getInterceptor$asx(src);
            for (; i >= srcStart; --i, --j) {
              t2 = t1.$index(src, i);
              if (j >>> 0 !== j || j >= dst.length)
                throw $.ioore(j);
              dst[j] = t2;
            }
        }
      else
        for (t1 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
          t2 = t1.$index(src, i);
          if (j < 0 || j >= dst.length)
            throw $.ioore(j);
          dst[j] = t2;
        }
  }
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = $.JSArray_methods.get$iterator(iterable); t1.moveNext$0();)
    f.call$1(t1.get$current());
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1;
  if (start < 0 || start > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + t1));
  }
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length)) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + start + ".." + t1));
  }
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList, t1;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0))
    return;
  if (skipCount < 0)
    throw $.wrapException(new $.ArgumentError(skipCount));
  if (typeof from === "object" && from !== null && (from.constructor === Array || !!$.getInterceptor(from).$isList)) {
    otherStart = skipCount;
    otherList = from;
  } else {
    t1 = $.skip$1$ax(from, skipCount);
    otherList = t1.toList$1$growable(t1, false);
    otherStart = 0;
  }
  if (typeof $length !== "number")
    throw $.iae($length);
  if ($.JSNumber_methods.$gt(otherStart + $length, $.get$length$asx(otherList)))
    throw $.wrapException(new $.StateError("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
},

Sort_insertionSort_: function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[$.dispatchPropertyName]))
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof right !== "number")
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0);
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
},

Sort_insertionSort_$bailout: function(state0, a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = $.getInterceptor$asx(a); $.JSNumber_methods.$le(i, right); ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && $.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var t1, sixth, index1, index5, index3, index2, index4, el1, el2, el3, el4, el5, t0, t2, less, great, pivots_are_equal, k, ak, comp, great0, less0, t3;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[$.dispatchPropertyName]))
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  t1 = $.getInterceptor$n(right);
  sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
  if (typeof sixth !== "number")
    throw $.iae(sixth);
  index1 = left + sixth;
  index5 = t1.$sub(right, sixth);
  if (typeof right !== "number")
    throw $.iae(right);
  index3 = $.JSNumber_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 >>> 0 !== index1 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 >>> 0 !== index2 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 >>> 0 !== index3 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 >>> 0 !== index4 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 >>> 0 !== index5 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left >>> 0 !== left || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right >>> 0 !== right || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t1 = $.getInterceptor(comp);
      if (t1.$eq(comp, 0))
        continue;
      if (t1.$lt(comp, 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t1 = $.getInterceptor$n(comp);
          if (t1.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = t1.$lt(comp, 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  t1 = less - 2;
  if (t1 - left <= 32)
    $.Sort_insertionSort_(a, left, t1, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t1, compare);
  t1 = great + 2;
  if (right - t1 <= 32)
    $.Sort_insertionSort_(a, t1, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t1, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!$.$eq(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.$eq(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
},

Sort__dualPivotQuicksort$bailout: function(state0, a, left, right, compare) {
  var t1, sixth, index1, index5, index3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, pivots_are_equal, k, ak, comp, t2, great0, less0;
  t1 = $.getInterceptor$n(right);
  sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
  if (typeof sixth !== "number")
    throw $.iae(sixth);
  index1 = left + sixth;
  index5 = t1.$sub(right, sixth);
  if (typeof right !== "number")
    throw $.iae(right);
  index3 = $.JSNumber_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = $.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if ($.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t2 = $.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t2.$lt(comp, 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if ($.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if ($.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if ($.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
  t2 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t2));
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t2));
  t1.$indexSet(a, t2, el4);
  t2 = less - 2;
  if (t2 - left <= 32)
    $.Sort_insertionSort_(a, left, t2, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t2, compare);
  t2 = great + 2;
  if (right - t2 <= 32)
    $.Sort_insertionSort_(a, t2, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && $.JSNumber_methods.$gt(great, index5)) {
    for (; $.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
      ++less;
    for (; $.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if ($.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if ($.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if ($.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
},

ToString__emitValue: function(i, result, visiting) {
  var t1, isList, t2, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
},

ToString__emitObject: function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable)) {
    o;
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  } else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    result.write$1(o);
},

ToString__containsRef: function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
},

ToString__emitPair: function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitPair_closure(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
}}],
["dart.async", {
_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    var milliseconds;
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureValue_closure(value, this.future));
    if (!$._callbacksAreEnqueued) {
      milliseconds = $.Duration_0.get$inMilliseconds();
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  _setFutureError$1: function(error) {
    var milliseconds;
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureError_closure(error, this.future));
    if (!$._callbacksAreEnqueued) {
      milliseconds = $.Duration_0.get$inMilliseconds();
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  }
},

_AsyncCompleter__setFutureValue_closure: {"": "Closure;value_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.value_0);
  }
},

_AsyncCompleter__setFutureError_closure: {"": "Closure;error_0,future_1",
  call$0: function() {
    this.future_1._setError$1(this.error_0);
  }
},

_FutureListenerWrapper: {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
},

_FutureImpl: {"": "Object;_state@,_resultOrListeners<",
  then$2$onError: function(f, onError) {
    var t1;
    if (onError == null) {
      t1 = new $._ThenFuture(f, null, 0, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    t1 = new $._SubscribeFuture(onError, f, null, 0, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1 = new $._CatchErrorFuture(test, f, null, 0, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.get$_asyncCallbacks().push(new $._FutureImpl__scheduleUnhandledError_closure(this));
    if (!$._callbacksAreEnqueued) {
      var milliseconds = $.Duration_0.get$inMilliseconds();
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  _addListener$1: function(listener) {
    var t1, milliseconds;
    t1 = this._state;
    if (t1 !== 0) {
      this._state = (t1 & 4294967291) >>> 0;
      $.get$_asyncCallbacks().push(new $._FutureImpl__addListener_closure(this, listener));
      if (!$._callbacksAreEnqueued) {
        milliseconds = $.Duration_0.get$inMilliseconds();
        $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
        $._callbacksAreEnqueued = true;
      }
    } else {
      listener.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1 = this._state;
    if (t1 === 0)
      this._addListener$1(new $._FutureListenerWrapper(future, null));
    else if (t1 === 1)
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (t1 & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture) {
      result;
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    } else
      this._setValue$1(result);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
},

_FutureImpl__FutureImpl$wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0;
      t1.completeError$2;
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(error);
    }
  }
},

_FutureImpl__FutureImpl$wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2.complete$1;
      if (t2._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t2._isComplete = true;
      t2._setFutureValue$1(t1);
    }
  }
},

_FutureImpl__scheduleUnhandledError_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2, error, trace;
    t1 = this.this_0;
    t2 = t1.get$_state();
    if ((t2 & 4) !== 0) {
      t1.set$_state((t2 & 4294967291) >>> 0);
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error));
      trace = $.getAttachedStackTrace(error);
      if (trace != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
      throw $.wrapException(error);
    }
  }
},

_FutureImpl__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_0;
    t2 = t1.get$_state();
    value = t1.get$_resultOrListeners();
    t1 = this.listener_1;
    if (t2 === 1)
      t1._sendValue$1(value);
    else
      t1._sendError$1(value);
  }
},

_TransformFuture: {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_ThenFuture: {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_CatchErrorFuture: {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error);
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($._asyncError(e, s));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
},

_SubscribeFuture: {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

EventSink: {"": "Object;"},

_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1, values;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  values = $.Primitives_getProperty(o, "expando$values");
  return values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
},

_asyncRunCallback: function() {
  var callbacks, i, callback, remainingCallbacks, newCallbacks, exception, milliseconds;
  for (; $.get$_asyncCallbacks().length !== 0;) {
    callbacks = $.get$_asyncCallbacks();
    $._asyncCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(callbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(callbacks, i);
      $.$indexSet$ax(callbacks, i, null);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        i = $.$add$ns(i, 1);
        remainingCallbacks = $.sublist$1$ax(callbacks, i);
        newCallbacks = $.get$_asyncCallbacks();
        $._asyncCallbacks = [];
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), remainingCallbacks);
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), newCallbacks);
        milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
        $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
        throw exception;
      }

    }
  }
  $._callbacksAreEnqueued = false;
},

_AsyncCompleter$: function() {
  return new $._AsyncCompleter(new $._FutureImpl(0, null), false);
},

_FutureImpl__FutureImpl$wait: function(futures) {
  var t1, t2, t3, future, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    future = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  t2 = t1.remaining_2;
  if ($.$eq(t2, 0)) {
    t1 = new $._FutureImpl(0, null);
    t1._state = 1;
    t1._resultOrListeners = $.List_empty;
    return t1;
  }
  t1.values_1 = $.List_List(t2);
  t1.completer_0 = $._AsyncCompleter$();
  return t1.completer_0.future;
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
}}],
["dart.collection", {
HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new $.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  $asIterable: null
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
},

LinkedHashMapCell: {"": "Object;_key<,_value@,_next@,_previous"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new $.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  $asIterable: null
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications) {
    this._cell = this._map._first;
  }
},

HashMap: {"": "Object;_liblib0$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$keys: function() {
    return new $.HashMapKeyIterable(this);
  },
  get$values: function(_) {
    return new $.MappedIterable(new $.HashMapKeyIterable(this), new $.HashMap_values_closure(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib0$_length = this._liblib0$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitPair(this, result, $.List_List($));
    return result._contents;
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib0$_length);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  skip$1: function(_, n) {
    var t1, t2;
    t1 = new $.SkipIterable(this, n);
    t2 = t1._skipCount;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0))
      $.throwExpression(new $.ArgumentError(t2));
    return t1;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  $isIterable: true,
  $asIterable: null
},

LinkedHashMap: {"": "Object;_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function() {
    return new $.LinkedHashMapKeyIterable(this);
  },
  get$values: function(_) {
    return new $.MappedIterable(new $.LinkedHashMapKeyIterable(this), new $.LinkedHashMap_values_closure(this));
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitPair(this, result, $.List_List($));
    return result._contents;
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new $.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  $isMap: true
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.forEach$1$bailout(1, action, receiver);
    $length = receiver.length;
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw $.ioore(i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver) {
    var $length, t1, i;
    $length = this.get$length(receiver);
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.$index(receiver, i));
      if (!t1.$eq($length, this.get$length(receiver)))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  get$last: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    return this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
  },
  where$1: function(receiver, test) {
    return new $.WhereIterable(receiver, test);
  },
  skip$1: function(receiver, count) {
    return new $.SubListIterable(receiver, count, null);
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, receiver.length);
    } else
      result = $.List_List(receiver.length);
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  },
  toList$1$growable$bailout: function(state0, growable, receiver) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, this.get$length(receiver));
    } else
      result = $.List_List(this.get$length(receiver));
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(receiver)); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  removeLast$0: function(receiver) {
    var result;
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver))) {
      t1 = this.get$length(receiver);
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + $.S(t1)));
    }
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver))) {
      t1 = this.get$length(receiver);
      throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + $.S(start) + ".." + $.S(t1)));
    }
  },
  sublist$2: function(receiver, start, end) {
    var $length, result, i, t1;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    if (end == null)
      end = this.get$length(receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = $.$sub$n(end, start);
    if (typeof $length !== "number")
      return this.sublist$2$bailout(2, start, 0, receiver, $length);
    result = $.List_List($);
    $.JSArray_methods.set$length(result, $length);
    for (i = 0; i < $length; ++i) {
      t1 = this.$index(receiver, start + i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  sublist$2$bailout: function(state0, start, end, receiver, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (end == null)
          end = this.get$length(receiver);
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
      case 2:
        var result, t1, i, t2;
        state0 = 0;
        result = $.List_List($);
        $.JSArray_methods.set$length(result, $length);
        for (t1 = $.getInterceptor$ns(start), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
          t2 = this.$index(receiver, t1.$add(start, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return new $._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
  },
  get$length: function(_) {
    return $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$gt(index, $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1))) {
      t1 = $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    }
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    return t1[t2];
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(this, result, $.List_List($));
    return result._contents;
  },
  addFirst$1: function(element) {
    var t1, t2;
    this._head = (this._head - 1 & this._table.length - 1) >>> 0;
    t1 = this._table;
    t2 = this._head;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    if (t2 === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 >>> 0 !== t2 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, t3 - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    if (!!newTable.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    if (!!newTable.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity) {
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if ($.JSNull_methods.$and(initialCapacity, $.JSNull_methods.$sub(initialCapacity, 1)) !== 0)
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    this._table = $.List_List(initialCapacity);
  },
  $asIterable: null,
  $isIterable: true
},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_liblib0$_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression(new $.ConcurrentModificationError(t1));
    t2 = this._liblib0$_position;
    if (t2 === this._end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib0$_current = t3[t2];
    this._liblib0$_position = (this._liblib0$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
},

HashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
},

LinkedHashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
},

ListQueue$: function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  number = $.JSNull_methods.$shl(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
}}],
["dart.core", {
NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, str, t3;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0)) {
      t2 = t1.sb_0;
      t2._contents = t2._contents + ", ";
    }
    t2 = t1.sb_0;
    str = typeof key === "string" ? key : $.S(key);
    t2._contents = t2._contents + str;
    t2 = t1.sb_0;
    t2._contents = t2._contents + ": ";
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    t2._contents = t2._contents + t3;
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.wrapException(new $.IntegerDivisionByZeroException());
    return $.Duration$(0, 0, $.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, t3, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + $.S($.Duration$(0, 0, -t2, 0, 0, 0));
    t3 = $.JSNumber_methods.$tdiv(t2, 60000000);
    twoDigitMinutes = t1.call$1(t3 % 60);
    t3 = $.JSNumber_methods.$tdiv(t2, 1000000);
    twoDigitSeconds = t1.call$1(t3 % 60);
    sixDigitUs = new $.Duration_toString_sixDigits().call$1(t2 % 1000000);
    return $.S($.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
},

Error: {"": "Object;"},

AssertionError: {"": "Object;"},

TypeError: {"": "Object;"},

NullThrownError: {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Object;message",
  toString$0: function(_) {
    return "Illegal argument(s): " + $.S(this.message);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

FallThroughError: {"": "Object;"},

AbstractClassInstantiationError: {"": "Object;_className",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
},

NoSuchMethodError: {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, sb, t2, t3, t4, actualParameters, i, str, formalParameters;
    t1 = {};
    sb = new $.StringBuffer("");
    sb._contents = "";
    t1.sb_0 = sb;
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; t3 = t1.i_1, t4 = $.getInterceptor$n(t3), t4.$lt(t3, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if (t4.$gt(t3, 0)) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      actualParameters = t1.sb_0._contents;
      sb = new $.StringBuffer("");
      sb._contents = "";
      t1.sb_0 = sb;
      for (i = 0; i < t2.length; ++i) {
        if (i > 0) {
          t3 = t1.sb_0;
          t3._contents = t3._contents + ", ";
        }
        t3 = t1.sb_0;
        if (i >= t2.length)
          throw $.ioore(i);
        str = t2[i];
        str = typeof str === "string" ? str : $.S(str);
        t3._contents = t3._contents + str;
      }
      formalParameters = t1.sb_0._contents;
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
},

UnsupportedError: {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

UnimplementedError: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
},

StateError: {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
},

RuntimeError: {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true
},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + $.S(this.name);
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new $.Object();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
},

Iterator: {"": "Object;"},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.Primitives_objectTypeName(this) + "'";
  }
},

Match: {"": "Object;"},

Stopwatch: {"": "Object;_liblib2$_start,_stop",
  start$0: function(_) {
    var t1 = this._liblib2$_start == null;
    if (!t1 && this._stop == null)
      return;
    if (t1)
      this._liblib2$_start = $.Primitives_numMicroseconds();
    else {
      this._liblib2$_start = $.Primitives_numMicroseconds() - $.$sub$n(this._stop, this._liblib2$_start);
      this._stop = null;
    }
  },
  reset$0: function(_) {
    if (this._liblib2$_start == null)
      return;
    this._liblib2$_start = $.Primitives_numMicroseconds();
    if (this._stop != null)
      this._stop = this._liblib2$_start;
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._liblib2$_start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    if (t2 == null) {
      t1 = $.Primitives_numMicroseconds();
      t2 = this._liblib2$_start;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t2 = t1 - t2;
      t1 = t2;
    } else
      t1 = $.$sub$n(t2, t1);
    return t1;
  },
  get$elapsedMicroseconds: function() {
    return $.JSNumber_methods.$tdiv(this.get$elapsedTicks() * 1000000, 1000000);
  }
},

StringBuffer: {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
},

Comparable_compare: function(a, b) {
  return $.compareTo$1$ns(a, b);
},

Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
},

Error_safeToString: function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

List_List: function($length) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

List_List$from: function(other, growable) {
  var list, t1, $length, fixedList, i;
  list = $.List_List($);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    fixedList[i] = list[i];
  }
  return fixedList;
}}],
["dart.dom.html", {
_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._element;
    result = t1.lastElementChild;
    t2 = result == null;
    if (t2)
      $.throwExpression(new $.StateError("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  $asList: function() { return [$.Element]; },
  $asIterable: function() { return [$.Element]; }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

_ChildNodeListLazy: {"": "ListBase;_this",
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, len, i, t2;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = this._this;
      if (iterable._this !== t1) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout1(1, iterable, len, t1);
        i = 0;
        for (; i < len; ++i)
          t1.appendChild(iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  addAll$1$bailout1: function(state0, iterable, len, t1) {
    switch (state0) {
      case 0:
      case 1:
        var i, t2;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && iterable._this !== t1)
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    i = 0;
                    for (; $.JSNumber_methods.$lt(i, len); ++i)
                      t1.appendChild(iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
          t2.appendChild(t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._this;
    result = t1.lastChild;
    t2 = result == null;
    if (t2)
      $.throwExpression(new $.StateError("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return $.NodeList_methods.get$iterator(this._this.childNodes);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asList: function() { return [$.Node]; },
  $asIterable: function() { return [$.Node]; }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

_DOMWindowCrossFrame: {"": "Object;_window",
  get$parent: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  }
},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.moveNext$0$bailout(2, t1, nextPosition);
      if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._length;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$lt$n(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 2:
              state0 = 0;
              this._current = $.$index$asx(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
},

_ChildNodeListLazy$: function(_this) {
  return new $._ChildNodeListLazy(_this);
},

_convertNativeToDart_Window: function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
},

_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new $._DOMWindowCrossFrame(w);
}}],
["dart.isolate", {
ReceivePort: {"": "Object;"}}],
["dart.math", {
min: function(a, b) {
  if (typeof a === "number") {
    a;
    if (typeof b === "number") {
      b;
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        b;
        if (typeof a === "number") {
          a;
          if (a === 0)
            return (a + b) * a * b;
        }
        if (a === 0 && $.JSDouble_methods.get$isNegative(b) || $.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      return a;
    }
    throw $.wrapException(new $.ArgumentError(b));
  }
  throw $.wrapException(new $.ArgumentError(a));
},

max: function(a, b) {
  if (typeof a === "number") {
    a;
    if (typeof b === "number") {
      b;
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        b;
        if (typeof a === "number") {
          a;
          if (a === 0)
            return a + b;
        }
        if ($.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      if (b === 0 && $.JSNumber_methods.get$isNegative(a))
        return b;
      return a;
    }
    throw $.wrapException(new $.ArgumentError(b));
  }
  throw $.wrapException(new $.ArgumentError(a));
}}],
["demo", {
Demo: {"": "Object;frameCount@,fpsCounter<,elapsedUs<,worldStepTime<",
  step$1: function(_, timestamp) {
    var t1 = this._stopwatch;
    t1.reset$0(t1);
    t1 = this.world;
    t1.step$3(t1, 0.016666666666666666, 10, 10);
    this.elapsedUs = this._stopwatch.get$elapsedMicroseconds();
    $.clearRect$4$x(this.ctx, 0, 0, 900, 600);
    this.world.drawDebugData$0();
    this.frameCount = $.$add$ns(this.frameCount, 1);
    t1 = window;
    $.Window_methods._ensureRequestAnimationFrame$0(t1);
    $.Window_methods._requestAnimationFrame$1(t1, new $.Demo_step_closure(this));
  },
  initializeAnimation$0: function() {
    var t1, extents, t2, milliseconds;
    this.canvas = document.createElement("canvas");
    $.set$width$x(this.canvas, 900);
    $.set$height$x(this.canvas, 600);
    t1 = document.body;
    t1.get$nodes;
    new $._ChildNodeListLazy(t1)._this.appendChild(this.canvas);
    this.ctx = $.getContext$1$x(this.canvas, "2d");
    extents = new $.Vector(450, 300);
    t1 = extents.x;
    t2 = extents.y;
    t2 = new $.CanvasViewportTransform(null, new $.Vector(t1, t2), 20, new $.Vector(t1, t2));
    t2.yFlip = true;
    this.viewport = t2;
    this.viewport.scale = this.viewportScale;
    t2 = this.viewport;
    this.debugDraw = new $.CanvasDraw(this.ctx, 1, t2);
    this.world._debugDraw = this.debugDraw;
    this.frameCount = 0;
    this.fpsCounter = document.querySelector("#fps-counter");
    this.worldStepTime = document.querySelector("#world-step-time");
    milliseconds = $.JSNumber_methods.$tdiv($.Duration$(0, 0, 0, 0, 0, 1)._duration, 1000);
    if (milliseconds < 0)
      milliseconds = 0;
    $.TimerImpl$periodic(milliseconds, new $.Demo_initializeAnimation_closure(this));
    milliseconds = $.JSNumber_methods.$tdiv($.Duration$(0, 0, 0, 200, 0, 0)._duration, 1000);
    if (milliseconds < 0)
      milliseconds = 0;
    $.TimerImpl$periodic(milliseconds, new $.Demo_initializeAnimation_closure0(this));
  },
  runAnimation$0: function() {
    var t1 = window;
    $.Window_methods._ensureRequestAnimationFrame$0(t1);
    $.Window_methods._requestAnimationFrame$1(t1, new $.Demo_runAnimation_closure(this));
  },
  Demo$3: function($name, gravity, viewportScale) {
    var t1 = new $.Stopwatch(null, null);
    t1.start$0(t1);
    this._stopwatch = t1;
    $.set$innerHtml$x(document.querySelector("#title"), $name);
    if (null == gravity)
      gravity = new $.Vector(0, -10);
    t1 = new $.DefaultWorldPool(null, null, null);
    t1.distance = $.Distance$_construct();
    t1.collision = $.Collision$_construct(t1);
    t1.timeOfImpact = $.TimeOfImpact$_construct(t1);
    this.world = $.World$(gravity, true, t1);
  }
},

Demo_step_closure: {"": "Closure;this_0",
  call$1: function(time) {
    $.step$1$x(this.this_0, time);
  }
},

Demo_initializeAnimation_closure: {"": "Closure;this_0",
  call$1: function(t) {
    var t1 = this.this_0;
    $.set$innerHtml$x(t1.get$fpsCounter(), $.toString$0(t1.get$frameCount()));
    t1.set$frameCount(0);
  }
},

Demo_initializeAnimation_closure0: {"": "Closure;this_1",
  call$1: function(t) {
    var t1 = this.this_1;
    $.set$innerHtml$x(t1.get$worldStepTime(), $.S($.$div$n(t1.get$elapsedUs(), 1000)) + " ms");
  }
},

Demo_runAnimation_closure: {"": "Closure;this_0",
  call$1: function(time) {
    $.step$1$x(this.this_0, time);
  }
}}],
["html_common", {
convertDartToNative_Dictionary_closure: {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
},

FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true);
  },
  forEach$1: function(_, f) {
    $.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$_filtered().length;
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  removeRange$2: function(_, start, end) {
    $.IterableMixinWorkaround_forEach($.sublist$2$ax(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1 = this.get$_filtered();
    return new $.ListIterator(t1, t1.length, 0, null);
  },
  $asList: null,
  $asIterable: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  }
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  }
},

convertDartToNative_Dictionary: function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  dict.forEach$1(dict, new $.convertDartToNative_Dictionary_closure(object));
  return object;
}}],
["metadata", {
SupportedBrowser: {"": "Object;browserName,minimumVersion"},

DomName: {"": "Object;name"}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.main$closure = new $.Closure$main($.main, "main$closure");
$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$.Comparable_compare$closure = new $.Closure$compare($.Comparable_compare, "Comparable_compare$closure");
$.C_NullThrownError = new $.NullThrownError();
$.JSInt_methods = $.JSInt.prototype;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.NodeList_methods = $.NodeList.prototype;
$.JSDouble_methods = $.JSDouble.prototype;
$.Window_methods = $.Window.prototype;
$.C_CloseToken = new $.CloseToken();
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.JSArray_methods = $.JSArray.prototype;
$.C_JSUnknown = new $.JSUnknown();
$.Duration_0 = new $.Duration(0);
$.JSNull_methods = $.JSNull.prototype;
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.arc$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return $.getInterceptor$x(receiver).arc$6(receiver, a0, a1, a2, a3, a4, a5);
};
$.beginPath$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).beginPath$0(receiver);
};
$.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
$.closePath$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).closePath$0(receiver);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.fill$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).fill$0(receiver);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parent(receiver);
};
$.get$points$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$points(receiver);
};
$.get$position$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$position(receiver);
};
$.get$type$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$type(receiver);
};
$.get$x$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$x(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.getContext$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
$.lineTo$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).lineTo$2(receiver, a0, a1);
};
$.moveTo$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).moveTo$2(receiver, a0, a1);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.reset$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).reset$0(receiver);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$parent$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$parent(receiver, value);
};
$.set$type$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$type(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.set$x$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$x(receiver, value);
};
$.set$y$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$y(receiver, value);
};
$.setFillColorRgb$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).setFillColorRgb$4(receiver, a0, a1, a2, a3);
};
$.setStrokeColorRgb$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).setStrokeColorRgb$4(receiver, a0, a1, a2, a3);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.step$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).step$1(receiver, a0);
};
$.stroke$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).stroke$0(receiver);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.sublist$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new $.Expando(null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return new $.Expando("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return [];
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPointList", $.PointList);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRect", $.Rect);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("WebGLRenderingContext", $.RenderingContext);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main$closure); });
      } else {
        $.startRootIsolate($.main$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        isolateProperties[cls] = defineClass(name, cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=BlobTest.dart.js.map
