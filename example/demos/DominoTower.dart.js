// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.DominoTower = {"": "Demo;dominoDensity,bodies,canvas,ctx,viewport,debugDraw,world,frameCount,fpsCounter,elapsedUs,worldStepTime,viewportScale,_stopwatch",
  makeDomino$3: function(x, y, horizontal) {
    var sd, fd, bd, myBody;
    sd = $.PolygonShape$();
    sd.setAsBox$2(0.1, 0.5);
    fd = $.FixtureDef$();
    fd.shape = sd;
    fd.density = this.dominoDensity;
    bd = $.BodyDef$();
    bd.type = 2;
    fd.friction = 0.1;
    fd.restitution = 0.65;
    bd.position = $.vec2$(x, y);
    bd.angle = horizontal ? 1.5707963267948966 : 0;
    myBody = this.world.createBody$1(bd);
    myBody.createFixture$1(fd);
    this.bodies.push(myBody);
  },
  initialize$0: function(_) {
    var sd, bd, body, fd, b, i, currX, j, currY, t1, t2, t3, t4, t5, t6;
    sd = $.PolygonShape$();
    sd.setAsBox$2(50, 10);
    bd = $.BodyDef$();
    bd.position = $.vec2$(0, -10);
    body = this.world.createBody$1(bd);
    body.createFixtureFromShape$1(sd);
    this.bodies.push(body);
    this.dominoDensity = 10;
    sd = $.PolygonShape$();
    sd.setAsBox$2(0.7, 0.7);
    fd = $.FixtureDef$();
    fd.density = 35;
    bd = $.BodyDef$();
    bd.type = 2;
    fd.shape = sd;
    fd.friction = 0;
    fd.restitution = 0.85;
    bd.bullet = true;
    bd.position = $.vec2$(30, 50);
    b = this.world.createBody$1(bd);
    this.bodies.push(b);
    b.createFixture$1(fd);
    b.set$linearVelocity($.vec2$(-25, -25));
    b.set$angularVelocity(6.7);
    fd.density = 25;
    bd.position = $.vec2$(-30, 25);
    b = this.world.createBody$1(bd);
    this.bodies.push(b);
    b.createFixture$1(fd);
    b.set$linearVelocity($.vec2$(35, -10));
    b.set$angularVelocity(-8.3);
    for (i = 0; i < 25; ++i) {
      currX = i * 1.5 * 1 - 18.75;
      this.makeDomino$3(currX, 0.5, false);
      this.makeDomino$3(currX, 1.1, true);
    }
    for (currX = 18.75, j = 1; j < 25; ++j) {
      if (j > 3)
        this.dominoDensity = $.$mul$n(this.dominoDensity, 0.8);
      currY = 0.5 + 1.386 * j;
      for (t1 = currY + 0.6, t2 = currY - 0.6, t3 = currY - 0.2, t4 = 25 - j, t5 = t4 - 1, t6 = 1.5 * t4 / 2, i = 0; i < t4; ++i) {
        currX = i * 1.5 * 1 - t6;
        this.dominoDensity = $.$mul$n(this.dominoDensity, 2.5);
        if (i === 0)
          this.makeDomino$3(currX - 1.25 + 0.1, t3, false);
        if (i === t5)
          this.makeDomino$3(currX + 1.25 - 0.1, t3, false);
        this.dominoDensity = $.$div$n(this.dominoDensity, 2.5);
        this.makeDomino$3(currX, currY, false);
        this.makeDomino$3(currX, t1, true);
        this.makeDomino$3(currX, t2, true);
      }
    }
  }
};

$$.Demo = {"": "Object;frameCount@,fpsCounter<,elapsedUs<,worldStepTime<",
  step$1: function(_, timestamp) {
    var t1 = this._stopwatch;
    t1.reset$0(t1);
    t1 = this.world;
    t1.step$3(t1, 0.016666666666666666, 10, 10);
    this.elapsedUs = this._stopwatch.get$elapsedMicroseconds();
    $.clearRect$4$x(this.ctx, 0, 0, 900, 600);
    this.world.drawDebugData$0();
    this.frameCount = $.$add$ns(this.frameCount, 1);
    $.requestAnimationFrame$1$x(window, new $.Demo_step_anon(this));
  },
  initializeAnimation$0: function() {
    var t1, extents;
    this.canvas = $._ElementFactoryProvider_createElement_tag("canvas");
    $.set$width$x(this.canvas, 900);
    $.set$height$x(this.canvas, 600);
    t1 = $.get$nodes$x($.get$body$x(document));
    t1.add$1(t1, this.canvas);
    this.ctx = $.getContext$1$x(this.canvas, "2d");
    extents = $.vec2$(450, 300);
    this.viewport = $.CanvasViewportTransform$(extents, extents);
    this.viewport.scale = this.viewportScale;
    this.debugDraw = $.CanvasDraw$(this.viewport, this.ctx);
    t1 = this.debugDraw;
    this.world.set$debugDraw(t1);
    this.frameCount = 0;
    this.fpsCounter = $.query$1$x(document, "#fps-counter");
    this.worldStepTime = $.query$1$x(document, "#world-step-time");
    $.Timer_Timer$periodic($.Duration$(0, 0, 0, 0, 0, 1), new $.Demo_initializeAnimation_anon(this));
    $.Timer_Timer$periodic($.Duration$(0, 0, 0, 200, 0, 0), new $.Demo_initializeAnimation_anon0(this));
  },
  runAnimation$0: function() {
    $.requestAnimationFrame$1$x(window, new $.Demo_runAnimation_anon(this));
  },
  Demo$3: function($name, gravity, viewportScale) {
    var t1 = $.Stopwatch$();
    t1.start$0(t1);
    this._stopwatch = t1;
    $.set$innerHtml$x($.query("#title"), $name);
    if (null == gravity)
      gravity = $.vec2$(0, -10);
    this.world = $.World$(gravity, true, $.DefaultWorldPool$());
  }
};

$$.Demo_step_anon = {"": "Closure;this_0",
  call$1: function(time) {
    $.step$1$x(this.this_0, time);
  },
  $isFunction: true
};

$$.Demo_initializeAnimation_anon = {"": "Closure;this_0",
  call$1: function(t) {
    var t1, t2;
    t1 = this.this_0;
    t2 = $.toString$0(t1.get$frameCount());
    $.set$innerHtml$x(t1.get$fpsCounter(), t2);
    t1.set$frameCount(0);
  },
  $isFunction: true
};

$$.Demo_initializeAnimation_anon0 = {"": "Closure;this_1",
  call$1: function(t) {
    var t1, t2;
    t1 = this.this_1;
    t2 = $.S($.$div$n(t1.get$elapsedUs(), 1000)) + " ms";
    $.set$innerHtml$x(t1.get$worldStepTime(), t2);
  },
  $isFunction: true
};

$$.Demo_runAnimation_anon = {"": "Closure;this_0",
  call$1: function(time) {
    $.step$1$x(this.this_0, time);
  },
  $isFunction: true
};

$$.ListIterator = {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib$_length;
    t2 = this._iterable;
    if (t1 !== t2.length)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = $.JSArray_methods.elementAt$1(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.WhereIterator$(t1.get$iterator(t1), this._f, $.getRuntimeTypeArgument(this, this["$asWhereIterable"], 0));
  },
  $asIterable: function() {
    return null;
  }
};

$$.WhereIterator = {"": "Iterator;_liblib$_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._liblib$_iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._liblib$_iterator.get$current();
  },
  $asIterator: null
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0) === true)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key);
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1($.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  },
  $isFunction: true
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $isFunction: true
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return $.CONSTANT8;
  },
  $isbool: true
};

$$.JSNull = {"": "Object;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return $.CONSTANT7;
  }
};

$$._Manager = {"": "Object;nextIsolateId@,currentManagerId,nextManagerId,currentContext<,rootContext,topEventLoop<,fromCommandLine,isWorker<,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = $.get$globalWorker() != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) === true && $.$eq(this.topEventLoop.activeTimerCount, 0) === true;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.$int, $._IsolateContext);
    this.managers = $.Map_Map($.$int, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1) === true) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.$add$ns(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map($.$int, $.ReceivePort);
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    var t1 = this.events;
    t1.addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    var t1, t2;
    if ($globalState.rootContext != null)
      if ($globalState.isolates.containsKey$1($globalState.rootContext.id))
        if ($globalState.fromCommandLine === true) {
          t1 = $globalState.rootContext.ports;
          t2 = t1.get$isEmpty(t1) === true;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  },
  $isFunction: true
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function(_) {
    return 0;
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  $isFunction: true
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_BufferingSendPort))
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$(null);
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isFunction: true,
  $isSendPort: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  },
  $isFunction: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isFunction: true
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) === true && $.$eq(this._isolateId, other._isolateId) === true && $.$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      t1 = $globalState.mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  },
  $isFunction: true
};

$$.ReceivePortImpl = {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function(_) {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (!!port.$is_BufferingSendPort && port.get$_port() == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._isolateId, port._receivePort.get$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port.get$_port();
    if (t1 != null)
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port.get$_port();
    if (t1 != null)
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(x);
    managerId = t1.$index(x, 1);
    isolateId = t1.$index(x, 2);
    receivePortId = t1.$index(x, 3);
    if ($.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i;
    for ($length = $.get$length$asx(this.tagged), i = 0; i < $length; ++i)
      $.$index$asx(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!x.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior())
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$indexSet$ax(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  },
  $isFunction: true
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$index$asx(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id, t1;
    id = $.$index$asx(x, 1);
    t1 = this._deserialized;
    return t1.$index(t1, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t2, len, i;
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    t2 = $.getInterceptor$asx(dartList);
    len = t2.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, keys, t1, x, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, t1, x, result, values) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, t3, len, i;
        state0 = 0;
        t3 = $.getInterceptor$asx(keys);
        len = t3.get$length(keys);
        for (t1 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$periodic$2: function(milliseconds, callback) {
    var t1;
    if ($.hasTimer()) {
      t1 = $._globalState().get$topEventLoop();
      t1.activeTimerCount = $.$add$ns(t1.activeTimerCount, 1);
      this._handle = $.get$globalThis().setInterval($.convertDartClosureToJS(new $.anon(this, callback), 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Periodic timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if ($.$eq(milliseconds, 0) === true)
      t1 = !$.hasTimer() || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().get$topEventLoop();
      t1.activeTimerCount = $.$add$ns(t1.activeTimerCount, 1);
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = $.$sub$n(t1.activeTimerCount, 1);
  },
  $isFunction: true
};

$$.anon = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  },
  $isFunction: true
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  addAll$1: function(receiver, collection) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      $.checkGrowable(receiver, "add");
      receiver.push(t2);
    }
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  elementAt$1: function(receiver, index) {
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    $.checkNull(start);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.$$throw($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (!(typeof end === "number" && Math.floor(end) === end))
        throw $.$$throw($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.$$throw($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    $.checkMutable(receiver, "set range");
    $.IterableMixinWorkaround_setRangeList(receiver, start, $length, from, startFrom);
  },
  setRange$3: function($receiver, start, length, from) {
    return this.setRange$4($receiver, start, length, from, 0);
  },
  sort$1: function(receiver, compare) {
    $.checkMutable(receiver, "sort");
    $.IterableMixinWorkaround_sortList(receiver, compare);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, receiver["$asJSArray"], 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver["$asJSArray"], 0));
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$runtimeType: function(receiver) {
    return $.TypeImpl$($.getRuntimeTypeString(receiver));
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$.JSMutableArray = {"": "JSArray;", $asJSArray: function () { return [null]; },
  $asList: function() {
    return function () { return [null]; };
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function(_) {
    var t1 = this.stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
};

$$.Null = {"": "Object;"};

$$.CastErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.TypeImpl = {"": "Object;typeName",
  toString$0: function(_) {
    return this.typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this.typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isTypeImpl))
      return false;
    return $.$eq(this.typeName, other.typeName);
  },
  $isTypeImpl: true
};

$$.JSNumber = {"": "Object;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (!(typeof b === "number"))
      throw $.$$throw($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if ($.$eq(this.get$isNegative(receiver), bIsNegative) === true)
          return 0;
        if (this.get$isNegative(receiver) === true)
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.$$throw($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.$$throw($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    return this.toInt$0(receiver);
  },
  floor$0: function(receiver) {
    return this.toInt$0(Math.floor(receiver));
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "JSNumber;",
  get$runtimeType: function(receiver) {
    return $.CONSTANT5;
  },
  $is$int: true,
  $isnum: true
};

$$.JSDouble = {"": "JSNumber;",
  get$runtimeType: function(receiver) {
    return $.CONSTANT6;
  },
  $is$double: true,
  $isnum: true
};

$$.JSString = {"": "Object;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  $add: function(receiver, other) {
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  startsWith$1: function(receiver, other) {
    var otherLength;
    $.checkString(other);
    otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return $.CONSTANT9;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$.MetaInfo = {"": "Object;_tag<,_tags,_set<"};

$$.StringMatch = {"": "Object;start,str,pattern",
  $index: function(_, g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$eq(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace<,cause<",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.write$1("'");
    message = null;
    try {
      message = $.toString$0(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.write$1(message);
    buffer.write$1("'\n");
    t1 = this.stackTrace;
    if (t1 != null) {
      buffer.write$1("Stack trace:\n");
      buffer.writeln$1($.toString$0(t1));
    }
  },
  toString$0: function(_) {
    var buffer, cause;
    buffer = $.StringBuffer$("");
    buffer.write$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; cause != null;) {
      buffer.write$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0(buffer);
  },
  $isAsyncError: true
};

$$._CompleterImpl = {"": "Object;future,_isComplete",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._liblib0$_setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f, null, null);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError, null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this, null);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this, null);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test, null);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue, null, null);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test, null);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _liblib0$_setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_liblib0$_setValue: function() {
    return new $.BoundClosure$1(this, "_liblib0$_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._liblib0$_setValue$1(this._resultOrListeners);
    else {
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_liblib0$_setValue(), this.get$_setError());
        return;
      }
    else
      this._liblib0$_setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this, null);
  },
  _FutureImpl$immediate$1: function(value, T) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$2($.get$error$x(error), error.get$stackTrace());
    }
  },
  $isFunction: true
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    $.$indexSet$ax(t2, this.pos_1, value);
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0) === true) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  },
  $isFunction: true
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  $isFunction: true
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, t2;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1.set$_state((t1.get$_state() & 4294967291) >>> 0);
      error = t1.get$_resultOrListeners();
      t1 = $.getInterceptor$x(error);
      $.Primitives_printString("Uncaught Error: " + $.S(t1.get$error(error)));
      t2 = error.get$stackTrace();
      if (t2 != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(t2) + "\n");
      throw $.$$throw(t1.get$error(error));
    }
  },
  $isFunction: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1($.get$error$x(error));
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true
};

$$.Timer_run_anon = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.addAll$1$ax($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.addAll$1$ax($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  },
  $isFunction: true
};

$$._HashMapTable = {"": "_HashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 2;
  },
  _value$1: function(offset) {
    return $.$index$asx(this._table, $.$add$ns(offset, 1));
  },
  _setValue$2: function(offset, value) {
    $.$indexSet$ax(this._table, $.$add$ns(offset, 1), value);
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof fromTable !== "object" || fromTable === null || (fromTable.constructor !== Array || !!fromTable.immutable$list) && !fromTable.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, fromTable, fromOffset, toOffset, t1);
    t3 = toOffset + 1;
    t4 = fromOffset + 1;
    if (t4 < 0 || t4 >= fromTable.length)
      throw $.ioore(t4);
    t4 = fromTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, fromTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$indexSet$ax(t1, $.$add$ns(toOffset, 1), $.$index$asx(fromTable, fromOffset + 1));
    }
  },
  $as_HashTable: function (K, V) { return [K]; }
};

$$.HashMap = {"": "Object;_hashTable<",
  containsKey$1: function(key) {
    var t1 = this._hashTable._get$1(key);
    if (typeof t1 !== "number")
      return this.containsKey$1$bailout(1, t1);
    return t1 >= 0;
  },
  containsKey$1$bailout: function(state0, t1) {
    return $.$ge$n(t1, 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if (typeof offset !== "number")
      return this.$$index$bailout(1, t1, offset);
    if (offset >= 0)
      return t1._value$1(offset);
    return;
  },
  $$index$bailout: function(state0, t1, offset) {
    if ($.$ge$n(offset, 0))
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  remove$1: function(_, key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._remove$1(key);
    if ($.$lt$n(offset, 0))
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, table, entrySize, t2, offset, entry;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.forEach$1$bailout(1, action, table, t1, modificationCount);
    entrySize = t1.get$_entrySize();
    for (t2 = table.length, offset = 0; offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  forEach$1$bailout: function(state0, action, table, t1, modificationCount) {
    var entrySize, t2, offset, entry;
    entrySize = t1.get$_entrySize();
    for (t2 = $.getInterceptor$asx(table), offset = 0; offset < t2.get$length(table); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  get$keys: function() {
    return $._HashTableKeyIterable$(this._hashTable, $.getRuntimeTypeArgument(this, this["$asHashMap"], 0));
  },
  get$values: function(_) {
    return $._HashTableValueIterable$(this._hashTable, 1, $.getRuntimeTypeArgument(this, this["$asHashMap"], 1));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$eq(this._hashTable.get$_elementCount(), 0);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  HashMap$0: function(K, V) {
    this._hashTable._container = this;
  },
  $isMap: true
};

$$.HashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  },
  $isFunction: true
};

$$._DeadEntry = {"": "Object;"};

$$._NullKey = {"": "Object;",
  get$hashCode: function(_) {
    return $.JSNull_methods.get$hashCode(null);
  }
};

$$._HashTable = {"": "Object;_table<,_modificationCount<",
  _key$1: function(offset) {
    var t1, key;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._key$1$bailout(1, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    key = t1[offset];
    if (key !== $.CONSTANT1)
      return key;
    return;
  },
  _key$1$bailout: function(state0, offset, t1) {
    var key = $.$index$asx(t1, offset);
    if (key !== $.CONSTANT1)
      return key;
    return;
  },
  get$_elementCount: function() {
    return $.$sub$n(this._entryCount, this._deletedCount);
  },
  get$_entrySize: function() {
    return 1;
  },
  _checkModification$1: function(expectedModificationCount) {
    if (this._modificationCount !== expectedModificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this._container));
  },
  _recordModification$0: function() {
    this._modificationCount = this._modificationCount + 1 & 1073741823;
  },
  _createTable$1: function(capacity) {
    return $.List_List($.$mul$n(capacity, this.get$_entrySize()), null);
  },
  _nextProbe$3: function(previousIndex, probeCount, capacity) {
    if (typeof capacity !== "number")
      return this._nextProbe$3$bailout(1, previousIndex, probeCount, capacity);
    return (previousIndex + probeCount & capacity - 1) >>> 0;
  },
  _nextProbe$3$bailout: function(state0, previousIndex, probeCount, capacity) {
    var t1 = $.$sub$n(capacity, 1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return (previousIndex + probeCount & t1) >>> 0;
  },
  _isFree$1: function(marker) {
    return marker == null || marker === $.CONSTANT0;
  },
  _probeForAdd$2: function(hashCode, object) {
    var entrySize, index, t1, firstTombstone, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, firstTombstone = -1, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry === $.CONSTANT0) {
        if (firstTombstone < 0)
          firstTombstone = offset;
      } else if (entry == null) {
        if (firstTombstone < 0)
          return offset;
        return firstTombstone;
      } else if (($.CONSTANT1 === entry ? t1 : $.$eq(entry, object)) === true)
        return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _probeForLookup$2: function(hashCode, object) {
    var entrySize, index, t1, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry == null)
        return -1;
      else if ($.CONSTANT0 !== entry)
        if (($.CONSTANT1 === entry ? t1 : $.$eq(entry, object)) === true)
          return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _checkCapacity$0: function() {
    var freeCount, t1;
    freeCount = $.$sub$n(this._capacity, this._entryCount);
    t1 = $.getInterceptor$n(freeCount);
    if ($.$lt$n(t1.$mul(freeCount, 4), this._capacity) === true || t1.$lt(freeCount, this._deletedCount) === true)
      this._grow$1($.$sub$n(this._entryCount, this._deletedCount));
  },
  _grow$1: function(contentCount) {
    var capacity, minCapacity, oldTable;
    capacity = this._capacity;
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, contentCount, capacity);
    minCapacity = $.$mul$n(contentCount, 2);
    if (typeof minCapacity !== "number")
      return this._grow$1$bailout(2, 0, capacity, minCapacity);
    for (; capacity < minCapacity;)
      capacity *= 2;
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _grow$1$bailout: function(state0, contentCount, capacity, minCapacity) {
    switch (state0) {
      case 0:
        capacity = this._capacity;
      case 1:
        state0 = 0;
        minCapacity = $.$mul$n(contentCount, 2);
      case 2:
        var t1, oldTable;
        state0 = 0;
        for (; t1 = $.getInterceptor$n(capacity), t1.$lt(capacity, minCapacity) === true;)
          capacity = t1.$mul(capacity, 2);
        oldTable = this._table;
        this._table = this._createTable$1(capacity);
        this._capacity = capacity;
        this._entryCount = 0;
        this._deletedCount = 0;
        this._addAllEntries$1(oldTable);
        this._recordModification$0();
    }
  },
  _addAllEntries$1: function(oldTable) {
    var t1, i, object;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout(1, oldTable);
    for (t1 = oldTable.length, i = 0; i < t1; i += this.get$_entrySize()) {
      if (i < 0)
        throw $.ioore(i);
      object = oldTable[i];
      if (!(object == null || object === $.CONSTANT0))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout: function(state0, oldTable) {
    var t1, i, object;
    for (t1 = $.getInterceptor$asx(oldTable), i = 0; i < t1.get$length(oldTable); i += this.get$_entrySize()) {
      object = t1.$index(oldTable, i);
      if (!(object == null || object === $.CONSTANT0))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
  },
  _get$1: function(key) {
    return this._probeForLookup$2($.get$hashCode$(key), key);
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry == null) {
      t1 = this._entryCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout(2, key, t1, offset);
      this._entryCount = t1 + 1;
    } else if (oldEntry === $.CONSTANT0) {
      t1 = this._deletedCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout(3, key, t1, offset);
      this._deletedCount = t1 - 1;
    } else
      return offset;
    if (key == null)
      key = $.CONSTANT1;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(4, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._recordModification$0();
    return offset;
  },
  _put$1$bailout: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
      default:
        if (state0 === 2 || state0 === 0 && oldEntry == null)
          switch (state0) {
            case 0:
              t1 = this._entryCount;
            case 2:
              state0 = 0;
              this._entryCount = $.$add$ns(t1, 1);
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && oldEntry === $.CONSTANT0)
                switch (state0) {
                  case 0:
                    t1 = this._deletedCount;
                  case 3:
                    state0 = 0;
                    this._deletedCount = $.$sub$n(t1, 1);
                }
              else
                return offset;
          }
        if (key == null)
          key = $.CONSTANT1;
        t1 = this._table;
      case 4:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._recordModification$0();
        return offset;
    }
  },
  _remove$1: function(key) {
    var offset = this._probeForLookup$2($.get$hashCode$(key), key);
    if ($.$ge$n(offset, 0))
      this._deleteEntry$1(offset);
    return offset;
  },
  _deleteEntry$1: function(offset) {
    var key = $.CONSTANT0.$eq($.CONSTANT0, null) ? $.CONSTANT1 : $.CONSTANT0;
    $.$indexSet$ax(this._table, offset, key);
    this._deletedCount = $.$add$ns(this._deletedCount, 1);
    this._recordModification$0();
  },
  _HashTable$1: function(initialCapacity, K) {
    this._table = this._createTable$1(initialCapacity);
  }
};

$$._HashTableIterable = {"": "Iterable;_hashTable<",
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$eq(this._hashTable.get$_elementCount(), 0);
  },
  forEach$1: function(_, action) {
    var t1, entrySize, table, modificationCount, t2, offset, entry;
    t1 = this._hashTable;
    entrySize = t1.get$_entrySize();
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.forEach$1$bailout1(1, action, entrySize, t1, table);
    modificationCount = t1._modificationCount;
    for (t2 = table.length, offset = 0; offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, entrySize, t1, table) {
    var modificationCount, t2, offset, entry;
    modificationCount = t1._modificationCount;
    for (t2 = $.getInterceptor$asx(table), offset = 0; offset < t2.get$length(table); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  },
  $asIterable: function() {
    return null;
  }
};

$$._HashTableIterator = {"": "Object;_hashTable<,_modificationCount<",
  moveNext$0: function() {
    var t1, table, entrySize, t2, t3, entry;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    table = t1.get$_table();
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.moveNext$0$bailout(1, t1, table);
    entrySize = t1.get$_entrySize();
    for (; t2 = this._offset, t3 = table.length, t2 < t3;) {
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t3)
        throw $.ioore(t2);
      entry = table[t2];
      this._offset = t2 + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib1$_current = this._valueAt$2(t2, entry);
        return true;
      }
    }
    this._liblib1$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, table) {
    var entrySize, t2, currentOffset, entry;
    entrySize = t1.get$_entrySize();
    for (t2 = $.getInterceptor$asx(table); $.JSNumber_methods.$lt(this._offset, t2.get$length(table));) {
      currentOffset = this._offset;
      entry = t2.$index(table, currentOffset);
      this._offset = currentOffset + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib1$_current = this._valueAt$2(currentOffset, entry);
        return true;
      }
    }
    this._liblib1$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$._HashTableKeyIterable = {"": "_HashTableIterable;_hashTable",
  get$iterator: function(_) {
    return $._HashTableKeyIterator$(this._hashTable, $.getRuntimeTypeArgument(this, this["$as_HashTableKeyIterable"], 0));
  },
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT1)
      return;
    return key;
  },
  $as_HashTableIterable: null,
  $asIterable: function() {
    return null;
  }
};

$$._HashTableKeyIterator = {"": "_HashTableIterator;_hashTable,_modificationCount,_offset,_liblib1$_current",
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT1)
      return;
    return key;
  },
  $as_HashTableIterator: null
};

$$._HashTableValueIterable = {"": "_HashTableIterable;_entryIndex,_hashTable",
  get$iterator: function(_) {
    return $._HashTableValueIterator$(this._hashTable, this._entryIndex, $.getRuntimeTypeArgument(this, this["$as_HashTableValueIterable"], 0));
  },
  _valueAt$2: function(offset, key) {
    var t1, t3;
    t1 = this._hashTable._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._valueAt$2$bailout1(1, offset, t1);
    t3 = offset + this._entryIndex;
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _valueAt$2$bailout1: function(state0, offset, t1) {
    return $.$index$asx(t1, offset + this._entryIndex);
  },
  $as_HashTableIterable: null,
  $asIterable: function() {
    return null;
  }
};

$$._HashTableValueIterator = {"": "_HashTableIterator;_entryIndex,_hashTable,_modificationCount,_offset,_liblib1$_current",
  _valueAt$2: function(offset, key) {
    return $.$index$asx(this._hashTable.get$_table(), $.$add$ns(offset, this._entryIndex));
  },
  $as_HashTableIterator: null
};

$$._LinkedHashMapTable = {"": "_LinkedHashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 4;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 3;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 3));
    }
  },
  _setValue$2: function(offset, value) {
    $.$indexSet$ax(this._table, $.$add$ns(offset, 3), value);
  },
  _copyEntry$3: function(oldTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof fromOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, oldTable, fromOffset, toOffset, t1);
    t3 = toOffset + 3;
    t4 = fromOffset + 3;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= oldTable.length)
      throw $.ioore(t4);
    t4 = oldTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, oldTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$indexSet$ax(t1, $.$add$ns(toOffset, 3), $.$index$asx(oldTable, $.$add$ns(fromOffset, 3)));
    }
  },
  $as_LinkedHashTable: function (K, V) { return [K]; }
};

$$.LinkedHashMap = {"": "Object;_hashTable<",
  containsKey$1: function(key) {
    var t1 = this._hashTable._get$1(key);
    if (typeof t1 !== "number")
      return this.containsKey$1$bailout(1, t1);
    return t1 >= 0;
  },
  containsKey$1$bailout: function(state0, t1) {
    return $.$ge$n(t1, 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if (typeof offset !== "number")
      return this.$$index$bailout(1, t1, offset);
    if (offset >= 0)
      return t1._value$1(offset);
    return;
  },
  $$index$bailout: function(state0, t1, offset) {
    if ($.$ge$n(offset, 0))
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, offset;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    offset = t1._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout(1, action, t1, modificationCount, offset);
    for (; !$.$eq(offset, 0); offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout: function(state0, action, t1, modificationCount, offset) {
    for (; $.$eq(offset, 0) !== true; offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  get$keys: function() {
    return $._LinkedHashTableKeyIterable$(this._hashTable, $.getRuntimeTypeArgument(this, this["$asLinkedHashMap"], 0));
  },
  get$values: function(_) {
    return $._LinkedHashTableValueIterable$(this._hashTable, 3, $.getRuntimeTypeArgument(this, this["$asLinkedHashMap"], 1));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$eq(this._hashTable.get$_elementCount(), 0);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  LinkedHashMap$0: function(K, V) {
    this._hashTable._container = this;
  },
  $isMap: true
};

$$.LinkedHashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  },
  $isFunction: true
};

$$._LinkedHashTableHeadMarker = {"": "Object;"};

$$._LinkedHashTable = {"": "_HashTable;",
  get$_entrySize: function() {
    return 3;
  },
  _createTable$1: function(capacity) {
    var result, t1;
    result = $.List_List($.$mul$n(capacity, this.get$_entrySize()), null);
    t1 = result.length;
    if (0 >= t1)
      throw $.ioore(0);
    result[0] = $.CONSTANT2;
    if (1 >= t1)
      throw $.ioore(1);
    result[1] = 0;
    if (2 >= t1)
      throw $.ioore(2);
    result[2] = 0;
    return result;
  },
  _next$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._next$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._next$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _next$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 1));
    }
  },
  _linkLast$1: function(offset) {
    var last, t1;
    last = $.$index$asx(this._table, 2);
    t1 = $.getInterceptor$ns(offset);
    $.$indexSet$ax(this._table, t1.$add(offset, 1), 0);
    $.$indexSet$ax(this._table, t1.$add(offset, 2), last);
    $.$indexSet$ax(this._table, $.$add$ns(last, 1), offset);
    $.$indexSet$ax(this._table, 2, offset);
  },
  _unlink$1: function(offset) {
    var t1, next, prev;
    t1 = $.getInterceptor$ns(offset);
    next = $.$index$asx(this._table, t1.$add(offset, 1));
    prev = $.$index$asx(this._table, t1.$add(offset, 2));
    $.$indexSet$ax(this._table, t1.$add(offset, 1), null);
    $.$indexSet$ax(this._table, t1.$add(offset, 2), null);
    $.$indexSet$ax(this._table, $.$add$ns(prev, 1), next);
    $.$indexSet$ax(this._table, $.$add$ns(next, 2), prev);
  },
  _addAllEntries$1: function(oldTable) {
    var t1, offset, object, t2, nextOffset;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout1(1, oldTable);
    t1 = oldTable.length;
    if (1 >= t1)
      throw $.ioore(1);
    offset = oldTable[1];
    if (typeof offset !== "number")
      return this._addAllEntries$1$bailout1(2, oldTable, offset, $.JSArray_methods);
    for (; !$.$eq(offset, 0); offset = nextOffset) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      if (offset < 0 || offset >= t1)
        throw $.ioore(offset);
      object = oldTable[offset];
      t2 = offset + 1;
      if (t2 >= t1)
        throw $.ioore(t2);
      nextOffset = oldTable[t2];
      this._copyEntry$3(oldTable, offset, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout1: function(state0, oldTable, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(oldTable);
        offset = t1.$index(oldTable, 1);
      case 2:
        var t2, object, nextOffset;
        state0 = 0;
        for (; t2 = $.getInterceptor(offset), t2.$eq(offset, 0) !== true; offset = nextOffset) {
          object = t1.$index(oldTable, offset);
          nextOffset = t1.$index(oldTable, t2.$add(offset, 1));
          this._copyEntry$3(oldTable, offset, this._put$1(object));
        }
    }
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry === $.CONSTANT0) {
      t1 = this._deletedCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout1(2, key, t1, offset);
      this._deletedCount = t1 - 1;
    } else if (oldEntry == null) {
      t1 = this._entryCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout1(3, key, t1, offset);
      this._entryCount = t1 + 1;
    } else
      return offset;
    this._recordModification$0();
    if (key == null)
      key = $.CONSTANT1;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(4, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._linkLast$1(offset);
    return offset;
  },
  _put$1$bailout1: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
      default:
        if (state0 === 2 || state0 === 0 && oldEntry === $.CONSTANT0)
          switch (state0) {
            case 0:
              t1 = this._deletedCount;
            case 2:
              state0 = 0;
              this._deletedCount = $.$sub$n(t1, 1);
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && oldEntry == null)
                switch (state0) {
                  case 0:
                    t1 = this._entryCount;
                  case 3:
                    state0 = 0;
                    this._entryCount = $.$add$ns(t1, 1);
                }
              else
                return offset;
          }
        this._recordModification$0();
        if (key == null)
          key = $.CONSTANT1;
        t1 = this._table;
      case 4:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._linkLast$1(offset);
        return offset;
    }
  },
  _deleteEntry$1: function(offset) {
    var key;
    this._unlink$1(offset);
    key = $.CONSTANT0.$eq($.CONSTANT0, null) ? $.CONSTANT1 : $.CONSTANT0;
    $.$indexSet$ax(this._table, offset, key);
    this._deletedCount = $.$add$ns(this._deletedCount, 1);
    this._recordModification$0();
  },
  $as_HashTable: null
};

$$._LinkedHashTableKeyIterable = {"": "Iterable;_table<",
  get$iterator: function(_) {
    return $._LinkedHashTableKeyIterator$(this._table, $.getRuntimeTypeArgument(this, this["$as_LinkedHashTableKeyIterable"], 0));
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableKeyIterator = {"": "_LinkedHashTableIterator;_hashTable,_modificationCount,_offset,_liblib1$_current",
  _getCurrent$1: function(offset) {
    return this._hashTable._key$1(offset);
  },
  $as_LinkedHashTableIterator: null
};

$$._LinkedHashTableValueIterable = {"": "Iterable;_hashTable<,_valueIndex",
  get$iterator: function(_) {
    return $._LinkedHashTableValueIterator$(this._hashTable, this._valueIndex, $.getRuntimeTypeArgument(this, this["$as_LinkedHashTableValueIterable"], 0));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableValueIterator = {"": "_LinkedHashTableIterator;_valueIndex,_hashTable,_modificationCount,_offset,_liblib1$_current",
  _getCurrent$1: function(offset) {
    return $.$index$asx(this._hashTable.get$_table(), $.$add$ns(offset, this._valueIndex));
  },
  $as_LinkedHashTableIterator: null
};

$$._LinkedHashTableIterator = {"": "Object;_hashTable<,_modificationCount<",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    t2 = this._offset;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(1, t1, t2);
    if (t2 === 0) {
      this._liblib1$_current = null;
      return false;
    }
    this._liblib1$_current = this._getCurrent$1(t2);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t2) {
    if ($.$eq(t2, 0) === true) {
      this._liblib1$_current = null;
      return false;
    }
    this._liblib1$_current = this._getCurrent$1(this._offset);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$.ListQueue = {"": "Collection;_table<,_head,_tail,_modificationCount<",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this, null);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, i0, t1;
    modificationCount = this._modificationCount;
    i = this._head;
    if (i !== (i | 0))
      return this.forEach$1$bailout1(1, action, modificationCount, i);
    for (; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, modificationCount, i) {
    var i0, t1;
    for (; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    var t1, t3;
    t1 = this._tail;
    if (t1 !== (t1 | 0))
      return this.get$length$bailout1(1, t1);
    t3 = this._head;
    if (t3 !== (t3 | 0))
      return this.get$length$bailout1(2, t1, t3);
    return (t1 - t3 & this._table.length - 1) >>> 0;
  },
  get$length$bailout1: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._tail;
      case 1:
        state0 = 0;
        t3 = this._head;
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
      case 3:
        state0 = 0;
        return $.$and$n(t3, this._table.length - 1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3, t4;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$gt(index, this.get$length(this)) === true)
      throw $.$$throw($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t4 = (t2 + index & t3 - 1) >>> 0;
    if (t4 < 0 || t4 >= t3)
      throw $.ioore(t4);
    return t1[t4];
  },
  toList$1$growable: function(_, growable) {
    var t1, list;
    if (growable === true) {
      t1 = this.get$length(this);
      list = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
      $.JSArray_methods.set$length(list, t1);
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || elements.$isList())) {
      addCount = $.get$length$asx(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw $.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.JSArray_methods.setRange$4(this._table, $length, addCount, elements, 0);
        this._tail = $.$add$ns(this._tail, addCount);
      } else {
        t1 = this._tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.JSArray_methods.setRange$4(t2, t1, addCount, elements, 0);
          this._tail = $.$add$ns(this._tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.JSArray_methods.setRange$4(t2, t1, endSpace, elements, 0);
          $.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = $.$add$ns(this._modificationCount, 1);
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0() === true;)
        this._add$1(t1.get$current());
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  addLast$1: function(_, element) {
    this._add$1(element);
  },
  addFirst$1: function(element) {
    var t1, t2;
    this._head = (this._head - 1 & this._table.length - 1) >>> 0;
    t1 = this._table;
    t2 = this._head;
    if (t2 !== (t2 | 0))
      return this.addFirst$1$bailout(1, element, t1, t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    if (t2 === this._tail)
      this._grow$0();
    t1 = this._modificationCount;
    if (typeof t1 !== "number")
      return this.addFirst$1$bailout(2, 0, t1);
    this._modificationCount = t1 + 1;
  },
  addFirst$1$bailout: function(state0, element, t1, t2) {
    switch (state0) {
      case 0:
        this._head = (this._head - 1 & this._table.length - 1) >>> 0;
        t1 = this._table;
        t2 = this._head;
      case 1:
        state0 = 0;
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= t1.length)
          throw $.ioore(t2);
        t1[t2] = element;
        if (t2 === this._tail)
          this._grow$0();
        t1 = this._modificationCount;
      case 2:
        state0 = 0;
        this._modificationCount = $.$add$ns(t1, 1);
    }
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = $.$add$ns(this._modificationCount, 1);
    t1 = this._table;
    t2 = this._head;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = $.$add$ns(this._modificationCount, 1);
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _checkModification$1: function(expectedModificationCount) {
    if ($.$eq(expectedModificationCount, this._modificationCount) !== true)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    t1 = this._modificationCount;
    if (typeof t1 !== "number")
      return this._add$1$bailout(1, t1);
    this._modificationCount = t1 + 1;
  },
  _add$1$bailout: function(state0, t1) {
    this._modificationCount = $.$add$ns(t1, 1);
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.JSNumber_methods.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$sub$n(this._tail, t2);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t1, t2);
      $.JSArray_methods.setRange$4(target, firstPartSize, this._tail, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount), $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.$lt$n(initialCapacity, 8) === true)
      initialCapacity = 8;
    else if ($.ListQueue__isPowerOf2(initialCapacity) !== true)
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount<,_liblib1$_position,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    t2 = this._liblib1$_position;
    if (t2 !== (t2 | 0))
      return this.moveNext$0$bailout(1, t2, t1);
    if (t2 === this._end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  moveNext$0$bailout: function(state0, t2, t1) {
    var t3;
    if (t2 === this._end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(_, elements) {
    var t1;
    for (t1 = $.get$iterator$ax(elements); t1.moveNext$0() === true;)
      this.add$1(this, t1.get$current());
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  }
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, 0, t1, t3);
    return $.Duration$(0, 0, t1 + t3, 0, 0, 0);
  },
  $$add$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$add$ns(t1, t3), 0, 0, 0);
    }
  },
  $sub: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$sub$bailout(2, 0, t1, t3);
    return $.Duration$(0, 0, t1 - t3, 0, 0, 0);
  },
  $$sub$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$sub$n(t1, t3), 0, 0, 0);
    }
  },
  $mul: function(_, factor) {
    var t1;
    if (typeof factor !== "number")
      return this.$$mul$bailout(1, factor);
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$mul$bailout(2, factor, t1);
    return $.Duration$(0, 0, t1 * factor, 0, 0, 0);
  },
  $$mul$bailout: function(state0, factor, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._duration;
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$mul$n(t1, factor), 0, 0, 0);
    }
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.$$throw($.IntegerDivisionByZeroException$());
    return $.Duration$(0, 0, $.$tdiv$n(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$lt$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$lt$bailout(2, 0, t1, t3);
    return t1 < t3;
  },
  $$lt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.$lt$n(t1, t3);
    }
  },
  $gt: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$gt$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$gt$bailout(2, 0, t1, t3);
    return t1 > t3;
  },
  $$gt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.$gt$n(t1, t3);
    }
  },
  $le: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$le$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$le$bailout(2, 0, t1, t3);
    return t1 <= t3;
  },
  $$le$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.$le$n(t1, t3);
    }
  },
  $ge: function(_, other) {
    return $.$ge$n(this._duration, other.get$_duration());
  },
  get$inHours: function() {
    return $.$tdiv$n(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.$tdiv$n(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.$tdiv$n(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.$tdiv$n(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDuration))
      return false;
    return $.$eq(this._duration, other._duration);
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._duration);
  },
  compareTo$1: function(_, other) {
    return $.compareTo$1$ns(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_sixDigits();
    t2 = new $.Duration_toString_twoDigits();
    if ($.$lt$n(this.get$inMicroseconds(), 0) === true)
      return "-" + $.S($.Duration$(0, 0, $.$negate$n(this.get$inMicroseconds()), 0, 0, 0));
    twoDigitMinutes = t2.call$1($.remainder$1$n(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.remainder$1$n(this.get$inSeconds(), 60));
    sixDigitUs = t1.call$1($.remainder$1$n(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0) === true)
        t1.sb_0.write$1(", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t3.write$1($.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (t2 != null)
      $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(2, t1, t2);
    t3 = t1.sb_0;
    actualParameters = t3.toString$0(t3);
    t1.sb_0 = $.StringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0)
        t1.sb_0.write$1(", ");
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      t3.write$1(t2[i]);
    }
    t1 = t1.sb_0;
    formalParameters = t1.toString$0(t1);
    t1 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer$("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (t2 != null)
          for (t3 = $.getInterceptor$asx(t2); $.$lt$n(t1.i_1, $.get$length$asx(t2)) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
            if ($.$gt$n(t1.i_1, 0) === true)
              t1.sb_0.write$1(", ");
            t1.sb_0.write$1($.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (t2 != null)
          $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          t3 = t1.sb_0;
          actualParameters = t3.toString$0(t3);
          t1.sb_0 = $.StringBuffer$("");
          for (t3 = $.getInterceptor$asx(t2), i = 0; $.JSNumber_methods.$lt(i, $.get$length$asx(t2)); ++i) {
            if (i > 0)
              t1.sb_0.write$1(", ");
            t1.sb_0.write$1(t3.$index(t2, i));
          }
          t1 = t1.sb_0;
          formalParameters = t1.toString$0(t1);
          t1 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Iterable = {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this["$asIterable"], 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, t2;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.$$throw($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (remaining === 0)
        return t2;
      --remaining;
    }
    throw $.$$throw($.RangeError$value(index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, t2, t3;
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.$$throw($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = $.getInterceptor(remaining);
      if (t3.$eq(remaining, 0) === true)
        return t2;
      remaining = t3.$sub(remaining, 1);
    }
    throw $.$$throw($.RangeError$value(index));
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(_);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(_)) + "'";
  },
  get$runtimeType: function(_) {
    return $.TypeImpl$($.getRuntimeTypeString(_));
  }
};

$$.Stopwatch = {"": "Object;_start,_stop",
  start$0: function(_) {
    if (this.get$isRunning())
      return;
    if (this._start == null)
      this._start = $.Primitives_numMicroseconds();
    else {
      this._start = $.Primitives_numMicroseconds() - $.$sub$n(this._stop, this._start);
      this._stop = null;
    }
  },
  reset$0: function(_) {
    if (this._start == null)
      return;
    this._start = $.Primitives_numMicroseconds();
    if (this._stop != null)
      this._stop = this._start;
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    if (t2 == null) {
      t1 = $.Stopwatch__now();
      t2 = this._start;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t2 = t1 - t2;
      t1 = t2;
    } else
      t1 = $.$sub$n(t2, t1);
    return t1;
  },
  get$elapsedMicroseconds: function() {
    return $.$tdiv$n($.$mul$n(this.get$elapsedTicks(), 1000000), this.get$frequency());
  },
  get$frequency: function() {
    return $.Stopwatch__frequency();
  },
  get$isRunning: function() {
    return this._start != null && this._stop == null;
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return $.get$length$asx(this._contents);
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  write$1: function(obj) {
    var str;
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    str = obj;
    this._contents = this._contents + str;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeln$1: function(obj) {
    this.write$1(obj);
    this.write$1("\n");
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    if (typeof $content === "string")
      this._contents = $content;
    else
      this.write$1($content);
  }
};

$$._ChildrenElementList = {"": "Object;_element,_childElements",
  toList$1$growable: function(_, growable) {
    var t1, output, len, t3, i, t2;
    t1 = this._childElements;
    if (growable === true) {
      output = [];
      $.JSArray_methods.set$length(output, $.get$length$asx(t1));
    } else {
      output = $.List_List($.get$length$asx(t1), $.Element);
      $.setRuntimeTypeInfo(output, [$.Element]);
    }
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.toList$1$growable$bailout(1, t1, output);
    len = t1.length;
    t3 = output.length;
    i = 0;
    for (; i < len; ++i) {
      t2 = t1[i];
      if (i >= t3)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$1$growable$bailout: function(state0, t1, output) {
    var len, t3, i, t2;
    len = $.get$length$asx(t1);
    t3 = $.getInterceptor$asx(t1);
    i = 0;
    for (; $.JSNumber_methods.$lt(i, len); ++i) {
      t2 = t3.$index(t1, i);
      if (i >= output.length)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = $.get$iterator$ax(this._childElements); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  get$isEmpty: function(_) {
    return $.get$$$dom_firstElementChild$x(this._element) == null;
  },
  elementAt$1: function(_, index) {
    return $.$index$asx(this._childElements, index);
  },
  get$length: function(_) {
    return $.get$length$asx(this._childElements);
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._element;
    t2 = this._childElements;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.$$indexSet$bailout(1, index, value, t1, t2);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    $.$$dom_replaceChild$2$x(t1, value, t2[index]);
  },
  $$indexSet$bailout: function(state0, index, value, t1, t2) {
    $.$$dom_replaceChild$2$x(t1, value, $.$index$asx(t2, index));
  },
  add$1: function(_, value) {
    $.append$1$x(this._element, value);
    return value;
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2, t3;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
      iterable = $.List_List$from(iterable, true, null);
    for (t1 = $.get$iterator$ax(iterable), t2 = this._element, t3 = $.getInterceptor$x(t2); t1.moveNext$0() === true;)
      t3.append$1(t2, t1.get$current());
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      end = this.get$length(this);
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.$$dom_removeChild$1$x(this._element, result);
    return result;
  },
  get$last: function(_) {
    var result = $.get$$$dom_lastElementChild$x(this._element);
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Element);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  elementAt$1: function(_, index) {
    return $.$index$asx(this._nodeList, index);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$asx(this._nodeList);
  },
  get$length: function(_) {
    return $.get$length$asx(this._nodeList);
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function(_) {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  sublist$2: function(_, start, end) {
    return $._FrozenElementList$_wrap($.sublist$2$ax(this._nodeList, start, end));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementListIterator = {"": "Object;_list,_liblib3$_index,_current",
  moveNext$0: function() {
    var t1, nextIndex, t2;
    t1 = this._liblib3$_index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextIndex = t1 + 1;
    t1 = this._list;
    t2 = t1.get$length(t1);
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, t2, nextIndex);
    if (nextIndex < t2) {
      this._current = t1.$index(t1, nextIndex);
      this._liblib3$_index = nextIndex;
      return true;
    }
    this._liblib3$_index = t1.get$length(t1);
    this._current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, t2, nextIndex) {
    switch (state0) {
      case 0:
        t1 = this._liblib3$_index;
      case 1:
        state0 = 0;
        nextIndex = $.$add$ns(t1, 1);
        t1 = this._list;
        t2 = t1.get$length(t1);
      case 2:
        state0 = 0;
        if ($.$lt$n(nextIndex, t2) === true) {
          this._current = t1.$index(t1, nextIndex);
          this._liblib3$_index = nextIndex;
          return true;
        }
        this._liblib3$_index = t1.get$length(t1);
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    $.append$1$x(this._this, value);
  },
  addAll$1: function(_, iterable) {
    var t1, len, t3, i, t2;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy) {
      t1 = this._this;
      if (iterable._this !== t1) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout(1, iterable, len, t1);
        t3 = $.getInterceptor$x(t1);
        i = 0;
        for (; i < len; ++i)
          t3.append$1(t1, iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this, t3 = $.getInterceptor$x(t2); t1.moveNext$0() === true;)
      t3.append$1(t2, t1.get$current());
  },
  addAll$1$bailout: function(state0, iterable, len, t1) {
    switch (state0) {
      case 0:
      case 1:
        var t3, i, t2;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && iterable._this !== t1)
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    t3 = $.getInterceptor$x(t1);
                    i = 0;
                    for (; $.JSNumber_methods.$lt(i, len); ++i)
                      t3.append$1(t1, iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$ax(iterable), t2 = this._this, t3 = $.getInterceptor$x(t2); t1.moveNext$0() === true;)
          t3.append$1(t2, t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.$$dom_removeChild$1$x(this._this, result);
    return result;
  },
  clear$0: function(_) {
    $.set$text$x(this._this, "");
  },
  $indexSet: function(_, index, value) {
    var t1, t2, t3;
    t1 = this._this;
    t2 = $.getInterceptor$x(t1);
    t3 = t2.get$$$dom_childNodes(t1);
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
      return this.$$indexSet$bailout(1, t2, t1, value, index, t3);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t3.length)
      throw $.ioore(index);
    t2.$$dom_replaceChild$2(t1, value, t3[index]);
  },
  $$indexSet$bailout: function(state0, t2, t1, value, index, t3) {
    t2.$$dom_replaceChild$2(t1, value, $.$index$asx(t3, index));
  },
  get$iterator: function(_) {
    return $.get$iterator$ax($.get$$$dom_childNodes$x(this._this));
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  elementAt$1: function(_, index) {
    return $.$index$asx($.get$$$dom_childNodes$x(this._this), index);
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      $.$eq(end, this.get$length(this));
    return $.Lists_getRange(this, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$length: function(_) {
    return $.get$length$asx($.get$$$dom_childNodes$x(this._this));
  },
  $index: function(_, index) {
    var t1 = $.get$$$dom_childNodes$x(this._this);
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $is_ChildNodeListLazy: true,
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._WrappedList = {"": "Object;_list",
  get$iterator: function(_) {
    return $._WrappedIterator$($.get$iterator$ax(this._list), null);
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._list, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this._list, growable, null);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    return $.get$length$asx(this._list);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$asx(this._list);
  },
  elementAt$1: function(_, index) {
    return $.elementAt$1$ax(this._list, index);
  },
  add$1: function(_, element) {
    $.add$1$ax(this._list, element);
  },
  addAll$1: function(_, elements) {
    $.addAll$1$ax(this._list, elements);
  },
  $index: function(_, index) {
    var t1 = this._list;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $indexSet: function(_, index, value) {
    var t1 = this._list;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.$$indexSet$bailout(1, index, value, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, t1) {
    $.$indexSet$ax(t1, index, value);
  },
  removeLast$0: function(_) {
    return $.removeLast$0$ax(this._list);
  },
  sublist$2: function(_, start, end) {
    return $.sublist$2$ax(this._list, start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$._WrappedIterator = {"": "Object;_iterator",
  moveNext$0: function() {
    return this._iterator.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$parent: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1) {
    var nextPosition = $.$add$ns(t1, 1);
    t1 = this._length;
    if ($.$lt$n(nextPosition, t1) === true) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  },
  $isFunction: true
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_anon()), true, $.Element);
  },
  forEach$1: function(_, f) {
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  add$1: function(_, value) {
    var t1 = this._childNodes;
    t1.add$1(t1, value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes; t1.moveNext$0() === true;)
      t2.add$1(t2, t1.get$current());
  },
  clear$0: function(_) {
    var t1 = this._childNodes;
    t1.clear$0(t1);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Element);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  elementAt$1: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$isEmpty: function(_) {
    return $.JSArray_methods.get$isEmpty(this.get$_filtered());
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.get$_filtered());
  },
  sublist$2: function(_, start, end) {
    return $.JSArray_methods.sublist$2(this.get$_filtered(), start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$last: function(_) {
    return $.JSArray_methods.get$last(this.get$_filtered());
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.$isElement();
  },
  $isFunction: true
};

$$.CanvasDraw = {"": "DebugDraw;ctx,flags,viewportTransform",
  drawPolygon$3: function(vertices, vertexCount, color) {
    this._pathPolygon$3(vertices, vertexCount, color);
    $.stroke$0$x(this.ctx);
  },
  drawSolidPolygon$3: function(vertices, vertexCount, color) {
    this._pathPolygon$3(vertices, vertexCount, color);
    $.fill$0$x(this.ctx);
  },
  _pathPolygon$3: function(vertices, vertexCount, color) {
    var t1, t2, i, t3, t4;
    if (typeof vertexCount !== "number")
      return this._pathPolygon$3$bailout(1, vertices, vertexCount, color);
    this.set$_color(color);
    for (t1 = vertices.length, t2 = this.viewportTransform, i = 0; i < vertexCount; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      t3 = vertices[i];
      t2.getWorldToScreen$2(t3, t3);
    }
    $.beginPath$0$x(this.ctx);
    t2 = this.ctx;
    if (0 >= t1)
      throw $.ioore(0);
    t3 = vertices[0];
    t4 = $.getInterceptor$x(t3);
    $.moveTo$2$x(t2, t4.get$x(t3), t4.get$y(t3));
    for (i = 1; t2 = this.ctx, i < vertexCount; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      t3 = vertices[i];
      t4 = $.getInterceptor$x(t3);
      $.lineTo$2$x(t2, t4.get$x(t3), t4.get$y(t3));
    }
    t1 = vertices[0];
    t3 = $.getInterceptor$x(t1);
    $.lineTo$2$x(t2, t3.get$x(t1), t3.get$y(t1));
    $.closePath$0$x(this.ctx);
  },
  _pathPolygon$3$bailout: function(state0, vertices, vertexCount, color) {
    var t1, t2, i, t3, t4;
    this.set$_color(color);
    for (t1 = vertices.length, t2 = this.viewportTransform, i = 0; $.JSNumber_methods.$lt(i, vertexCount); ++i) {
      if (i >= t1)
        throw $.ioore(i);
      t3 = vertices[i];
      t2.getWorldToScreen$2(t3, t3);
    }
    $.beginPath$0$x(this.ctx);
    t2 = this.ctx;
    if (0 >= t1)
      throw $.ioore(0);
    t3 = vertices[0];
    t4 = $.getInterceptor$x(t3);
    $.moveTo$2$x(t2, t4.get$x(t3), t4.get$y(t3));
    for (i = 1; t2 = $.JSNumber_methods.$lt(i, vertexCount), t3 = this.ctx, t2; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      t2 = vertices[i];
      t4 = $.getInterceptor$x(t2);
      $.lineTo$2$x(t3, t4.get$x(t2), t4.get$y(t2));
    }
    t1 = vertices[0];
    t2 = $.getInterceptor$x(t1);
    $.lineTo$2$x(t3, t2.get$x(t1), t2.get$y(t1));
    $.closePath$0$x(this.ctx);
  },
  drawSegment$3: function(p1, p2, color) {
    var t1;
    this.set$_color(color);
    t1 = this.viewportTransform;
    t1.getWorldToScreen$2(p1, p1);
    t1.getWorldToScreen$2(p2, p2);
    $.beginPath$0$x(this.ctx);
    $.moveTo$2$x(this.ctx, p1.x, p1.y);
    $.lineTo$2$x(this.ctx, p2.x, p2.y);
    $.closePath$0$x(this.ctx);
    $.stroke$0$x(this.ctx);
  },
  drawCircle$4: function(center, radius, color, axis) {
    this._pathCircle$3(center, $.$mul$n(radius, this.viewportTransform.scale), color);
    $.stroke$0$x(this.ctx);
  },
  drawCircle$3: function(center, radius, color) {
    return this.drawCircle$4(center, radius, color, null);
  },
  drawSolidCircle$4: function(center, radius, color, axis) {
    this._pathCircle$3(center, $.$mul$n(radius, this.viewportTransform.scale), color);
    $.fill$0$x(this.ctx);
  },
  _pathCircle$3: function(center, radius, color) {
    var t1;
    this.set$_color(color);
    this.viewportTransform.getWorldToScreen$2(center, center);
    $.beginPath$0$x(this.ctx);
    t1 = $.getInterceptor$x(center);
    $.arc$6$x(this.ctx, t1.get$x(center), t1.get$y(center), radius, 0, 6.283185307179586, true);
    $.closePath$0$x(this.ctx);
  },
  drawTransform$2: function(xf, color) {
    this.drawCircle$3(xf.position, 0.1, color);
  },
  set$_color: function(color) {
    var t1 = $.getInterceptor$x(color);
    $.setStrokeColorRgb$4$x(this.ctx, t1.get$x(color), t1.get$y(color), t1.get$z(color), 0.9);
    $.setFillColorRgb$4$x(this.ctx, t1.get$x(color), t1.get$y(color), t1.get$z(color), 0.8);
  },
  CanvasDraw$2: function(viewport, ctx) {
  }
};

$$.ContactFilter = {"": "Object;",
  shouldCollide$2: function(fixtureA, fixtureB) {
    var filterA, filterB;
    filterA = $.get$filter$x(fixtureA);
    filterB = $.get$filter$x(fixtureB);
    if ($.$eq(filterA.get$groupIndex(), 0) !== true && $.$eq(filterA.get$groupIndex(), filterB.get$groupIndex()) === true)
      return $.$gt$n(filterA.get$groupIndex(), 0);
    return $.$and$n(filterA.get$maskBits(), filterB.get$categoryBits()) !== 0 && $.$and$n(filterA.get$categoryBits(), filterB.get$maskBits()) !== 0;
  }
};

$$.ContactImpulse = {"": "Object;normalImpulses,tangentImpulses"};

$$.DebugDraw = {"": "Object;flags@"};

$$.AxisAlignedBox = {"": "Object;lowerBound<,upperBound<",
  setFromCombination$2: function(boxOne, boxTwo) {
    var t1 = $.min($.get$x$x(boxOne.lowerBound), $.get$x$x(boxTwo.lowerBound));
    $.set$x$x(this.lowerBound, t1);
    t1 = $.min($.get$y$x(boxOne.lowerBound), $.get$y$x(boxTwo.lowerBound));
    $.set$y$x(this.lowerBound, t1);
    t1 = $.max($.get$x$x(boxOne.upperBound), $.get$x$x(boxTwo.upperBound));
    $.set$x$x(this.upperBound, t1);
    t1 = $.max($.get$y$x(boxOne.upperBound), $.get$y$x(boxTwo.upperBound));
    $.set$y$x(this.upperBound, t1);
  },
  get$center: function() {
    var t1, t3;
    t1 = this.lowerBound;
    if (typeof t1 !== "number")
      return this.get$center$bailout(1, t1);
    t3 = this.upperBound;
    if (typeof t3 !== "number")
      return this.get$center$bailout(2, t1, t3);
    return $.JSNumber_methods.scale$1(t1 + t3, 0.5);
  },
  get$center$bailout: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.lowerBound;
      case 1:
        state0 = 0;
        t3 = this.upperBound;
      case 2:
        state0 = 0;
        return $.scale$1$x($.$add$ns(t1, t3), 0.5);
    }
  },
  contains$1: function(_, aabb) {
    var t1, t3;
    t1 = $.get$x$x(this.lowerBound);
    if (typeof t1 !== "number")
      return this.contains$1$bailout(1, aabb, t1);
    t3 = $.get$x$x(aabb.get$lowerBound());
    if (typeof t3 !== "number")
      return this.contains$1$bailout(2, aabb, t1, t3);
    if (t1 > t3) {
      t1 = $.get$y$x(this.lowerBound);
      if (typeof t1 !== "number")
        return this.contains$1$bailout(3, aabb, t1);
      t3 = $.get$y$x(aabb.get$lowerBound());
      if (typeof t3 !== "number")
        return this.contains$1$bailout(4, aabb, t1, t3);
      if (t1 > t3) {
        t1 = $.get$y$x(this.upperBound);
        if (typeof t1 !== "number")
          return this.contains$1$bailout(5, aabb, t1);
        t3 = $.get$y$x(aabb.get$upperBound());
        if (typeof t3 !== "number")
          return this.contains$1$bailout(6, aabb, t1, t3);
        if (t1 < t3) {
          t1 = $.get$x$x(this.upperBound);
          if (typeof t1 !== "number")
            return this.contains$1$bailout(7, aabb, t1);
          t3 = $.get$x$x(aabb.get$upperBound());
          if (typeof t3 !== "number")
            return this.contains$1$bailout(8, 0, t1, t3);
          t3 = t1 < t3;
          t1 = t3;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  contains$1$bailout: function(state0, aabb, t1, t3) {
    switch (state0) {
      case 0:
        t1 = $.get$x$x(this.lowerBound);
      case 1:
        state0 = 0;
        t3 = $.get$x$x(aabb.get$lowerBound());
      case 2:
        state0 = 0;
      default:
        var t5;
        if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && $.$gt$n(t1, t3) === true)
          switch (state0) {
            case 0:
              t1 = $.get$y$x(this.lowerBound);
            case 3:
              state0 = 0;
              t3 = $.get$y$x(aabb.get$lowerBound());
            case 4:
              state0 = 0;
            default:
              if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && $.$gt$n(t1, t3) === true)
                switch (state0) {
                  case 0:
                    t1 = $.get$y$x(this.upperBound);
                  case 5:
                    state0 = 0;
                    t3 = $.get$y$x(aabb.get$upperBound());
                  case 6:
                    state0 = 0;
                  default:
                    if (state0 === 8 || state0 === 7 || state0 === 0 && $.$lt$n(t1, t3) === true)
                      switch (state0) {
                        case 0:
                          t1 = $.get$x$x(this.upperBound);
                        case 7:
                          state0 = 0;
                          t3 = $.get$x$x(aabb.get$upperBound());
                        case 8:
                          state0 = 0;
                          t5 = $.$lt$n(t1, t3) === true;
                          t1 = t5;
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  setFrom$1: function(other) {
    this.lowerBound.copyFrom$1(other.get$lowerBound());
    this.upperBound.copyFrom$1(other.get$upperBound());
  },
  toString$0: function(_) {
    return $.S(this.lowerBound) + ", " + $.S(this.upperBound);
  },
  AxisAlignedBox$2: function(lowerBound, upperBound) {
    if (this.lowerBound == null)
      this.lowerBound = $.vec2$zero();
    if (this.upperBound == null)
      this.upperBound = $.vec2$zero();
  }
};

$$.Collision = {"": "Object;_pool,cache,input,output,results1,results2,incidentEdge<,localTangent,localNormal<,planePoint,tangent,normal<,normal1,v11,v12,clipPoints1,clipPoints2",
  testOverlap$4: function(shapeA, shapeB, transformA, transformB) {
    var t1, t2, t3;
    t1 = this.input;
    t1.proxyA.setFromShape$1(shapeA);
    t1.proxyB.setFromShape$1(shapeB);
    t1.transformA.setFrom$1(transformA);
    t1.transformB.setFrom$1(transformB);
    t1.useRadii = true;
    t2 = this.cache;
    t2.count = 0;
    t3 = this.output;
    this._pool.distance.computeDistance$3(t3, t2, t1);
    return $.$lt$n(t3._distance, 0.000001192);
  },
  collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
    var t1, v, t2, t3, t4, pAy, pAx, t5, v1, t6, t7, t8, pBy, dx, dy, distSqr, radius;
    manifold.set$pointCount(0);
    t1 = $.getInterceptor$x(circle1);
    v = t1.get$position(circle1);
    t2 = xfA.position;
    t3 = xfA.rotation;
    t4 = $.getInterceptor$x(v);
    pAy = $.$add$ns($.$add$ns(t2.y, $.$mul$n($.get$y$x(t3.col0), t4.get$x(v))), $.$mul$n($.get$y$x(t3.col1), t4.get$y(v)));
    pAx = $.$add$ns($.$add$ns(t2.x, $.$mul$n($.get$x$x(t3.col0), t4.get$x(v))), $.$mul$n($.get$x$x(t3.col1), t4.get$y(v)));
    t5 = $.getInterceptor$x(circle2);
    v1 = t5.get$position(circle2);
    t6 = xfB.position;
    t7 = xfB.rotation;
    t8 = $.getInterceptor$x(v1);
    pBy = $.$add$ns($.$add$ns(t6.y, $.$mul$n($.get$y$x(t7.col0), t8.get$x(v1))), $.$mul$n($.get$y$x(t7.col1), t8.get$y(v1)));
    dx = $.$sub$n($.$add$ns($.$add$ns(t6.x, $.$mul$n($.get$x$x(t7.col0), t8.get$x(v1))), $.$mul$n($.get$x$x(t7.col1), t8.get$y(v1))), pAx);
    dy = $.$sub$n(pBy, pAy);
    distSqr = $.$add$ns($.$mul$n(dx, dx), $.$mul$n(dy, dy));
    radius = $.$add$ns(circle1.get$radius(), circle2.get$radius());
    if ($.$gt$n(distSqr, $.$mul$n(radius, radius)) === true)
      return;
    t2 = $.getInterceptor$x(manifold);
    t2.set$type(manifold, 0);
    manifold.get$localPoint().copyFrom$1(t1.get$position(circle1));
    manifold.get$localNormal().splat$1(0);
    manifold.set$pointCount(1);
    $.$index$asx(t2.get$points(manifold), 0).get$localPoint().copyFrom$1(t5.get$position(circle2));
    $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
  },
  collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
    var t1, v, t2, t3, t4, cy, t5, v1x, v1y, t6, b, b1, t7, t8, cLocaly, t10, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, norm, s, vertIndex2, v1, v2, mpoint, temp2X, temp2Y, temp4X, temp4Y, dx, dy, fcx, fcy;
    manifold.set$pointCount(0);
    t1 = $.getInterceptor$x(circle);
    v = t1.get$position(circle);
    t2 = xfB.position;
    t3 = xfB.rotation;
    t4 = $.getInterceptor$x(v);
    cy = $.$add$ns($.$add$ns(t2.y, $.$mul$n($.get$y$x(t3.col0), t4.get$x(v))), $.$mul$n($.get$y$x(t3.col1), t4.get$y(v)));
    t5 = xfA.position;
    v1x = $.$sub$n($.$add$ns($.$add$ns(t2.x, $.$mul$n($.get$x$x(t3.col0), t4.get$x(v))), $.$mul$n($.get$x$x(t3.col1), t4.get$y(v))), t5.x);
    v1y = $.$sub$n(cy, t5.y);
    t6 = xfA.rotation;
    b = t6.col0;
    b1 = t6.col1;
    t6 = $.getInterceptor$x(b1);
    t7 = $.getInterceptor$n(v1x);
    t8 = $.getInterceptor$n(v1y);
    cLocaly = $.$add$ns(t7.$mul(v1x, t6.get$x(b1)), t8.$mul(v1y, t6.get$y(b1)));
    if (typeof cLocaly !== "number")
      return this.collidePolygonAndCircle$5$bailout(1, manifold, polygon, t8, circle, b, v1x, t1, t7, v1y, cLocaly);
    t10 = $.getInterceptor$x(b);
    cLocalx = $.$add$ns(t7.$mul(v1x, t10.get$x(b)), t8.$mul(v1y, t10.get$y(b)));
    if (typeof cLocalx !== "number")
      return this.collidePolygonAndCircle$5$bailout(2, manifold, polygon, 0, circle, 0, 0, t1, 0, 0, cLocaly, cLocalx);
    radius = $.$add$ns(polygon.get$radius(), circle.get$radius());
    if (typeof radius !== "number")
      return this.collidePolygonAndCircle$5$bailout(3, manifold, polygon, 0, circle, 0, 0, t1, 0, 0, cLocaly, cLocalx, radius);
    vertexCount = polygon.get$vertexCount();
    if (typeof vertexCount !== "number")
      return this.collidePolygonAndCircle$5$bailout(4, manifold, polygon, 0, circle, 0, 0, t1, 0, 0, cLocaly, cLocalx, radius, vertexCount);
    vertices = polygon.get$vertices();
    normals = polygon.get$normals();
    for (t2 = vertices.length, t3 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      vertex = vertices[i];
      t4 = $.getInterceptor$x(vertex);
      t5 = t4.get$x(vertex);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = t4.get$y(vertex);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (i >= t3)
        throw $.ioore(i);
      norm = normals[i];
      t6 = $.getInterceptor$x(norm);
      s = $.$add$ns($.$mul$n(t6.get$x(norm), cLocalx - t5), $.$mul$n(t6.get$y(norm), cLocaly - t4));
      t4 = $.getInterceptor$n(s);
      if (t4.$gt(s, radius) === true)
        return;
      if (t4.$gt(s, separation) === true) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    if (normalIndex < 0 || normalIndex >= t2)
      throw $.ioore(normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t2)
      throw $.ioore(vertIndex2);
    v2 = vertices[vertIndex2];
    if ($.$lt$n(separation, 1.192e-7)) {
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      if (normalIndex >= t3)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t4 = $.getInterceptor$x(norm);
      t5 = t4.get$x(norm);
      manifold.get$localNormal().x = t5;
      t4 = t4.get$y(norm);
      manifold.get$localNormal().y = t4;
      t4 = $.getInterceptor$x(v1);
      t5 = $.getInterceptor$x(v2);
      t6 = $.$mul$n($.$add$ns(t4.get$x(v1), t5.get$x(v2)), 0.5);
      manifold.get$localPoint().x = t6;
      t6 = $.$mul$n($.$add$ns(t4.get$y(v1), t5.get$y(v2)), 0.5);
      manifold.get$localPoint().y = t6;
      mpoint = $.$index$asx(t2.get$points(manifold), 0);
      t6 = $.get$x$x(t1.get$position(circle));
      mpoint.get$localPoint().x = t6;
      t6 = $.get$y$x(t1.get$position(circle));
      mpoint.get$localPoint().y = t6;
      $.get$id$x(mpoint).zero$0();
      return;
    }
    t2 = $.getInterceptor$x(v1);
    t4 = t2.get$x(v1);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = t2.get$y(v1);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = $.getInterceptor$x(v2);
    temp2X = $.$sub$n(t6.get$x(v2), t4);
    temp2Y = $.$sub$n(t6.get$y(v2), t2.get$y(v1));
    if (typeof temp2X !== "number")
      throw $.iae(temp2X);
    if (typeof temp2Y !== "number")
      throw $.iae(temp2Y);
    t7 = t6.get$x(v2);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t8 = t6.get$y(v2);
    if (typeof t8 !== "number")
      throw $.iae(t8);
    temp4X = $.$sub$n(t2.get$x(v1), t7);
    temp4Y = $.$sub$n(t2.get$y(v1), t6.get$y(v2));
    if (typeof temp4X !== "number")
      throw $.iae(temp4X);
    if (typeof temp4Y !== "number")
      throw $.iae(temp4Y);
    if ((cLocalx - t4) * temp2X + (cLocaly - t5) * temp2Y <= 0) {
      t3 = t2.get$x(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dx = cLocalx - t3;
      t3 = t2.get$y(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dy = cLocaly - t3;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.set$pointCount(1);
      t3 = $.getInterceptor$x(manifold);
      t3.set$type(manifold, 1);
      t4 = t2.get$x(v1);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      manifold.get$localNormal().x = cLocalx - t4;
      t2 = t2.get$y(v1);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      manifold.get$localNormal().y = cLocaly - t2;
      manifold.get$localNormal().normalize$0();
      manifold.get$localPoint().copyFrom$1(v1);
      $.$index$asx(t3.get$points(manifold), 0).get$localPoint().copyFrom$1(t1.get$position(circle));
      $.get$id$x($.$index$asx(t3.get$points(manifold), 0)).zero$0();
    } else {
      t4 = t6.get$x(v2);
      if ((cLocalx - t7) * temp4X + (cLocaly - t8) * temp4Y <= 0) {
        if (typeof t4 !== "number")
          throw $.iae(t4);
        dx = cLocalx - t4;
        t2 = t6.get$y(v2);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        dy = cLocaly - t2;
        if (dx * dx + dy * dy > radius * radius)
          return;
        manifold.set$pointCount(1);
        t2 = $.getInterceptor$x(manifold);
        t2.set$type(manifold, 1);
        t3 = t6.get$x(v2);
        if (typeof t3 !== "number")
          throw $.iae(t3);
        manifold.get$localNormal().x = cLocalx - t3;
        t6 = t6.get$y(v2);
        if (typeof t6 !== "number")
          throw $.iae(t6);
        manifold.get$localNormal().y = cLocaly - t6;
        manifold.get$localNormal().normalize$0();
        manifold.get$localPoint().copyFrom$1(v2);
        $.$index$asx(t2.get$points(manifold), 0).get$localPoint().copyFrom$1(t1.get$position(circle));
        $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
      } else {
        fcx = $.$mul$n($.$add$ns(t2.get$x(v1), t4), 0.5);
        fcy = $.$mul$n($.$add$ns(t2.get$y(v1), t6.get$y(v2)), 0.5);
        if (typeof fcx !== "number")
          throw $.iae(fcx);
        if (typeof fcy !== "number")
          throw $.iae(fcy);
        if (normalIndex >= t3)
          throw $.ioore(normalIndex);
        norm = normals[normalIndex];
        t5 = $.getInterceptor$x(norm);
        t7 = t5.get$x(norm);
        if (typeof t7 !== "number")
          throw $.iae(t7);
        t5 = t5.get$y(norm);
        if (typeof t5 !== "number")
          throw $.iae(t5);
        if ((cLocalx - fcx) * t7 + (cLocaly - fcy) * t5 > radius)
          return;
        manifold.set$pointCount(1);
        t2 = $.getInterceptor$x(manifold);
        t2.set$type(manifold, 1);
        manifold.get$localNormal().copyFrom$1(normals[normalIndex]);
        manifold.get$localPoint().x = fcx;
        manifold.get$localPoint().y = fcy;
        $.$index$asx(t2.get$points(manifold), 0).get$localPoint().copyFrom$1(t1.get$position(circle));
        $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
      }
    }
  },
  collidePolygonAndCircle$5$bailout: function(state0, manifold, polygon, t8, circle, b, v1x, t1, t7, v1y, cLocaly, cLocalx, radius, vertexCount) {
    switch (state0) {
      case 0:
        manifold.set$pointCount(0);
        t1 = $.getInterceptor$x(circle);
        v = t1.get$position(circle);
        t2 = xfB.position;
        t3 = xfB.rotation;
        t4 = $.getInterceptor$x(v);
        cy = $.$add$ns($.$add$ns(t2.y, $.$mul$n($.get$y$x(t3.col0), t4.get$x(v))), $.$mul$n($.get$y$x(t3.col1), t4.get$y(v)));
        t5 = xfA.position;
        v1x = $.$sub$n($.$add$ns($.$add$ns(t2.x, $.$mul$n($.get$x$x(t3.col0), t4.get$x(v))), $.$mul$n($.get$x$x(t3.col1), t4.get$y(v))), t5.x);
        v1y = $.$sub$n(cy, t5.y);
        t6 = xfA.rotation;
        b = t6.col0;
        b1 = t6.col1;
        t6 = $.getInterceptor$x(b1);
        t7 = $.getInterceptor$n(v1x);
        t8 = $.getInterceptor$n(v1y);
        cLocaly = $.$add$ns(t7.$mul(v1x, t6.get$x(b1)), t8.$mul(v1y, t6.get$y(b1)));
      case 1:
        state0 = 0;
        t10 = $.getInterceptor$x(b);
        cLocalx = $.$add$ns(t7.$mul(v1x, t10.get$x(b)), t8.$mul(v1y, t10.get$y(b)));
      case 2:
        state0 = 0;
        radius = $.$add$ns(polygon.get$radius(), circle.get$radius());
      case 3:
        state0 = 0;
        vertexCount = polygon.get$vertexCount();
      case 4:
        var v, t2, t3, t4, cy, t5, t6, b1, t10, vertices, normals, normalIndex, separation, i, vertex, tempx, tempy, norm, s, vertIndex2, v1, v2, mpoint, tempX, tempY, temp2X, temp2Y, u1, temp3X, temp3Y, temp4X, temp4Y, u2, dx, dy, fcx, fcy, tx, ty;
        state0 = 0;
        vertices = polygon.get$vertices();
        normals = polygon.get$normals();
        for (t2 = vertices.length, t3 = $.getInterceptor$n(cLocalx), t4 = $.getInterceptor$n(cLocaly), t5 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; $.JSNumber_methods.$lt(i, vertexCount); ++i) {
          if (i >= t2)
            throw $.ioore(i);
          vertex = vertices[i];
          t6 = $.getInterceptor$x(vertex);
          tempx = t3.$sub(cLocalx, t6.get$x(vertex));
          tempy = t4.$sub(cLocaly, t6.get$y(vertex));
          if (i >= t5)
            throw $.ioore(i);
          norm = normals[i];
          t7 = $.getInterceptor$x(norm);
          s = $.$add$ns($.$mul$n(t7.get$x(norm), tempx), $.$mul$n(t7.get$y(norm), tempy));
          t6 = $.getInterceptor$n(s);
          if (t6.$gt(s, radius) === true)
            return;
          if (t6.$gt(s, separation) === true) {
            separation = s;
            normalIndex = i;
          }
        }
        vertIndex2 = normalIndex + 1;
        vertIndex2 = $.JSNumber_methods.$lt(vertIndex2, vertexCount) ? vertIndex2 : 0;
        if (normalIndex < 0 || normalIndex >= t2)
          throw $.ioore(normalIndex);
        v1 = vertices[normalIndex];
        if (vertIndex2 < 0 || vertIndex2 >= t2)
          throw $.ioore(vertIndex2);
        v2 = vertices[vertIndex2];
        if ($.$lt$n(separation, 1.192e-7)) {
          manifold.set$pointCount(1);
          t2 = $.getInterceptor$x(manifold);
          t2.set$type(manifold, 1);
          if (normalIndex >= t5)
            throw $.ioore(normalIndex);
          norm = normals[normalIndex];
          t3 = $.getInterceptor$x(norm);
          t4 = t3.get$x(norm);
          manifold.get$localNormal().x = t4;
          t3 = t3.get$y(norm);
          manifold.get$localNormal().y = t3;
          t3 = $.getInterceptor$x(v1);
          t4 = $.getInterceptor$x(v2);
          t6 = $.$mul$n($.$add$ns(t3.get$x(v1), t4.get$x(v2)), 0.5);
          manifold.get$localPoint().x = t6;
          t6 = $.$mul$n($.$add$ns(t3.get$y(v1), t4.get$y(v2)), 0.5);
          manifold.get$localPoint().y = t6;
          mpoint = $.$index$asx(t2.get$points(manifold), 0);
          t6 = $.get$x$x(t1.get$position(circle));
          mpoint.get$localPoint().x = t6;
          t6 = $.get$y$x(t1.get$position(circle));
          mpoint.get$localPoint().y = t6;
          $.get$id$x(mpoint).zero$0();
          return;
        }
        t2 = $.getInterceptor$x(v1);
        tempX = t3.$sub(cLocalx, t2.get$x(v1));
        tempY = t4.$sub(cLocaly, t2.get$y(v1));
        t6 = $.getInterceptor$x(v2);
        temp2X = $.$sub$n(t6.get$x(v2), t2.get$x(v1));
        temp2Y = $.$sub$n(t6.get$y(v2), t2.get$y(v1));
        u1 = $.$add$ns($.$mul$n(tempX, temp2X), $.$mul$n(tempY, temp2Y));
        temp3X = t3.$sub(cLocalx, t6.get$x(v2));
        temp3Y = t4.$sub(cLocaly, t6.get$y(v2));
        temp4X = $.$sub$n(t2.get$x(v1), t6.get$x(v2));
        temp4Y = $.$sub$n(t2.get$y(v1), t6.get$y(v2));
        u2 = $.$add$ns($.$mul$n(temp3X, temp4X), $.$mul$n(temp3Y, temp4Y));
        if ($.$le$n(u1, 0) === true) {
          dx = t3.$sub(cLocalx, t2.get$x(v1));
          dy = t4.$sub(cLocaly, t2.get$y(v1));
          if ($.$gt$n($.$add$ns($.$mul$n(dx, dx), $.$mul$n(dy, dy)), $.$mul$n(radius, radius)) === true)
            return;
          manifold.set$pointCount(1);
          t5 = $.getInterceptor$x(manifold);
          t5.set$type(manifold, 1);
          t3 = t3.$sub(cLocalx, t2.get$x(v1));
          manifold.get$localNormal().x = t3;
          t4 = t4.$sub(cLocaly, t2.get$y(v1));
          manifold.get$localNormal().y = t4;
          manifold.get$localNormal().normalize$0();
          manifold.get$localPoint().copyFrom$1(v1);
          $.$index$asx(t5.get$points(manifold), 0).get$localPoint().copyFrom$1(t1.get$position(circle));
          $.get$id$x($.$index$asx(t5.get$points(manifold), 0)).zero$0();
        } else {
          t7 = $.$le$n(u2, 0);
          t8 = t6.get$x(v2);
          if (t7 === true) {
            dx = t3.$sub(cLocalx, t8);
            dy = t4.$sub(cLocaly, t6.get$y(v2));
            if ($.$gt$n($.$add$ns($.$mul$n(dx, dx), $.$mul$n(dy, dy)), $.$mul$n(radius, radius)) === true)
              return;
            manifold.set$pointCount(1);
            t2 = $.getInterceptor$x(manifold);
            t2.set$type(manifold, 1);
            t3 = t3.$sub(cLocalx, t6.get$x(v2));
            manifold.get$localNormal().x = t3;
            t4 = t4.$sub(cLocaly, t6.get$y(v2));
            manifold.get$localNormal().y = t4;
            manifold.get$localNormal().normalize$0();
            manifold.get$localPoint().copyFrom$1(v2);
            $.$index$asx(t2.get$points(manifold), 0).get$localPoint().copyFrom$1(t1.get$position(circle));
            $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
          } else {
            fcx = $.$mul$n($.$add$ns(t2.get$x(v1), t8), 0.5);
            fcy = $.$mul$n($.$add$ns(t2.get$y(v1), t6.get$y(v2)), 0.5);
            tx = t3.$sub(cLocalx, fcx);
            ty = t4.$sub(cLocaly, fcy);
            if (normalIndex >= t5)
              throw $.ioore(normalIndex);
            norm = normals[normalIndex];
            t3 = $.getInterceptor$x(norm);
            if ($.$gt$n($.$add$ns($.$mul$n(tx, t3.get$x(norm)), $.$mul$n(ty, t3.get$y(norm))), radius) === true)
              return;
            manifold.set$pointCount(1);
            t2 = $.getInterceptor$x(manifold);
            t2.set$type(manifold, 1);
            manifold.get$localNormal().copyFrom$1(normals[normalIndex]);
            manifold.get$localPoint().x = fcx;
            manifold.get$localPoint().y = fcy;
            $.$index$asx(t2.get$points(manifold), 0).get$localPoint().copyFrom$1(t1.get$position(circle));
            $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
          }
        }
    }
  },
  edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
    var vertices1, normals1, count2, vertices2, R, v, t2, t4, t5, t8, normal1Worldy, t11, normal1Worldx, R1, t16, normal1x, t19, normal1y, t1, index, minDot, i, a, t3, dot_, v3, t7, t10, t12, v1y, t14, t18, v1x, v4, t21, t23, t25, t26, t28, t30, v2y, t33, t35, t37;
    if (edge1 !== (edge1 | 0))
      return this.edgeSeparation$5$bailout(1, poly1, xf1, edge1, poly2, xf2);
    poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    if (typeof count2 !== "number")
      return this.edgeSeparation$5$bailout(2, 0, xf1, edge1, poly2, xf2, vertices1, normals1, count2);
    vertices2 = poly2.get$vertices();
    R = xf1.rotation;
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    v = normals1[edge1];
    t2 = $.get$y$x(R.col0);
    if (t2 !== (t2 | 0))
      return this.edgeSeparation$5$bailout(3, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, v, R, vertices2, t2);
    t4 = $.getInterceptor$x(v);
    t5 = t4.get$x(v);
    if (t5 !== (t5 | 0))
      return this.edgeSeparation$5$bailout(4, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, v, R, vertices2, t2, t5, t4);
    t5 = t2 * t5;
    t2 = $.get$y$x(R.col1);
    if (t2 !== (t2 | 0))
      return this.edgeSeparation$5$bailout(6, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, v, R, vertices2, 0, t5, t4, t2);
    t8 = t4.get$y(v);
    if (t8 !== (t8 | 0))
      return this.edgeSeparation$5$bailout(7, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, v, R, vertices2, 0, t5, t4, t2, t8);
    normal1Worldy = t5 + t2 * t8;
    t5 = $.get$x$x(R.col0);
    if (t5 !== (t5 | 0))
      return this.edgeSeparation$5$bailout(10, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, v, R, vertices2, 0, t5, t4, 0, 0, normal1Worldy);
    t11 = t4.get$x(v);
    if (t11 !== (t11 | 0))
      return this.edgeSeparation$5$bailout(11, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, v, R, vertices2, 0, t5, t4, 0, 0, normal1Worldy, t11);
    t11 = t5 * t11;
    t5 = $.get$x$x(R.col1);
    if (t5 !== (t5 | 0))
      return this.edgeSeparation$5$bailout(13, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, v, R, vertices2, 0, 0, t4, 0, 0, normal1Worldy, t11, t5);
    t4 = t4.get$y(v);
    if (t4 !== (t4 | 0))
      return this.edgeSeparation$5$bailout(14, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, 0, R, vertices2, 0, 0, t4, 0, 0, normal1Worldy, t11, t5);
    normal1Worldx = t11 + t5 * t4;
    R1 = xf2.rotation;
    t11 = $.get$x$x(R1.col0);
    if (t11 !== (t11 | 0))
      return this.edgeSeparation$5$bailout(17, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, 0, R, vertices2, 0, 0, 0, 0, 0, normal1Worldy, t11, 0, normal1Worldx, R1);
    t11 = normal1Worldx * t11;
    t16 = $.get$y$x(R1.col0);
    if (t16 !== (t16 | 0))
      return this.edgeSeparation$5$bailout(19, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, 0, R, vertices2, 0, 0, 0, 0, 0, normal1Worldy, t11, 0, normal1Worldx, R1, $.JSInt_methods, t16);
    normal1x = t11 + normal1Worldy * t16;
    t11 = $.get$x$x(R1.col1);
    if (t11 !== (t11 | 0))
      return this.edgeSeparation$5$bailout(22, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, 0, R, vertices2, 0, 0, 0, 0, 0, normal1Worldy, t11, 0, normal1Worldx, R1, $.JSInt_methods, 0, $.JSInt_methods, normal1x);
    t11 = normal1Worldx * t11;
    t19 = $.get$y$x(R1.col1);
    if (t19 !== (t19 | 0))
      return this.edgeSeparation$5$bailout(24, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, 0, R, vertices2, 0, 0, 0, 0, 0, normal1Worldy, t11, 0, normal1Worldx, R1, 0, 0, $.JSInt_methods, normal1x, t19);
    normal1y = t11 + normal1Worldy * t19;
    for (t1 = vertices2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      a = vertices2[i];
      t2 = $.getInterceptor$x(a);
      t3 = t2.get$x(a);
      if (t3 !== (t3 | 0))
        return this.edgeSeparation$5$bailout(27, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, 0, R, vertices2, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, normal1x, 0, normal1y, i, t3, t1, a, index, minDot);
      t3 *= normal1x;
      t2 = t2.get$y(a);
      if (t2 !== (t2 | 0))
        return this.edgeSeparation$5$bailout(29, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, 0, R, vertices2, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, normal1x, 0, normal1y, i, t3, t1, 0, index, minDot);
      dot_ = t3 + t2 * normal1y;
      if (dot_ < minDot) {
        minDot = dot_;
        index = i;
      }
    }
    if (edge1 >= vertices1.length)
      throw $.ioore(edge1);
    v3 = vertices1[edge1];
    t2 = xf1.position;
    t3 = t2.y;
    if (typeof t3 !== "number")
      return this.edgeSeparation$5$bailout(32, 0, 0, 0, 0, xf2, 0, 0, 0, 0, R, vertices2, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, 0, 0, 0, t3, t1, 0, index, 0, 0, v3);
    t5 = $.get$y$x(R.col0);
    if (typeof t5 !== "number")
      return this.edgeSeparation$5$bailout(33, 0, 0, 0, 0, xf2, 0, 0, 0, 0, R, vertices2, t2, t5, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, 0, 0, 0, t3, t1, 0, index, 0, 0, v3);
    t7 = $.getInterceptor$x(v3);
    t8 = t7.get$x(v3);
    if (typeof t8 !== "number")
      return this.edgeSeparation$5$bailout(34, 0, 0, 0, 0, xf2, 0, 0, 0, 0, R, vertices2, t2, t5, 0, t7, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, 0, 0, 0, t3, t1, 0, index, 0, 0, v3, t8);
    t3 += t5 * t8;
    t10 = $.get$y$x(R.col1);
    if (typeof t10 !== "number")
      return this.edgeSeparation$5$bailout(35, 0, 0, 0, 0, xf2, 0, 0, 0, 0, R, vertices2, t2, 0, 0, t7, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, 0, 0, 0, t3, t1, 0, index, 0, 0, v3, 0, t10);
    t12 = t7.get$y(v3);
    if (typeof t12 !== "number")
      return this.edgeSeparation$5$bailout(36, 0, 0, 0, 0, xf2, 0, 0, 0, 0, R, vertices2, t2, 0, 0, t7, 0, normal1Worldy, t12, 0, normal1Worldx, R1, 0, 0, 0, 0, 0, 0, 0, t3, t1, 0, index, 0, 0, v3, 0, t10);
    v1y = t3 + t10 * t12;
    t2 = t2.x;
    if (typeof t2 !== "number")
      return this.edgeSeparation$5$bailout(37, 0, 0, 0, 0, xf2, 0, 0, 0, 0, R, vertices2, t2, 0, 0, t7, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, index, 0, 0, v3, 0, 0, v1y);
    t14 = $.get$x$x(R.col0);
    if (typeof t14 !== "number")
      return this.edgeSeparation$5$bailout(38, 0, 0, 0, 0, xf2, 0, 0, 0, 0, R, vertices2, t2, 0, 0, t7, 0, normal1Worldy, 0, t14, normal1Worldx, R1, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, index, 0, 0, v3, 0, 0, v1y);
    t16 = t7.get$x(v3);
    if (typeof t16 !== "number")
      return this.edgeSeparation$5$bailout(39, 0, 0, 0, 0, xf2, 0, 0, 0, 0, R, vertices2, t2, 0, 0, t7, 0, normal1Worldy, 0, t14, normal1Worldx, R1, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, index, 0, 0, v3, 0, 0, v1y, t16);
    t2 += t14 * t16;
    t18 = $.get$x$x(R.col1);
    if (typeof t18 !== "number")
      return this.edgeSeparation$5$bailout(40, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, vertices2, t2, 0, 0, t7, 0, normal1Worldy, 0, 0, normal1Worldx, R1, t18, 0, 0, 0, 0, 0, 0, 0, t1, 0, index, 0, 0, v3, 0, 0, v1y);
    t7 = t7.get$y(v3);
    if (typeof t7 !== "number")
      return this.edgeSeparation$5$bailout(41, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, vertices2, t2, 0, 0, t7, 0, normal1Worldy, 0, 0, normal1Worldx, R1, t18, 0, 0, 0, 0, 0, 0, 0, t1, 0, index, 0, 0, 0, 0, 0, v1y);
    v1x = t2 + t18 * t7;
    if (index < 0 || index >= t1)
      throw $.ioore(index);
    v4 = vertices2[index];
    t2 = xf2.position;
    t21 = t2.y;
    if (typeof t21 !== "number")
      return this.edgeSeparation$5$bailout(42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1y, 0, t21, v1x, v4);
    t23 = $.get$y$x(R1.col0);
    if (typeof t23 !== "number")
      return this.edgeSeparation$5$bailout(43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1y, 0, t21, v1x, v4, t23);
    t25 = $.getInterceptor$x(v4);
    t26 = t25.get$x(v4);
    if (typeof t26 !== "number")
      return this.edgeSeparation$5$bailout(44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1y, 0, t21, v1x, v4, t23, t26);
    t21 += t23 * t26;
    t28 = $.get$y$x(R1.col1);
    if (typeof t28 !== "number")
      return this.edgeSeparation$5$bailout(45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1y, 0, t21, v1x, v4, 0, 0, t28);
    t30 = t25.get$y(v4);
    if (typeof t30 !== "number")
      return this.edgeSeparation$5$bailout(46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1y, 0, t21, v1x, v4, 0, 0, t28, t30);
    v2y = t21 + t28 * t30 - v1y;
    t2 = t2.x;
    if (typeof t2 !== "number")
      return this.edgeSeparation$5$bailout(47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1x, v4, 0, 0, 0, 0, v2y);
    t33 = $.get$x$x(R1.col0);
    if (typeof t33 !== "number")
      return this.edgeSeparation$5$bailout(48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1x, v4, 0, 0, 0, 0, v2y, t33);
    t35 = t25.get$x(v4);
    if (typeof t35 !== "number")
      return this.edgeSeparation$5$bailout(49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, R1, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1x, v4, 0, 0, 0, 0, v2y, t33, t35);
    t2 += t33 * t35;
    t37 = $.get$x$x(R1.col1);
    if (typeof t37 !== "number")
      return this.edgeSeparation$5$bailout(50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, 0, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1x, v4, 0, 0, 0, 0, v2y, 0, 0, t37);
    t25 = t25.get$y(v4);
    if (typeof t25 !== "number")
      return this.edgeSeparation$5$bailout(51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, normal1Worldy, 0, 0, normal1Worldx, 0, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1x, 0, 0, 0, 0, 0, v2y, 0, 0, t37);
    return (t2 + t37 * t25 - v1x) * normal1Worldx + v2y * normal1Worldy;
  },
  edgeSeparation$5$bailout: function(state0, poly1, xf1, edge1, poly2, xf2, vertices1, normals1, count2, v, R, vertices2, t2, t5, t4, t7, t9, normal1Worldy, t12, t14, normal1Worldx, R1, t18, t20, t22, normal1x, t25, normal1y, i, t3, t1, a, index, minDot, dot_, v3, t8, t10, v1y, t16, t21, v1x, v4, t23, t26, t28, t30, v2y, t33, t35, t37) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        poly1.get$vertexCount();
        vertices1 = poly1.get$vertices();
        normals1 = poly1.get$normals();
        count2 = poly2.get$vertexCount();
      case 2:
        state0 = 0;
        vertices2 = poly2.get$vertices();
        R = xf1.rotation;
        if (edge1 !== (edge1 | 0))
          throw $.iae(edge1);
        if (edge1 < 0 || edge1 >= normals1.length)
          throw $.ioore(edge1);
        v = normals1[edge1];
        t2 = $.get$y$x(R.col0);
      case 3:
        state0 = 0;
        t4 = $.getInterceptor$x(v);
        t5 = t4.get$x(v);
      case 4:
        state0 = 0;
        t5 = $.$mul$n(t2, t5);
      case 5:
        state0 = 0;
        t7 = $.get$y$x(R.col1);
      case 6:
        state0 = 0;
        t9 = t4.get$y(v);
      case 7:
        state0 = 0;
        t9 = $.$mul$n(t7, t9);
      case 8:
        state0 = 0;
        normal1Worldy = $.$add$ns(t5, t9);
      case 9:
        state0 = 0;
        t5 = $.get$x$x(R.col0);
      case 10:
        state0 = 0;
        t12 = t4.get$x(v);
      case 11:
        state0 = 0;
        t12 = $.$mul$n(t5, t12);
      case 12:
        state0 = 0;
        t14 = $.get$x$x(R.col1);
      case 13:
        state0 = 0;
        t4 = t4.get$y(v);
      case 14:
        state0 = 0;
        t4 = $.$mul$n(t14, t4);
      case 15:
        state0 = 0;
        normal1Worldx = $.$add$ns(t12, t4);
      case 16:
        state0 = 0;
        R1 = xf2.rotation;
        t12 = $.get$x$x(R1.col0);
      case 17:
        state0 = 0;
        t18 = $.getInterceptor$n(normal1Worldx);
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t12 = t18.$mul(normal1Worldx, t12);
      case 18:
        state0 = 0;
        t20 = $.get$y$x(R1.col0);
      case 19:
        state0 = 0;
        t22 = $.getInterceptor$n(normal1Worldy);
        if (typeof t20 !== "number")
          throw $.iae(t20);
        t20 = t22.$mul(normal1Worldy, t20);
      case 20:
        state0 = 0;
        normal1x = $.$add$ns(t12, t20);
      case 21:
        state0 = 0;
        t12 = $.get$x$x(R1.col1);
      case 22:
        state0 = 0;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t12 = t18.$mul(normal1Worldx, t12);
      case 23:
        state0 = 0;
        t25 = $.get$y$x(R1.col1);
      case 24:
        state0 = 0;
        if (typeof t25 !== "number")
          throw $.iae(t25);
        t25 = t22.$mul(normal1Worldy, t25);
      case 25:
        state0 = 0;
        normal1y = $.$add$ns(t12, t25);
      case 26:
        state0 = 0;
        t1 = vertices2.length;
        index = 0;
        minDot = 99999999999999;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.JSNumber_methods.$lt(i, count2))
                  break L0;
                if (i >= t1)
                  throw $.ioore(i);
                a = vertices2[i];
                t2 = $.getInterceptor$x(a);
                t3 = t2.get$x(a);
              case 27:
                state0 = 0;
                t3 = $.$mul$n(t3, normal1x);
              case 28:
                state0 = 0;
                t2 = t2.get$y(a);
              case 29:
                state0 = 0;
                t2 = $.$mul$n(t2, normal1y);
              case 30:
                state0 = 0;
                dot_ = $.$add$ns(t3, t2);
              case 31:
                state0 = 0;
                if ($.$lt$n(dot_, minDot) === true) {
                  minDot = dot_;
                  index = i;
                }
                ++i;
            }
        if (edge1 >= vertices1.length)
          throw $.ioore(edge1);
        v3 = vertices1[edge1];
        t2 = xf1.position;
        t3 = t2.y;
      case 32:
        state0 = 0;
        t5 = $.get$y$x(R.col0);
      case 33:
        state0 = 0;
        t7 = $.getInterceptor$x(v3);
        t8 = t7.get$x(v3);
      case 34:
        state0 = 0;
        t3 = $.$add$ns(t3, $.$mul$n(t5, t8));
        t10 = $.get$y$x(R.col1);
      case 35:
        state0 = 0;
        t12 = t7.get$y(v3);
      case 36:
        state0 = 0;
        v1y = $.$add$ns(t3, $.$mul$n(t10, t12));
        t2 = t2.x;
      case 37:
        state0 = 0;
        t14 = $.get$x$x(R.col0);
      case 38:
        state0 = 0;
        t16 = t7.get$x(v3);
      case 39:
        state0 = 0;
        t2 = $.$add$ns(t2, $.$mul$n(t14, t16));
        t18 = $.get$x$x(R.col1);
      case 40:
        state0 = 0;
        t7 = t7.get$y(v3);
      case 41:
        state0 = 0;
        v1x = $.$add$ns(t2, $.$mul$n(t18, t7));
        if (index < 0 || index >= t1)
          throw $.ioore(index);
        v4 = vertices2[index];
        t2 = xf2.position;
        t21 = t2.y;
      case 42:
        state0 = 0;
        t23 = $.get$y$x(R1.col0);
      case 43:
        state0 = 0;
        t25 = $.getInterceptor$x(v4);
        t26 = t25.get$x(v4);
      case 44:
        state0 = 0;
        t21 = $.$add$ns(t21, $.$mul$n(t23, t26));
        t28 = $.get$y$x(R1.col1);
      case 45:
        state0 = 0;
        t30 = t25.get$y(v4);
      case 46:
        state0 = 0;
        v2y = $.$sub$n($.$add$ns(t21, $.$mul$n(t28, t30)), v1y);
        t2 = t2.x;
      case 47:
        state0 = 0;
        t33 = $.get$x$x(R1.col0);
      case 48:
        state0 = 0;
        t35 = t25.get$x(v4);
      case 49:
        state0 = 0;
        t2 = $.$add$ns(t2, $.$mul$n(t33, t35));
        t37 = $.get$x$x(R1.col1);
      case 50:
        state0 = 0;
        t25 = t25.get$y(v4);
      case 51:
        state0 = 0;
        return $.$add$ns($.$mul$n($.$sub$n($.$add$ns(t2, $.$mul$n(t37, t25)), v1x), normal1Worldx), $.$mul$n(v2y, normal1Worldy));
    }
  },
  findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
    var count1, normals1, v, t2, t3, predy, predx, v1, t4, t5, tempy, dx, dy, t6, t7, dLocal1x, dLocal1y, t1, edge, maxDot, i, norm, dot_, s, prevEdge, sPrev, nextEdge, sNext, bestSeparation, bestEdge, increment, edge0;
    count1 = poly1.get$vertexCount();
    if (typeof count1 !== "number")
      return this.findMaxSeparation$5$bailout(1, results, poly1, xf1, poly2, xf2, count1);
    normals1 = poly1.get$normals();
    v = poly2.get$centroid();
    t2 = xf2.position;
    t3 = xf2.rotation;
    predy = $.$add$ns($.$add$ns(t2.y, $.$mul$n($.get$y$x(t3.col0), v.x)), $.$mul$n($.get$y$x(t3.col1), v.y));
    predx = $.$add$ns($.$add$ns(t2.x, $.$mul$n($.get$x$x(t3.col0), v.x)), $.$mul$n($.get$x$x(t3.col1), v.y));
    v1 = poly1.get$centroid();
    t4 = xf1.position;
    t5 = xf1.rotation;
    tempy = $.$add$ns($.$add$ns(t4.y, $.$mul$n($.get$y$x(t5.col0), v1.x)), $.$mul$n($.get$y$x(t5.col1), v1.y));
    dx = $.$sub$n(predx, $.$add$ns($.$add$ns(t4.x, $.$mul$n($.get$x$x(t5.col0), v1.x)), $.$mul$n($.get$x$x(t5.col1), v1.y)));
    dy = $.$sub$n(predy, tempy);
    t6 = $.getInterceptor$n(dx);
    t7 = $.getInterceptor$n(dy);
    dLocal1x = $.$add$ns(t6.$mul(dx, $.get$x$x(t5.col0)), t7.$mul(dy, $.get$y$x(t5.col0)));
    if (typeof dLocal1x !== "number")
      return this.findMaxSeparation$5$bailout(2, results, poly1, xf1, poly2, xf2, count1, dLocal1x, normals1, t6, t7, t5, dx, dy);
    dLocal1y = $.$add$ns(t6.$mul(dx, $.get$x$x(t5.col1)), t7.$mul(dy, $.get$y$x(t5.col1)));
    if (typeof dLocal1y !== "number")
      return this.findMaxSeparation$5$bailout(3, results, poly1, xf1, poly2, xf2, count1, dLocal1x, normals1, 0, 0, 0, 0, 0, dLocal1y);
    for (t1 = normals1.length, edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      norm = normals1[i];
      t2 = $.getInterceptor$x(norm);
      dot_ = $.$add$ns($.$mul$n(t2.get$x(norm), dLocal1x), $.$mul$n(t2.get$y(norm), dLocal1y));
      if ($.$gt$n(dot_, maxDot) === true) {
        maxDot = dot_;
        edge = i;
      }
    }
    s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
    prevEdge = edge - 1;
    prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
    sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
    nextEdge = edge + 1;
    nextEdge = nextEdge < count1 ? nextEdge : 0;
    sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
    t1 = $.getInterceptor$n(sPrev);
    if (t1.$gt(sPrev, s) === true && t1.$gt(sPrev, sNext) === true) {
      bestSeparation = sPrev;
      bestEdge = prevEdge;
      increment = -1;
    } else {
      if ($.$gt$n(sNext, s) === true)
        ;
      else {
        results.edgeIndex = edge;
        results.separation = s;
        return;
      }
      bestSeparation = sNext;
      bestEdge = nextEdge;
      increment = 1;
    }
    if (typeof bestSeparation !== "number")
      return this.findMaxSeparation$5$bailout(4, results, poly1, xf1, poly2, xf2, count1, 0, 0, 0, 0, 0, 0, 0, 0, bestEdge, bestSeparation, increment);
    for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
      if (t1) {
        edge0 = bestEdge - 1;
        edge0 = edge0 >= 0 ? edge0 : edge;
      } else {
        edge0 = bestEdge + 1;
        edge0 = edge0 < count1 ? edge0 : 0;
      }
      s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
      if ($.$gt$n(s, bestSeparation) === true)
        ;
      else
        break;
    }
    results.edgeIndex = bestEdge;
    results.separation = bestSeparation;
  },
  findMaxSeparation$5$bailout: function(state0, results, poly1, xf1, poly2, xf2, count1, dLocal1x, normals1, t6, t7, t5, dx, dy, dLocal1y, bestEdge, bestSeparation, increment) {
    switch (state0) {
      case 0:
        count1 = poly1.get$vertexCount();
      case 1:
        state0 = 0;
        normals1 = poly1.get$normals();
        v = poly2.get$centroid();
        t2 = xf2.position;
        t3 = xf2.rotation;
        predy = $.$add$ns($.$add$ns(t2.y, $.$mul$n($.get$y$x(t3.col0), v.x)), $.$mul$n($.get$y$x(t3.col1), v.y));
        predx = $.$add$ns($.$add$ns(t2.x, $.$mul$n($.get$x$x(t3.col0), v.x)), $.$mul$n($.get$x$x(t3.col1), v.y));
        v1 = poly1.get$centroid();
        t4 = xf1.position;
        t5 = xf1.rotation;
        tempy = $.$add$ns($.$add$ns(t4.y, $.$mul$n($.get$y$x(t5.col0), v1.x)), $.$mul$n($.get$y$x(t5.col1), v1.y));
        dx = $.$sub$n(predx, $.$add$ns($.$add$ns(t4.x, $.$mul$n($.get$x$x(t5.col0), v1.x)), $.$mul$n($.get$x$x(t5.col1), v1.y)));
        dy = $.$sub$n(predy, tempy);
        t6 = $.getInterceptor$n(dx);
        t7 = $.getInterceptor$n(dy);
        dLocal1x = $.$add$ns(t6.$mul(dx, $.get$x$x(t5.col0)), t7.$mul(dy, $.get$y$x(t5.col0)));
      case 2:
        state0 = 0;
        dLocal1y = $.$add$ns(t6.$mul(dx, $.get$x$x(t5.col1)), t7.$mul(dy, $.get$y$x(t5.col1)));
      case 3:
        state0 = 0;
        for (t1 = normals1.length, edge = 0, maxDot = 1e-12, i = 0; $.JSNumber_methods.$lt(i, count1); ++i) {
          if (i >= t1)
            throw $.ioore(i);
          norm = normals1[i];
          t2 = $.getInterceptor$x(norm);
          dot_ = $.$add$ns($.$mul$n(t2.get$x(norm), dLocal1x), $.$mul$n(t2.get$y(norm), dLocal1y));
          if ($.$gt$n(dot_, maxDot) === true) {
            maxDot = dot_;
            edge = i;
          }
        }
        s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
        prevEdge = edge - 1;
        prevEdge = prevEdge >= 0 ? prevEdge : $.$sub$n(count1, 1);
        sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
        nextEdge = edge + 1;
        nextEdge = $.JSNumber_methods.$lt(nextEdge, count1) ? nextEdge : 0;
        sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
        t1 = $.getInterceptor$n(sPrev);
        if (t1.$gt(sPrev, s) === true && t1.$gt(sPrev, sNext) === true) {
          bestSeparation = sPrev;
          bestEdge = prevEdge;
          increment = -1;
        } else {
          if ($.$gt$n(sNext, s) === true)
            ;
          else {
            results.edgeIndex = edge;
            results.separation = s;
            return;
          }
          bestSeparation = sNext;
          bestEdge = nextEdge;
          increment = 1;
        }
      case 4:
        var v, t2, t3, predy, predx, v1, t4, tempy, t1, edge, maxDot, i, norm, dot_, s, prevEdge, sPrev, nextEdge, sNext;
        state0 = 0;
        for (t1 = increment === -1, t2 = $.getInterceptor$n(count1); true; bestSeparation = s, bestEdge = edge) {
          if (t1) {
            t3 = $.getInterceptor$n(bestEdge);
            edge = $.$ge$n(t3.$sub(bestEdge, 1), 0) === true ? t3.$sub(bestEdge, 1) : t2.$sub(count1, 1);
          } else {
            t3 = $.getInterceptor$ns(bestEdge);
            edge = $.$lt$n(t3.$add(bestEdge, 1), count1) === true ? t3.$add(bestEdge, 1) : 0;
          }
          s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
          if ($.$gt$n(s, bestSeparation) === true)
            ;
          else
            break;
        }
        results.edgeIndex = bestEdge;
        results.separation = bestSeparation;
    }
  },
  findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
    var normals1, count2, vertices2, normals2, t2, t3, t1, index, minDot, i, dot_, i2;
    poly1.get$vertexCount();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    if (typeof count2 !== "number")
      return this.findIncidentEdge$6$bailout(1, c, xf1, edge1, poly2, xf2, normals1, count2);
    vertices2 = poly2.get$vertices();
    normals2 = poly2.get$normals();
    if (edge1 !== (edge1 | 0))
      throw $.iae(edge1);
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    t2 = this.normal1;
    xf1.rotation.transformed$2(normals1[edge1], t2);
    t3 = xf2.rotation.transposed$0();
    t3.transform$1(t3, t2);
    for (t1 = normals2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      dot_ = t2.dot$1(normals2[i]);
      if (dot_ < minDot) {
        minDot = dot_;
        index = i;
      }
    }
    i2 = index + 1;
    i2 = i2 < count2 ? i2 : 0;
    t1 = vertices2.length;
    if (index < 0 || index >= t1)
      throw $.ioore(index);
    t2 = vertices2[index];
    t3 = c.length;
    if (0 >= t3)
      throw $.ioore(0);
    $.Transform_mulToOut(xf2, t2, c[0].get$v());
    $.get$id$x(c[0]).get$features().referenceEdge = edge1;
    $.get$id$x(c[0]).get$features().incidentEdge = index;
    $.get$id$x(c[0]).get$features().incidentVertex = 0;
    if (i2 < 0 || i2 >= t1)
      throw $.ioore(i2);
    t2 = vertices2[i2];
    if (1 >= t3)
      throw $.ioore(1);
    $.Transform_mulToOut(xf2, t2, c[1].get$v());
    $.get$id$x(c[1]).get$features().referenceEdge = edge1;
    $.get$id$x(c[1]).get$features().incidentEdge = i2;
    $.get$id$x(c[1]).get$features().incidentVertex = 1;
  },
  findIncidentEdge$6$bailout: function(state0, c, xf1, edge1, poly2, xf2, normals1, count2) {
    var vertices2, normals2, t2, t3, t1, index, minDot, i, dot_, i2;
    vertices2 = poly2.get$vertices();
    normals2 = poly2.get$normals();
    if (edge1 !== (edge1 | 0))
      throw $.iae(edge1);
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    t2 = this.normal1;
    xf1.rotation.transformed$2(normals1[edge1], t2);
    t3 = xf2.rotation.transposed$0();
    t3.transform$1(t3, t2);
    for (t1 = normals2.length, index = 0, minDot = 99999999999999, i = 0; $.JSNumber_methods.$lt(i, count2); ++i) {
      if (i >= t1)
        throw $.ioore(i);
      dot_ = t2.dot$1(normals2[i]);
      if (dot_ < minDot) {
        minDot = dot_;
        index = i;
      }
    }
    i2 = index + 1;
    i2 = $.JSNumber_methods.$lt(i2, count2) ? i2 : 0;
    t1 = vertices2.length;
    if (index < 0 || index >= t1)
      throw $.ioore(index);
    t2 = vertices2[index];
    t3 = c.length;
    if (0 >= t3)
      throw $.ioore(0);
    $.Transform_mulToOut(xf2, t2, c[0].get$v());
    $.get$id$x(c[0]).get$features().referenceEdge = edge1;
    $.get$id$x(c[0]).get$features().incidentEdge = index;
    $.get$id$x(c[0]).get$features().incidentVertex = 0;
    if (i2 < 0 || i2 >= t1)
      throw $.ioore(i2);
    t2 = vertices2[i2];
    if (1 >= t3)
      throw $.ioore(1);
    $.Transform_mulToOut(xf2, t2, c[1].get$v());
    $.get$id$x(c[1]).get$features().referenceEdge = edge1;
    $.get$id$x(c[1]).get$features().incidentEdge = i2;
    $.get$id$x(c[1]).get$features().incidentVertex = 1;
  },
  collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
    var totalRadius, t1, t2, t3, t4, t5, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t6, t7, frontOffset, t8, np, pointCount, i, cp;
    manifold.set$pointCount(0);
    totalRadius = $.$add$ns(polyA.get$radius(), polyB.get$radius());
    t1 = this.results1;
    this.findMaxSeparation$5(t1, polyA, xfA, polyB, xfB);
    if ($.$gt$n(t1.separation, totalRadius) === true)
      return;
    t2 = this.results2;
    this.findMaxSeparation$5(t2, polyB, xfB, polyA, xfA);
    if ($.$gt$n(t2.separation, totalRadius) === true)
      return;
    t3 = t2.separation;
    t4 = t1.separation;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = $.getInterceptor$x(manifold);
    if ($.$gt$n(t3, 0.98 * t4 + 0.001) === true) {
      edge1 = t2.edgeIndex;
      t5.set$type(manifold, 2);
      xf2 = xfA;
      xf1 = xfB;
      poly2 = polyA;
      poly1 = polyB;
      flip = 1;
    } else {
      edge1 = t1.edgeIndex;
      t5.set$type(manifold, 1);
      xf2 = xfB;
      xf1 = xfA;
      poly2 = polyB;
      poly1 = polyA;
      flip = 0;
    }
    t1 = this.incidentEdge;
    this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
    count1 = poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    t2 = this.v11;
    if (edge1 !== (edge1 | 0))
      throw $.iae(edge1);
    t3 = vertices1.length;
    if (edge1 < 0 || edge1 >= t3)
      throw $.ioore(edge1);
    t2.copyFrom$1(vertices1[edge1]);
    t4 = this.v12;
    t5 = edge1 + 1;
    if ($.JSNumber_methods.$lt(t5, count1)) {
      if (t5 >= t3)
        throw $.ioore(t5);
      t5 = vertices1[t5];
      t3 = t5;
    } else {
      if (0 >= t3)
        throw $.ioore(0);
      t5 = vertices1[0];
      t3 = t5;
    }
    t4.copyFrom$1(t3);
    t3 = this.localTangent;
    t3.copyFrom$1(t4).sub$1(t2);
    t3.normalize$0();
    t5 = this.localNormal;
    $.cross(t3, 1, t5);
    t6 = this.planePoint;
    t7 = t6.copyFrom$1(t2);
    t7 = t7.add$1(t7, t4);
    t7.scale$1(t7, 0.5);
    t7 = this.tangent;
    xf1.rotation.transformed$2(t3, t7);
    t3 = this.normal;
    $.cross(t7, 1, t3);
    $.Transform_mulToOut(xf1, t2, t2);
    $.Transform_mulToOut(xf1, t4, t4);
    frontOffset = t3.dot$1(t2);
    t2 = t7.dot$1(t2);
    if (typeof totalRadius !== "number")
      throw $.iae(totalRadius);
    t7.negate$0();
    t8 = this.clipPoints1;
    np = $.Collision_clipSegmentToLine(t8, t1, t7, -t2 + totalRadius);
    t7.negate$0();
    if (np < 2)
      return;
    t1 = this.clipPoints2;
    if ($.Collision_clipSegmentToLine(t1, t8, t7, t7.dot$1(t4) + totalRadius) < 2)
      return;
    manifold.get$localNormal().copyFrom$1(t5);
    manifold.get$localPoint().copyFrom$1(t6);
    for (t2 = $.getInterceptor$x(manifold), t4 = t1.length, pointCount = 0, i = 0; i < 2; ++i) {
      if (i >= t4)
        throw $.ioore(i);
      if (t3.dot$1(t1[i].get$v()) - frontOffset <= totalRadius) {
        cp = $.$index$asx(t2.get$points(manifold), pointCount);
        $.Transform_mulTransToOut(xf2, t1[i].get$v(), cp.get$localPoint());
        t5 = $.getInterceptor$x(cp);
        t5.get$id(cp).setFrom$1($.get$id$x(t1[i]));
        t5.get$id(cp).get$features().flip = flip;
        ++pointCount;
      }
    }
    manifold.set$pointCount(pointCount);
  },
  Collision$_construct$1: function(pool) {
    var t1, t2, t3, t4, t5;
    t1 = this.incidentEdge;
    t2 = $.ClipVertex$();
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t2;
    t2 = $.ClipVertex$();
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.clipPoints1;
    t1 = $.ClipVertex$();
    t4 = t2.length;
    if (0 >= t4)
      throw $.ioore(0);
    t2[0] = t1;
    t1 = $.ClipVertex$();
    if (1 >= t4)
      throw $.ioore(1);
    t2[1] = t1;
    t1 = this.clipPoints2;
    t2 = $.ClipVertex$();
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t2;
    t2 = $.ClipVertex$();
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2;
  }
};

$$.ClipVertex = {"": "Object;v<,id>",
  setFrom$1: function(cv) {
    this.v.copyFrom$1(cv.get$v());
    this.id.setFrom$1($.get$id$x(cv));
  }
};

$$.EdgeResults = {"": "Object;separation,edgeIndex"};

$$.ContactID = {"": "Object;features<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = other.get$features();
    return t1.$eq(t1, this.features);
  },
  setFrom$1: function(other) {
    this.features.setFrom$1(other.get$features());
  },
  isEqual$1: function(other) {
    var t1 = other.get$features();
    return t1.$eq(t1, this.features);
  },
  zero$0: function() {
    this.features.zero$0();
  }
};

$$.Distance = {"": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal<",
  computeDistance$3: function(output, cache, input) {
    var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, iter, saveCount, i, t12, vertex, t13, t14, t15, duplicate, rA, rB;
    this.calls = this.calls + 1;
    proxyA = input.proxyA;
    proxyB = input.proxyB;
    transformA = input.transformA;
    transformB = input.transformB;
    t1 = this.simplex;
    t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
    vertices = t1.vertices;
    t2 = this.closestPoint;
    t1.getClosestPoint$1(t2);
    t2.get$length2();
    for (t3 = this.saveB, t4 = t3.length, t5 = this.saveA, t6 = t5.length, t7 = vertices.length, t8 = transformA.rotation, t9 = this.searchDirection, t10 = this.temp, t11 = transformB.rotation, iter = 0; iter < this.maxIters;) {
      saveCount = t1.count;
      for (i = 0; $.JSNumber_methods.$lt(i, saveCount); ++i) {
        if (i >= t7)
          throw $.ioore(i);
        t12 = vertices[i].get$indexA();
        if (i >= t6)
          throw $.ioore(i);
        t5[i] = t12;
        t12 = vertices[i].get$indexB();
        if (i >= t4)
          throw $.ioore(i);
        t3[i] = t12;
      }
      switch (t1.count) {
        case 1:
          break;
        case 2:
          t1.solve2$0();
          break;
        case 3:
          t1.solve3$0();
          break;
        default:
          return;
      }
      if ($.$eq(t1.count, 3) === true)
        break;
      t1.getClosestPoint$1(t2);
      t2.get$length2();
      t1.getSearchDirection$1(t9);
      if (t9.get$length2() < 1.4208639999999999e-14)
        break;
      t12 = t1.count;
      if (t12 !== (t12 | 0))
        throw $.iae(t12);
      if (t12 < 0 || t12 >= t7)
        throw $.ioore(t12);
      vertex = vertices[t12];
      t8.transposed$0().transformed$2(t9.negate$0(), t10);
      vertex.set$indexA(proxyA.getSupport$1(t10));
      t12 = proxyA.get$vertices();
      t13 = vertex.get$indexA();
      if (t13 !== (t13 | 0))
        throw $.iae(t13);
      if (t13 < 0 || t13 >= t12.length)
        throw $.ioore(t13);
      $.Transform_mulToOut(transformA, t12[t13], vertex.get$wA());
      t11.transposed$0().transformed$2(t9.negate$0(), t10);
      vertex.set$indexB(proxyB.getSupport$1(t10));
      t14 = proxyB.get$vertices();
      t15 = vertex.get$indexB();
      if (t15 !== (t15 | 0))
        throw $.iae(t15);
      if (t15 < 0 || t15 >= t14.length)
        throw $.ioore(t15);
      $.Transform_mulToOut(transformB, t14[t15], vertex.get$wB());
      vertex.get$w().copyFrom$1(vertex.get$wB()).sub$1(vertex.get$wA());
      ++iter;
      this.iters = this.iters + 1;
      for (i = 0; duplicate = false, $.JSNumber_methods.$lt(i, saveCount); ++i) {
        t12 = vertex.get$indexA();
        if (i >= t6)
          throw $.ioore(i);
        if ($.$eq(t12, t5[i]) === true) {
          t12 = vertex.get$indexB();
          if (i >= t4)
            throw $.ioore(i);
          t13 = $.$eq(t12, t3[i]) === true;
          t12 = t13;
        } else
          t12 = false;
        if (t12) {
          duplicate = true;
          break;
        }
      }
      if (duplicate)
        break;
      t1.count = $.$add$ns(t1.count, 1);
    }
    this.maxIters = $.max(this.maxIters, iter);
    t2 = output.pointA;
    t3 = output.pointB;
    t1.getWitnessPoints$2(t2, t3);
    t4 = t2.$sub(t2, t3);
    output._distance = t4.get$length(t4);
    output.iterations = iter;
    t1.writeCache$1(cache);
    if (input.useRadii) {
      rA = proxyA.get$radius();
      rB = proxyB.get$radius();
      t1 = $.getInterceptor$ns(rA);
      if ($.$gt$n(output._distance, t1.$add(rA, rB)) === true && $.$gt$n(output._distance, 1.192e-7) === true) {
        output._distance = $.$sub$n(output._distance, t1.$add(rA, rB));
        t4 = this.normal;
        t4.copyFrom$1(t3).sub$1(t2);
        t4.normalize$0();
        t5 = t10.copyFrom$1(t4);
        t5.scale$1(t5, rA);
        t2.add$1(t2, t10);
        t4 = t10.copyFrom$1(t4);
        t4.scale$1(t4, rB);
        t3.sub$1(t10);
      } else {
        t1 = t2.add$1(t2, t3);
        t1.scale$1(t1, 0.5);
        t3.copyFrom$1(t2);
        output._distance = 0;
      }
    }
  }
};

$$.DistanceInput = {"": "Object;proxyA@,proxyB@,transformA,transformB,useRadii"};

$$.DistanceOutput = {"": "Object;pointA,pointB,_distance,iterations"};

$$.DistanceProxy = {"": "Object;vertices<,count<,radius@",
  setFromShape$1: function(shape) {
    var t1, t2, i, t3, t4;
    t1 = $.getInterceptor$x(shape);
    t2 = t1.get$type(shape);
    if (typeof t2 !== "number")
      return this.setFromShape$1$bailout(1, shape, t1, t2);
    if (t2 === 0) {
      t2 = this.vertices;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2[0].copyFrom$1(t1.get$position(shape));
      this.count = 1;
      this.radius = shape.get$radius();
    } else {
      t1 = t1.get$type(shape);
      if (typeof t1 !== "number")
        return this.setFromShape$1$bailout(2, shape, t1);
      if (t1 === 1) {
        this.count = shape.get$vertexCount();
        this.radius = shape.get$radius();
        t1 = this.vertices;
        t2 = t1.length;
        i = 0;
        while (true) {
          t3 = this.count;
          if (typeof t3 !== "number")
            return this.setFromShape$1$bailout(3, shape, t1, t2, t3, i);
          if (!(i < t3))
            break;
          if (i >= t2)
            throw $.ioore(i);
          t3 = t1[i];
          t4 = shape.get$vertices();
          if (i >= t4.length)
            throw $.ioore(i);
          t3.copyFrom$1(t4[i]);
          ++i;
        }
      }
    }
  },
  setFromShape$1$bailout: function(state0, shape, t1, t2, t3, i) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(shape);
        t2 = t1.get$type(shape);
      case 1:
        state0 = 0;
      default:
        var t4;
        if (state0 === 0 && $.$eq(t2, 0) === true) {
          t2 = this.vertices;
          if (0 >= t2.length)
            throw $.ioore(0);
          t2[0].copyFrom$1(t1.get$position(shape));
          this.count = 1;
          this.radius = shape.get$radius();
        } else
          switch (state0) {
            case 0:
              t1 = t1.get$type(shape);
            case 2:
              state0 = 0;
            case 3:
              if (state0 === 3 || state0 === 0 && $.$eq(t1, 1) === true)
                switch (state0) {
                  case 0:
                    this.count = shape.get$vertexCount();
                    this.radius = shape.get$radius();
                    t1 = this.vertices;
                    t2 = t1.length;
                    i = 0;
                  case 3:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            t3 = this.count;
                          case 3:
                            state0 = 0;
                            if (!$.JSNumber_methods.$lt(i, t3))
                              break L0;
                            if (i >= t2)
                              throw $.ioore(i);
                            t3 = t1[i];
                            t4 = shape.get$vertices();
                            if (i >= t4.length)
                              throw $.ioore(i);
                            t3.copyFrom$1(t4[i]);
                            ++i;
                        }
                }
          }
    }
  },
  getSupport$1: function(direction) {
    var t1, t2, bestValue, bestIndex, i, t3, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    bestValue = t1[0].dot$1(direction);
    bestIndex = 0;
    i = 1;
    while (true) {
      t3 = this.count;
      if (typeof t3 !== "number")
        return this.getSupport$1$bailout(1, direction, t2, t1, t3, bestIndex, bestValue, i);
      if (!(i < t3))
        break;
      if (i >= t2)
        throw $.ioore(i);
      value = t1[i].dot$1(direction);
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
      ++i;
    }
    return bestIndex;
  },
  getSupport$1$bailout: function(state0, direction, t2, t1, t3, bestIndex, bestValue, i) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        bestValue = t1[0].dot$1(direction);
        bestIndex = 0;
        i = 1;
      case 1:
        var value;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = this.count;
              case 1:
                state0 = 0;
                if (!$.JSNumber_methods.$lt(i, t3))
                  break L0;
                if (i >= t2)
                  throw $.ioore(i);
                value = t1[i].dot$1(direction);
                if (value > bestValue) {
                  bestValue = value;
                  bestIndex = i;
                }
                ++i;
            }
        return bestIndex;
    }
  },
  DistanceProxy$0: function() {
    var t1, t2, i;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = $.vec2$zero();
  }
};

$$.Features = {"": "Object;referenceEdge<,incidentEdge<,incidentVertex<,flip<",
  setFrom$1: function(f) {
    this.referenceEdge = f.get$referenceEdge();
    this.incidentEdge = f.get$incidentEdge();
    this.incidentVertex = f.get$incidentVertex();
    this.flip = f.get$flip();
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return $.$eq(this.referenceEdge, other.get$referenceEdge()) === true && $.$eq(this.incidentEdge, other.get$incidentEdge()) === true && $.$eq(this.incidentVertex, other.get$incidentVertex()) === true && $.$eq(this.flip, other.get$flip()) === true;
  },
  toString$0: function(_) {
    return "Features: (" + $.S(this.flip) + ", " + $.S(this.incidentEdge) + ", " + $.S(this.incidentVertex) + " " + $.S(this.referenceEdge) + ")";
  },
  zero$0: function() {
    this.referenceEdge = 0;
    this.incidentEdge = 0;
    this.incidentVertex = 0;
    this.flip = 0;
  }
};

$$.Manifold = {"": "Object;points>,localNormal<,localPoint<,type*,pointCount@",
  setFrom$1: function(other) {
    var t1, t2, t3, i, t4, t5;
    t1 = this.points;
    t2 = t1.length;
    t3 = $.getInterceptor$x(other);
    i = 0;
    while (true) {
      t4 = other.get$pointCount();
      if (typeof t4 !== "number")
        return this.setFrom$1$bailout(1, other, t3, t2, t4, t1, i);
      if (!(i < t4))
        break;
      if (i >= t2)
        throw $.ioore(i);
      t4 = t1[i];
      t5 = t3.get$points(other);
      if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
        return this.setFrom$1$bailout(2, other, t3, t2, t4, t1, i, t5);
      if (i >= t5.length)
        throw $.ioore(i);
      t4.setFrom$1(t5[i]);
      ++i;
    }
    this.type = $.get$type$x(other);
    this.localNormal.copyFrom$1(other.get$localNormal());
    this.localPoint.copyFrom$1(other.get$localPoint());
    this.pointCount = other.get$pointCount();
  },
  setFrom$1$bailout: function(state0, other, t3, t2, t4, t1, i, t5) {
    switch (state0) {
      case 0:
        t1 = this.points;
        t2 = t1.length;
        t3 = $.getInterceptor$x(other);
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t4 = other.get$pointCount();
              case 1:
                state0 = 0;
                if (!$.JSNumber_methods.$lt(i, t4))
                  break L0;
                if (i >= t2)
                  throw $.ioore(i);
                t4 = t1[i];
                t5 = t3.get$points(other);
              case 2:
                state0 = 0;
                t4.setFrom$1($.$index$asx(t5, i));
                ++i;
            }
        this.type = $.get$type$x(other);
        this.localNormal.copyFrom$1(other.get$localNormal());
        this.localPoint.copyFrom$1(other.get$localPoint());
        this.pointCount = other.get$pointCount();
    }
  },
  Manifold$0: function() {
    var t1, t2, i, t3;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      t3 = $.ManifoldPoint$();
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = t3;
    }
  }
};

$$.ManifoldPoint = {"": "Object;localPoint<,normalImpulse@,tangentImpulse@,id>",
  setFrom$1: function(other) {
    this.localPoint.copyFrom$1(other.get$localPoint());
    this.normalImpulse = other.get$normalImpulse();
    this.tangentImpulse = other.get$tangentImpulse();
    this.id.setFrom$1($.get$id$x(other));
  }
};

$$.Simplex = {"": "Object;v1,v2,v3,vertices<,count<,e13,e23,e12,case2,case22,case3,case33",
  readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
    var t1, t2, t3, t4, t5, t6, i, v, t7, t8, wALocal, wBLocal, metric1, metric2;
    this.count = cache.count;
    for (t1 = this.vertices, t2 = t1.length, t3 = cache.indexA, t4 = t3.length, t5 = cache.indexB, t6 = t5.length, i = 0; $.JSNumber_methods.$lt(i, this.count); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      v = t1[i];
      if (i >= t4)
        throw $.ioore(i);
      v.set$indexA(t3[i]);
      if (i >= t6)
        throw $.ioore(i);
      v.set$indexB(t5[i]);
      t7 = proxyA.get$vertices();
      t8 = v.get$indexA();
      if (t8 !== (t8 | 0))
        throw $.iae(t8);
      if (t8 < 0 || t8 >= t7.length)
        throw $.ioore(t8);
      wALocal = t7[t8];
      t8 = proxyB.get$vertices();
      t7 = v.get$indexB();
      if (t7 !== (t7 | 0))
        throw $.iae(t7);
      if (t7 < 0 || t7 >= t8.length)
        throw $.ioore(t7);
      wBLocal = t8[t7];
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      v.get$w().copyFrom$1(v.get$wB()).sub$1(v.get$wA());
      v.set$a(0);
    }
    if ($.$gt$n(this.count, 1) === true) {
      metric1 = cache.metric;
      metric2 = this.getMetric$0();
      if (typeof metric1 !== "number")
        throw $.iae(metric1);
      t3 = $.getInterceptor$n(metric2);
      if (t3.$lt(metric2, 0.5 * metric1) === true || $.JSNumber_methods.$lt(2 * metric1, metric2) || t3.$lt(metric2, 1.192e-7) === true)
        this.count = 0;
    }
    if ($.$eq(this.count, 0) === true) {
      if (0 >= t2)
        throw $.ioore(0);
      v = t1[0];
      v.set$indexA(0);
      v.set$indexB(0);
      t1 = proxyA.get$vertices();
      if (0 >= t1.length)
        throw $.ioore(0);
      wALocal = t1[0];
      t1 = proxyB.get$vertices();
      if (0 >= t1.length)
        throw $.ioore(0);
      wBLocal = t1[0];
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      v.get$w().copyFrom$1(v.get$wB()).sub$1(v.get$wA());
      this.count = 1;
    }
  },
  writeCache$1: function(cache) {
    var t1, t2, t3, t4, t5, t6, i, t7;
    cache.metric = this.getMetric$0();
    cache.count = this.count;
    for (t1 = cache.indexA, t2 = this.vertices, t3 = t2.length, t4 = t1.length, t5 = cache.indexB, t6 = t5.length, i = 0; $.JSNumber_methods.$lt(i, this.count); ++i) {
      if (i >= t3)
        throw $.ioore(i);
      t7 = t2[i].get$indexA();
      if (i >= t4)
        throw $.ioore(i);
      t1[i] = t7;
      t7 = t2[i].get$indexB();
      if (i >= t6)
        throw $.ioore(i);
      t5[i] = t7;
    }
  },
  getSearchDirection$1: function(out) {
    var t1, t2;
    switch (this.count) {
      case 1:
        out.copyFrom$1(this.v1.w).negate$0();
        return;
      case 2:
        t1 = this.e12;
        t2 = this.v1.w;
        t1.copyFrom$1(this.v2.w).sub$1(t2);
        out.copyFrom$1(t2).negate$0();
        if ($.$gt$n($.cross(t1, out, null), 0) === true)
          $.cross(1, t1, null);
        else
          $.cross(t1, 1, null);
        break;
      default:
        out.splat$1(0);
        return;
    }
  },
  getClosestPoint$1: function(out) {
    var t1, t2, t3, t4, t5;
    switch (this.count) {
      case 0:
        out.splat$1(0);
        return;
      case 1:
        out.copyFrom$1(this.v1.w);
        return;
      case 2:
        t1 = this.case22;
        t2 = this.v2;
        t3 = t1.copyFrom$1(t2.w);
        t3.scale$1(t3, t2.a);
        t3 = this.case2;
        t4 = this.v1;
        t5 = t3.copyFrom$1(t4.w);
        t5 = t5.scale$1(t5, t4.a);
        t5.add$1(t5, t1);
        out.copyFrom$1(t3);
        return;
      case 3:
        out.splat$1(0);
        return;
      default:
        out.splat$1(0);
        return;
    }
  },
  getWitnessPoints$2: function(pA, pB) {
    var t1, t2, t3, t4, t5, t6;
    switch (this.count) {
      case 0:
        break;
      case 1:
        t1 = this.v1;
        pA.copyFrom$1(t1.wA);
        pB.copyFrom$1(t1.wB);
        break;
      case 2:
        t1 = this.case2;
        t2 = this.v1;
        t3 = t1.copyFrom$1(t2.wA);
        t3.scale$1(t3, t2.a);
        t3 = this.v2;
        t4 = pA.copyFrom$1(t3.wA);
        t4 = t4.scale$1(t4, t3.a);
        t4.add$1(t4, t1);
        t4 = t1.copyFrom$1(t2.wB);
        t4.scale$1(t4, t2.a);
        t4 = pB.copyFrom$1(t3.wB);
        t4 = t4.scale$1(t4, t3.a);
        t4.add$1(t4, t1);
        break;
      case 3:
        t1 = this.v1;
        t2 = pA.copyFrom$1(t1.wA);
        t2.scale$1(t2, t1.a);
        t2 = this.case3;
        t3 = this.v2;
        t4 = t2.copyFrom$1(t3.wA);
        t4.scale$1(t4, t3.a);
        t4 = this.case33;
        t5 = this.v3;
        t6 = t4.copyFrom$1(t5.wA);
        t6.scale$1(t6, t5.a);
        t2 = pA.add$1(pA, t2);
        t2.add$1(t2, t4);
        pB.copyFrom$1(pA);
        break;
      default:
        break;
    }
  },
  getMetric$0: function() {
    var t1, t2, t3;
    switch (this.count) {
      case 0:
        return 0;
      case 1:
        return 0;
      case 2:
        t1 = this.v1.w;
        t1 = t1.$sub(t1, this.v2.w);
        return t1.get$length(t1);
      case 3:
        t1 = this.case3;
        t2 = this.v1.w;
        t1.copyFrom$1(this.v2.w).sub$1(t2);
        t3 = this.case33;
        t3.copyFrom$1(this.v3.w).sub$1(t2);
        return $.cross(t1, t3, null);
      default:
        return 0;
    }
  },
  solve2$0: function() {
    var t1, w1, t2, w2, t3, d12_2, d12_1, inv_d12;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.e12;
    t3.copyFrom$1(w2).sub$1(w1);
    d12_2 = -w1.dot$1(t3);
    if (d12_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    d12_1 = w2.dot$1(t3);
    if (d12_1 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    inv_d12 = 1 / (d12_1 + d12_2);
    t1.a = d12_1 * inv_d12;
    t2.a = d12_2 * inv_d12;
    this.count = 2;
  },
  solve3$0: function() {
    var t1, w1, t2, w2, t3, w3, t4, w1e12, w2e12, d12_2, t5, w1e13, w3e13, d13_2, t6, w2e23, w3e23, d23_2, n123, d123_1, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.v3;
    w3 = t3.w;
    t4 = this.e12;
    t4.copyFrom$1(w2).sub$1(w1);
    w1e12 = w1.dot$1(t4);
    w2e12 = w2.dot$1(t4);
    d12_2 = -w1e12;
    t5 = this.e13;
    t5.copyFrom$1(w3).sub$1(w1);
    w1e13 = w1.dot$1(t5);
    w3e13 = w3.dot$1(t5);
    d13_2 = -w1e13;
    t6 = this.e23;
    t6.copyFrom$1(w3).sub$1(w2);
    w2e23 = w2.dot$1(t6);
    w3e23 = w3.dot$1(t6);
    d23_2 = -w2e23;
    n123 = $.cross(t4, t5, null);
    if (typeof n123 !== "number")
      return this.solve3$0$bailout(1, w3e23, n123, d12_2, d13_2, d23_2, t1, w1, t2, w2, t3, w3, w2e12, w3e13);
    t4 = $.cross(w2, w3, null);
    if (typeof t4 !== "number")
      return this.solve3$0$bailout(2, w3e23, n123, d12_2, d13_2, d23_2, t1, w1, t2, w2, t3, w3, w2e12, w3e13, t4);
    d123_1 = n123 * t4;
    t4 = $.cross(w3, w1, null);
    if (typeof t4 !== "number")
      return this.solve3$0$bailout(3, w3e23, n123, d12_2, d13_2, d23_2, t1, w1, t2, w2, t3, 0, w2e12, w3e13, t4, d123_1, $.JSNumber_methods);
    d123_2 = n123 * t4;
    t4 = $.cross(w1, w2, null);
    if (typeof t4 !== "number")
      return this.solve3$0$bailout(4, w3e23, n123, d12_2, d13_2, d23_2, t1, 0, t2, 0, t3, 0, w2e12, w3e13, t4, d123_1, $.JSNumber_methods, d123_2);
    d123_3 = n123 * t4;
    if (d12_2 <= 0 && d13_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
      inv_d12 = 1 / (w2e12 + d12_2);
      t1.a = w2e12 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
      return;
    }
    if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
      inv_d13 = 1 / (w3e13 + d13_2);
      t1.a = w3e13 * inv_d13;
      t3.a = d13_2 * inv_d13;
      this.count = 2;
      t2.setFrom$1(t3);
      return;
    }
    if (w2e12 <= 0 && d23_2 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    if (w3e13 <= 0 && w3e23 <= 0) {
      t3.a = 1;
      this.count = 1;
      t1.setFrom$1(t3);
      return;
    }
    if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
      inv_d23 = 1 / (w3e23 + d23_2);
      t2.a = w3e23 * inv_d23;
      t3.a = d23_2 * inv_d23;
      this.count = 2;
      t1.setFrom$1(t3);
      return;
    }
    inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
    t1.a = d123_1 * inv_d123;
    t2.a = d123_2 * inv_d123;
    t3.a = d123_3 * inv_d123;
    this.count = 3;
  },
  solve3$0$bailout: function(state0, w3e23, n123, d12_2, d13_2, d23_2, t1, w1, t2, w2, t3, w3, w2e12, w3e13, t4, d123_1, t7, d123_2) {
    switch (state0) {
      case 0:
        t1 = this.v1;
        w1 = t1.w;
        t2 = this.v2;
        w2 = t2.w;
        t3 = this.v3;
        w3 = t3.w;
        t4 = this.e12;
        t4.copyFrom$1(w2).sub$1(w1);
        w1e12 = w1.dot$1(t4);
        w2e12 = w2.dot$1(t4);
        d12_2 = -w1e12;
        t5 = this.e13;
        t5.copyFrom$1(w3).sub$1(w1);
        w1e13 = w1.dot$1(t5);
        w3e13 = w3.dot$1(t5);
        d13_2 = -w1e13;
        t6 = this.e23;
        t6.copyFrom$1(w3).sub$1(w2);
        w2e23 = w2.dot$1(t6);
        w3e23 = w3.dot$1(t6);
        d23_2 = -w2e23;
        n123 = $.cross(t4, t5, null);
      case 1:
        state0 = 0;
        t4 = $.cross(w2, w3, null);
      case 2:
        state0 = 0;
        t7 = $.getInterceptor$n(n123);
        d123_1 = t7.$mul(n123, t4);
        t4 = $.cross(w3, w1, null);
      case 3:
        state0 = 0;
        d123_2 = t7.$mul(n123, t4);
        t4 = $.cross(w1, w2, null);
      case 4:
        var w1e12, t5, w1e13, t6, w2e23, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
        state0 = 0;
        d123_3 = t7.$mul(n123, t4);
        if (d12_2 <= 0 && d13_2 <= 0) {
          t1.a = 1;
          this.count = 1;
          return;
        }
        if (w2e12 > 0 && d12_2 > 0 && $.$le$n(d123_3, 0) === true) {
          inv_d12 = 1 / (w2e12 + d12_2);
          t1.a = w2e12 * inv_d12;
          t2.a = d12_2 * inv_d12;
          this.count = 2;
          return;
        }
        if (w3e13 > 0 && d13_2 > 0 && $.$le$n(d123_2, 0) === true) {
          inv_d13 = 1 / (w3e13 + d13_2);
          t1.a = w3e13 * inv_d13;
          t3.a = d13_2 * inv_d13;
          this.count = 2;
          t2.setFrom$1(t3);
          return;
        }
        if (w2e12 <= 0 && d23_2 <= 0) {
          t2.a = 1;
          this.count = 1;
          t1.setFrom$1(t2);
          return;
        }
        if (w3e13 <= 0 && w3e23 <= 0) {
          t3.a = 1;
          this.count = 1;
          t1.setFrom$1(t3);
          return;
        }
        if (w3e23 > 0 && d23_2 > 0 && $.$le$n(d123_1, 0) === true) {
          inv_d23 = 1 / (w3e23 + d23_2);
          t2.a = w3e23 * inv_d23;
          t3.a = d23_2 * inv_d23;
          this.count = 2;
          t1.setFrom$1(t3);
          return;
        }
        t4 = $.getInterceptor$ns(d123_1);
        t5 = $.$add$ns(t4.$add(d123_1, d123_2), d123_3);
        if (typeof t5 !== "number")
          throw $.iae(t5);
        inv_d123 = 1 / t5;
        t1.a = t4.$mul(d123_1, inv_d123);
        t2.a = $.$mul$n(d123_2, inv_d123);
        t3.a = $.$mul$n(d123_3, inv_d123);
        this.count = 3;
    }
  },
  Simplex$0: function() {
    var t1, t2;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = this.v1;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = this.v2;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = this.v3;
  }
};

$$.SimplexCache = {"": "Object;metric<,count<,indexA<,indexB<",
  setFrom$1: function(sc) {
    var t1 = this.indexA;
    $.JSArray_methods.setRange$3(t1, 0, t1.length, sc.get$indexA());
    t1 = this.indexB;
    $.JSArray_methods.setRange$3(t1, 0, t1.length, sc.get$indexB());
    this.metric = sc.get$metric();
    this.count = sc.get$count();
  },
  SimplexCache$0: function() {
    var t1, t2, t3, t4, i;
    for (t1 = this.indexA, t2 = t1.length, t3 = this.indexB, t4 = t3.length, i = 0; i < 3; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = 2147483647;
      if (i >= t4)
        throw $.ioore(i);
      t3[i] = 2147483647;
    }
  }
};

$$.SimplexVertex = {"": "Object;wA<,wB<,w<,a@,indexA@,indexB@",
  setFrom$1: function(sv) {
    this.wA.copyFrom$1(sv.get$wA());
    this.wB.copyFrom$1(sv.get$wB());
    this.w.copyFrom$1(sv.get$w());
    this.a = sv.get$a();
    this.indexA = sv.get$indexA();
    this.indexB = sv.get$indexB();
  },
  toString$0: function(_) {
    return "wA: " + $.S(this.wA) + ", wB: " + $.S(this.wB) + ", w: " + $.S(this.w);
  }
};

$$.TimeOfImpact = {"": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA<,sweepB<,pool",
  timeOfImpact$2: function(output, input) {
    var t1, proxyA, proxyB, t3, t4, tMax, t6, t8, target, t10, t11, t2, t5, t7, t9, t12, t13, t14, iter, t15, t20, pushBackIter, done, s2, s1, a2, a1, rootIterCount, t, s;
    t1 = $.TimeOfImpact_toiCalls;
    if (typeof t1 !== "number")
      return this.timeOfImpact$2$bailout(1, output, input, t1);
    $.TimeOfImpact_toiCalls = t1 + 1;
    output.set$state(0);
    output.set$t(input.get$tMax());
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    t3 = this.sweepA;
    t3.setFrom$1(input.get$sweepA());
    t4 = this.sweepB;
    t4.setFrom$1(input.get$sweepB());
    t3.normalize$0();
    t4.normalize$0();
    tMax = input.get$tMax();
    if (tMax !== (tMax | 0))
      return this.timeOfImpact$2$bailout(2, output, input, 0, t3, t4, tMax, proxyA, proxyB);
    t6 = proxyA.get$radius();
    if (typeof t6 !== "number")
      return this.timeOfImpact$2$bailout(3, output, input, 0, t3, t4, tMax, proxyA, proxyB, t6);
    t8 = proxyB.get$radius();
    if (typeof t8 !== "number")
      return this.timeOfImpact$2$bailout(4, output, input, 0, t3, t4, tMax, proxyA, proxyB, t6, t8);
    target = $.max(0.005, t6 + t8 - 0.015);
    t10 = this.cache;
    t10.count = 0;
    t11 = this.distanceInput;
    t11.proxyA = input.get$proxyA();
    t11.proxyB = input.get$proxyB();
    t11.useRadii = false;
    for (t1 = this.fcn, t2 = this.indexes, t5 = t2.length, t6 = target + 0.00125, t7 = target - 0.00125, t8 = this.distanceOutput, t9 = this.xfA, t12 = this.xfB, t13 = this.pool, t14 = 0, iter = 0; true;) {
      t3.getTransform$2(t9, t14);
      t4.getTransform$2(t12, t14);
      t11.transformA = t9;
      t11.transformB = t12;
      t13.distance.computeDistance$3(t8, t10, t11);
      t15 = t8._distance;
      if (typeof t15 !== "number")
        return this.timeOfImpact$2$bailout(5, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, t5, target, t12, t9, t13, t7, t15, t10, t11, t14);
      if (t15 <= 0) {
        output.set$state(2);
        output.set$t(0);
        break;
      }
      if (t15 < t6) {
        output.set$state(3);
        output.set$t(t14);
        break;
      }
      t1.initialize$6(t1, t10, proxyA, t3, proxyB, t4, t14);
      for (t20 = tMax, pushBackIter = 0; done = false, true;) {
        s2 = t1.findMinSeparation$2(t2, t20);
        if (s2 > t6) {
          output.set$state(4);
          output.set$t(tMax);
          done = true;
          break;
        }
        if (s2 > t7) {
          t14 = t20;
          done = false;
          break;
        }
        if (0 >= t5)
          throw $.ioore(0);
        t15 = t2[0];
        if (1 >= t5)
          throw $.ioore(1);
        s1 = t1.evaluate$3(t15, t2[1], t14);
        if (s1 < t7) {
          output.set$state(1);
          output.set$t(t14);
          done = true;
          break;
        }
        if (s1 <= t6) {
          output.set$state(3);
          output.set$t(t14);
          done = true;
          break;
        }
        for (a2 = t20, a1 = t14, rootIterCount = 0; true;) {
          if ((rootIterCount & 1) === 1) {
            t15 = (target - s1) * (a2 - a1) / (s2 - s1);
            if (t15 !== (t15 | 0))
              return this.timeOfImpact$2$bailout(7, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, t5, target, t12, t9, t13, t7, $.JSInt_methods, t10, t11, t14, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, t15);
            t = a1 + t15;
          } else
            t = 0.5 * (a1 + a2);
          if (t !== (t | 0))
            return this.timeOfImpact$2$bailout(9, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, t5, target, t12, t9, t13, t7, 0, t10, t11, t14, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, 0, t);
          s = t1.evaluate$3(t2[0], t2[1], t);
          if ($.JSNumber_methods.abs$0(s - target) < 0.00125) {
            t20 = t;
            break;
          }
          if (s > target) {
            a1 = t;
            s1 = s;
          } else {
            a2 = t;
            s2 = s;
          }
          ++rootIterCount;
          t15 = $.TimeOfImpact_toiRootIters;
          if (typeof t15 !== "number")
            return this.timeOfImpact$2$bailout(11, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, t5, target, t12, t9, t13, t7, 0, t10, t11, t14, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, 0, 0, t15);
          $.TimeOfImpact_toiRootIters = t15 + 1;
          if (rootIterCount === 50)
            break;
        }
        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
        ++pushBackIter;
        if (pushBackIter === 8) {
          done = false;
          break;
        }
      }
      ++iter;
      t15 = $.TimeOfImpact_toiIters;
      if (typeof t15 !== "number")
        return this.timeOfImpact$2$bailout(12, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, t5, target, t12, t9, t13, t7, t15, t10, t11, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, done);
      $.TimeOfImpact_toiIters = t15 + 1;
      if (done)
        break;
      if (iter === 1000) {
        output.set$state(1);
        output.set$t(t14);
        break;
      }
    }
    $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
  },
  timeOfImpact$2$bailout: function(state0, output, input, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, t5, target, t12, t9, t13, t7, t15, t10, t11, t14, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, t17, t, t16, done) {
    switch (state0) {
      case 0:
        t1 = $.TimeOfImpact_toiCalls;
      case 1:
        state0 = 0;
        $.TimeOfImpact_toiCalls = $.$add$ns(t1, 1);
        output.set$state(0);
        output.set$t(input.get$tMax());
        proxyA = input.get$proxyA();
        proxyB = input.get$proxyB();
        t3 = this.sweepA;
        t3.setFrom$1(input.get$sweepA());
        t4 = this.sweepB;
        t4.setFrom$1(input.get$sweepB());
        t3.normalize$0();
        t4.normalize$0();
        tMax = input.get$tMax();
      case 2:
        state0 = 0;
        t6 = proxyA.get$radius();
      case 3:
        state0 = 0;
        t8 = proxyB.get$radius();
      case 4:
        state0 = 0;
        target = $.max(0.005, $.$sub$n($.$add$ns(t6, t8), 0.015));
        t10 = this.cache;
        t10.count = 0;
        t11 = this.distanceInput;
        t11.proxyA = input.get$proxyA();
        t11.proxyB = input.get$proxyB();
        t11.useRadii = false;
        t1 = this.fcn;
        t2 = this.indexes;
        t5 = t2.length;
        t6 = target + 0.00125;
        t7 = target - 0.00125;
        t8 = this.distanceOutput;
        t9 = this.xfA;
        t12 = this.xfB;
        t13 = this.pool;
        t14 = 0;
        iter = 0;
      default:
        var s;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t3.getTransform$2(t9, t14);
                t4.getTransform$2(t12, t14);
                t11.transformA = t9;
                t11.transformB = t12;
                t13.distance.computeDistance$3(t8, t10, t11);
                t15 = t8._distance;
              case 5:
                state0 = 0;
                if ($.$le$n(t15, 0) === true) {
                  output.set$state(2);
                  output.set$t(0);
                  break L0;
                }
                t15 = t8._distance;
              case 6:
                state0 = 0;
                if ($.$lt$n(t15, t6) === true) {
                  output.set$state(3);
                  output.set$t(t14);
                  break L0;
                }
                t1.initialize$6(t1, t10, proxyA, t3, proxyB, t4, t14);
                t20 = tMax;
                pushBackIter = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        done = false;
                        if (!true)
                          break L1;
                        s2 = t1.findMinSeparation$2(t2, t20);
                        if (s2 > t6) {
                          output.set$state(4);
                          output.set$t(tMax);
                          done = true;
                          break L1;
                        }
                        if (s2 > t7) {
                          t14 = t20;
                          done = false;
                          break L1;
                        }
                        if (0 >= t5)
                          throw $.ioore(0);
                        t15 = t2[0];
                        if (1 >= t5)
                          throw $.ioore(1);
                        s1 = t1.evaluate$3(t15, t2[1], t14);
                        if (s1 < t7) {
                          output.set$state(1);
                          output.set$t(t14);
                          done = true;
                          break L1;
                        }
                        if (s1 <= t6) {
                          output.set$state(3);
                          output.set$t(t14);
                          done = true;
                          break L1;
                        }
                        a2 = t20;
                        a1 = t14;
                        rootIterCount = 0;
                      default:
                        L2:
                          while (true)
                            switch (state0) {
                              case 0:
                                if (!true)
                                  break L2;
                                t15 = $.getInterceptor$ns(a1);
                              default:
                                if (state0 === 8 || state0 === 7 || state0 === 0 && (rootIterCount & 1) === 1)
                                  switch (state0) {
                                    case 0:
                                      t16 = $.$sub$n(a2, a1);
                                      if (typeof t16 !== "number")
                                        throw $.iae(t16);
                                      t17 = (target - s1) * t16 / (s2 - s1);
                                    case 7:
                                      state0 = 0;
                                      t = t15.$add(a1, t17);
                                    case 8:
                                      state0 = 0;
                                  }
                                else
                                  t = 0.5 * t15.$add(a1, a2);
                              case 9:
                                state0 = 0;
                                s = t1.evaluate$3(t2[0], t2[1], t);
                                if ($.JSNumber_methods.abs$0(s - target) < 0.00125) {
                                  t20 = t;
                                  break L2;
                                }
                                if (s > target) {
                                  a1 = t;
                                  s1 = s;
                                } else {
                                  a2 = t;
                                  s2 = s;
                                }
                              case 10:
                                state0 = 0;
                                ++rootIterCount;
                                t16 = $.TimeOfImpact_toiRootIters;
                              case 11:
                                state0 = 0;
                                $.TimeOfImpact_toiRootIters = $.$add$ns(t16, 1);
                                if (rootIterCount === 50)
                                  break L2;
                            }
                        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
                        ++pushBackIter;
                        if (pushBackIter === 8) {
                          done = false;
                          break L1;
                        }
                    }
                ++iter;
                t15 = $.TimeOfImpact_toiIters;
              case 12:
                state0 = 0;
                $.TimeOfImpact_toiIters = $.$add$ns(t15, 1);
                if (done)
                  break L0;
                if (iter === 1000) {
                  output.set$state(1);
                  output.set$t(t14);
                  break L0;
                }
            }
        $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
    }
  },
  get$timeOfImpact: function() {
    return new $.BoundClosure$2(this, "timeOfImpact$2");
  },
  TimeOfImpact$_construct$1: function(argPool) {
    var t1, t2;
    t1 = this.indexes;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    $.TimeOfImpact_toiCalls = 0;
    $.TimeOfImpact_toiIters = 0;
    $.TimeOfImpact_toiMaxIters = 0;
    $.TimeOfImpact_toiRootIters = 0;
    $.TimeOfImpact_toiMaxRootIters = 0;
  }
};

$$.SeparationFunction = {"": "Object;proxyA@,proxyB@,type*,localPoint<,axis,sweepA<,sweepB<,localPointA,localPointB,pointA,pointB,localPointA1,localPointA2,normal<,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
  initialize$6: function(_, cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
    var count, t3, t4, t2, t5, t6, t7, t8, t9, s, t10, t11, t12, t13, t14, t15, t16;
    this.proxyA = argProxyA;
    this.proxyB = argProxyB;
    count = cache.count;
    if (typeof count !== "number")
      return this.initialize$6$bailout(1, cache, argSweepA, argSweepB, count, t1);
    this.sweepA = argSweepA;
    this.sweepB = argSweepB;
    t3 = this.xfa;
    this.sweepA.getTransform$2(t3, t1);
    t4 = this.xfb;
    this.sweepB.getTransform$2(t4, t1);
    if (count === 1) {
      this.type = 0;
      t1 = this.localPointA;
      t2 = this.proxyA.get$vertices();
      t5 = cache.indexA;
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      if (t5 !== (t5 | 0))
        throw $.iae(t5);
      if (t5 < 0 || t5 >= t2.length)
        throw $.ioore(t5);
      t1.copyFrom$1(t2[t5]);
      t6 = this.localPointB;
      t7 = this.proxyB.get$vertices();
      t8 = cache.indexB;
      if (0 >= t8.length)
        throw $.ioore(0);
      t8 = t8[0];
      if (t8 !== (t8 | 0))
        throw $.iae(t8);
      if (t8 < 0 || t8 >= t7.length)
        throw $.ioore(t8);
      t6.copyFrom$1(t7[t8]);
      t9 = this.pointA;
      $.Transform_mulToOut(t3, t1, t9);
      t1 = this.pointB;
      $.Transform_mulToOut(t4, t6, t1);
      t6 = this.axis;
      t6.copyFrom$1(t1).sub$1(t9);
      s = t6.get$length(t6);
      t6.normalize$0();
      return s;
    } else {
      t1 = cache.indexA;
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      t5 = t1[0];
      if (1 >= t2)
        throw $.ioore(1);
      t6 = cache.indexB;
      t7 = this.pointA;
      t8 = this.normal;
      t9 = this.pointB;
      t10 = this.localPoint;
      t11 = this.temp;
      t12 = this.axis;
      t13 = t6.length;
      if ($.$eq(t5, t1[1]) === true) {
        this.type = 2;
        t2 = this.localPointB1;
        t5 = this.proxyB.get$vertices();
        if (0 >= t13)
          throw $.ioore(0);
        t14 = t6[0];
        if (t14 !== (t14 | 0))
          throw $.iae(t14);
        if (t14 < 0 || t14 >= t5.length)
          throw $.ioore(t14);
        t2.copyFrom$1(t5[t14]);
        t15 = this.localPointB2;
        t16 = this.proxyB.get$vertices();
        if (1 >= t13)
          throw $.ioore(1);
        t6 = t6[1];
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t16.length)
          throw $.ioore(t6);
        t15.copyFrom$1(t16[t6]);
        t11.copyFrom$1(t15).sub$1(t2);
        $.cross(t11, 1, t12);
        t12.normalize$0();
        t4.rotation.transformed$2(t12, t8);
        t2 = t10.copyFrom$1(t2);
        t15 = t2.add$1(t2, t15);
        t15.scale$1(t15, 0.5);
        $.Transform_mulToOut(t4, t10, t9);
        t10 = this.localPointA;
        t4 = this.proxyA.get$vertices();
        t1 = t1[0];
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= t4.length)
          throw $.ioore(t1);
        t10.copyFrom$1(t4[t1]);
        $.Transform_mulToOut(t3, t10, t7);
        t11.copyFrom$1(t7).sub$1(t9);
        s = t11.dot$1(t8);
        if (s < 0) {
          t12.negate$0();
          s = -s;
        }
        return s;
      } else {
        this.type = 1;
        t2 = this.localPointA1;
        t5 = this.proxyA.get$vertices();
        t14 = t1[0];
        if (t14 !== (t14 | 0))
          throw $.iae(t14);
        if (t14 < 0 || t14 >= t5.length)
          throw $.ioore(t14);
        t2.copyFrom$1(t5[t14]);
        t15 = this.localPointA2;
        t16 = this.proxyA.get$vertices();
        t1 = t1[1];
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= t16.length)
          throw $.ioore(t1);
        t15.copyFrom$1(t16[t1]);
        t11.copyFrom$1(t15).sub$1(t2);
        $.cross(t11, 1, t12);
        t12.normalize$0();
        t3.rotation.transformed$2(t12, t8);
        t2 = t10.copyFrom$1(t2);
        t15 = t2.add$1(t2, t15);
        t15.scale$1(t15, 0.5);
        $.Transform_mulToOut(t3, t10, t7);
        t10 = this.localPointB;
        t3 = this.proxyB.get$vertices();
        if (0 >= t13)
          throw $.ioore(0);
        t6 = t6[0];
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t3.length)
          throw $.ioore(t6);
        t10.copyFrom$1(t3[t6]);
        $.Transform_mulToOut(t4, t10, t9);
        t11.copyFrom$1(t9).sub$1(t7);
        s = t11.dot$1(t8);
        if (s < 0) {
          t12.negate$0();
          s = -s;
        }
        return s;
      }
    }
  },
  initialize$6$bailout: function(state0, cache, argSweepA, argSweepB, count, t1) {
    var t3, t4, t2, t5, t6, t7, t8, t9, s, t10, t11, t12, t13, t14, t15, t16;
    this.sweepA = argSweepA;
    this.sweepB = argSweepB;
    t3 = this.xfa;
    this.sweepA.getTransform$2(t3, t1);
    t4 = this.xfb;
    this.sweepB.getTransform$2(t4, t1);
    if ($.$eq(count, 1) === true) {
      this.type = 0;
      t1 = this.localPointA;
      t2 = this.proxyA.get$vertices();
      t5 = cache.indexA;
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      if (t5 !== (t5 | 0))
        throw $.iae(t5);
      if (t5 < 0 || t5 >= t2.length)
        throw $.ioore(t5);
      t1.copyFrom$1(t2[t5]);
      t6 = this.localPointB;
      t7 = this.proxyB.get$vertices();
      t8 = cache.indexB;
      if (0 >= t8.length)
        throw $.ioore(0);
      t8 = t8[0];
      if (t8 !== (t8 | 0))
        throw $.iae(t8);
      if (t8 < 0 || t8 >= t7.length)
        throw $.ioore(t8);
      t6.copyFrom$1(t7[t8]);
      t9 = this.pointA;
      $.Transform_mulToOut(t3, t1, t9);
      t1 = this.pointB;
      $.Transform_mulToOut(t4, t6, t1);
      t6 = this.axis;
      t6.copyFrom$1(t1).sub$1(t9);
      s = t6.get$length(t6);
      t6.normalize$0();
      return s;
    } else {
      t1 = cache.indexA;
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      t5 = t1[0];
      if (1 >= t2)
        throw $.ioore(1);
      t6 = cache.indexB;
      t7 = this.pointA;
      t8 = this.normal;
      t9 = this.pointB;
      t10 = this.localPoint;
      t11 = this.temp;
      t12 = this.axis;
      if ($.$eq(t5, t1[1]) === true) {
        this.type = 2;
        t2 = this.localPointB1;
        t5 = this.proxyB.get$vertices();
        t13 = t6.length;
        if (0 >= t13)
          throw $.ioore(0);
        t14 = t6[0];
        if (t14 !== (t14 | 0))
          throw $.iae(t14);
        if (t14 < 0 || t14 >= t5.length)
          throw $.ioore(t14);
        t2.copyFrom$1(t5[t14]);
        t15 = this.localPointB2;
        t16 = this.proxyB.get$vertices();
        if (1 >= t13)
          throw $.ioore(1);
        t6 = t6[1];
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t16.length)
          throw $.ioore(t6);
        t15.copyFrom$1(t16[t6]);
        t11.copyFrom$1(t15).sub$1(t2);
        $.cross(t11, 1, t12);
        t12.normalize$0();
        t4.rotation.transformed$2(t12, t8);
        t2 = t10.copyFrom$1(t2);
        t15 = t2.add$1(t2, t15);
        t15.scale$1(t15, 0.5);
        $.Transform_mulToOut(t4, t10, t9);
        t10 = this.localPointA;
        t4 = this.proxyA.get$vertices();
        t1 = t1[0];
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= t4.length)
          throw $.ioore(t1);
        t10.copyFrom$1(t4[t1]);
        $.Transform_mulToOut(t3, t10, t7);
        t11.copyFrom$1(t7).sub$1(t9);
        s = t11.dot$1(t8);
        if (s < 0) {
          t12.negate$0();
          s = -s;
        }
        return s;
      } else {
        this.type = 1;
        t2 = this.localPointA1;
        t5 = this.proxyA.get$vertices();
        t13 = t1[0];
        if (t13 !== (t13 | 0))
          throw $.iae(t13);
        if (t13 < 0 || t13 >= t5.length)
          throw $.ioore(t13);
        t2.copyFrom$1(t5[t13]);
        t14 = this.localPointA2;
        t15 = this.proxyA.get$vertices();
        t1 = t1[1];
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= t15.length)
          throw $.ioore(t1);
        t14.copyFrom$1(t15[t1]);
        t11.copyFrom$1(t14).sub$1(t2);
        $.cross(t11, 1, t12);
        t12.normalize$0();
        t3.rotation.transformed$2(t12, t8);
        t2 = t10.copyFrom$1(t2);
        t14 = t2.add$1(t2, t14);
        t14.scale$1(t14, 0.5);
        $.Transform_mulToOut(t3, t10, t7);
        t10 = this.localPointB;
        t3 = this.proxyB.get$vertices();
        if (0 >= t6.length)
          throw $.ioore(0);
        t6 = t6[0];
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t3.length)
          throw $.ioore(t6);
        t10.copyFrom$1(t3[t6]);
        $.Transform_mulToOut(t4, t10, t9);
        t11.copyFrom$1(t9).sub$1(t7);
        s = t11.dot$1(t8);
        if (s < 0) {
          t12.negate$0();
          s = -s;
        }
        return s;
      }
    }
  },
  findMinSeparation$2: function(indexes, t) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    t3 = indexes.length;
    switch (this.type) {
      case 0:
        t4 = this.axis;
        t5 = this.axisA;
        t1.rotation.transposed$0().transformed$2(t4, t5);
        t6 = this.axisB;
        t2.rotation.transposed$0().transformed$2(t4.negate$0(), t6);
        t4.negate$0();
        t5 = this.proxyA.getSupport$1(t5);
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = t5;
        t6 = this.proxyB.getSupport$1(t6);
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = t6;
        t6 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        t7 = indexes[0];
        if (t7 !== (t7 | 0))
          throw $.iae(t7);
        if (t7 < 0 || t7 >= t5.length)
          throw $.ioore(t7);
        t6.copyFrom$1(t5[t7]);
        t8 = this.localPointB;
        t9 = this.proxyB.get$vertices();
        t10 = indexes[1];
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t9.length)
          throw $.ioore(t10);
        t8.copyFrom$1(t9[t10]);
        t11 = this.pointA;
        $.Transform_mulToOut(t1, t6, t11);
        t6 = this.pointB;
        $.Transform_mulToOut(t2, t8, t6);
        return t6.sub$1(t11).dot$1(t4);
      case 1:
        t4 = this.normal;
        t1.rotation.transformed$2(this.axis, t4);
        t5 = this.pointA;
        $.Transform_mulToOut(t1, this.localPoint, t5);
        t4.negate$0();
        t1 = this.axisB;
        t2.rotation.transposed$0().transformed$2(t4, t1);
        t4.negate$0();
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = -1;
        t1 = this.proxyB.getSupport$1(t1);
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = t1;
        t1 = this.localPointB;
        t6 = this.proxyB.get$vertices();
        t7 = indexes[1];
        if (t7 !== (t7 | 0))
          throw $.iae(t7);
        if (t7 < 0 || t7 >= t6.length)
          throw $.ioore(t7);
        t1.copyFrom$1(t6[t7]);
        t8 = this.pointB;
        $.Transform_mulToOut(t2, t1, t8);
        return t8.sub$1(t5).dot$1(t4);
      case 2:
        t4 = this.normal;
        t2.rotation.transformed$2(this.axis, t4);
        t5 = this.pointB;
        $.Transform_mulToOut(t2, this.localPoint, t5);
        t2 = this.axisA;
        t1.rotation.transposed$0().transformed$2(t4.negate$0(), t2);
        t4.negate$0();
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = -1;
        indexes[0] = this.proxyA.getSupport$1(t2);
        t6 = this.localPointA;
        t7 = this.proxyA.get$vertices();
        t8 = indexes[0];
        if (t8 !== (t8 | 0))
          throw $.iae(t8);
        if (t8 < 0 || t8 >= t7.length)
          throw $.ioore(t8);
        t6.copyFrom$1(t7[t8]);
        t9 = this.pointA;
        $.Transform_mulToOut(t1, t6, t9);
        return t9.sub$1(t5).dot$1(t4);
      default:
        if (0 >= t3)
          throw $.ioore(0);
        indexes[0] = -1;
        if (1 >= t3)
          throw $.ioore(1);
        indexes[1] = -1;
        return 0;
    }
  },
  evaluate$3: function(indexA, indexB, t) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    switch (this.type) {
      case 0:
        t3 = this.axis;
        t1.rotation.transposed$0().transformed$2(t3, this.axisA);
        t2.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisB);
        t3.negate$0();
        t4 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA !== (indexA | 0))
          throw $.iae(indexA);
        if (indexA < 0 || indexA >= t5.length)
          throw $.ioore(indexA);
        t4.copyFrom$1(t5[indexA]);
        t6 = this.localPointB;
        t7 = this.proxyB.get$vertices();
        if (indexB !== (indexB | 0))
          throw $.iae(indexB);
        if (indexB < 0 || indexB >= t7.length)
          throw $.ioore(indexB);
        t6.copyFrom$1(t7[indexB]);
        t8 = this.pointA;
        $.Transform_mulToOut(t1, t4, t8);
        t4 = this.pointB;
        $.Transform_mulToOut(t2, t6, t4);
        return t4.sub$1(t8).dot$1(t3);
      case 1:
        t3 = this.normal;
        t1.rotation.transformed$2(this.axis, t3);
        t4 = this.pointA;
        $.Transform_mulToOut(t1, this.localPoint, t4);
        t3.negate$0();
        t2.rotation.transposed$0().transformed$2(t3, this.axisB);
        t3.negate$0();
        t1 = this.localPointB;
        t5 = this.proxyB.get$vertices();
        if (indexB !== (indexB | 0))
          throw $.iae(indexB);
        if (indexB < 0 || indexB >= t5.length)
          throw $.ioore(indexB);
        t1.copyFrom$1(t5[indexB]);
        t6 = this.pointB;
        $.Transform_mulToOut(t2, t1, t6);
        return t6.sub$1(t4).dot$1(t3);
      case 2:
        t3 = this.normal;
        t2.rotation.transformed$2(this.axis, t3);
        t4 = this.pointB;
        $.Transform_mulToOut(t2, this.localPoint, t4);
        t1.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisA);
        t3.negate$0();
        t2 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA !== (indexA | 0))
          throw $.iae(indexA);
        if (indexA < 0 || indexA >= t5.length)
          throw $.ioore(indexA);
        t2.copyFrom$1(t5[indexA]);
        t6 = this.pointA;
        $.Transform_mulToOut(t1, t2, t6);
        return t6.sub$1(t4).dot$1(t3);
      default:
        return 0;
    }
  }
};

$$.TimeOfImpactInput = {"": "Object;proxyA<,proxyB<,sweepA<,sweepB<,tMax<"};

$$.TimeOfImpactOutput = {"": "Object;state?,t?"};

$$.WorldManifold = {"": "Object;normal<,points>,pool3,pool4",
  initialize$5: function(_, manifold, xfA, radiusA, xfB, radiusB) {
    var t1, pointA, pointB, t2, t3, t4, t5, t6, cA, cB, planePoint, clipPoint, t7, i, scalar, cAx, cAy, cBx, cBy, t8, R, v;
    t1 = $.getInterceptor$x(manifold);
    switch (t1.get$type(manifold)) {
      case 0:
        pointA = this.pool3;
        pointB = this.pool4;
        t2 = this.normal;
        t2.x = 1;
        t2.y = 0;
        t3 = xfA.position;
        t4 = xfA.rotation;
        pointA.x = $.$add$ns($.$add$ns(t3.x, $.$mul$n($.get$x$x(t4.col0), manifold.get$localPoint().x)), $.$mul$n($.get$x$x(t4.col1), manifold.get$localPoint().y));
        pointA.y = $.$add$ns($.$add$ns(t3.y, $.$mul$n($.get$y$x(t4.col0), manifold.get$localPoint().x)), $.$mul$n($.get$y$x(t4.col1), manifold.get$localPoint().y));
        t5 = xfB.position;
        t6 = xfB.rotation;
        pointB.x = $.$add$ns($.$add$ns(t5.x, $.$mul$n($.get$x$x(t6.col0), $.$index$asx(t1.get$points(manifold), 0).get$localPoint().x)), $.$mul$n($.get$x$x(t6.col1), $.$index$asx(t1.get$points(manifold), 0).get$localPoint().y));
        pointB.y = $.$add$ns($.$add$ns(t5.y, $.$mul$n($.get$y$x(t6.col0), $.$index$asx(t1.get$points(manifold), 0).get$localPoint().x)), $.$mul$n($.get$y$x(t6.col1), $.$index$asx(t1.get$points(manifold), 0).get$localPoint().y));
        if (pointA.$sub(pointA, pointB).get$length2() > 1.4208639999999999e-14) {
          t2.copyFrom$1(pointB).sub$1(pointA);
          t2.normalize$0();
        }
        t1 = t2.$mul(t2, radiusA);
        cA = t1.$add(t1, pointA);
        t2 = t2.$negate(t2);
        t2 = t2.$mul(t2, radiusB);
        cB = t2.$add(t2, pointB);
        t2 = this.points;
        if (0 >= t2.length)
          throw $.ioore(0);
        $.scale$1$x($.add$1$ax(t2[0].copyFrom$1(cA), cB), 0.5);
        return;
      case 1:
        planePoint = this.pool3;
        t2 = xfA.rotation;
        t3 = this.normal;
        t3.x = $.$add$ns($.$mul$n($.get$x$x(t2.col0), manifold.get$localNormal().x), $.$mul$n($.get$x$x(t2.col1), manifold.get$localNormal().y));
        t3.y = $.$add$ns($.$mul$n($.get$y$x(t2.col0), manifold.get$localNormal().x), $.$mul$n($.get$y$x(t2.col1), manifold.get$localNormal().y));
        t4 = xfA.position;
        planePoint.x = $.$add$ns($.$add$ns(t4.x, $.$mul$n($.get$x$x(t2.col0), manifold.get$localPoint().x)), $.$mul$n($.get$x$x(t2.col1), manifold.get$localPoint().y));
        planePoint.y = $.$add$ns($.$add$ns(t4.y, $.$mul$n($.get$y$x(t2.col0), manifold.get$localPoint().x)), $.$mul$n($.get$y$x(t2.col1), manifold.get$localPoint().y));
        clipPoint = this.pool4;
        for (t2 = xfB.position, t4 = xfB.rotation, t5 = $.getInterceptor$n(radiusA), t6 = this.points, t7 = t6.length, i = 0; $.JSNumber_methods.$lt(i, manifold.get$pointCount()); ++i) {
          clipPoint.x = $.$add$ns($.$add$ns(t2.x, $.$mul$n($.get$x$x(t4.col0), $.$index$asx(t1.get$points(manifold), i).get$localPoint().x)), $.$mul$n($.get$x$x(t4.col1), $.$index$asx(t1.get$points(manifold), i).get$localPoint().y));
          clipPoint.y = $.$add$ns($.$add$ns(t2.y, $.$mul$n($.get$y$x(t4.col0), $.$index$asx(t1.get$points(manifold), i).get$localPoint().x)), $.$mul$n($.get$y$x(t4.col1), $.$index$asx(t1.get$points(manifold), i).get$localPoint().y));
          scalar = t5.$sub(radiusA, $.$add$ns($.$mul$n($.$sub$n(clipPoint.x, planePoint.x), t3.x), $.$mul$n($.$sub$n(clipPoint.y, planePoint.y), t3.y)));
          cAx = $.$add$ns($.$mul$n(t3.x, scalar), clipPoint.x);
          cAy = $.$add$ns($.$mul$n(t3.y, scalar), clipPoint.y);
          cBx = $.$add$ns($.$mul$n($.$negate$n(t3.x), radiusB), clipPoint.x);
          cBy = $.$add$ns($.$mul$n($.$negate$n(t3.y), radiusB), clipPoint.y);
          t8 = $.$mul$n($.$add$ns(cAx, cBx), 0.5);
          if (i >= t7)
            throw $.ioore(i);
          $.set$x$x(t6[i], t8);
          t8 = $.$mul$n($.$add$ns(cAy, cBy), 0.5);
          $.set$y$x(t6[i], t8);
        }
        return;
      case 2:
        planePoint = this.pool3;
        R = xfB.rotation;
        t2 = this.normal;
        t2.x = $.$add$ns($.$mul$n($.get$x$x(R.col0), manifold.get$localNormal().x), $.$mul$n($.get$x$x(R.col1), manifold.get$localNormal().y));
        t2.y = $.$add$ns($.$mul$n($.get$y$x(R.col0), manifold.get$localNormal().x), $.$mul$n($.get$y$x(R.col1), manifold.get$localNormal().y));
        v = manifold.get$localPoint();
        t3 = xfB.position;
        planePoint.x = $.$add$ns($.$add$ns(t3.x, $.$mul$n($.get$x$x(R.col0), v.x)), $.$mul$n($.get$x$x(R.col1), v.y));
        planePoint.y = $.$add$ns($.$add$ns(t3.y, $.$mul$n($.get$y$x(R.col0), v.x)), $.$mul$n($.get$y$x(R.col1), v.y));
        clipPoint = this.pool4;
        for (t3 = xfA.position, t4 = xfA.rotation, t5 = $.getInterceptor$n(radiusB), t6 = this.points, t7 = t6.length, i = 0; $.JSNumber_methods.$lt(i, manifold.get$pointCount()); ++i) {
          clipPoint.x = $.$add$ns($.$add$ns(t3.x, $.$mul$n($.get$x$x(t4.col0), $.$index$asx(t1.get$points(manifold), i).get$localPoint().x)), $.$mul$n($.get$x$x(t4.col1), $.$index$asx(t1.get$points(manifold), i).get$localPoint().y));
          clipPoint.y = $.$add$ns($.$add$ns(t3.y, $.$mul$n($.get$y$x(t4.col0), $.$index$asx(t1.get$points(manifold), i).get$localPoint().x)), $.$mul$n($.get$y$x(t4.col1), $.$index$asx(t1.get$points(manifold), i).get$localPoint().y));
          scalar = t5.$sub(radiusB, $.$add$ns($.$mul$n($.$sub$n(clipPoint.x, planePoint.x), t2.x), $.$mul$n($.$sub$n(clipPoint.y, planePoint.y), t2.y)));
          cBx = $.$add$ns($.$mul$n(t2.x, scalar), clipPoint.x);
          cBy = $.$add$ns($.$mul$n(t2.y, scalar), clipPoint.y);
          cAx = $.$add$ns($.$mul$n($.$negate$n(t2.x), radiusA), clipPoint.x);
          cAy = $.$add$ns($.$mul$n($.$negate$n(t2.y), radiusA), clipPoint.y);
          t8 = $.$mul$n($.$add$ns(cAx, cBx), 0.5);
          if (i >= t7)
            throw $.ioore(i);
          $.set$x$x(t6[i], t8);
          t8 = $.$mul$n($.$add$ns(cAy, cBy), 0.5);
          $.set$y$x(t6[i], t8);
        }
        t2.x = $.$negate$n(t2.x);
        t2.y = $.$negate$n(t2.y);
        break;
    }
  },
  WorldManifold$0: function() {
    var t1, t2, i, t3;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      t3 = $.vec2$zero();
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = t3;
    }
  }
};

$$.BroadPhase = {"": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
  createProxy$2: function(box, userData) {
    var node = this._tree.createProxy$2(box, userData);
    this.proxyCount = this.proxyCount + 1;
    this.moveBuffer.push(node);
    return node;
  },
  moveProxy$3: function(proxy, box, displacement) {
    if (this._tree.moveProxy$3(proxy, box, displacement))
      this.moveBuffer.push(proxy);
  },
  testOverlap$2: function(proxyA, proxyB) {
    return $.AxisAlignedBox_testOverlap(proxyA.get$box(), proxyB.get$box());
  },
  updatePairs$1: function(callback) {
    var t1, i, t2, pairBuffer, primaryPair, pair;
    this._pairCount = 0;
    for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
      this.queryProxy = t2[i];
      t2 = this.queryProxy;
      if (t2 == null)
        continue;
      t1.query$2(t1, this, t2.get$box());
    }
    t2 = $.List_List($, $.DynamicTreeNode);
    $.setRuntimeTypeInfo(t2, [$.DynamicTreeNode]);
    this.moveBuffer = t2;
    pairBuffer = $.JSArray_methods.sublist$2(this._pairBuffer, 0, this._pairCount);
    $.JSArray_methods.sort$1(pairBuffer, new $.BroadPhase_updatePairs_anon());
    $.JSArray_methods.setRange$3(this._pairBuffer, 0, this._pairCount, pairBuffer);
    for (i = 0; $.JSNumber_methods.$lt(i, this._pairCount);) {
      t2 = this._pairBuffer;
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      primaryPair = t2[i];
      callback.addPair$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
      ++i;
      for (; $.JSNumber_methods.$lt(i, this._pairCount);) {
        t2 = this._pairBuffer;
        if (i >= t2.length)
          throw $.ioore(i);
        pair = t2[i];
        if ($.$eq(pair.get$proxyA(), primaryPair.get$proxyA()) !== true || $.$eq(pair.get$proxyB(), primaryPair.get$proxyB()) !== true)
          break;
        ++i;
      }
    }
    t1.rebalance$1(4);
  },
  treeCallback$1: function(proxy) {
    var oldBuffer, t1, i, t2, i0, t3, t4, t5;
    if ($.$eq(proxy, this.queryProxy) === true)
      return true;
    if ($.$eq(this._pairCount, this._pairCapacity) === true) {
      oldBuffer = this._pairBuffer;
      this._pairCapacity = this._pairCapacity * 2;
      t1 = $.List_List(this._pairCapacity, $.Pair);
      $.setRuntimeTypeInfo(t1, [$.Pair]);
      this._pairBuffer = t1;
      for (t1 = this._pairBuffer, i = oldBuffer.length, t2 = t1.length, i0 = 0; i0 < i; ++i0) {
        t3 = oldBuffer[i0];
        if (i0 >= t2)
          throw $.ioore(i0);
        t1[i0] = t3;
      }
      for (; i < this._pairCapacity; ++i) {
        t1 = this._pairBuffer;
        t2 = $.Pair$();
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    t1 = $.$lt$n(proxy.get$key(), this.queryProxy.get$key());
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    if (t1 === true) {
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      t2[t3].set$proxyA(proxy);
      t1 = this.queryProxy;
      t4 = this._pairBuffer;
      t5 = this._pairCount;
      if (t5 !== (t5 | 0))
        throw $.iae(t5);
      if (t5 < 0 || t5 >= t4.length)
        throw $.ioore(t5);
      t4[t5].set$proxyB(t1);
    } else {
      t1 = this.queryProxy;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      t2[t3].set$proxyA(t1);
      t1 = this._pairBuffer;
      t4 = this._pairCount;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t1.length)
        throw $.ioore(t4);
      t1[t4].set$proxyB(proxy);
    }
    this._pairCount = $.$add$ns(this._pairCount, 1);
    return true;
  },
  BroadPhase$0: function() {
    var t1, i, t2;
    t1 = $.List_List($, $.DynamicTreeNode);
    $.setRuntimeTypeInfo(t1, [$.DynamicTreeNode]);
    this.moveBuffer = t1;
    t1 = $.List_List(this._pairCapacity, $.Pair);
    $.setRuntimeTypeInfo(t1, [$.Pair]);
    this._pairBuffer = t1;
    for (i = 0; i < this._pairCapacity; ++i) {
      t1 = this._pairBuffer;
      t2 = $.Pair$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.BroadPhase_updatePairs_anon = {"": "Closure;",
  call$2: function(a, b) {
    return $.compareTo$1$ns(a, b);
  },
  $isFunction: true
};

$$.DynamicTree = {"": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center<,deltaOne,deltaTwo",
  createProxy$2: function(box, userData) {
    var proxy, t1, iterationCount, height, tryCount;
    proxy = this._allocateNode$0();
    t1 = $.$sub$n($.get$x$x(box.lowerBound), 0.1);
    $.set$x$x(proxy.get$box().lowerBound, t1);
    t1 = $.$sub$n($.get$y$x(box.lowerBound), 0.1);
    $.set$y$x(proxy.get$box().lowerBound, t1);
    t1 = $.$add$ns($.get$x$x(box.upperBound), 0.1);
    $.set$x$x(proxy.get$box().upperBound, t1);
    t1 = $.$add$ns($.get$y$x(box.upperBound), 0.1);
    $.set$y$x(proxy.get$box().upperBound, t1);
    proxy.set$userData(userData);
    this._insertLeaf$1(proxy);
    iterationCount = $.JSInt_methods.$shr(this._nodeCount, 4);
    height = this._computeHeight$1(this._root);
    tryCount = 0;
    while (true) {
      if (!(height > 64 && tryCount < 10))
        break;
      this.rebalance$1(iterationCount);
      height = this._computeHeight$1(this._root);
      ++tryCount;
    }
    return proxy;
  },
  moveProxy$3: function(argProxy, argBox, displacement) {
    var t1, t2, t3, t4;
    t1 = argProxy.get$box();
    if (t1.contains$1(t1, argBox))
      return false;
    this._removeLeaf$1(argProxy);
    t1 = argBox.lowerBound;
    t2 = $.getInterceptor$x(t1);
    t2.set$x(t1, $.$sub$n(t2.get$x(t1), 0.1));
    t1 = argBox.lowerBound;
    t2 = $.getInterceptor$x(t1);
    t2.set$y(t1, $.$sub$n(t2.get$y(t1), 0.1));
    t1 = argBox.upperBound;
    t2 = $.getInterceptor$x(t1);
    t2.set$x(t1, $.$add$ns(t2.get$x(t1), 0.1));
    t1 = argBox.upperBound;
    t2 = $.getInterceptor$x(t1);
    t2.set$y(t1, $.$add$ns(t2.get$y(t1), 0.1));
    t1 = this._tempVector;
    t2 = t1.copyFrom$1(displacement);
    t2.scale$1(t2, 2);
    t2 = $.$lt$n(t1.x, 0);
    t3 = t1.x;
    if (t2 === true) {
      t2 = argBox.lowerBound;
      t4 = $.getInterceptor$x(t2);
      t4.set$x(t2, $.$add$ns(t4.get$x(t2), t3));
    } else {
      t2 = argBox.upperBound;
      t4 = $.getInterceptor$x(t2);
      t4.set$x(t2, $.$add$ns(t4.get$x(t2), t3));
    }
    t2 = $.$lt$n(t1.y, 0);
    t1 = t1.y;
    if (t2 === true) {
      t2 = argBox.lowerBound;
      t3 = $.getInterceptor$x(t2);
      t3.set$y(t2, $.$add$ns(t3.get$y(t2), t1));
    } else {
      t2 = argBox.upperBound;
      t3 = $.getInterceptor$x(t2);
      t3.set$y(t2, $.$add$ns(t3.get$y(t2), t1));
    }
    argProxy.get$box().setFrom$1(argBox);
    this._insertLeaf$1(argProxy);
    return true;
  },
  _allocateNode$0: function() {
    var t1, i, node;
    t1 = this._nodeStack;
    if (t1.get$isEmpty(t1) === true)
      for (i = 0; i < 6; ++i)
        t1.addFirst$1($.DynamicTreeNode$_construct());
    node = t1.removeFirst$0();
    $.set$parent$x(node, null);
    node.set$childOne(null);
    node.set$childTwo(null);
    node.set$userData(null);
    node.set$key(this._nodeCounter);
    this._nodeCounter = this._nodeCounter + 1;
    this._nodeCount = this._nodeCount + 1;
    return node;
  },
  query$2: function(_, callback, argBox) {
    this._query$4(callback, argBox, this._root, 1);
  },
  _query$4: function(callback, argBox, node, count) {
    if (node == null)
      return true;
    if ($.AxisAlignedBox_testOverlap(argBox, node.get$box()))
      if (node.get$isLeaf() === true) {
        if (!callback.treeCallback$1(node))
          return false;
      } else {
        if (count < 64) {
          ++count;
          if (!this._query$4(callback, argBox, node.get$childOne(), count))
            return false;
        }
        if (count < 64)
          if (!this._query$4(callback, argBox, node.get$childTwo(), count + 1))
            return false;
      }
    return true;
  },
  _insertLeaf$1: function(node) {
    var t1, sibling, childOne, childTwo, t2, t3, t4, normOne, node1, node2, node10;
    this._insertionCount = this._insertionCount + 1;
    if (this._root == null) {
      this._root = node;
      $.set$parent$x(node, null);
      return;
    }
    t1 = this.center;
    t1.copyFrom$1(node.get$box().get$center());
    sibling = this._root;
    if (sibling.get$isLeaf() !== true)
      do {
        childOne = sibling.get$childOne();
        childTwo = sibling.get$childTwo();
        t2 = this.deltaOne;
        t2.copyFrom$1(childOne.get$box().get$center()).sub$1(t1).absolute$0();
        t3 = this.deltaTwo;
        t3.copyFrom$1(childTwo.get$box().get$center()).sub$1(t1).absolute$0();
        t4 = t2.x;
        if (typeof t4 !== "number")
          return this._insertLeaf$1$bailout(1, node, t4, childOne, childTwo, t2, t3);
        t2 = t2.y;
        if (typeof t2 !== "number")
          return this._insertLeaf$1$bailout(2, node, t4, childOne, childTwo, t2, t3);
        normOne = t4 + t2;
        t2 = t3.x;
        if (typeof t2 !== "number")
          return this._insertLeaf$1$bailout(3, node, 0, childOne, childTwo, t2, t3, normOne);
        t3 = t3.y;
        if (typeof t3 !== "number")
          return this._insertLeaf$1$bailout(4, node, 0, childOne, childTwo, t2, t3, normOne);
        sibling = normOne < t2 + t3 ? childOne : childTwo;
        t2 = sibling.get$isLeaf();
        if (typeof t2 !== "boolean")
          return this._insertLeaf$1$bailout(5, node, 0, 0, 0, t2, 0, 0, sibling, t1);
      } while (!t2);
    t1 = $.getInterceptor$x(sibling);
    node1 = t1.get$parent(sibling);
    node2 = this._allocateNode$0();
    $.set$parent$x(node2, node1);
    node2.set$userData(null);
    node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
    if (node1 != null) {
      if ($.$eq(t1.get$parent(sibling).get$childOne(), sibling) === true)
        node1.set$childOne(node2);
      else
        node1.set$childTwo(node2);
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      t1.set$parent(sibling, node2);
      $.set$parent$x(node, node2);
      do {
        t1 = node1.get$box();
        if (t1.contains$1(t1, node2.get$box()))
          break;
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        node10 = $.get$parent$x(node1);
        if (node10 != null) {
          node2 = node1;
          node1 = node10;
          continue;
        } else
          break;
      } while (true);
    } else {
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      t1.set$parent(sibling, node2);
      $.set$parent$x(node, node2);
      this._root = node2;
    }
  },
  _insertLeaf$1$bailout: function(state0, node, t4, childOne, childTwo, t2, t3, normOne, sibling, t1) {
    switch (state0) {
      case 0:
        this._insertionCount = this._insertionCount + 1;
        if (this._root == null) {
          this._root = node;
          $.set$parent$x(node, null);
          return;
        }
        t1 = this.center;
        t1.copyFrom$1(node.get$box().get$center());
        sibling = this._root;
      default:
        var node1, node2, node10;
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && sibling.get$isLeaf() !== true)
          switch (state0) {
            case 0:
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      childOne = sibling.get$childOne();
                      childTwo = sibling.get$childTwo();
                      t2 = this.deltaOne;
                      t2.copyFrom$1(childOne.get$box().get$center()).sub$1(t1).absolute$0();
                      t3 = this.deltaTwo;
                      t3.copyFrom$1(childTwo.get$box().get$center()).sub$1(t1).absolute$0();
                      t4 = t2.x;
                    case 1:
                      state0 = 0;
                      t2 = t2.y;
                    case 2:
                      state0 = 0;
                      normOne = $.$add$ns(t4, t2);
                      t2 = t3.x;
                    case 3:
                      state0 = 0;
                      t3 = t3.y;
                    case 4:
                      state0 = 0;
                      sibling = $.$lt$n(normOne, $.$add$ns(t2, t3)) === true ? childOne : childTwo;
                      t2 = sibling.get$isLeaf();
                    case 5:
                      state0 = 0;
                      if (!($.$eq(t2, false) === true))
                        break L0;
                  }
          }
        t1 = $.getInterceptor$x(sibling);
        node1 = t1.get$parent(sibling);
        node2 = this._allocateNode$0();
        $.set$parent$x(node2, node1);
        node2.set$userData(null);
        node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
        if (node1 != null) {
          if ($.$eq(t1.get$parent(sibling).get$childOne(), sibling) === true)
            node1.set$childOne(node2);
          else
            node1.set$childTwo(node2);
          node2.set$childOne(sibling);
          node2.set$childTwo(node);
          t1.set$parent(sibling, node2);
          $.set$parent$x(node, node2);
          do {
            t1 = node1.get$box();
            if (t1.contains$1(t1, node2.get$box()))
              break;
            node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
            node10 = $.get$parent$x(node1);
            if (node10 != null) {
              node2 = node1;
              node1 = node10;
              continue;
            } else
              break;
          } while (true);
        } else {
          node2.set$childOne(sibling);
          node2.set$childTwo(node);
          t1.set$parent(sibling, node2);
          $.set$parent$x(node, node2);
          this._root = node2;
        }
    }
  },
  _removeLeaf$1: function(argNode) {
    var t1, node2, node1, sibling;
    t1 = $.getInterceptor(argNode);
    if (t1.$eq(argNode, this._root) === true) {
      this._root = null;
      if ($.$eq(this._lastLeaf, argNode) === true)
        this._lastLeaf = null;
      return;
    }
    node2 = t1.get$parent(argNode);
    node1 = $.get$parent$x(node2);
    sibling = $.$eq(node2.get$childOne(), argNode) === true ? node2.get$childTwo() : node2.get$childOne();
    if (node1 != null) {
      if ($.$eq(node1.get$childOne(), node2) === true)
        node1.set$childOne(sibling);
      else
        node1.set$childTwo(sibling);
      $.set$parent$x(sibling, node1);
      this._freeNode$1(node2);
      for (t1 = this._tempBox; node1 != null;) {
        t1.setFrom$1(node1.get$box());
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        if (t1.contains$1(t1, node1.get$box()))
          break;
        node1 = $.get$parent$x(node1);
      }
    } else {
      this._root = sibling;
      $.set$parent$x(sibling, null);
      this._freeNode$1(node2);
    }
    if ($.$eq(this._lastLeaf, argNode) === true)
      this._lastLeaf = this._root;
  },
  _computeHeight$1: function(node) {
    if (node == null)
      return 0;
    return 1 + $.max(this._computeHeight$1(node.get$childOne()), this._computeHeight$1(node.get$childTwo()));
  },
  rebalance$1: function(iterations) {
    var i, current, bit, t1, t2, bit0;
    if (this._root == null)
      return;
    for (i = 0; i < iterations; ++i) {
      current = this._root;
      bit = 0;
      while (true) {
        t1 = current.get$isLeaf() !== true;
        t2 = this._path;
        if (t2 !== (t2 | 0))
          return this.rebalance$1$bailout(1, t2, i, current, iterations, bit, t1);
        if (!t1)
          break;
        current = ($.JSNumber_methods.$shr(t2, bit) & 1) === 0 ? current.get$childOne() : current.get$childTwo();
        bit0 = bit + 1 & 31;
        bit = bit0;
      }
      this._path = t2 + 1;
      this._removeLeaf$1(current);
      this._insertLeaf$1(current);
    }
  },
  rebalance$1$bailout: function(state0, t2, i, current, iterations, bit, t1) {
    switch (state0) {
      case 0:
        if (this._root == null)
          return;
        i = 0;
      case 1:
        var bit0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < iterations))
                  break L0;
                current = this._root;
                bit = 0;
              case 1:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t1 = current.get$isLeaf() !== true;
                        t2 = this._path;
                      case 1:
                        state0 = 0;
                        if (!t1)
                          break L1;
                        current = ($.JSNumber_methods.$shr(t2, bit) & 1) === 0 ? current.get$childOne() : current.get$childTwo();
                        bit0 = bit + 1 & 31;
                        bit = bit0;
                    }
                this._path = t2 + 1;
                this._removeLeaf$1(current);
                this._insertLeaf$1(current);
                ++i;
            }
    }
  },
  _freeNode$1: function(node) {
    this._nodeStack.addFirst$1(node);
    this._nodeCount = this._nodeCount - 1;
  },
  DynamicTree$0: function() {
    var t1, t2, i;
    for (t1 = this._drawVectors, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = $.vec2$zero();
  }
};

$$.DynamicTreeNode = {"": "Object;box<,parent*,next@,childOne@,childTwo@,userData@,key@",
  get$isLeaf: function() {
    return this.childOne == null;
  },
  toString$0: function(_) {
    var t1 = this.box;
    return t1.toString$0(t1);
  }
};

$$.Pair = {"": "Object;proxyA@,proxyB@",
  compareTo$1: function(_, pair2) {
    var t1;
    if ($.$lt$n(this.proxyA.get$key(), pair2.get$proxyA().get$key()) === true)
      return -1;
    if ($.$eq(this.proxyA.get$key(), pair2.get$proxyA().get$key()) === true) {
      if ($.$lt$n(this.proxyB.get$key(), pair2.get$proxyB().get$key()) === true)
        t1 = -1;
      else
        t1 = $.$eq(this.proxyB.get$key(), pair2.get$proxyB().get$key()) === true ? 0 : 1;
      return t1;
    }
    return 1;
  }
};

$$.MassData = {"": "Object;mass<,center<,inertia<",
  setFrom$1: function(md) {
    this.mass = md.get$mass();
    this.inertia = md.get$inertia();
    this.center.copyFrom$1(md.get$center());
  }
};

$$.PolygonShape = {"": "Shape;centroid<,vertices<,normals<,vertexCount<,type,radius",
  getSupport$1: function(d) {
    var t1, t2, bestValue, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    bestValue = t1[0].dot$1(d);
    for (bestIndex = 0, i = 1; $.JSNumber_methods.$lt(i, this.vertexCount); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      value = t1[i].dot$1(d);
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
    }
    return bestIndex;
  },
  clone$0: function(_) {
    return $.PolygonShape$copy(this);
  },
  setAsBox$2: function(hx, hy) {
    var t1, t2, t3, t4;
    this.vertexCount = 4;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = -hx;
    t4 = -hy;
    t1[0].setComponents$2(t3, t4);
    if (1 >= t2)
      throw $.ioore(1);
    t1[1].setComponents$2(hx, t4);
    if (2 >= t2)
      throw $.ioore(2);
    t1[2].setComponents$2(hx, hy);
    if (3 >= t2)
      throw $.ioore(3);
    t1[3].setComponents$2(t3, hy);
    t3 = this.normals;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t3[0].setComponents$2(0, -1);
    if (1 >= t4)
      throw $.ioore(1);
    t3[1].setComponents$2(1, 0);
    if (2 >= t4)
      throw $.ioore(2);
    t3[2].setComponents$2(0, 1);
    if (3 >= t4)
      throw $.ioore(3);
    t3[3].setComponents$2(-1, 0);
    this.centroid.splat$1(0);
  },
  computeAxisAlignedBox$2: function(argAabb, argXf) {
    var lower, upper, v, t1, t2, i;
    lower = $.vec2$zero();
    upper = $.vec2$zero();
    v = $.vec2$zero();
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    $.Transform_mulToOut(argXf, t1[0], lower);
    upper.copyFrom$1(lower);
    for (i = 1; $.JSNumber_methods.$lt(i, this.vertexCount); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      $.Transform_mulToOut(argXf, t1[i], v);
      $.min0(v, lower, lower);
      $.max0(v, upper, upper);
    }
    t1 = $.$sub$n(lower.x, this.radius);
    $.set$x$x(argAabb.lowerBound, t1);
    t1 = $.$sub$n(lower.y, this.radius);
    $.set$y$x(argAabb.lowerBound, t1);
    t1 = $.$add$ns(upper.x, this.radius);
    $.set$x$x(argAabb.upperBound, t1);
    t1 = $.$add$ns(upper.y, this.radius);
    $.set$y$x(argAabb.upperBound, t1);
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, center, pRef, e1, e2, area, I, i, p2, p3, D, triangleArea, t4, t5, t6, t7, t8, t9, px, py, ex1, ey1, ex2, ey2, t10, t11, t12, t13, t14, t15, t16, t17;
    if ($.$eq(this.vertexCount, 2) === true) {
      t1 = this.vertices;
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      t3 = massData.center.copyFrom$1(t1[0]);
      if (1 >= t2)
        throw $.ioore(1);
      t3 = t3.add$1(t3, t1[1]);
      t3.scale$1(t3, 0.5);
      massData.mass = 0;
      massData.inertia = 0;
      return;
    }
    center = $.vec2$zero();
    pRef = $.vec2$zero();
    e1 = $.vec2$zero();
    e2 = $.vec2$zero();
    for (t1 = this.vertices, t2 = t1.length, area = 0, I = 0, i = 0; $.JSNumber_methods.$lt(i, this.vertexCount);) {
      if (i >= t2)
        throw $.ioore(i);
      p2 = t1[i];
      ++i;
      if ($.JSNumber_methods.$lt(i, this.vertexCount)) {
        if (i >= t2)
          throw $.ioore(i);
        p3 = t1[i];
      } else {
        if (0 >= t2)
          throw $.ioore(0);
        p3 = t1[0];
      }
      e1.copyFrom$1(p2).sub$1(pRef);
      e2.copyFrom$1(p3).sub$1(pRef);
      D = $.cross(e1, e2, null);
      if (typeof D !== "number")
        throw $.iae(D);
      triangleArea = 0.5 * D;
      area += triangleArea;
      t3 = center.x;
      t4 = triangleArea * 0.3333333333333333;
      t5 = $.getInterceptor$x(p2);
      t6 = $.getInterceptor$x(p3);
      t7 = $.$add$ns($.$add$ns(pRef.x, t5.get$x(p2)), t6.get$x(p3));
      if (typeof t7 !== "number")
        throw $.iae(t7);
      center.x = $.$add$ns(t3, t4 * t7);
      t8 = center.y;
      t9 = $.$add$ns($.$add$ns(pRef.y, t5.get$y(p2)), t6.get$y(p3));
      if (typeof t9 !== "number")
        throw $.iae(t9);
      center.y = $.$add$ns(t8, t4 * t9);
      px = pRef.x;
      py = pRef.y;
      ex1 = e1.x;
      ey1 = e1.y;
      ex2 = e2.x;
      ey2 = e2.y;
      t10 = $.getInterceptor$n(ex2);
      t11 = $.$add$ns($.$add$ns($.$mul$n(ex1, ex1), t10.$mul(ex2, ex1)), t10.$mul(ex2, ex2));
      if (typeof t11 !== "number")
        throw $.iae(t11);
      t12 = $.getInterceptor$n(px);
      t13 = $.$add$ns(t12.$mul(px, ex1), t12.$mul(px, ex2));
      if (typeof t13 !== "number")
        throw $.iae(t13);
      if (typeof px !== "number")
        throw $.iae(px);
      t14 = $.getInterceptor$n(ey2);
      t15 = $.$add$ns($.$add$ns($.$mul$n(ey1, ey1), t14.$mul(ey2, ey1)), t14.$mul(ey2, ey2));
      if (typeof t15 !== "number")
        throw $.iae(t15);
      t16 = $.getInterceptor$n(py);
      t17 = $.$add$ns(t16.$mul(py, ey1), t16.$mul(py, ey2));
      if (typeof t17 !== "number")
        throw $.iae(t17);
      if (typeof py !== "number")
        throw $.iae(py);
      I += D * (0.3333333333333333 * (0.25 * t11 + t13) + 0.5 * px * px + (0.3333333333333333 * (0.25 * t15 + t17) + 0.5 * py * py));
    }
    massData.mass = $.$mul$n(density, area);
    center.scale$1(center, 1 / area);
    massData.center.copyFrom$1(center);
    if (typeof density !== "number")
      throw $.iae(density);
    massData.inertia = I * density;
  },
  PolygonShape$0: function() {
    var t1, t2, i;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = $.vec2$zero();
    for (t1 = this.normals, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = $.vec2$zero();
  },
  PolygonShape$copy$1: function(other) {
    var t1, t2, i, t3, t4;
    for (t1 = this.vertices, t2 = t1.length, i = 0; t3 = other.get$vertices(), i < t3.length; ++i) {
      t4 = $.vec2$copy(t3[i]);
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = t4;
    }
    for (t1 = this.normals, t2 = t1.length, i = 0; t3 = other.get$normals(), i < t3.length; ++i) {
      t4 = $.vec2$copy(t3[i]);
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = t4;
    }
  }
};

$$.Shape = {"": "Object;type*,radius@"};

$$.CanvasViewportTransform = {"": "ViewportTransform;yFlip,extents,scale,center",
  CanvasViewportTransform$2: function(_extents, _center) {
    this.yFlip = true;
  }
};

$$.Color3 = {"": "Object;x*,y*,z*",
  setFromRGBF$3: function(r, g, b) {
    this.x = $.JSNumber_methods.toInt$0($.JSDouble_methods.floor$0(r * 255));
    this.y = $.JSNumber_methods.toInt$0($.JSDouble_methods.floor$0(g * 255));
    this.z = $.JSNumber_methods.toInt$0($.JSDouble_methods.floor$0(b * 255));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$isColor3)
      t1 = $.$eq(this.x, other.x) === true && $.$eq(this.y, other.y) === true && $.$eq(this.z, other.z) === true;
    else
      t1 = false;
    return t1;
  },
  $isColor3: true
};

$$.Sweep = {"": "Object;localCenter<,centerZero<,center<,angleZero<,angle<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.localCenter;
    if (t1.$eq(t1, other.get$localCenter())) {
      t1 = this.centerZero;
      if (t1.$eq(t1, other.get$centerZero())) {
        t1 = this.center;
        t1 = t1.$eq(t1, other.get$center()) && $.$eq(this.angleZero, other.get$angleZero()) === true && $.$eq(this.angle, other.get$angle()) === true;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    this.localCenter.copyFrom$1(other.get$localCenter());
    this.centerZero.copyFrom$1(other.get$centerZero());
    this.center.copyFrom$1(other.get$center());
    this.angleZero = other.get$angleZero();
    this.angle = other.get$angle();
  },
  normalize$0: function() {
    var d = 6.283185307179586 * $.floor$0$n($.$div$n(this.angleZero, 6.283185307179586));
    this.angleZero = $.$sub$n(this.angleZero, d);
    this.angle = $.$sub$n(this.angle, d);
  },
  getTransform$2: function(xf, alpha) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t12, t14, t15, t18, t20, t22, t24;
    if (typeof alpha !== "number")
      throw $.iae(alpha);
    t1 = 1 - alpha;
    t2 = this.centerZero;
    t3 = t2.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = this.center;
    t5 = t4.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = xf.position;
    t6.x = t1 * t3 + alpha * t5;
    t2 = t2.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t4 = t4.y;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t6.y = t1 * t2 + alpha * t4;
    t7 = xf.rotation;
    t8 = this.angleZero;
    if (typeof t8 !== "number")
      throw $.iae(t8);
    t9 = this.angle;
    if (typeof t9 !== "number")
      throw $.iae(t9);
    t7.setRotation$1(t1 * t8 + alpha * t9);
    t10 = t6.x;
    if (typeof t10 !== "number")
      return this.getTransform$2$bailout(1, t10, t6, t7);
    t12 = $.get$x$x(t7.col0);
    if (typeof t12 !== "number")
      return this.getTransform$2$bailout(2, t10, t6, t7, t12);
    t14 = this.localCenter;
    t15 = t14.x;
    if (typeof t15 !== "number")
      return this.getTransform$2$bailout(3, t10, t6, t7, t12, t14, t15);
    t15 = t12 * t15;
    t12 = $.get$x$x(t7.col1);
    if (typeof t12 !== "number")
      return this.getTransform$2$bailout(4, t10, t6, t7, t12, t14, t15);
    t18 = t14.y;
    if (typeof t18 !== "number")
      return this.getTransform$2$bailout(5, t10, t6, t7, t12, t14, t15, t18);
    t6.x = t10 - (t15 + t12 * t18);
    t20 = t6.y;
    if (typeof t20 !== "number")
      return this.getTransform$2$bailout(6, 0, t6, t7, 0, t14, 0, 0, t20);
    t22 = $.get$y$x(t7.col0);
    if (typeof t22 !== "number")
      return this.getTransform$2$bailout(7, 0, t6, t7, 0, t14, 0, 0, t20, t22);
    t24 = t14.x;
    if (typeof t24 !== "number")
      return this.getTransform$2$bailout(8, 0, t6, t7, 0, t14, 0, 0, t20, t22, t24);
    t24 = t22 * t24;
    t22 = $.get$y$x(t7.col1);
    if (typeof t22 !== "number")
      return this.getTransform$2$bailout(9, 0, t6, 0, 0, t14, 0, 0, t20, t22, t24);
    t14 = t14.y;
    if (typeof t14 !== "number")
      return this.getTransform$2$bailout(10, 0, t6, 0, 0, t14, 0, 0, t20, t22, t24);
    t6.y = t20 - (t24 + t22 * t14);
  },
  getTransform$2$bailout: function(state0, t10, t6, t7, t12, t14, t15, t18, t20, t22, t24) {
    switch (state0) {
      case 0:
        if (typeof alpha !== "number")
          throw $.iae(alpha);
        t1 = 1 - alpha;
        t2 = this.centerZero;
        t3 = t2.x;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t4 = this.center;
        t5 = t4.x;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t6 = xf.position;
        t6.x = t1 * t3 + alpha * t5;
        t2 = t2.y;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t4 = t4.y;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t6.y = t1 * t2 + alpha * t4;
        t7 = xf.rotation;
        t8 = this.angleZero;
        if (typeof t8 !== "number")
          throw $.iae(t8);
        t9 = this.angle;
        if (typeof t9 !== "number")
          throw $.iae(t9);
        t7.setRotation$1(t1 * t8 + alpha * t9);
        t10 = t6.x;
      case 1:
        state0 = 0;
        t12 = $.get$x$x(t7.col0);
      case 2:
        state0 = 0;
        t14 = this.localCenter;
        t15 = t14.x;
      case 3:
        state0 = 0;
        t15 = $.$mul$n(t12, t15);
        t12 = $.get$x$x(t7.col1);
      case 4:
        state0 = 0;
        t18 = t14.y;
      case 5:
        state0 = 0;
        t6.x = $.$sub$n(t10, $.$add$ns(t15, $.$mul$n(t12, t18)));
        t20 = t6.y;
      case 6:
        state0 = 0;
        t22 = $.get$y$x(t7.col0);
      case 7:
        state0 = 0;
        t24 = t14.x;
      case 8:
        state0 = 0;
        t24 = $.$mul$n(t22, t24);
        t22 = $.get$y$x(t7.col1);
      case 9:
        state0 = 0;
        t14 = t14.y;
      case 10:
        var t1, t2, t3, t4, t5, t8, t9;
        state0 = 0;
        t6.y = $.$sub$n(t20, $.$add$ns(t24, $.$mul$n(t22, t14)));
    }
  },
  advance$1: function(time) {
    var t1, t2, t3, t4, t5, t6, t7;
    if (typeof time !== "number")
      throw $.iae(time);
    t1 = 1 - time;
    t2 = this.centerZero;
    t3 = t2.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = this.center;
    t5 = t4.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t2.x = t1 * t3 + time * t5;
    t6 = t2.y;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t4 = t4.y;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t2.y = t1 * t6 + time * t4;
    t2 = this.angleZero;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t7 = this.angle;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    this.angleZero = t1 * t2 + time * t7;
  }
};

$$.Transform = {"": "Object;position>,rotation<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.position;
    if (t1.$eq(t1, $.get$position$x(other))) {
      t1 = this.rotation;
      t1 = t1.$eq(t1, other.get$rotation());
    } else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    this.position.copyFrom$1($.get$position$x(other));
    this.rotation.copyFrom$1(other.get$rotation());
  }
};

$$.ViewportTransform = {"": "Object;center<",
  scale$1: function($receiver, arg0) {
    return this.scale.call$1(arg0);
  },
  get$translation: function() {
    var t1 = this.extents;
    return t1.$sub(t1, this.center);
  },
  getWorldToScreen$2: function(argWorld, argScreen) {
    var t1, t2, gridCorrectedX, gridCorrectedY, t3;
    t1 = $.getInterceptor$x(argWorld);
    t2 = this.extents;
    gridCorrectedX = $.$add$ns($.$mul$n(t1.get$x(argWorld), this.scale), t2.x);
    gridCorrectedY = $.$sub$n(t2.y, $.$mul$n(t1.get$y(argWorld), this.scale));
    t3 = $.getInterceptor$x(argScreen);
    t3.set$x(argScreen, $.$add$ns(gridCorrectedX, $.get$x$x(this.get$translation())));
    t3.set$y(argScreen, $.$sub$n(gridCorrectedY, $.get$y$x(this.get$translation())));
  }
};

$$.Body = {"": "Object;world,flags@,contactList@,sleepTime@,userData@,_linearVelocity,_angularVelocity,mass<,invMass<,next@,prev@,fixtureList<,fixtureCount,jointList<,_force<,_torque@,_inertia,invInertia<,linearDamping<,angularDamping<,_type<,islandIndex?,originTransform<,sweep<,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
  createFixture$1: function(def) {
    var fixture, t1;
    fixture = $.Fixture$();
    fixture.create$2(this, def);
    if ((this.flags & 32) === 32)
      fixture.createProxy$2(this.world._contactManager.broadPhase, this.originTransform);
    fixture.next = this.fixtureList;
    this.fixtureList = fixture;
    this.fixtureCount = this.fixtureCount + 1;
    fixture.body = this;
    if ($.$gt$n(fixture.density, 0) === true)
      this.resetMassData$0();
    t1 = this.world;
    t1._flags = (t1._flags | 1) >>> 0;
    return fixture;
  },
  createFixtureFromShape$2: function(shape, density) {
    var t1 = this._fixDef;
    t1.shape = shape;
    t1.density = density;
    return this.createFixture$1(t1);
  },
  createFixtureFromShape$1: function(shape) {
    return this.createFixtureFromShape$2(shape, 0);
  },
  get$position: function(_) {
    return this.originTransform.position;
  },
  get$angle: function() {
    return this.sweep.angle;
  },
  get$worldCenter: function() {
    return this.sweep.center;
  },
  get$localCenter: function() {
    return this.sweep.localCenter;
  },
  get$linearVelocity: function() {
    return this._linearVelocity;
  },
  set$linearVelocity: function(v) {
    if ($.$eq(this._type, 0) === true)
      return;
    if ($.dot(v, v) > 0)
      this.set$awake(true);
    this._linearVelocity.copyFrom$1(v);
  },
  get$angularVelocity: function() {
    return this._angularVelocity;
  },
  set$angularVelocity: function(w) {
    var t1;
    if (typeof w !== "number")
      return this.set$angularVelocity$bailout(1, w);
    t1 = this._type;
    if (typeof t1 !== "number")
      return this.set$angularVelocity$bailout(2, w, t1);
    if (t1 !== 0) {
      if (w * w > 0)
        this.set$awake(true);
      this._angularVelocity = w;
    }
  },
  set$angularVelocity$bailout: function(state0, w, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._type;
      case 2:
        state0 = 0;
        if ($.$eq(t1, 0) !== true) {
          if ($.$gt$n($.$mul$n(w, w), 0) === true)
            this.set$awake(true);
          this._angularVelocity = w;
        }
    }
  },
  get$inertia: function() {
    var t1, t2, t3, t4;
    t1 = this._inertia;
    t2 = this.mass;
    t3 = this.sweep.localCenter;
    t4 = t3.x;
    t4 = $.$mul$n(t4, t4);
    t3 = t3.y;
    return $.$add$ns(t1, $.$mul$n(t2, $.$add$ns(t4, $.$mul$n(t3, t3))));
  },
  getMassData$1: function(data) {
    var lc, t1, t3, t5;
    data.mass = this.mass;
    lc = this.sweep.localCenter;
    t1 = this._inertia;
    if (typeof t1 !== "number")
      return this.getMassData$1$bailout(1, data, lc, t1);
    t3 = this.mass;
    if (typeof t3 !== "number")
      return this.getMassData$1$bailout(2, data, lc, t1, t3);
    data.inertia = t1 + t3 * lc.get$length2();
    t5 = data.center;
    t5.x = lc.x;
    t5.y = lc.y;
  },
  getMassData$1$bailout: function(state0, data, lc, t1, t3) {
    switch (state0) {
      case 0:
        data.mass = this.mass;
        lc = this.sweep.localCenter;
        t1 = this._inertia;
      case 1:
        state0 = 0;
        t3 = this.mass;
      case 2:
        var t5;
        state0 = 0;
        data.inertia = $.$add$ns(t1, $.$mul$n(t3, lc.get$length2()));
        t5 = data.center;
        t5.x = lc.x;
        t5.y = lc.y;
    }
  },
  resetMassData$0: function() {
    var t1, t2, t3, massData, f, t4, temp, t5;
    this.mass = 0;
    this.invMass = 0;
    this._inertia = 0;
    this.invInertia = 0;
    t1 = this.sweep;
    t2 = t1.localCenter;
    t2.splat$1(0);
    if ($.$eq(this._type, 0) === true || $.$eq(this._type, 1) === true) {
      t2 = this.originTransform.position;
      t1.center.copyFrom$1(t2);
      t1.centerZero.copyFrom$1(t2);
      return;
    }
    t3 = this.tempCenter;
    t3.splat$1(0);
    massData = this._pmd;
    for (f = this.fixtureList, t4 = massData.center; f != null; f = f.get$next()) {
      if ($.$eq(f.get$density(), 0) === true)
        continue;
      f.getMassData$1(massData);
      this.mass = $.$add$ns(this.mass, massData.mass);
      temp = $.vec2$copy(t4);
      temp.scale$1(temp, massData.mass);
      t3.add$1(t3, temp);
      this._inertia = $.$add$ns(this._inertia, massData.inertia);
    }
    if ($.$gt$n(this.mass, 0) === true) {
      t4 = this.mass;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      this.invMass = 1 / t4;
      t3.scale$1(t3, this.invMass);
    } else {
      this.mass = 1;
      this.invMass = 1;
    }
    if ($.$gt$n(this._inertia, 0) === true && (this.flags & 16) === 0) {
      this._inertia = $.$sub$n(this._inertia, $.$mul$n(this.mass, t3.dot$1(t3)));
      t4 = this._inertia;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      this.invInertia = 1 / t4;
    } else {
      this._inertia = 0;
      this.invInertia = 0;
    }
    t4 = this.oldCenter;
    t5 = t1.center;
    t4.copyFrom$1(t5);
    t2.copyFrom$1(t3);
    t1 = t1.centerZero;
    $.Transform_mulToOut(this.originTransform, t2, t1);
    t5.copyFrom$1(t1);
    temp = t5.$sub(t5, t4);
    t4 = this._linearVelocity;
    t4.add$1(t4, $.cross(this._angularVelocity, temp, null));
  },
  getWorldPoint$1: function(localPoint) {
    var v = $.vec2$zero();
    $.Transform_mulToOut(this.originTransform, localPoint, v);
    return v;
  },
  getWorldPointToOut$2: function(localPoint, out) {
    $.Transform_mulToOut(this.originTransform, localPoint, out);
  },
  getWorldVector$1: function(localVector) {
    var out = $.vec2$zero();
    this.originTransform.rotation.transformed$2(localVector, out);
    return out;
  },
  getWorldVectorToOut$2: function(localVector, out) {
    this.originTransform.rotation.transformed$2(localVector, out);
  },
  get$type: function(_) {
    return this._type;
  },
  set$type: function(_, otherType) {
    var t1, ce;
    if ($.$eq(this._type, otherType) === true)
      return;
    this._type = otherType;
    this.resetMassData$0();
    t1 = this._type;
    if (typeof t1 !== "number")
      return this.set$type$bailout(1, t1);
    if (t1 === 0) {
      this._linearVelocity.splat$1(0);
      this._angularVelocity = 0;
    }
    this.set$awake(true);
    this._force.splat$1(0);
    this._torque = 0;
    for (ce = this.contactList; ce != null; ce = ce.get$next())
      ce.get$contact().flagForFiltering$0();
  },
  set$type$bailout: function(state0, t1) {
    var ce;
    if ($.$eq(t1, 0) === true) {
      this._linearVelocity.splat$1(0);
      this._angularVelocity = 0;
    }
    this.set$awake(true);
    this._force.splat$1(0);
    this._torque = 0;
    for (ce = this.contactList; ce != null; ce = ce.get$next())
      ce.get$contact().flagForFiltering$0();
  },
  get$bullet: function() {
    return (this.flags & 8) === 8;
  },
  set$awake: function(flag) {
    var t1;
    if (flag === true) {
      t1 = this.flags;
      if ((t1 & 2) === 0) {
        this.flags = (t1 | 2) >>> 0;
        this.sleepTime = 0;
      }
    } else {
      this.flags = (this.flags & 4294967293) >>> 0;
      this.sleepTime = 0;
      this._linearVelocity.splat$1(0);
      this._angularVelocity = 0;
      this._force.splat$1(0);
      this._torque = 0;
    }
  },
  get$awake: function() {
    return (this.flags & 2) === 2;
  },
  get$active: function() {
    return (this.flags & 32) === 32;
  },
  get$fixedRotation: function() {
    return (this.flags & 16) === 16;
  },
  synchronizeFixtures$0: function() {
    var xf1, t1, t2, t3, broadPhase, f;
    xf1 = this._pxf;
    t1 = xf1.rotation;
    t2 = this.sweep;
    t1.setRotation$1(t2.angleZero);
    t3 = xf1.position;
    t3.copyFrom$1(t2.localCenter);
    t1.transform$1(t1, t3);
    t3 = t3.negate$0();
    t3.add$1(t3, t2.centerZero);
    broadPhase = this.world._contactManager.broadPhase;
    for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.get$next())
      f.synchronize$3(broadPhase, xf1, t1);
  },
  synchronizeTransform$0: function() {
    var t, r, p, t1, t2, t4, t5, t8, t10, t11, t13, t15, t19;
    t = this.originTransform;
    r = t.rotation;
    p = t.position;
    t1 = this.sweep;
    r.setRotation$1(t1.angle);
    t2 = $.get$x$x(r.col0);
    if (typeof t2 !== "number")
      return this.synchronizeTransform$0$bailout(1, r, p, t1, t2);
    t4 = t1.localCenter;
    t5 = t4.x;
    if (typeof t5 !== "number")
      return this.synchronizeTransform$0$bailout(2, r, p, t1, t2, t4, t5);
    t5 = t2 * t5;
    t2 = $.get$x$x(r.col1);
    if (typeof t2 !== "number")
      return this.synchronizeTransform$0$bailout(3, r, p, t1, t2, t4, t5);
    t8 = t4.y;
    if (typeof t8 !== "number")
      return this.synchronizeTransform$0$bailout(4, r, p, t1, t2, t4, t5, t8);
    t10 = (t5 + t2 * t8) * -1;
    t1 = t1.center;
    t11 = t1.x;
    if (typeof t11 !== "number")
      return this.synchronizeTransform$0$bailout(5, r, p, t1, 0, t4, 0, 0, t11, t10);
    p.x = t10 + t11;
    t13 = $.get$y$x(r.col0);
    if (typeof t13 !== "number")
      return this.synchronizeTransform$0$bailout(6, r, p, t1, 0, t4, 0, 0, 0, 0, t13);
    t15 = t4.x;
    if (typeof t15 !== "number")
      return this.synchronizeTransform$0$bailout(7, r, p, t1, 0, t4, 0, 0, 0, 0, t13, t15);
    t15 = t13 * t15;
    t13 = $.get$y$x(r.col1);
    if (typeof t13 !== "number")
      return this.synchronizeTransform$0$bailout(8, 0, p, t1, 0, t4, 0, 0, 0, 0, t13, t15);
    t4 = t4.y;
    if (typeof t4 !== "number")
      return this.synchronizeTransform$0$bailout(9, 0, p, t1, 0, t4, 0, 0, 0, 0, t13, t15);
    t19 = (t15 + t13 * t4) * -1;
    t1 = t1.y;
    if (typeof t1 !== "number")
      return this.synchronizeTransform$0$bailout(10, 0, p, t1, 0, 0, 0, 0, 0, 0, 0, 0, t19);
    p.y = t19 + t1;
  },
  synchronizeTransform$0$bailout: function(state0, r, p, t1, t2, t4, t5, t8, t11, t10, t13, t15, t19) {
    switch (state0) {
      case 0:
        t = this.originTransform;
        r = t.rotation;
        p = t.position;
        t1 = this.sweep;
        r.setRotation$1(t1.angle);
        t2 = $.get$x$x(r.col0);
      case 1:
        state0 = 0;
        t4 = t1.localCenter;
        t5 = t4.x;
      case 2:
        state0 = 0;
        t5 = $.$mul$n(t2, t5);
        t2 = $.get$x$x(r.col1);
      case 3:
        state0 = 0;
        t8 = t4.y;
      case 4:
        state0 = 0;
        t10 = $.$mul$n($.$add$ns(t5, $.$mul$n(t2, t8)), -1);
        t1 = t1.center;
        t11 = t1.x;
      case 5:
        state0 = 0;
        p.x = $.$add$ns(t10, t11);
        t13 = $.get$y$x(r.col0);
      case 6:
        state0 = 0;
        t15 = t4.x;
      case 7:
        state0 = 0;
        t15 = $.$mul$n(t13, t15);
        t13 = $.get$y$x(r.col1);
      case 8:
        state0 = 0;
        t4 = t4.y;
      case 9:
        state0 = 0;
        t19 = $.$mul$n($.$add$ns(t15, $.$mul$n(t13, t4)), -1);
        t1 = t1.y;
      case 10:
        var t;
        state0 = 0;
        p.y = $.$add$ns(t19, t1);
    }
  },
  shouldCollide$1: function(other) {
    var t1, t3;
    t1 = this._type;
    if (typeof t1 !== "number")
      return this.shouldCollide$1$bailout(1, other, t1);
    if (t1 !== 2) {
      t1 = other.get$_type();
      if (typeof t1 !== "number")
        return this.shouldCollide$1$bailout(2, 0, t1);
      t3 = t1 !== 2;
      t1 = t3;
    } else
      t1 = false;
    return !t1;
  },
  shouldCollide$1$bailout: function(state0, other, t1) {
    switch (state0) {
      case 0:
        t1 = this._type;
      case 1:
        state0 = 0;
      case 2:
        var t3;
        if (state0 === 2 || state0 === 0 && $.$eq(t1, 2) !== true)
          switch (state0) {
            case 0:
              t1 = other.get$_type();
            case 2:
              state0 = 0;
              t3 = $.$eq(t1, 2) !== true;
              t1 = t3;
          }
        else
          t1 = false;
        return !t1;
    }
  },
  advance$1: function(t) {
    var t1 = this.sweep;
    t1.advance$1(t);
    t1.center.copyFrom$1(t1.centerZero);
    t1.angle = t1.angleZero;
    this.synchronizeTransform$0();
  },
  Body$2: function(bd, world) {
    var t1, t2, t3, t4;
    if (bd.get$bullet() === true)
      this.flags = (this.flags | 8) >>> 0;
    if (bd.get$fixedRotation() === true)
      this.flags = (this.flags | 16) >>> 0;
    if (bd.get$allowSleep())
      this.flags = (this.flags | 4) >>> 0;
    if (bd.get$awake() === true)
      this.flags = (this.flags | 2) >>> 0;
    if (bd.get$active() === true)
      this.flags = (this.flags | 32) >>> 0;
    t1 = this.originTransform;
    t1.position.copyFrom$1($.get$position$x(bd));
    t1.rotation.setRotation$1(bd.get$angle());
    t2 = this.sweep;
    t3 = t2.localCenter;
    t3.splat$1(0);
    t4 = t2.centerZero;
    $.Transform_mulToOut(t1, t3, t4);
    t2.center.copyFrom$1(t4);
    t2.angle = bd.get$angle();
    t2.angleZero = bd.get$angle();
    if ($.$eq(this._type, 2) === true) {
      this.mass = 1;
      this.invMass = 1;
    } else {
      this.mass = 0;
      this.invMass = 0;
    }
  }
};

$$.BodyDef = {"": "Object;type*,angle<,userData@,position>,linearVelocity<,angularVelocity@,fixedRotation<,isSleeping,bullet<,allowSleep<,linearDamping<,angularDamping<,awake@,active<"};

$$.ContactManager = {"": "Object;broadPhase,contactList@,contactCount,contactFilter,contactListener,pool",
  addPair$2: function(fixtureA, fixtureB) {
    var bodyA, bodyB, edge, t1, fA, fB, c;
    bodyA = $.get$body$x(fixtureA);
    bodyB = $.get$body$x(fixtureB);
    if ($.$eq(bodyA, bodyB) === true)
      return;
    edge = bodyB.get$contactList();
    for (; edge != null;) {
      if ($.$eq(edge.get$other(), bodyA) === true) {
        t1 = edge.get$contact();
        fA = t1.get$fixtureA();
        fB = t1.get$fixtureB();
        t1 = $.getInterceptor(fA);
        if (t1.$eq(fA, fixtureA) === true && $.$eq(fB, fixtureB) === true)
          return;
        if (t1.$eq(fA, fixtureB) === true && $.$eq(fB, fixtureA) === true)
          return;
      }
      edge = edge.get$next();
    }
    if (!bodyB.shouldCollide$1(bodyA))
      return;
    t1 = this.contactFilter;
    if (!t1.$eq(t1, null)) {
      t1 = t1.shouldCollide$2(fixtureA, fixtureB);
      if (typeof t1 !== "boolean")
        return this.addPair$2$bailout(1, fixtureA, fixtureB, t1);
      t1 = !t1;
    } else
      t1 = false;
    if (t1)
      return;
    c = this.pool.popContact$2(fixtureA, fixtureB);
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = $.get$body$x(fixtureA);
    bodyB = $.get$body$x(fixtureB);
    c.set$prev(null);
    c.set$next(this.contactList);
    t1 = this.contactList;
    if (t1 != null)
      t1.set$prev(c);
    this.contactList = c;
    c.get$edge1().contact = c;
    c.get$edge1().other = bodyB;
    c.get$edge1().prev = null;
    t1 = bodyA.get$contactList();
    c.get$edge1().next = t1;
    if (bodyA.get$contactList() != null) {
      t1 = c.get$edge1();
      bodyA.get$contactList().set$prev(t1);
    }
    bodyA.set$contactList(c.get$edge1());
    c.get$edge2().contact = c;
    c.get$edge2().other = bodyA;
    c.get$edge2().prev = null;
    t1 = bodyB.get$contactList();
    c.get$edge2().next = t1;
    if (bodyB.get$contactList() != null) {
      t1 = c.get$edge2();
      bodyB.get$contactList().set$prev(t1);
    }
    bodyB.set$contactList(c.get$edge2());
    this.contactCount = this.contactCount + 1;
  },
  addPair$2$bailout: function(state0, fixtureA, fixtureB, t1) {
    switch (state0) {
      case 0:
        bodyA = $.get$body$x(fixtureA);
        bodyB = $.get$body$x(fixtureB);
        if ($.$eq(bodyA, bodyB) === true)
          return;
        edge = bodyB.get$contactList();
        for (; edge != null;) {
          if ($.$eq(edge.get$other(), bodyA) === true) {
            t1 = edge.get$contact();
            fA = t1.get$fixtureA();
            fB = t1.get$fixtureB();
            t1 = $.getInterceptor(fA);
            if (t1.$eq(fA, fixtureA) === true && $.$eq(fB, fixtureB) === true)
              return;
            if (t1.$eq(fA, fixtureB) === true && $.$eq(fB, fixtureA) === true)
              return;
          }
          edge = edge.get$next();
        }
        if (!bodyB.shouldCollide$1(bodyA))
          return;
        t1 = this.contactFilter;
      case 1:
        var bodyA, bodyB, edge, fA, fB, t3, c;
        if (state0 === 1 || state0 === 0 && !t1.$eq(t1, null))
          switch (state0) {
            case 0:
              t1 = t1.shouldCollide$2(fixtureA, fixtureB);
            case 1:
              state0 = 0;
              t3 = $.$eq(t1, false) === true;
              t1 = t3;
          }
        else
          t1 = false;
        if (t1)
          return;
        c = this.pool.popContact$2(fixtureA, fixtureB);
        fixtureA = c.get$fixtureA();
        fixtureB = c.get$fixtureB();
        bodyA = $.get$body$x(fixtureA);
        bodyB = $.get$body$x(fixtureB);
        c.set$prev(null);
        c.set$next(this.contactList);
        t1 = this.contactList;
        if (t1 != null)
          t1.set$prev(c);
        this.contactList = c;
        c.get$edge1().contact = c;
        c.get$edge1().other = bodyB;
        c.get$edge1().prev = null;
        t1 = bodyA.get$contactList();
        c.get$edge1().next = t1;
        if (bodyA.get$contactList() != null) {
          t1 = c.get$edge1();
          bodyA.get$contactList().set$prev(t1);
        }
        bodyA.set$contactList(c.get$edge1());
        c.get$edge2().contact = c;
        c.get$edge2().other = bodyA;
        c.get$edge2().prev = null;
        t1 = bodyB.get$contactList();
        c.get$edge2().next = t1;
        if (bodyB.get$contactList() != null) {
          t1 = c.get$edge2();
          bodyB.get$contactList().set$prev(t1);
        }
        bodyB.set$contactList(c.get$edge2());
        this.contactCount = this.contactCount + 1;
    }
  },
  findNewContacts$0: function() {
    this.broadPhase.updatePairs$1(this);
  },
  destroy$1: function(c) {
    var fixtureA, fixtureB, bodyA, bodyB, t1, t2;
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = $.get$body$x(fixtureA);
    bodyB = $.get$body$x(fixtureB);
    t1 = this.contactListener;
    if (t1 != null && c.get$touching() === true) {
      $.Primitives_printString("touching - end contact");
      t1.endContact$1(c);
    }
    t1 = c.get$prev();
    if (t1 != null)
      t1.set$next(c.get$next());
    t1 = c.get$next();
    if (t1 != null)
      t1.set$prev(c.get$prev());
    if ($.$eq(c, this.contactList) === true)
      this.contactList = c.get$next();
    t1 = c.get$edge1();
    t2 = t1.prev;
    if (t2 != null)
      t2.set$next(t1.next);
    t1 = c.get$edge1();
    t2 = t1.next;
    if (t2 != null)
      t2.set$prev(t1.prev);
    t1 = c.get$edge1();
    if (t1.$eq(t1, bodyA.get$contactList()))
      bodyA.set$contactList(c.get$edge1().next);
    t1 = c.get$edge2();
    t2 = t1.prev;
    if (t2 != null)
      t2.set$next(t1.next);
    t1 = c.get$edge2();
    t2 = t1.next;
    if (t2 != null)
      t2.set$prev(t1.prev);
    t1 = c.get$edge2();
    if (t1.$eq(t1, bodyB.get$contactList()))
      bodyB.set$contactList(c.get$edge2().next);
    this.pool.pushContact$1(c);
    this.contactCount = this.contactCount - 1;
  },
  collide$0: function() {
    var c, t1, t2, t3, fixtureA, fixtureB, bodyA, bodyB, c0;
    c = this.contactList;
    for (t1 = this.contactFilter, t2 = this.broadPhase, t3 = this.contactListener; c != null;) {
      fixtureA = c.get$fixtureA();
      fixtureB = c.get$fixtureB();
      bodyA = $.get$body$x(fixtureA);
      bodyB = $.get$body$x(fixtureB);
      if ($.$eq(bodyA.get$awake(), false) === true && $.$eq(bodyB.get$awake(), false) === true) {
        c = c.get$next();
        continue;
      }
      if ($.$and$n(c.get$flags(), 8) === 8) {
        if (!bodyB.shouldCollide$1(bodyA)) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        if (!t1.$eq(t1, null) && $.$eq(t1.shouldCollide$2(fixtureA, fixtureB), false) === true) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        c.set$flags($.$and$n(c.get$flags(), 4294967287));
      }
      if (!t2.testOverlap$2(fixtureA.get$proxy(), fixtureB.get$proxy())) {
        c0 = c.get$next();
        this.destroy$1(c);
        c = c0;
        continue;
      }
      c.update$1(t3);
      c = c.get$next();
    }
  }
};

$$.Filter = {"": "Object;categoryBits<,maskBits<,groupIndex<",
  setFrom$1: function(other) {
    this.categoryBits = other.get$categoryBits();
    this.maskBits = other.get$maskBits();
    this.groupIndex = other.get$groupIndex();
  }
};

$$.Fixture = {"": "Object;box<,density<,next@,body>,shape>,friction@,restitution@,proxy<,filter>,isSensor<,userData@,_poolOne,_poolTwo",
  create$2: function(b, def) {
    this.userData = def.userData;
    this.friction = def.friction;
    this.restitution = def.restitution;
    this.body = b;
    this.next = null;
    this.filter.setFrom$1(def.filter);
    this.isSensor = def.isSensor;
    this.shape = $.clone$0$x(def.shape);
    this.density = def.density;
  },
  createProxy$2: function(broadPhase, xf) {
    var t1 = this.box;
    this.shape.computeAxisAlignedBox$2(t1, xf);
    this.proxy = broadPhase.createProxy$2(t1, this);
  },
  synchronize$3: function(broadPhase, transformOne, transformTwo) {
    var t1, t2, t3, t5, t4, t6, disp;
    if (this.proxy == null)
      return;
    t1 = this._poolOne;
    this.shape.computeAxisAlignedBox$2(t1, transformOne);
    t2 = this._poolTwo;
    this.shape.computeAxisAlignedBox$2(t2, transformTwo);
    t3 = $.get$x$x(t1.lowerBound);
    if (typeof t3 !== "number")
      return this.synchronize$3$bailout(1, broadPhase, transformOne, transformTwo, t2, t1, t3);
    t5 = $.get$x$x(t2.lowerBound);
    if (typeof t5 !== "number")
      return this.synchronize$3$bailout(2, broadPhase, transformOne, transformTwo, t2, t1, t3, t5);
    t3 = t3 < t5 ? $.get$x$x(t1.lowerBound) : $.get$x$x(t2.lowerBound);
    t4 = this.box;
    $.set$x$x(t4.lowerBound, t3);
    t3 = $.get$y$x(t1.lowerBound);
    if (typeof t3 !== "number")
      return this.synchronize$3$bailout(3, broadPhase, transformOne, transformTwo, t2, t1, t3, 0, t4);
    t6 = $.get$y$x(t2.lowerBound);
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(4, broadPhase, transformOne, transformTwo, t2, t1, t3, 0, t4, t6);
    t3 = t3 < t6 ? $.get$y$x(t1.lowerBound) : $.get$y$x(t2.lowerBound);
    $.set$y$x(t4.lowerBound, t3);
    t3 = $.get$x$x(t1.upperBound);
    if (typeof t3 !== "number")
      return this.synchronize$3$bailout(5, broadPhase, transformOne, transformTwo, t2, t1, t3, 0, t4);
    t6 = $.get$x$x(t2.upperBound);
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(6, broadPhase, transformOne, transformTwo, t2, t1, t3, 0, t4, t6);
    t3 = t3 > t6 ? $.get$x$x(t1.upperBound) : $.get$x$x(t2.upperBound);
    $.set$x$x(t4.upperBound, t3);
    t3 = $.get$y$x(t1.upperBound);
    if (typeof t3 !== "number")
      return this.synchronize$3$bailout(7, broadPhase, transformOne, transformTwo, t2, t1, t3, 0, t4);
    t6 = $.get$y$x(t2.upperBound);
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(8, broadPhase, transformOne, transformTwo, t2, t1, t3, 0, t4, t6);
    t2 = t3 > t6 ? $.get$y$x(t1.upperBound) : $.get$y$x(t2.upperBound);
    $.set$y$x(t4.upperBound, t2);
    disp = t1.lowerBound;
    disp.copyFrom$1(transformTwo.position).sub$1(transformOne.position);
    broadPhase.moveProxy$3(this.proxy, t4, disp);
  },
  synchronize$3$bailout: function(state0, broadPhase, transformOne, transformTwo, t2, t1, t3, t5, t4, t6) {
    switch (state0) {
      case 0:
        if (this.proxy == null)
          return;
        t1 = this._poolOne;
        this.shape.computeAxisAlignedBox$2(t1, transformOne);
        t2 = this._poolTwo;
        this.shape.computeAxisAlignedBox$2(t2, transformTwo);
        t3 = $.get$x$x(t1.lowerBound);
      case 1:
        state0 = 0;
        t5 = $.get$x$x(t2.lowerBound);
      case 2:
        state0 = 0;
        t3 = $.$lt$n(t3, t5) === true ? $.get$x$x(t1.lowerBound) : $.get$x$x(t2.lowerBound);
        t4 = this.box;
        $.set$x$x(t4.lowerBound, t3);
        t3 = $.get$y$x(t1.lowerBound);
      case 3:
        state0 = 0;
        t6 = $.get$y$x(t2.lowerBound);
      case 4:
        state0 = 0;
        t3 = $.$lt$n(t3, t6) === true ? $.get$y$x(t1.lowerBound) : $.get$y$x(t2.lowerBound);
        $.set$y$x(t4.lowerBound, t3);
        t3 = $.get$x$x(t1.upperBound);
      case 5:
        state0 = 0;
        t6 = $.get$x$x(t2.upperBound);
      case 6:
        state0 = 0;
        t3 = $.$gt$n(t3, t6) === true ? $.get$x$x(t1.upperBound) : $.get$x$x(t2.upperBound);
        $.set$x$x(t4.upperBound, t3);
        t3 = $.get$y$x(t1.upperBound);
      case 7:
        state0 = 0;
        t6 = $.get$y$x(t2.upperBound);
      case 8:
        var disp;
        state0 = 0;
        t2 = $.$gt$n(t3, t6) === true ? $.get$y$x(t1.upperBound) : $.get$y$x(t2.upperBound);
        $.set$y$x(t4.upperBound, t2);
        disp = t1.lowerBound;
        disp.copyFrom$1(transformTwo.position).sub$1(transformOne.position);
        broadPhase.moveProxy$3(this.proxy, t4, disp);
    }
  },
  getMassData$1: function(massData) {
    this.shape.computeMass$2(massData, this.density);
  },
  get$type: function(_) {
    return $.get$type$x(this.shape);
  }
};

$$.FixtureDef = {"": "Object;shape>,userData@,friction@,restitution@,density<,isSensor<,filter>",
  FixtureDef$0: function() {
    var t1 = this.filter;
    t1.categoryBits = 1;
    t1.maskBits = 65535;
    t1.groupIndex = 0;
  }
};

$$.Island = {"": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
  init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
    var t1, old, i;
    this.bodyCapacity = argBodyCapacity;
    this.contactCapacity = argContactCapacity;
    this.jointCapacity = argJointCapacity;
    this.bodyCount = 0;
    this.contactCount = 0;
    this.listener = argListener;
    t1 = this.bodies;
    if (t1 == null || $.$gt$n(this.bodyCapacity, $.get$length$asx(t1)) === true) {
      t1 = $.List_List(this.bodyCapacity, $.Body);
      $.setRuntimeTypeInfo(t1, [$.Body]);
      this.bodies = t1;
    }
    t1 = this.contacts;
    if (t1 == null || $.$gt$n(this.contactCapacity, $.get$length$asx(t1)) === true) {
      t1 = $.List_List(this.contactCapacity, $.Contact);
      $.setRuntimeTypeInfo(t1, [$.Contact]);
      this.contacts = t1;
    }
    t1 = this.joints;
    if (t1 == null || $.$gt$n(this.jointCapacity, $.get$length$asx(t1))) {
      t1 = $.List_List(this.jointCapacity, $.Joint);
      $.setRuntimeTypeInfo(t1, [$.Joint]);
      this.joints = t1;
    }
    t1 = this.velocities;
    if (t1 == null || $.$gt$n(this.bodyCapacity, $.get$length$asx(t1)) === true) {
      old = this.velocities;
      if (old == null) {
        old = $.List_List(0, $.Velocity);
        $.setRuntimeTypeInfo(old, [$.Velocity]);
      }
      t1 = $.List_List(this.bodyCapacity, $.Velocity);
      $.setRuntimeTypeInfo(t1, [$.Velocity]);
      this.velocities = t1;
      t1 = $.getInterceptor$asx(old);
      $.setRange$3$ax(this.velocities, 0, t1.get$length(old), old);
      for (i = t1.get$length(old); i < $.get$length$asx(this.velocities); ++i)
        $.$indexSet$ax(this.velocities, i, $.Velocity$());
    }
    t1 = this.positions;
    if (t1 == null || $.$gt$n(this.bodyCapacity, $.get$length$asx(t1)) === true) {
      old = this.positions;
      if (old == null) {
        old = $.List_List(0, $.Position);
        $.setRuntimeTypeInfo(old, [$.Position]);
      }
      t1 = $.List_List(this.bodyCapacity, $.Position);
      $.setRuntimeTypeInfo(t1, [$.Position]);
      this.positions = t1;
      t1 = $.getInterceptor$asx(old);
      $.setRange$3$ax(this.positions, 0, t1.get$length(old), old);
      for (i = t1.get$length(old); i < $.get$length$asx(this.positions); ++i)
        $.$indexSet$ax(this.positions, i, $.Position$());
    }
  },
  clear$0: function(_) {
    this.bodyCount = 0;
    this.contactCount = 0;
    this.jointCount = 0;
  },
  solve$3: function(time_step, gravity, allowSleep) {
    var t1, i, t2, b, t3, t5, t6, t8, t9, velocityDelta, t13, t14, a, a1, a2, b1, i1, i2, t4, fixtureA, fixtureB, bodyA, bodyB, nonStatic, temp, j, rotation, ratio, t7, contactsOkay, jointsOkay, jointOkay, minSleepTime;
    t1 = $.getInterceptor$x(gravity);
    i = 0;
    while (true) {
      t2 = this.bodyCount;
      if (typeof t2 !== "number")
        return this.solve$3$bailout(1, time_step, gravity, allowSleep, i, t2, t1);
      if (!(i < t2))
        break;
      c$0: {
        t2 = this.bodies;
        if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !t2.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(2, time_step, gravity, allowSleep, i, t2, t1);
        if (i >= t2.length)
          throw $.ioore(i);
        b = t2[i];
        t2 = $.get$type$x(b);
        if (typeof t2 !== "number")
          return this.solve$3$bailout(3, time_step, gravity, allowSleep, i, t2, t1, b);
        if (t2 !== 2)
          break c$0;
        t2 = b.get$_force();
        t3 = t2.x;
        if (typeof t3 !== "number")
          return this.solve$3$bailout(4, time_step, gravity, allowSleep, i, t3, t1, b);
        t5 = b.get$invMass();
        t3 *= t5;
        t6 = t1.get$x(gravity);
        if (typeof t6 !== "number")
          return this.solve$3$bailout(5, time_step, gravity, allowSleep, i, t3, t1, b, t6);
        t8 = time_step.dt;
        t9 = (t3 + t6) * t8;
        t2 = t2.y;
        if (typeof t2 !== "number")
          return this.solve$3$bailout(6, time_step, gravity, allowSleep, i, 0, t1, b, 0, t2, t9);
        t5 = t2 * t5;
        t2 = t1.get$y(gravity);
        if (typeof t2 !== "number")
          return this.solve$3$bailout(7, time_step, gravity, allowSleep, i, 0, t1, b, 0, t5, t9, t2);
        velocityDelta = $.vec2$(t9, (t5 + t2) * t8);
        $.add$1$ax(b.get$linearVelocity(), velocityDelta);
        t9 = b.get$angularVelocity();
        if (typeof t9 !== "number")
          return this.solve$3$bailout(8, time_step, gravity, allowSleep, i, 0, t1, b, 0, 0, t9);
        b.set$angularVelocity(t9 + time_step.dt * b.get$invInertia() * b.get$_torque());
        t13 = time_step.dt;
        t14 = b.get$linearDamping();
        if (typeof t14 !== "number")
          throw $.iae(t14);
        a = 1 - t13 * t14;
        t2 = a < 1;
        if (0 > (t2 ? a : 1))
          a1 = 0;
        else
          a1 = t2 ? a : 1;
        $.scale$1$x(b.get$linearVelocity(), a1);
        t2 = time_step.dt;
        t3 = b.get$angularDamping();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        a2 = 1 - t2 * t3;
        b1 = a2 < 1 ? a2 : 1;
        t2 = b.get$angularVelocity();
        if (typeof t2 !== "number")
          return this.solve$3$bailout(9, time_step, gravity, allowSleep, i, t2, t1, b, 0, 0, 0, 0, b1);
        b.set$angularVelocity(t2 * (0 > b1 ? 0 : b1));
      }
      ++i;
    }
    i1 = -1;
    i2 = 0;
    while (true) {
      t1 = this.contactCount;
      if (typeof t1 !== "number")
        return this.solve$3$bailout(10, time_step, 0, allowSleep, 0, 0, t1, 0, 0, 0, 0, 0, 0, i1, i2);
      t3 = i2 < t1;
      t4 = this.contacts;
      if (typeof t4 !== "object" || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.$isJavaScriptIndexingBehavior())
        return this.solve$3$bailout(11, time_step, 0, allowSleep, 0, 0, t3, 0, 0, 0, 0, 0, 0, i1, i2, t4);
      if (!t3)
        break;
      if (i2 >= t4.length)
        throw $.ioore(i2);
      fixtureA = t4[i2].get$fixtureA();
      if (i2 >= t4.length)
        throw $.ioore(i2);
      fixtureB = t4[i2].get$fixtureB();
      bodyA = $.get$body$x(fixtureA);
      bodyB = $.get$body$x(fixtureB);
      t1 = $.get$type$x(bodyA);
      if (typeof t1 !== "number")
        return this.solve$3$bailout(13, time_step, 0, allowSleep, 0, 0, t1, 0, 0, 0, 0, 0, 0, i1, i2, 0, 0, bodyB);
      if (t1 !== 0) {
        t1 = $.get$type$x(bodyB);
        if (typeof t1 !== "number")
          return this.solve$3$bailout(14, time_step, 0, allowSleep, 0, 0, t1, 0, 0, 0, 0, 0, 0, i1, i2);
        nonStatic = t1 !== 0;
      } else
        nonStatic = false;
      if (nonStatic) {
        ++i1;
        t1 = this.contacts;
        if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(15, time_step, 0, allowSleep, 0, 0, t1, 0, 0, 0, 0, 0, 0, i1, i2);
        if (i1 >= t1.length)
          throw $.ioore(i1);
        temp = t1[i1];
        t3 = t1.length;
        if (i2 >= t3)
          throw $.ioore(i2);
        t4 = t1[i2];
        if (i1 >= t3)
          throw $.ioore(i1);
        t1[i1] = t4;
        if (i2 >= t1.length)
          throw $.ioore(i2);
        t1[i2] = temp;
      }
      ++i2;
    }
    t2 = this._contactSolver;
    t2.init$3(t4, t1, time_step.dtRatio);
    t2.warmStart$0();
    i = 0;
    while (true) {
      t1 = this.jointCount;
      if (typeof t1 !== "number")
        return this.solve$3$bailout(18, time_step, 0, allowSleep, i, t1, t2);
      if (!(i < t1))
        break;
      t1 = this.joints;
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
        return this.solve$3$bailout(19, time_step, 0, allowSleep, i, t1, t2);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].initVelocityConstraints$1(time_step);
      ++i;
    }
    for (i = 0; i < time_step.velocityIterations; ++i) {
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(20, time_step, 0, allowSleep, i, t1, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(21, time_step, 0, allowSleep, i, t1, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j);
        if (j >= t1.length)
          throw $.ioore(j);
        t1[j].solveVelocityConstraints$1(time_step);
        ++j;
      }
      t2.solveVelocityConstraints$0();
    }
    t2.storeImpulses$0();
    temp = $.vec2$zero();
    t1 = this._translation;
    i = 0;
    while (true) {
      t3 = this.bodyCount;
      if (typeof t3 !== "number")
        return this.solve$3$bailout(22, time_step, 0, allowSleep, i, t1, t2, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, temp);
      if (!(i < t3))
        break;
      c$0: {
        t3 = this.bodies;
        if (typeof t3 !== "object" || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(23, time_step, 0, allowSleep, i, t1, t2, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, temp);
        if (i >= t3.length)
          throw $.ioore(i);
        b = t3[i];
        t3 = $.get$type$x(b);
        if (typeof t3 !== "number")
          return this.solve$3$bailout(24, time_step, 0, allowSleep, i, t1, t2, b, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, temp);
        if (t3 === 0)
          break c$0;
        t3 = t1.copyFrom$1(b.get$linearVelocity());
        t3.scale$1(t3, time_step.dt);
        if (t1.dot$1(t1) > 4) {
          t3 = t1.get$length(t1);
          $.scale$1$x(b.get$linearVelocity(), 2 / t3);
        }
        t3 = time_step.dt;
        t4 = b.get$angularVelocity();
        if (typeof t4 !== "number")
          throw $.iae(t4);
        rotation = t3 * t4;
        if (rotation * rotation > 2.4674011002723395) {
          ratio = 1.5707963267948966 / $.JSNumber_methods.abs$0(rotation);
          t3 = b.get$angularVelocity();
          if (typeof t3 !== "number")
            return this.solve$3$bailout(25, time_step, 0, allowSleep, i, t1, t2, b, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, temp, 0, ratio);
          b.set$angularVelocity(t3 * ratio);
        }
        t3 = b.get$sweep();
        t3.centerZero.copyFrom$1(t3.center);
        t4 = b.get$sweep();
        t4.angleZero = t4.angle;
        t4 = temp.copyFrom$1(b.get$linearVelocity());
        t4.scale$1(t4, time_step.dt);
        t4 = b.get$sweep().center;
        t4.add$1(t4, temp);
        t4 = b.get$sweep();
        t5 = t4.angle;
        if (typeof t5 !== "number")
          return this.solve$3$bailout(26, time_step, 0, allowSleep, i, t1, t2, b, t4, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, 0, 0, t5);
        t7 = time_step.dt;
        t8 = b.get$angularVelocity();
        if (typeof t8 !== "number")
          throw $.iae(t8);
        t4.angle = t5 + t7 * t8;
        b.synchronizeTransform$0();
      }
      ++i;
    }
    for (i = 0; i < time_step.positionIterations; ++i) {
      contactsOkay = t2.solvePositionConstraints$1(0.2);
      jointsOkay = true;
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(27, time_step, 0, allowSleep, i, t1, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j, 0, 0, jointsOkay, contactsOkay);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(28, time_step, 0, allowSleep, i, t1, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j, 0, 0, jointsOkay, contactsOkay);
        if (j >= t1.length)
          throw $.ioore(j);
        jointOkay = t1[j].solvePositionConstraints$1(0.2);
        jointsOkay = jointsOkay && jointOkay === true;
        ++j;
      }
      if (contactsOkay === true && jointsOkay)
        break;
    }
    this.report$1(t2.constraints);
    if (allowSleep === true) {
      minSleepTime = 99999999999999;
      i = 0;
      while (true) {
        t1 = this.bodyCount;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(29, time_step, 0, 0, i, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
        if (!(i < t1))
          break;
        c$0: {
          t1 = this.bodies;
          if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
            return this.solve$3$bailout(30, time_step, 0, 0, i, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if (i >= t1.length)
            throw $.ioore(i);
          b = t1[i];
          t1 = $.get$type$x(b);
          if (typeof t1 !== "number")
            return this.solve$3$bailout(31, time_step, 0, 0, i, 0, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if (t1 === 0)
            break c$0;
          t1 = b.get$flags();
          if (t1 !== (t1 | 0))
            return this.solve$3$bailout(32, time_step, 0, 0, i, 0, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) === 0) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          }
          t1 = b.get$flags();
          if (t1 !== (t1 | 0))
            return this.solve$3$bailout(33, time_step, 0, 0, i, 0, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) !== 0) {
            t1 = b.get$angularVelocity();
            if (typeof t1 !== "number")
              return this.solve$3$bailout(34, time_step, 0, 0, i, 0, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            t3 = b.get$angularVelocity();
            if (typeof t3 !== "number")
              return this.solve$3$bailout(35, time_step, 0, 0, i, 0, t1, b, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            t1 = t1 * t3 > 0.0012184696791468343 || b.get$linearVelocity().dot$1(b.get$linearVelocity()) > 0.0001;
          } else
            t1 = true;
          if (t1) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          } else {
            t1 = b.get$sleepTime();
            if (typeof t1 !== "number")
              return this.solve$3$bailout(36, time_step, 0, 0, i, 0, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            b.set$sleepTime(t1 + time_step.dt);
            minSleepTime = $.min(minSleepTime, b.get$sleepTime());
            if (minSleepTime !== (minSleepTime | 0))
              return this.solve$3$bailout(37, time_step, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          }
        }
        ++i;
      }
      if (minSleepTime >= 0.5) {
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (typeof t1 !== "number")
            return this.solve$3$bailout(38, 0, 0, 0, i, 0, t1);
          if (!(i < t1))
            break;
          t1 = this.bodies;
          if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
            return this.solve$3$bailout(39, 0, 0, 0, i, 0, t1);
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].set$awake(false);
          ++i;
        }
      }
    }
  },
  solve$3$bailout: function(state0, time_step, gravity, allowSleep, i, t2, t1, b, t4, t7, t6, t9, b1, i1, i2, t3, fixtureA, bodyB, temp, j, ratio, t5, jointsOkay, contactsOkay, minSleepTime) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(gravity);
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.bodyCount;
              case 1:
                state0 = 0;
                if (!$.JSNumber_methods.$lt(i, t2))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t2 = this.bodies;
                    case 2:
                      state0 = 0;
                      b = $.$index$asx(t2, i);
                      t2 = $.get$type$x(b);
                    case 3:
                      state0 = 0;
                      if ($.$eq(t2, 2) !== true)
                        break c$0;
                      t2 = b.get$_force().x;
                    case 4:
                      state0 = 0;
                      t2 = $.$mul$n(t2, b.get$invMass());
                      t4 = t1.get$x(gravity);
                    case 5:
                      state0 = 0;
                      t6 = $.$mul$n($.$add$ns(t2, t4), time_step.dt);
                      t7 = b.get$_force().y;
                    case 6:
                      state0 = 0;
                      t7 = $.$mul$n(t7, b.get$invMass());
                      t9 = t1.get$y(gravity);
                    case 7:
                      state0 = 0;
                      velocityDelta = $.vec2$(t6, $.$mul$n($.$add$ns(t7, t9), time_step.dt));
                      $.add$1$ax(b.get$linearVelocity(), velocityDelta);
                      t6 = b.get$angularVelocity();
                    case 8:
                      state0 = 0;
                      b.set$angularVelocity($.$add$ns(t6, time_step.dt * b.get$invInertia() * b.get$_torque()));
                      t12 = time_step.dt;
                      t13 = b.get$linearDamping();
                      if (typeof t13 !== "number")
                        throw $.iae(t13);
                      a = 1 - t12 * t13;
                      t2 = a < 1;
                      if (0 > (t2 ? a : 1))
                        a1 = 0;
                      else
                        a1 = t2 ? a : 1;
                      $.scale$1$x(b.get$linearVelocity(), a1);
                      t2 = time_step.dt;
                      t3 = b.get$angularDamping();
                      if (typeof t3 !== "number")
                        throw $.iae(t3);
                      a2 = 1 - t2 * t3;
                      b1 = a2 < 1 ? a2 : 1;
                      t2 = b.get$angularVelocity();
                    case 9:
                      state0 = 0;
                      b.set$angularVelocity($.$mul$n(t2, 0 > b1 ? 0 : b1));
                  }
                }
                ++i;
            }
        i1 = -1;
        i2 = 0;
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.contactCount;
              case 10:
                state0 = 0;
                t1 = $.JSNumber_methods.$lt(i2, t1);
                t3 = this.contacts;
              case 11:
                state0 = 0;
                if (!t1)
                  break L1;
                fixtureA = $.$index$asx(t3, i2).get$fixtureA();
                t1 = this.contacts;
              case 12:
                state0 = 0;
                fixtureB = $.$index$asx(t1, i2).get$fixtureB();
                bodyA = $.get$body$x(fixtureA);
                bodyB = $.get$body$x(fixtureB);
                t1 = $.get$type$x(bodyA);
              case 13:
                state0 = 0;
              case 14:
                if (state0 === 14 || state0 === 0 && $.$eq(t1, 0) !== true)
                  switch (state0) {
                    case 0:
                      t1 = $.get$type$x(bodyB);
                    case 14:
                      state0 = 0;
                      nonStatic = $.$eq(t1, 0) !== true;
                  }
                else
                  nonStatic = false;
              default:
                if (state0 === 17 || state0 === 16 || state0 === 15 || state0 === 0 && nonStatic)
                  switch (state0) {
                    case 0:
                      ++i1;
                      t1 = this.contacts;
                    case 15:
                      state0 = 0;
                      temp = $.$index$asx(t1, i1);
                      t1 = this.contacts;
                    case 16:
                      state0 = 0;
                      $.$indexSet$ax(t1, i1, $.$index$asx(t1, i2));
                      t1 = this.contacts;
                    case 17:
                      state0 = 0;
                      $.$indexSet$ax(t1, i2, temp);
                  }
                ++i2;
            }
        t1 = this._contactSolver;
        t1.init$3(t3, this.contactCount, time_step.dtRatio);
        t1.warmStart$0();
        i = 0;
      case 18:
      case 19:
        L2:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.jointCount;
              case 18:
                state0 = 0;
                if (!$.JSNumber_methods.$lt(i, t2))
                  break L2;
                t2 = this.joints;
              case 19:
                state0 = 0;
                $.$index$asx(t2, i).initVelocityConstraints$1(time_step);
                ++i;
            }
        i = 0;
      case 20:
      case 21:
        L3:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < time_step.velocityIterations))
                  break L3;
                j = 0;
              default:
                L4:
                  while (true)
                    switch (state0) {
                      case 0:
                        t2 = this.jointCount;
                      case 20:
                        state0 = 0;
                        if (!$.JSNumber_methods.$lt(j, t2))
                          break L4;
                        t2 = this.joints;
                      case 21:
                        state0 = 0;
                        $.$index$asx(t2, j).solveVelocityConstraints$1(time_step);
                        ++j;
                    }
                t1.solveVelocityConstraints$0();
                ++i;
            }
        t1.storeImpulses$0();
        temp = $.vec2$zero();
        t2 = this._translation;
        i = 0;
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        L5:
          while (true)
            switch (state0) {
              case 0:
                t3 = this.bodyCount;
              case 22:
                state0 = 0;
                if (!$.JSNumber_methods.$lt(i, t3))
                  break L5;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t3 = this.bodies;
                    case 23:
                      state0 = 0;
                      b = $.$index$asx(t3, i);
                      t3 = $.get$type$x(b);
                    case 24:
                      state0 = 0;
                      if ($.$eq(t3, 0) === true)
                        break c$0;
                      t3 = t2.copyFrom$1(b.get$linearVelocity());
                      t3.scale$1(t3, time_step.dt);
                      if (t2.dot$1(t2) > 4) {
                        t3 = t2.get$length(t2);
                        $.scale$1$x(b.get$linearVelocity(), 2 / t3);
                      }
                      t3 = time_step.dt;
                      t4 = b.get$angularVelocity();
                      if (typeof t4 !== "number")
                        throw $.iae(t4);
                      rotation = t3 * t4;
                    case 25:
                      if (state0 === 25 || state0 === 0 && rotation * rotation > 2.4674011002723395)
                        switch (state0) {
                          case 0:
                            ratio = 1.5707963267948966 / $.JSNumber_methods.abs$0(rotation);
                            t3 = b.get$angularVelocity();
                          case 25:
                            state0 = 0;
                            b.set$angularVelocity($.$mul$n(t3, ratio));
                        }
                      t3 = b.get$sweep();
                      t3.centerZero.copyFrom$1(t3.center);
                      t4 = b.get$sweep();
                      t4.angleZero = t4.angle;
                      t4 = temp.copyFrom$1(b.get$linearVelocity());
                      t4.scale$1(t4, time_step.dt);
                      t4 = b.get$sweep().center;
                      t4.add$1(t4, temp);
                      t4 = b.get$sweep();
                      t5 = t4.angle;
                    case 26:
                      state0 = 0;
                      t7 = time_step.dt;
                      t8 = b.get$angularVelocity();
                      if (typeof t8 !== "number")
                        throw $.iae(t8);
                      t4.angle = $.$add$ns(t5, t7 * t8);
                      b.synchronizeTransform$0();
                  }
                }
                ++i;
            }
        i = 0;
      case 27:
      case 28:
        L6:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < time_step.positionIterations))
                  break L6;
                contactsOkay = t1.solvePositionConstraints$1(0.2);
                jointsOkay = true;
                j = 0;
              default:
                L7:
                  while (true)
                    switch (state0) {
                      case 0:
                        t2 = this.jointCount;
                      case 27:
                        state0 = 0;
                        if (!$.JSNumber_methods.$lt(j, t2))
                          break L7;
                        t2 = this.joints;
                      case 28:
                        state0 = 0;
                        jointOkay = $.$index$asx(t2, j).solvePositionConstraints$1(0.2);
                        jointsOkay = jointsOkay && jointOkay === true;
                        ++j;
                    }
                if (contactsOkay === true && jointsOkay)
                  break L6;
                ++i;
            }
        this.report$1(t1.constraints);
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
        var velocityDelta, t12, t13, a, a1, a2, fixtureB, bodyA, nonStatic, rotation, t8, jointOkay;
        if (state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 34 || state0 === 33 || state0 === 32 || state0 === 31 || state0 === 30 || state0 === 29 || state0 === 0 && allowSleep === true)
          switch (state0) {
            case 0:
              minSleepTime = 99999999999999;
              i = 0;
            default:
              L8:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = this.bodyCount;
                    case 29:
                      state0 = 0;
                      if (!$.JSNumber_methods.$lt(i, t1))
                        break L8;
                    default:
                      c$0: {
                        switch (state0) {
                          case 0:
                            t1 = this.bodies;
                          case 30:
                            state0 = 0;
                            b = $.$index$asx(t1, i);
                            t1 = $.get$type$x(b);
                          case 31:
                            state0 = 0;
                            if ($.$eq(t1, 0) === true)
                              break c$0;
                            t1 = b.get$flags();
                          case 32:
                            state0 = 0;
                            if ($.$and$n(t1, 4) === 0) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            }
                            t1 = b.get$flags();
                          case 33:
                            state0 = 0;
                          default:
                            if (state0 === 35 || state0 === 34 || state0 === 0 && $.$and$n(t1, 4) !== 0)
                              switch (state0) {
                                case 0:
                                  t1 = b.get$angularVelocity();
                                case 34:
                                  state0 = 0;
                                  t3 = b.get$angularVelocity();
                                case 35:
                                  state0 = 0;
                                  t1 = $.$gt$n($.$mul$n(t1, t3), 0.0012184696791468343) === true || b.get$linearVelocity().dot$1(b.get$linearVelocity()) > 0.0001;
                              }
                            else
                              t1 = true;
                          case 36:
                          case 37:
                            if (state0 === 0 && t1) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            } else
                              switch (state0) {
                                case 0:
                                  t1 = b.get$sleepTime();
                                case 36:
                                  state0 = 0;
                                  b.set$sleepTime($.$add$ns(t1, time_step.dt));
                                  minSleepTime = $.min(minSleepTime, b.get$sleepTime());
                                case 37:
                                  state0 = 0;
                              }
                        }
                      }
                      ++i;
                  }
            case 38:
            case 39:
              if (state0 === 39 || state0 === 38 || state0 === 0 && minSleepTime >= 0.5)
                switch (state0) {
                  case 0:
                    i = 0;
                  default:
                    L9:
                      while (true)
                        switch (state0) {
                          case 0:
                            t1 = this.bodyCount;
                          case 38:
                            state0 = 0;
                            if (!$.JSNumber_methods.$lt(i, t1))
                              break L9;
                            t1 = this.bodies;
                          case 39:
                            state0 = 0;
                            $.$index$asx(t1, i).set$awake(false);
                            ++i;
                        }
                }
          }
    }
  },
  addBody$1: function(body) {
    var t1, t3;
    body.set$islandIndex(this.bodyCount);
    t1 = this.bodies;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.addBody$1$bailout(1, body, t1);
    t3 = this.bodyCount;
    if (typeof t3 !== "number")
      return this.addBody$1$bailout(2, body, t1, t3);
    this.bodyCount = t3 + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = body;
  },
  addBody$1$bailout: function(state0, body, t1, t3) {
    switch (state0) {
      case 0:
        body.set$islandIndex(this.bodyCount);
        t1 = this.bodies;
      case 1:
        state0 = 0;
        t3 = this.bodyCount;
      case 2:
        state0 = 0;
        this.bodyCount = $.$add$ns(t3, 1);
        $.$indexSet$ax(t1, t3, body);
    }
  },
  addContact$1: function(contact) {
    var t1, t3;
    t1 = this.contacts;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.addContact$1$bailout(1, contact, t1);
    t3 = this.contactCount;
    if (typeof t3 !== "number")
      return this.addContact$1$bailout(2, contact, t1, t3);
    this.contactCount = t3 + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = contact;
  },
  addContact$1$bailout: function(state0, contact, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.contacts;
      case 1:
        state0 = 0;
        t3 = this.contactCount;
      case 2:
        state0 = 0;
        this.contactCount = $.$add$ns(t3, 1);
        $.$indexSet$ax(t1, t3, contact);
    }
  },
  addJoint$1: function(joint) {
    var t1, t3;
    t1 = this.joints;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.addJoint$1$bailout(1, joint, t1);
    t3 = this.jointCount;
    if (typeof t3 !== "number")
      return this.addJoint$1$bailout(2, joint, t1, t3);
    this.jointCount = t3 + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = joint;
  },
  addJoint$1$bailout: function(state0, joint, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.joints;
      case 1:
        state0 = 0;
        t3 = this.jointCount;
      case 2:
        state0 = 0;
        this.jointCount = $.$add$ns(t3, 1);
        $.$indexSet$ax(t1, t3, joint);
    }
  },
  report$1: function(constraints) {
    var t1, t2, t3, t4, t5, t6, i, c, cc, t7, j, t8;
    if (this.listener == null)
      return;
    for (t1 = this.impulse, t2 = t1.normalImpulses, t3 = t2.length, t4 = t1.tangentImpulses, t5 = t4.length, t6 = constraints.length, i = 0; $.JSNumber_methods.$lt(i, this.contactCount); ++i) {
      c = $.$index$asx(this.contacts, i);
      if (i >= t6)
        throw $.ioore(i);
      cc = constraints[i];
      for (t7 = $.getInterceptor$x(cc), j = 0; $.JSNumber_methods.$lt(j, cc.get$pointCount()); ++j) {
        t8 = $.$index$asx(t7.get$points(cc), j).get$normalImpulse();
        if (j >= t3)
          throw $.ioore(j);
        t2[j] = t8;
        t8 = $.$index$asx(t7.get$points(cc), j).get$tangentImpulse();
        if (j >= t5)
          throw $.ioore(j);
        t4[j] = t8;
      }
      this.listener.postSolve$2(c, t1);
    }
  }
};

$$.Position = {"": "Object;x*,a@",
  Position$0: function() {
    this.x = $.vec2$zero();
    this.a = 0;
  }
};

$$.Velocity = {"": "Object;v<,a@",
  Velocity$0: function() {
    this.v = $.vec2$zero();
    this.a = 0;
  }
};

$$.TimeStep = {"": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting"};

$$.World = {"": "Object;_flags@,_contactManager<,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center<,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
  _addType$3: function(creatorStack, type1, type2) {
    var register, t1, t2, register2;
    register = $.ContactRegister$();
    register.creator = creatorStack;
    register.primary = true;
    t1 = this._contactStacks;
    t2 = t1.length;
    if (type1 < 0 || type1 >= t2)
      throw $.ioore(type1);
    $.$indexSet$ax(t1[type1], type2, register);
    if (type1 !== type2) {
      register2 = $.ContactRegister$();
      register2.creator = creatorStack;
      register2.primary = false;
      if (type2 < 0 || type2 >= t2)
        throw $.ioore(type2);
      $.$indexSet$ax(t1[type2], type1, register2);
    }
  },
  _initializeRegisters$0: function() {
    var t1 = this._pool;
    this._addType$3(t1.getCircleContactStack$0(), 0, 0);
    this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
    this._addType$3(t1.getPolyContactStack$0(), 1, 1);
  },
  popContact$2: function(fixtureA, fixtureB) {
    var type1, type2, t1, reg, creator, c;
    type1 = $.get$type$x(fixtureA);
    type2 = $.get$type$x(fixtureB);
    t1 = this._contactStacks;
    if (type1 !== (type1 | 0))
      throw $.iae(type1);
    if (type1 < 0 || type1 >= t1.length)
      throw $.ioore(type1);
    reg = $.$index$asx(t1[type1], type2);
    creator = reg.get$creator();
    if (creator != null) {
      if ($.get$isEmpty$asx(creator) === true)
        creator = this._getFreshContactStack$2(type1, type2);
      if (reg.get$primary()) {
        c = creator.removeFirst$0();
        c.init$2(fixtureA, fixtureB);
        return c;
      } else {
        c = creator.removeFirst$0();
        c.init$2(fixtureB, fixtureA);
        return c;
      }
    } else
      return;
  },
  _getFreshContactStack$2: function(type1, type2) {
    var t1, t2;
    if (type1 === 0 && $.$eq(type2, 0) === true)
      return this._pool.getCircleContactStack$0();
    else {
      t1 = type1 === 1 && $.$eq(type2, 1) === true;
      t2 = this._pool;
      if (t1)
        return t2.getPolyContactStack$0();
      else
        return t2.getPolyCircleContactStack$0();
    }
  },
  pushContact$1: function(contact) {
    var type1, type2, t1;
    if ($.$gt$n(contact.get$manifold().get$pointCount(), 0) === true) {
      $.get$body$x(contact.get$fixtureA()).set$awake(true);
      $.get$body$x(contact.get$fixtureB()).set$awake(true);
    }
    type1 = $.get$type$x(contact.get$fixtureA());
    type2 = $.get$type$x(contact.get$fixtureB());
    t1 = this._contactStacks;
    if (type1 !== (type1 | 0))
      throw $.iae(type1);
    if (type1 < 0 || type1 >= t1.length)
      throw $.ioore(type1);
    $.$index$asx(t1[type1], type2).get$creator().addFirst$1(contact);
  },
  set$debugDraw: function(debugDraw) {
    this._debugDraw = debugDraw;
  },
  createBody$1: function(def) {
    var b, t1;
    if (this.get$locked() === true)
      return;
    b = $.Body$(def, this);
    b.prev = null;
    b.next = this._bodyList;
    t1 = this._bodyList;
    if (t1 != null)
      t1.prev = b;
    this._bodyList = b;
    this._bodyCount = this._bodyCount + 1;
    return b;
  },
  step$3: function(_, dt, velocityIterations, positionIterations) {
    var t1;
    if ((this._flags & 1) === 1) {
      this._contactManager.findNewContacts$0();
      this._flags = (this._flags & 4294967294) >>> 0;
    }
    this._flags = (this._flags | 2) >>> 0;
    t1 = this.timestep;
    t1.dt = dt;
    t1.velocityIterations = velocityIterations;
    t1.positionIterations = positionIterations;
    if (dt > 0)
      t1.inv_dt = 1 / dt;
    else
      t1.inv_dt = 0;
    t1.dtRatio = this._inverseTimestep * dt;
    t1.warmStarting = this._warmStarting;
    this._contactManager.collide$0();
    if (t1.dt > 0)
      this.solve$1(t1);
    if (this._continuousPhysics && t1.dt > 0)
      this.solveTimeOfImpact$0();
    if (t1.dt > 0)
      this._inverseTimestep = t1.inv_dt;
    if ((this._flags & 4) === 4)
      this.clearForces$0();
    this._flags = (this._flags & 4294967293) >>> 0;
  },
  clearForces$0: function() {
    var body;
    for (var body = this._bodyList; body != null; body = body.get$next()) {
      body.get$_force().splat$1(0);
      body.set$_torque(0);
    }
  },
  drawDebugData$0: function() {
    var t1, drawFlags, xf, color, b, f, j, c, t2, aabb, vs, t3, t4, t5, t6, t7;
    t1 = this._debugDraw;
    if (t1 == null)
      return;
    drawFlags = t1.get$flags();
    if (drawFlags !== (drawFlags | 0))
      return this.drawDebugData$0$bailout(1, drawFlags);
    if ((drawFlags & 1) === 1) {
      xf = $.Transform$();
      color = $.Color3$();
      for (b = this._bodyList; t1 = $.getInterceptor(b), b != null; b = b.get$next()) {
        xf.setFrom$1(b.get$originTransform());
        for (f = b.get$fixtureList(); f != null; f = f.get$next())
          if ($.$eq(b.get$active(), false) === true) {
            color.setFromRGBF$3(0.5, 0.5, 0.3);
            this.drawShape$3(f, xf, color);
          } else if ($.$eq(t1.get$type(b), 0) === true) {
            color.setFromRGBF$3(0.5, 0.9, 0.3);
            this.drawShape$3(f, xf, color);
          } else if ($.$eq(t1.get$type(b), 1) === true) {
            color.setFromRGBF$3(0.5, 0.5, 0.9);
            this.drawShape$3(f, xf, color);
          } else if ($.$eq(b.get$awake(), false) === true) {
            color.setFromRGBF$3(0.9, 0.9, 0.9);
            this.drawShape$3(f, xf, color);
          } else {
            color.setFromRGBF$3(0.9, 0.7, 0.7);
            this.drawShape$3(f, xf, color);
          }
      }
    }
    if ((drawFlags & 2) === 2)
      for (j = this._jointList; j != null; j = j.get$_liblib2$_next())
        this.drawJoint$1(j);
    if ((drawFlags & 8) === 8) {
      color = $.Color3$fromRGBF(0.3, 0.9, 0.9);
      for (c = this._contactManager.contactList, t1 = this.cA, t2 = this.cB; c != null; c = c.get$next()) {
        t1.copyFrom$1(c.get$fixtureA().get$box().get$center());
        t2.copyFrom$1(c.get$fixtureB().get$box().get$center());
        this._debugDraw.drawSegment$3(t1, t2, color);
      }
    }
    if ((drawFlags & 4) === 4) {
      color = $.Color3$fromRGBF(0.9, 0.3, 0.9);
      for (b = this._bodyList, t1 = 0 !== (drawFlags & 64); b != null; b = b.get$next()) {
        if (b.get$active() !== true)
          continue;
        for (f = b.get$fixtureList(); f != null; f = f.get$next()) {
          aabb = f.get$proxy().get$box();
          vs = $.List_List(4, $.vec2);
          $.setRuntimeTypeInfo(vs, [$.vec2]);
          t2 = aabb.lowerBound;
          t3 = $.getInterceptor$x(t2);
          t4 = $.vec2$(t3.get$x(t2), t3.get$y(t2));
          t5 = vs.length;
          if (0 >= t5)
            throw $.ioore(0);
          vs[0] = t4;
          t4 = $.vec2$($.get$x$x(aabb.upperBound), $.get$y$x(aabb.lowerBound));
          if (1 >= t5)
            throw $.ioore(1);
          vs[1] = t4;
          t4 = aabb.upperBound;
          t6 = $.getInterceptor$x(t4);
          t7 = $.vec2$(t6.get$x(t4), t6.get$y(t4));
          if (2 >= t5)
            throw $.ioore(2);
          vs[2] = t7;
          t7 = $.vec2$($.get$x$x(aabb.lowerBound), $.get$y$x(aabb.upperBound));
          if (3 >= t5)
            throw $.ioore(3);
          vs[3] = t7;
          t2 = this._debugDraw;
          if (t1)
            t2.drawPolygon$3(vs, 4, color);
          else
            t2.drawSolidPolygon$3(vs, 4, color);
        }
      }
    }
    if ((drawFlags & 16) === 16) {
      xf = $.Transform$();
      color = $.Color3$fromRGB(1, 0, 0);
      for (b = this._bodyList, t1 = xf.position; b != null; b = b.get$next()) {
        xf.setFrom$1(b.get$originTransform());
        t1.copyFrom$1(b.get$worldCenter());
        this._debugDraw.drawTransform$2(xf, color);
      }
    }
  },
  drawDebugData$0$bailout: function(state0, drawFlags) {
    var t1, xf, color, b, t2, f, j, c, t3, aabb, vs, t4, t5, t6, t7;
    t1 = $.getInterceptor$n(drawFlags);
    if (t1.$and(drawFlags, 1) === 1) {
      xf = $.Transform$();
      color = $.Color3$();
      for (b = this._bodyList; t2 = $.getInterceptor(b), b != null; b = b.get$next()) {
        xf.setFrom$1(b.get$originTransform());
        for (f = b.get$fixtureList(); f != null; f = f.get$next())
          if ($.$eq(b.get$active(), false) === true) {
            color.setFromRGBF$3(0.5, 0.5, 0.3);
            this.drawShape$3(f, xf, color);
          } else if ($.$eq(t2.get$type(b), 0) === true) {
            color.setFromRGBF$3(0.5, 0.9, 0.3);
            this.drawShape$3(f, xf, color);
          } else if ($.$eq(t2.get$type(b), 1) === true) {
            color.setFromRGBF$3(0.5, 0.5, 0.9);
            this.drawShape$3(f, xf, color);
          } else if ($.$eq(b.get$awake(), false) === true) {
            color.setFromRGBF$3(0.9, 0.9, 0.9);
            this.drawShape$3(f, xf, color);
          } else {
            color.setFromRGBF$3(0.9, 0.7, 0.7);
            this.drawShape$3(f, xf, color);
          }
      }
    }
    if (t1.$and(drawFlags, 2) === 2)
      for (j = this._jointList; j != null; j = j.get$_liblib2$_next())
        this.drawJoint$1(j);
    if (t1.$and(drawFlags, 8) === 8) {
      color = $.Color3$fromRGBF(0.3, 0.9, 0.9);
      for (c = this._contactManager.contactList, t2 = this.cA, t3 = this.cB; c != null; c = c.get$next()) {
        t2.copyFrom$1(c.get$fixtureA().get$box().get$center());
        t3.copyFrom$1(c.get$fixtureB().get$box().get$center());
        this._debugDraw.drawSegment$3(t2, t3, color);
      }
    }
    if (t1.$and(drawFlags, 4) === 4) {
      color = $.Color3$fromRGBF(0.9, 0.3, 0.9);
      for (b = this._bodyList; b != null; b = b.get$next()) {
        if (b.get$active() !== true)
          continue;
        for (f = b.get$fixtureList(); f != null; f = f.get$next()) {
          aabb = f.get$proxy().get$box();
          vs = $.List_List(4, $.vec2);
          $.setRuntimeTypeInfo(vs, [$.vec2]);
          t2 = aabb.lowerBound;
          t3 = $.getInterceptor$x(t2);
          t4 = $.vec2$(t3.get$x(t2), t3.get$y(t2));
          t5 = vs.length;
          if (0 >= t5)
            throw $.ioore(0);
          vs[0] = t4;
          t4 = $.vec2$($.get$x$x(aabb.upperBound), $.get$y$x(aabb.lowerBound));
          if (1 >= t5)
            throw $.ioore(1);
          vs[1] = t4;
          t4 = aabb.upperBound;
          t6 = $.getInterceptor$x(t4);
          t7 = $.vec2$(t6.get$x(t4), t6.get$y(t4));
          if (2 >= t5)
            throw $.ioore(2);
          vs[2] = t7;
          t7 = $.vec2$($.get$x$x(aabb.lowerBound), $.get$y$x(aabb.upperBound));
          if (3 >= t5)
            throw $.ioore(3);
          vs[3] = t7;
          t2 = t1.$and(drawFlags, 64);
          t3 = this._debugDraw;
          if (0 !== t2)
            t3.drawPolygon$3(vs, 4, color);
          else
            t3.drawSolidPolygon$3(vs, 4, color);
        }
      }
    }
    if (t1.$and(drawFlags, 16) === 16) {
      xf = $.Transform$();
      color = $.Color3$fromRGB(1, 0, 0);
      for (b = this._bodyList, t1 = xf.position; b != null; b = b.get$next()) {
        xf.setFrom$1(b.get$originTransform());
        t1.copyFrom$1(b.get$worldCenter());
        this._debugDraw.drawTransform$2(xf, color);
      }
    }
  },
  get$contactList: function() {
    return this._contactManager.contactList;
  },
  get$locked: function() {
    return (this._flags & 2) === 2;
  },
  get$jointList: function() {
    return this._jointList;
  },
  solve$1: function(timeStep) {
    var t1, t2, t3, b, c, j, stackSize, seed, t4, stackCount, ce, contact, sensorA, sensorB, other, stackCount0, je, i;
    t1 = this.island;
    t2 = this._bodyCount;
    t3 = this._contactManager;
    t1.init$4(t2, t3.contactCount, this._jointCount, t3.contactListener);
    for (b = this._bodyList; b != null; b = b.get$next())
      b.set$flags((b.get$flags() & 4294967294) >>> 0);
    for (c = this._contactManager.contactList; c != null; c = c.get$next())
      c.set$flags($.$and$n(c.get$flags(), 4294967294));
    for (j = this.get$jointList(); j != null; j = j.get$_liblib2$_next())
      j.set$islandFlag(false);
    stackSize = this._bodyCount;
    if (this.stack.length < stackSize) {
      t2 = $.List_List(stackSize, $.Body);
      $.setRuntimeTypeInfo(t2, [$.Body]);
      this.stack = t2;
    }
    for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; seed != null; seed = seed.get$next()) {
      if ((seed.get$flags() & 1) === 1)
        continue;
      if ($.$eq(seed.get$awake(), false) === true || $.$eq(seed.get$active(), false) === true)
        continue;
      if ($.$eq($.get$type$x(seed), 0) === true)
        continue;
      t1.clear$0(t1);
      t4 = this.stack;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = seed;
      seed.set$flags((seed.get$flags() | 1) >>> 0);
      for (stackCount = 1; stackCount > 0;) {
        t4 = this.stack;
        --stackCount;
        if (stackCount >= t4.length)
          throw $.ioore(stackCount);
        b = t4[stackCount];
        t1.addBody$1(b);
        b.set$awake(true);
        if ($.$eq($.get$type$x(b), 0) === true)
          continue;
        for (ce = b.get$contactList(); ce != null; ce = ce.get$next()) {
          contact = ce.get$contact();
          if ($.$and$n(contact.get$flags(), 1) === 1)
            continue;
          if ($.$eq(contact.get$enabled(), false) === true || $.$eq(contact.get$touching(), false) === true)
            continue;
          sensorA = contact.get$fixtureA().get$isSensor();
          sensorB = contact.get$fixtureB().get$isSensor();
          if (sensorA === true || sensorB === true)
            continue;
          t1.addContact$1(contact);
          contact.set$flags($.$or$n(contact.get$flags(), 1));
          other = ce.get$other();
          if ($.$and$n(other.get$flags(), 1) === 1)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags($.$or$n(other.get$flags(), 1));
          stackCount = stackCount0;
        }
        for (je = b.get$jointList(); je != null; je = je.get$next()) {
          if ($.$eq(je.get$joint().get$islandFlag(), true) === true)
            continue;
          other = je.get$other();
          if ($.$eq(other.get$active(), false) === true)
            continue;
          t1.addJoint$1(je.get$joint());
          je.get$joint().set$islandFlag(true);
          if ($.$and$n(other.get$flags(), 1) === 1)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags($.$or$n(other.get$flags(), 1));
          stackCount = stackCount0;
        }
      }
      t1.solve$3(timeStep, t2, t3);
      for (i = 0; $.JSNumber_methods.$lt(i, t1.bodyCount); ++i) {
        b = $.$index$asx(t1.bodies, i);
        if ($.$eq($.get$type$x(b), 0) === true)
          b.set$flags($.$and$n(b.get$flags(), 4294967294));
      }
    }
    for (b = this._bodyList; b != null; b = b.get$next()) {
      if ((b.get$flags() & 1) === 0)
        continue;
      if ($.$eq($.get$type$x(b), 0) === true)
        continue;
      b.synchronizeFixtures$0();
    }
    this._contactManager.findNewContacts$0();
  },
  solveTimeOfImpact$0: function() {
    var c, body, t1, t2;
    for (c = this._contactManager.contactList; c != null; c = c.get$next()) {
      c.set$flags($.$or$n(c.get$flags(), 4));
      c.set$toiCount(0);
    }
    for (body = this._bodyList; t1 = $.getInterceptor(body), body != null; body = body.get$next()) {
      t1 = (body.get$flags() & 1) === 0 || $.$eq(t1.get$type(body), 1) === true || $.$eq(t1.get$type(body), 0) === true;
      t2 = body.get$flags();
      if (t1)
        body.set$flags((t2 | 64) >>> 0);
      else
        body.set$flags((t2 & 4294967231) >>> 0);
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      if ((body.get$flags() & 64) === 64)
        continue;
      if ($.$eq(body.get$bullet(), true) === true)
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      body.set$flags((body.get$flags() | 64) >>> 0);
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      if ((body.get$flags() & 64) === 64)
        continue;
      if ($.$eq(body.get$bullet(), false) === true)
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      body.set$flags((body.get$flags() | 64) >>> 0);
    }
  },
  solveTimeOfImpactGivenBody$1: function(body) {
    var bullet, t2, t3, t4, t5, t6, t7, t8, toiContact, toi, toiOther, iter, ce, found, count, other, type, t1, t10, contact, fixtureA, fixtureB, bodyA, t9, bodyB, i;
    bullet = body.get$bullet();
    if (typeof bullet !== "boolean")
      return this.solveTimeOfImpactGivenBody$1$bailout(1, body, bullet);
    t2 = this.toiOutput;
    t3 = this.toiInput;
    t4 = t3.proxyA;
    t5 = t3.proxyB;
    t6 = t3.sweepA;
    t7 = t3.sweepB;
    t8 = this._pool;
    toiContact = null;
    toi = 1;
    toiOther = null;
    iter = 0;
    do {
      for (ce = body.get$contactList(), found = false, count = 0; ce != null; ce = ce.get$next()) {
        if ($.$eq(ce.get$contact(), toiContact) === true)
          continue;
        other = ce.get$other();
        type = $.get$type$x(other);
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(2, body, bullet, t7, t8, other, t2, iter, $.JSBool_methods, toiContact, toi, toiOther, found, count, type, t3, ce, t5, t4, t6);
        if (bullet) {
          t1 = other.get$flags();
          if (t1 !== (t1 | 0))
            return this.solveTimeOfImpactGivenBody$1$bailout(3, body, bullet, t7, t8, other, t2, iter, $.JSBool_methods, toiContact, toi, toiOther, found, count, type, t3, ce, t5, t4, t6, t1);
          if ((t1 & 64) === 0)
            continue;
          if (type !== 0) {
            t1 = ce.get$contact().get$flags();
            if (t1 !== (t1 | 0))
              return this.solveTimeOfImpactGivenBody$1$bailout(4, body, bullet, t7, t8, other, t2, iter, $.JSBool_methods, toiContact, toi, toiOther, found, count, 0, t3, ce, t5, t4, t6, t1);
            t10 = (t1 & 16) !== 0;
            t1 = t10;
          } else
            t1 = false;
          if (t1)
            continue;
        } else if (type === 2)
          continue;
        contact = ce.get$contact();
        t1 = contact.get$enabled();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(5, body, bullet, t7, t8, other, t2, iter, $.JSBool_methods, toiContact, toi, toiOther, found, count, 0, t3, ce, t5, t4, t6, t1, contact);
        if (!t1)
          continue;
        t1 = contact.get$toiCount();
        if (typeof t1 !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(6, body, bullet, t7, t8, other, t2, iter, $.JSBool_methods, toiContact, toi, toiOther, found, count, 0, t3, ce, t5, t4, t6, t1, contact);
        if (t1 > 10)
          continue;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          continue;
        t1 = $.getInterceptor$x(fixtureA);
        bodyA = t1.get$body(fixtureA);
        t9 = $.getInterceptor$x(fixtureB);
        bodyB = t9.get$body(fixtureB);
        t4.setFromShape$1(t1.get$shape(fixtureA));
        t5.setFromShape$1(t9.get$shape(fixtureB));
        t6.setFrom$1(bodyA.get$sweep());
        t7.setFrom$1(bodyB.get$sweep());
        t3.tMax = toi;
        t8.timeOfImpact.timeOfImpact$2(t2, t3);
        if (t2.state === 3) {
          t1 = t2.t;
          if (typeof t1 !== "number")
            return this.solveTimeOfImpactGivenBody$1$bailout(7, body, bullet, t7, t8, other, t2, iter, $.JSBool_methods, toiContact, toi, toiOther, found, count, 0, t3, ce, t5, t4, t6, t1, contact);
          t1 = t1 < toi;
        } else
          t1 = false;
        if (t1) {
          toi = t2.t;
          if (toi !== (toi | 0))
            return this.solveTimeOfImpactGivenBody$1$bailout(8, body, bullet, t7, t8, other, t2, iter, $.JSBool_methods, 0, toi, 0, 0, count, 0, t3, ce, t5, t4, t6, 0, contact);
          toiOther = other;
          toiContact = contact;
          found = true;
        }
        ++count;
      }
      ++iter;
    } while (found && count > 1 && iter < 50);
    if (toiContact == null) {
      body.advance$1(1);
      return;
    }
    t1 = this.backup;
    t1.setFrom$1(body.get$sweep());
    body.advance$1(toi);
    toiContact.update$1(this._contactManager.contactListener);
    t2 = toiContact.get$enabled();
    if (typeof t2 !== "boolean")
      return this.solveTimeOfImpactGivenBody$1$bailout(9, body, 0, 0, 0, 0, 0, 0, t2, toiContact, 0, toiOther, 0, 0, 0, 0, 0, 0, 0, 0, t1);
    if (!t2) {
      body.get$sweep().setFrom$1(t1);
      this.solveTimeOfImpactGivenBody$1(body);
    }
    t1 = toiContact.get$toiCount();
    if (typeof t1 !== "number")
      return this.solveTimeOfImpactGivenBody$1$bailout(10, body, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, 0, 0, 0, 0, 0, 0, 0, t1);
    toiContact.set$toiCount(t1 + 1);
    t1 = this.contacts;
    if (t1.length < 32) {
      t1 = $.List_List(32, $.Contact);
      $.setRuntimeTypeInfo(t1, [$.Contact]);
      this.contacts = t1;
    }
    ce = body.get$contactList();
    count = 0;
    while (true) {
      if (!(ce != null && count < 32))
        break;
      c$0: {
        type = $.get$type$x(ce.get$other());
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(11, body, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, type, 0, ce);
        if (type === 2)
          break c$0;
        contact = ce.get$contact();
        t1 = contact.get$enabled();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(12, body, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, 0, ce, 0, 0, 0, t1, contact);
        if (!t1)
          break c$0;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          break c$0;
        if ($.$eq(contact, toiContact) !== true)
          contact.update$1(this._contactManager.contactListener);
        t1 = contact.get$enabled();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(13, body, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, 0, ce, 0, 0, 0, t1, contact);
        if (!t1)
          break c$0;
        t1 = contact.get$touching();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(14, body, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, 0, ce, 0, 0, 0, t1, contact);
        if (!t1)
          break c$0;
        t1 = this.contacts;
        if (count >= t1.length)
          throw $.ioore(count);
        t1[count] = contact;
        ++count;
      }
      ce = ce.get$next();
    }
    t1 = this.toiSolver;
    t1.initialize$3(t1, this.contacts, count, body);
    for (i = 0; i < 20; ++i)
      if (t1.solve$1(0.75) === true)
        break;
    t1 = $.get$type$x(toiOther);
    if (typeof t1 !== "number")
      return this.solveTimeOfImpactGivenBody$1$bailout(15, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1);
    if (t1 !== 0) {
      t1 = toiContact.get$flags();
      if (t1 !== (t1 | 0))
        return this.solveTimeOfImpactGivenBody$1$bailout(16, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1);
      toiContact.set$flags((t1 | 16) >>> 0);
    }
  },
  solveTimeOfImpactGivenBody$1$bailout: function(state0, body, bullet, t8, t9, other, t3, iter, t2, toiContact, toi, toiOther, found, count, type, t4, ce, t6, t5, t7, t1, contact) {
    switch (state0) {
      case 0:
        bullet = body.get$bullet();
      case 1:
        state0 = 0;
        t2 = $.getInterceptor(bullet);
        t3 = this.toiOutput;
        t4 = this.toiInput;
        t5 = t4.proxyA;
        t6 = t4.proxyB;
        t7 = t4.sweepA;
        t8 = t4.sweepB;
        t9 = this._pool;
        toiContact = null;
        toi = 1;
        toiOther = null;
        iter = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                ce = body.get$contactList();
                found = false;
                count = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(ce != null))
                          break L1;
                      default:
                        c$1: {
                          switch (state0) {
                            case 0:
                              if ($.$eq(ce.get$contact(), toiContact) === true)
                                break c$1;
                              other = ce.get$other();
                              type = $.get$type$x(other);
                            case 2:
                              state0 = 0;
                            default:
                              if (state0 === 4 || state0 === 3 || state0 === 0 && t2.$eq(bullet, true) === true)
                                switch (state0) {
                                  case 0:
                                    t1 = other.get$flags();
                                  case 3:
                                    state0 = 0;
                                    if ($.$and$n(t1, 64) === 0)
                                      break c$1;
                                  case 4:
                                    if (state0 === 4 || state0 === 0 && $.$eq(type, 0) !== true)
                                      switch (state0) {
                                        case 0:
                                          t1 = ce.get$contact().get$flags();
                                        case 4:
                                          state0 = 0;
                                          t11 = $.$and$n(t1, 16) !== 0;
                                          t1 = t11;
                                      }
                                    else
                                      t1 = false;
                                    if (t1)
                                      break c$1;
                                }
                              else if ($.$eq(type, 2) === true)
                                break c$1;
                              contact = ce.get$contact();
                              t1 = contact.get$enabled();
                            case 5:
                              state0 = 0;
                              if ($.$eq(t1, false) === true)
                                break c$1;
                              t1 = contact.get$toiCount();
                            case 6:
                              state0 = 0;
                              if ($.$gt$n(t1, 10) === true)
                                break c$1;
                              fixtureA = contact.get$fixtureA();
                              fixtureB = contact.get$fixtureB();
                              if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
                                break c$1;
                              t1 = $.getInterceptor$x(fixtureA);
                              bodyA = t1.get$body(fixtureA);
                              t10 = $.getInterceptor$x(fixtureB);
                              bodyB = t10.get$body(fixtureB);
                              t5.setFromShape$1(t1.get$shape(fixtureA));
                              t6.setFromShape$1(t10.get$shape(fixtureB));
                              t7.setFrom$1(bodyA.get$sweep());
                              t8.setFrom$1(bodyB.get$sweep());
                              t4.tMax = toi;
                              t9.timeOfImpact.timeOfImpact$2(t3, t4);
                            case 7:
                              if (state0 === 7 || state0 === 0 && t3.state === 3)
                                switch (state0) {
                                  case 0:
                                    t1 = t3.t;
                                  case 7:
                                    state0 = 0;
                                    t11 = $.$lt$n(t1, toi) === true;
                                    t1 = t11;
                                }
                              else
                                t1 = false;
                            case 8:
                              if (state0 === 8 || state0 === 0 && t1)
                                switch (state0) {
                                  case 0:
                                    toi = t3.t;
                                  case 8:
                                    state0 = 0;
                                    toiOther = other;
                                    toiContact = contact;
                                    found = true;
                                }
                              ++count;
                          }
                        }
                        ce = ce.get$next();
                    }
                ++iter;
                if (!(found && count > 1 && iter < 50))
                  break L0;
            }
        if (toiContact == null) {
          body.advance$1(1);
          return;
        }
        t1 = this.backup;
        t1.setFrom$1(body.get$sweep());
        body.advance$1(toi);
        toiContact.update$1(this._contactManager.contactListener);
        t2 = toiContact.get$enabled();
      case 9:
        state0 = 0;
        if ($.$eq(t2, false) === true) {
          body.get$sweep().setFrom$1(t1);
          this.solveTimeOfImpactGivenBody$1(body);
        }
        t1 = toiContact.get$toiCount();
      case 10:
        state0 = 0;
        toiContact.set$toiCount($.$add$ns(t1, 1));
        t1 = this.contacts;
        if (t1.length < 32) {
          t1 = $.List_List(32, $.Contact);
          $.setRuntimeTypeInfo(t1, [$.Contact]);
          this.contacts = t1;
        }
        ce = body.get$contactList();
        count = 0;
      case 11:
      case 12:
      case 13:
      case 14:
        L2:
          while (true)
            switch (state0) {
              case 0:
                if (!(ce != null && count < 32))
                  break L2;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      type = $.get$type$x(ce.get$other());
                    case 11:
                      state0 = 0;
                      if ($.$eq(type, 2) === true)
                        break c$0;
                      contact = ce.get$contact();
                      t1 = contact.get$enabled();
                    case 12:
                      state0 = 0;
                      if ($.$eq(t1, false) === true)
                        break c$0;
                      fixtureA = contact.get$fixtureA();
                      fixtureB = contact.get$fixtureB();
                      if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
                        break c$0;
                      if ($.$eq(contact, toiContact) !== true)
                        contact.update$1(this._contactManager.contactListener);
                      t1 = contact.get$enabled();
                    case 13:
                      state0 = 0;
                      if ($.$eq(t1, false) === true)
                        break c$0;
                      t1 = contact.get$touching();
                    case 14:
                      state0 = 0;
                      if ($.$eq(t1, false) === true)
                        break c$0;
                      t1 = this.contacts;
                      if (count >= t1.length)
                        throw $.ioore(count);
                      t1[count] = contact;
                      ++count;
                  }
                }
                ce = ce.get$next();
            }
        t1 = this.toiSolver;
        t1.initialize$3(t1, this.contacts, count, body);
        for (i = 0; i < 20; ++i)
          if (t1.solve$1(0.75) === true)
            break;
        t1 = $.get$type$x(toiOther);
      case 15:
        state0 = 0;
      case 16:
        var t11, fixtureA, fixtureB, bodyA, t10, bodyB, i;
        if (state0 === 16 || state0 === 0 && $.$eq(t1, 0) !== true)
          switch (state0) {
            case 0:
              t1 = toiContact.get$flags();
            case 16:
              state0 = 0;
              toiContact.set$flags($.$or$n(t1, 16));
          }
    }
  },
  drawShape$3: function(fixture, xf, color) {
    var t1, circle, radius, t2, t3, t4, poly, vertexCount, vertices, i;
    t1 = $.getInterceptor$x(fixture);
    switch (t1.get$type(fixture)) {
      case 0:
        circle = t1.get$shape(fixture);
        t1 = this.center;
        $.Transform_mulToOut(xf, $.get$position$x(circle), t1);
        radius = circle.get$radius();
        t2 = this.axis;
        t2.copyFrom$1(xf.rotation.col0);
        t3 = $.$and$n(this._debugDraw.get$flags(), 64);
        t4 = this._debugDraw;
        if (0 !== t3)
          t4.drawCircle$4(t1, radius, color, t2);
        else
          t4.drawSolidCircle$4(t1, radius, color, t2);
        break;
      case 1:
        poly = t1.get$shape(fixture);
        vertexCount = poly.get$vertexCount();
        vertices = $.List_List(vertexCount, $.vec2);
        $.setRuntimeTypeInfo(vertices, [$.vec2]);
        for (t1 = vertices.length, i = 0; $.JSNumber_methods.$lt(i, vertexCount); ++i) {
          t2 = $.vec2$zero();
          if (i >= t1)
            throw $.ioore(i);
          vertices[i] = t2;
        }
        for (i = 0; $.JSNumber_methods.$lt(i, vertexCount); ++i) {
          t2 = poly.get$vertices();
          if (i >= t2.length)
            throw $.ioore(i);
          t2 = t2[i];
          if (i >= t1)
            throw $.ioore(i);
          $.Transform_mulToOut(xf, t2, vertices[i]);
        }
        if (0 !== $.$and$n(this._debugDraw.get$flags(), 64))
          this._debugDraw.drawPolygon$3(vertices, vertexCount, color);
        else {
          t1 = $.$gt$n(vertexCount, 2);
          t2 = this._debugDraw;
          if (t1 === true)
            t2.drawSolidPolygon$3(vertices, vertexCount, color);
          else
            t2.drawPolygon$3(vertices, vertexCount, color);
        }
        break;
    }
  },
  drawJoint$1: function(joint) {
    var bodyA, bodyB, xf1, xf2, x1, x2, p1, p2, color, p1t, p2t;
    bodyA = joint.get$bodyA();
    bodyB = joint.get$bodyB();
    xf1 = bodyA.get$originTransform();
    xf2 = bodyB.get$originTransform();
    x1 = $.vec2$copy(xf1.position);
    x2 = $.vec2$copy(xf2.position);
    p1 = $.vec2$zero();
    p2 = $.vec2$zero();
    joint.getAnchorA$1(p1);
    joint.getAnchorB$1(p2);
    color = $.Color3$fromRGBF(0.5, 0.3, 0.3);
    switch ($.get$type$x(joint)) {
      case 3:
        this._debugDraw.drawSegment$3(p1, p2, color);
        break;
      case 4:
        throw $.$$throw($.UnimplementedError$(null));
      case 9:
        this._debugDraw.drawSegment$3(x1, x2, color);
        break;
      case 10:
      case 5:
        break;
      default:
        p1t = $.vec2$copy(p1);
        p2t = $.vec2$copy(p2);
        this._debugDraw.drawSegment$3(x1, p1, color);
        this._debugDraw.drawSegment$3(p1t, p2, color);
        this._debugDraw.drawSegment$3(x2, p2t, color);
        break;
    }
  },
  World$3: function(gravity, doSleep, argPool) {
    var t1, t2, i, t3;
    this._contactManager = $.ContactManager$(this);
    for (t1 = this._contactStacks, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = $.List_List(2, $.ContactRegister);
      $.setRuntimeTypeInfo(t3, [$.ContactRegister]);
      t1[i] = t3;
    }
    this._initializeRegisters$0();
  }
};

$$.WorldQueryWrapper = {"": "Object;broadPhase,callback"};

$$.CircleContact = {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.expect(0, $.get$type$x(fA), null, null, false);
    $.expect(0, $.get$type$x(fB), null, null, false);
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collideCircles$5(argManifold, $.get$shape$x(this.fixtureA), xfA, $.get$shape$x(this.fixtureB), xfB);
  }
};

$$.Contact = {"": "Object;flags@,prev@,next@,edge1<,edge2<,fixtureA<,fixtureB<,manifold@,toiCount@",
  init$2: function(fixA, fixB) {
    var t1;
    this.flags = 0;
    this.fixtureA = fixA;
    this.fixtureB = fixB;
    this.manifold.set$pointCount(0);
    this.prev = null;
    this.next = null;
    t1 = this.edge1;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    t1 = this.edge2;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    this.toiCount = 0;
  },
  get$touching: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.get$touching$bailout(1, t1);
    return (t1 & 2) === 2;
  },
  get$touching$bailout: function(state0, t1) {
    return $.$and$n(t1, 2) === 2;
  },
  get$enabled: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.get$enabled$bailout(1, t1);
    return (t1 & 4) === 4;
  },
  get$enabled$bailout: function(state0, t1) {
    return $.$and$n(t1, 4) === 4;
  },
  flagForFiltering$0: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.flagForFiltering$0$bailout(1, t1);
    this.flags = (t1 | 8) >>> 0;
  },
  flagForFiltering$0$bailout: function(state0, t1) {
    this.flags = $.$or$n(t1, 8);
  },
  update$1: function(listener) {
    var t1, t2, t4, wasTouching, t6, sensorA, sensorB, sensor, bodyA, bodyB, xfA, xfB, shapeA, shapeB, nowTouching, t3, i, t5, mp2, id2, j, mp1;
    t1 = this._oldManifold;
    t1.setFrom$1(this.manifold);
    t2 = this.flags;
    if (t2 !== (t2 | 0))
      return this.update$1$bailout(1, listener, t2, t1);
    this.flags = (t2 | 4) >>> 0;
    t4 = this.flags;
    if (t4 !== (t4 | 0))
      return this.update$1$bailout(2, listener, 0, t1, t4);
    wasTouching = (t4 & 2) === 2;
    t6 = this.fixtureA;
    sensorA = t6.get$isSensor();
    sensorB = this.fixtureB.get$isSensor();
    sensor = sensorA === true || sensorB === true;
    bodyA = $.get$body$x(t6);
    bodyB = $.get$body$x(this.fixtureB);
    xfA = bodyA.get$originTransform();
    xfB = bodyB.get$originTransform();
    if (sensor) {
      shapeA = $.get$shape$x(this.fixtureA);
      shapeB = $.get$shape$x(this.fixtureB);
      nowTouching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
      this.manifold.set$pointCount(0);
    } else {
      this.evaluate$3(this.manifold, xfA, xfB);
      t2 = this.manifold.get$pointCount();
      if (typeof t2 !== "number")
        return this.update$1$bailout(3, listener, t2, t1, 0, bodyA, bodyB, wasTouching, sensor);
      nowTouching = t2 > 0;
      t2 = t1.points;
      t3 = t2.length;
      i = 0;
      while (true) {
        t4 = this.manifold;
        t5 = t4.get$pointCount();
        if (typeof t5 !== "number")
          return this.update$1$bailout(4, listener, t2, t1, t5, bodyA, bodyB, wasTouching, sensor, nowTouching, i, t3);
        if (!(i < t5))
          break;
        t4 = $.get$points$x(t4);
        if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !t4.$isJavaScriptIndexingBehavior()))
          return this.update$1$bailout(5, listener, t2, t1, t4, bodyA, bodyB, wasTouching, sensor, nowTouching, i, t3);
        if (i >= t4.length)
          throw $.ioore(i);
        mp2 = t4[i];
        mp2.set$normalImpulse(0);
        mp2.set$tangentImpulse(0);
        id2 = $.get$id$x(mp2);
        j = 0;
        while (true) {
          t4 = t1.pointCount;
          if (typeof t4 !== "number")
            return this.update$1$bailout(6, listener, t2, t1, t4, bodyA, bodyB, wasTouching, sensor, nowTouching, i, t3, mp2, j, id2);
          if (!(j < t4))
            break;
          if (j >= t3)
            throw $.ioore(j);
          mp1 = t2[j];
          if ($.get$id$x(mp1).isEqual$1(id2)) {
            mp2.set$normalImpulse(mp1.get$normalImpulse());
            mp2.set$tangentImpulse(mp1.get$tangentImpulse());
            break;
          }
          ++j;
        }
        ++i;
      }
      if (nowTouching !== wasTouching) {
        bodyA.set$awake(true);
        bodyB.set$awake(true);
      }
    }
    t2 = nowTouching === true;
    t3 = this.flags;
    if (t3 !== (t3 | 0))
      return this.update$1$bailout(7, listener, t2, t1, 0, 0, 0, wasTouching, sensor, 0, 0, t3);
    if (t2)
      this.flags = (t3 | 2) >>> 0;
    else
      this.flags = (t3 & 4294967293) >>> 0;
    if (listener == null)
      return;
    if (!wasTouching && t2)
      listener.beginContact$1(this);
    if (wasTouching && !t2)
      listener.endContact$1(this);
    if (!sensor && t2)
      listener.preSolve$2(this, t1);
  },
  update$1$bailout: function(state0, listener, t2, t1, t4, bodyA, bodyB, wasTouching, sensor, nowTouching, i, t3, mp2, j, id2) {
    switch (state0) {
      case 0:
        t1 = this._oldManifold;
        t1.setFrom$1(this.manifold);
        t2 = this.flags;
      case 1:
        state0 = 0;
        this.flags = $.$or$n(t2, 4);
        t4 = this.flags;
      case 2:
        state0 = 0;
        wasTouching = $.$and$n(t4, 2) === 2;
        t6 = this.fixtureA;
        sensorA = t6.get$isSensor();
        sensorB = this.fixtureB.get$isSensor();
        sensor = sensorA === true || sensorB === true;
        bodyA = $.get$body$x(t6);
        bodyB = $.get$body$x(this.fixtureB);
        xfA = bodyA.get$originTransform();
        xfB = bodyB.get$originTransform();
      default:
        if (state0 === 0 && sensor) {
          shapeA = $.get$shape$x(this.fixtureA);
          shapeB = $.get$shape$x(this.fixtureB);
          nowTouching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
          this.manifold.set$pointCount(0);
        } else
          switch (state0) {
            case 0:
              this.evaluate$3(this.manifold, xfA, xfB);
              t2 = this.manifold.get$pointCount();
            case 3:
              state0 = 0;
              nowTouching = $.$gt$n(t2, 0);
              t2 = t1.points;
              t3 = t2.length;
              i = 0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t4 = this.manifold.get$pointCount();
                    case 4:
                      state0 = 0;
                      if (!$.JSNumber_methods.$lt(i, t4))
                        break L0;
                      t4 = $.get$points$x(this.manifold);
                    case 5:
                      state0 = 0;
                      mp2 = $.$index$asx(t4, i);
                      mp2.set$normalImpulse(0);
                      mp2.set$tangentImpulse(0);
                      id2 = $.get$id$x(mp2);
                      j = 0;
                    case 6:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t4 = t1.pointCount;
                            case 6:
                              state0 = 0;
                              if (!$.JSNumber_methods.$lt(j, t4))
                                break L1;
                              if (j >= t3)
                                throw $.ioore(j);
                              mp1 = t2[j];
                              if ($.get$id$x(mp1).isEqual$1(id2)) {
                                mp2.set$normalImpulse(mp1.get$normalImpulse());
                                mp2.set$tangentImpulse(mp1.get$tangentImpulse());
                                break L1;
                              }
                              ++j;
                          }
                      ++i;
                  }
              if ($.$eq(nowTouching, wasTouching) !== true) {
                bodyA.set$awake(true);
                bodyB.set$awake(true);
              }
          }
        t2 = nowTouching === true;
        t3 = this.flags;
      case 7:
        var t6, sensorA, sensorB, xfA, xfB, shapeA, shapeB, mp1;
        state0 = 0;
        if (t2)
          this.flags = $.$or$n(t3, 2);
        else
          this.flags = $.$and$n(t3, 4294967293);
        if (listener == null)
          return;
        if (!wasTouching && t2)
          listener.beginContact$1(this);
        if (wasTouching && !t2)
          listener.endContact$1(this);
        if (!sensor && t2)
          listener.preSolve$2(this, t1);
    }
  }
};

$$.ContactConstraint = {"": "Object;points>,localNormal<,localPoint<,normal<,normalMass<,K<,bodyA@,bodyB@,type*,radius@,friction@,restitution@,pointCount@,manifold@",
  setFrom$1: function(cp) {
    var t1, t2, t3, i, t4, t5;
    this.pointCount = cp.get$pointCount();
    this.localNormal.copyFrom$1(cp.get$localNormal());
    this.localPoint.copyFrom$1(cp.get$localPoint());
    this.normal.copyFrom$1(cp.get$normal());
    this.normalMass.copyFrom$1(cp.get$normalMass());
    this.K.copyFrom$1(cp.get$K());
    this.bodyA = cp.get$bodyA();
    this.bodyB = cp.get$bodyB();
    t1 = $.getInterceptor$x(cp);
    this.type = t1.get$type(cp);
    this.radius = cp.get$radius();
    this.friction = cp.get$friction();
    this.restitution = cp.get$restitution();
    this.manifold = cp.get$manifold();
    t2 = this.points;
    t3 = t2.length;
    i = 0;
    while (true) {
      t4 = cp.get$pointCount();
      if (typeof t4 !== "number")
        return this.setFrom$1$bailout(1, cp, t3, t4, i, t2, t1);
      if (!(i < t4))
        break;
      if (i >= t3)
        throw $.ioore(i);
      t4 = t2[i];
      t5 = t1.get$points(cp);
      if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
        return this.setFrom$1$bailout(2, cp, t3, t4, i, t2, t1, t5);
      if (i >= t5.length)
        throw $.ioore(i);
      t4.setFrom$1(t5[i]);
      ++i;
    }
  },
  setFrom$1$bailout: function(state0, cp, t3, t4, i, t2, t1, t5) {
    switch (state0) {
      case 0:
        this.pointCount = cp.get$pointCount();
        this.localNormal.copyFrom$1(cp.get$localNormal());
        this.localPoint.copyFrom$1(cp.get$localPoint());
        this.normal.copyFrom$1(cp.get$normal());
        this.normalMass.copyFrom$1(cp.get$normalMass());
        this.K.copyFrom$1(cp.get$K());
        this.bodyA = cp.get$bodyA();
        this.bodyB = cp.get$bodyB();
        t1 = $.getInterceptor$x(cp);
        this.type = t1.get$type(cp);
        this.radius = cp.get$radius();
        this.friction = cp.get$friction();
        this.restitution = cp.get$restitution();
        this.manifold = cp.get$manifold();
        t2 = this.points;
        t3 = t2.length;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t4 = cp.get$pointCount();
              case 1:
                state0 = 0;
                if (!$.JSNumber_methods.$lt(i, t4))
                  break L0;
                if (i >= t3)
                  throw $.ioore(i);
                t4 = t2[i];
                t5 = t1.get$points(cp);
              case 2:
                state0 = 0;
                t4.setFrom$1($.$index$asx(t5, i));
                ++i;
            }
    }
  },
  toString$0: function(_) {
    return "localNormal: \"" + $.S(this.localNormal) + "\", localPoint: \"" + $.S(this.localPoint) + "\" " + "normal: \"" + $.S(this.normal) + "\", radius: \"" + $.S(this.radius) + "\" friction: \"" + $.S(this.friction) + "\" " + "restitution: \"" + $.S(this.restitution) + "\", pointCount: \"" + $.S(this.pointCount) + "\"";
  },
  ContactConstraint$0: function() {
    var t1, t2, i, t3;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      t3 = $.ContactConstraintPoint$();
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = t3;
    }
  }
};

$$.ContactConstraintPoint = {"": "Object;localPoint<,rA<,rB<,normalImpulse@,tangentImpulse@,normalMass@,tangentMass@,velocityBias@",
  setFrom$1: function(cp) {
    this.localPoint.copyFrom$1(cp.get$localPoint());
    this.rA.copyFrom$1(cp.get$rA());
    this.rB.copyFrom$1(cp.get$rB());
    this.normalImpulse = cp.get$normalImpulse();
    this.tangentImpulse = cp.get$tangentImpulse();
    this.normalMass = cp.get$normalMass();
    this.tangentMass = cp.get$tangentMass();
    this.velocityBias = cp.get$velocityBias();
  },
  toString$0: function(_) {
    return "normal impulse: " + $.S(this.normalImpulse) + ", tangentImpulse: " + $.S(this.tangentImpulse) + ", normalMass: " + $.S(this.normalMass) + ", tangentMass: " + $.S(this.tangentMass) + ", velocityBias: " + $.S(this.velocityBias) + ", localPoint: " + $.S(this.localPoint) + ", rA: " + $.S(this.rA) + ", rB: " + $.S(this.rB);
  }
};

$$.ContactEdge = {"": "Object;other<,contact<,prev@,next@"};

$$.ContactRegister = {"": "Object;creator<,primary<"};

$$.ContactSolver = {"": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x>,d,P1,P2,psolver,rA<,rB<",
  init$3: function(contacts, contactCount, impulseRatio) {
    var old, i, t1, t2, t3, t4, t5, t6, t7, t8, contact, fixtureA, fixtureB, t9, shapeA, t10, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, friction, restitution, vA, vB, wA, wB, t12, cc, t13, t11, t14, t15, j, cp, ccp, t16, t17, t18, rnA, rnB, t19, t20, t21, t22, t23, rtA, rtB, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, a, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
    if (typeof contacts !== "object" || contacts === null || (contacts.constructor !== Array || !!contacts.immutable$list) && !contacts.$isJavaScriptIndexingBehavior())
      return this.init$3$bailout(1, contacts, contactCount, impulseRatio);
    this.constraintCount = contactCount;
    if ($.JSInt_methods.$lt(this.constraints.length, contactCount)) {
      old = this.constraints;
      i = old.length;
      t1 = $.List_List($.max(i * 2, this.constraintCount), $.ContactConstraint);
      $.setRuntimeTypeInfo(t1, [$.ContactConstraint]);
      this.constraints = t1;
      $.JSArray_methods.setRange$3(this.constraints, 0, i, old);
      for (; t1 = this.constraints, i < t1.length; ++i)
        t1[i] = $.ContactConstraint$();
    }
    for (t1 = this.worldManifold, t2 = t1.points, t3 = t2.length, t4 = this.tangent, t5 = this.temp2, t6 = this.temp1, t7 = t1.normal, t8 = contacts.length, i = 0; $.JSNumber_methods.$lt(i, this.constraintCount); ++i) {
      if (i >= t8)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      t9 = $.getInterceptor$x(fixtureA);
      shapeA = t9.get$shape(fixtureA);
      t10 = $.getInterceptor$x(fixtureB);
      shapeB = t10.get$shape(fixtureB);
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = t9.get$body(fixtureA);
      bodyB = t10.get$body(fixtureB);
      manifold = contact.get$manifold();
      friction = Math.sqrt($.checkNum($.$mul$n(fixtureA.get$friction(), fixtureB.get$friction())));
      restitution = $.Settings_mixRestitution(fixtureA.get$restitution(), fixtureB.get$restitution());
      if (typeof restitution !== "number")
        return this.init$3$bailout(2, contacts, 0, impulseRatio, t3, friction, t4, restitution, i, $.JSArray_methods, t5, t7, radiusA, t6, radiusB, bodyA, t1, bodyB, manifold, t2);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.init$3$bailout(3, contacts, 0, impulseRatio, t3, friction, t4, restitution, i, $.JSArray_methods, t5, t7, radiusA, t6, radiusB, bodyA, t1, bodyB, manifold, t2, vA, vB, wA);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.init$3$bailout(4, contacts, 0, impulseRatio, t3, friction, t4, restitution, i, $.JSArray_methods, t5, t7, radiusA, t6, radiusB, bodyA, t1, bodyB, manifold, t2, vA, vB, wA, wB);
      t1.initialize$5(t1, manifold, bodyA.get$originTransform(), radiusA, bodyB.get$originTransform(), radiusB);
      t12 = this.constraints;
      if (i >= t12.length)
        throw $.ioore(i);
      cc = t12[i];
      cc.set$bodyA(bodyA);
      cc.set$bodyB(bodyB);
      cc.set$manifold(manifold);
      t12 = t7.x;
      cc.get$normal().x = t12;
      t12 = t7.y;
      cc.get$normal().y = t12;
      cc.set$pointCount(manifold.get$pointCount());
      cc.set$friction(friction);
      cc.set$restitution(restitution);
      t12 = manifold.get$localNormal().x;
      cc.get$localNormal().x = t12;
      t12 = manifold.get$localNormal().y;
      cc.get$localNormal().y = t12;
      t12 = manifold.get$localPoint().x;
      cc.get$localPoint().x = t12;
      t12 = manifold.get$localPoint().y;
      cc.get$localPoint().y = t12;
      cc.set$radius($.$add$ns(radiusA, radiusB));
      t12 = $.getInterceptor$x(manifold);
      t13 = $.getInterceptor$x(cc);
      t13.set$type(cc, t12.get$type(manifold));
      for (t9 = $.getInterceptor$x(vB), t10 = $.getInterceptor$x(vA), t11 = -restitution, t14 = -wA, t15 = -wB, j = 0; $.JSNumber_methods.$lt(j, cc.get$pointCount()); ++j) {
        cp = $.$index$asx(t12.get$points(manifold), j);
        ccp = $.$index$asx(t13.get$points(cc), j);
        t16 = cp.get$normalImpulse();
        if (typeof t16 !== "number")
          throw $.iae(t16);
        ccp.set$normalImpulse(impulseRatio * t16);
        t17 = cp.get$tangentImpulse();
        if (typeof t17 !== "number")
          throw $.iae(t17);
        ccp.set$tangentImpulse(impulseRatio * t17);
        t18 = cp.get$localPoint().x;
        ccp.get$localPoint().x = t18;
        t18 = cp.get$localPoint().y;
        ccp.get$localPoint().y = t18;
        if (j >= t3)
          throw $.ioore(j);
        t18 = $.$sub$n($.get$x$x(t2[j]), bodyA.get$sweep().center.x);
        ccp.get$rA().x = t18;
        t18 = $.$sub$n($.get$y$x(t2[j]), bodyA.get$sweep().center.y);
        ccp.get$rA().y = t18;
        t18 = $.$sub$n($.get$x$x(t2[j]), bodyB.get$sweep().center.x);
        ccp.get$rB().x = t18;
        t18 = $.$sub$n($.get$y$x(t2[j]), bodyB.get$sweep().center.y);
        ccp.get$rB().y = t18;
        rnA = $.$sub$n($.$mul$n(ccp.get$rA().x, cc.get$normal().y), $.$mul$n(ccp.get$rA().y, cc.get$normal().x));
        rnB = $.$sub$n($.$mul$n(ccp.get$rB().x, cc.get$normal().y), $.$mul$n(ccp.get$rB().y, cc.get$normal().x));
        rnA = $.$mul$n(rnA, rnA);
        rnB = $.$mul$n(rnB, rnB);
        t18 = bodyA.get$invMass();
        t19 = bodyB.get$invMass();
        t20 = bodyA.get$invInertia();
        if (typeof rnA !== "number")
          throw $.iae(rnA);
        t21 = bodyB.get$invInertia();
        if (typeof rnB !== "number")
          throw $.iae(rnB);
        ccp.set$normalMass(1 / (t18 + t19 + t20 * rnA + t21 * rnB));
        t22 = cc.get$normal().y;
        if (typeof t22 !== "number")
          throw $.iae(t22);
        t4.x = 1 * t22;
        t23 = cc.get$normal().x;
        if (typeof t23 !== "number")
          throw $.iae(t23);
        t4.y = -1 * t23;
        rtA = $.$sub$n($.$mul$n(ccp.get$rA().x, t4.y), $.$mul$n(ccp.get$rA().y, t4.x));
        rtB = $.$sub$n($.$mul$n(ccp.get$rB().x, t4.y), $.$mul$n(ccp.get$rB().y, t4.x));
        rtA = $.$mul$n(rtA, rtA);
        rtB = $.$mul$n(rtB, rtB);
        t24 = bodyA.get$invMass();
        t25 = bodyB.get$invMass();
        t26 = bodyA.get$invInertia();
        if (typeof rtA !== "number")
          throw $.iae(rtA);
        t27 = bodyB.get$invInertia();
        if (typeof rtB !== "number")
          throw $.iae(rtB);
        ccp.set$tangentMass(1 / (t24 + t25 + t26 * rtA + t27 * rtB));
        ccp.set$velocityBias(0);
        t28 = ccp.get$rA().y;
        if (typeof t28 !== "number")
          throw $.iae(t28);
        t5.x = t14 * t28;
        t29 = ccp.get$rA().x;
        if (typeof t29 !== "number")
          throw $.iae(t29);
        t5.y = wA * t29;
        t30 = ccp.get$rB().y;
        if (typeof t30 !== "number")
          throw $.iae(t30);
        t31 = t9.get$x(vB);
        if (typeof t31 !== "number")
          throw $.iae(t31);
        t32 = t10.get$x(vA);
        if (typeof t32 !== "number")
          throw $.iae(t32);
        t33 = t5.x;
        if (typeof t33 !== "number")
          throw $.iae(t33);
        t6.x = t15 * t30 + t31 - t32 - t33;
        t34 = ccp.get$rB().x;
        if (typeof t34 !== "number")
          throw $.iae(t34);
        t35 = t9.get$y(vB);
        if (typeof t35 !== "number")
          throw $.iae(t35);
        t36 = t10.get$y(vA);
        if (typeof t36 !== "number")
          throw $.iae(t36);
        t37 = t5.y;
        if (typeof t37 !== "number")
          throw $.iae(t37);
        t6.y = wB * t34 + t35 - t36 - t37;
        a = cc.get$normal();
        vRel = $.$add$ns($.$mul$n(a.x, t6.x), $.$mul$n(a.y, t6.y));
        if ($.$lt$n(vRel, -1) === true) {
          if (typeof vRel !== "number")
            throw $.iae(vRel);
          ccp.set$velocityBias(t11 * vRel);
        }
      }
      if ($.$eq(cc.get$pointCount(), 2) === true) {
        ccp1 = $.$index$asx(t13.get$points(cc), 0);
        ccp2 = $.$index$asx(t13.get$points(cc), 1);
        invMassA = bodyA.get$invMass();
        invIA = bodyA.get$invInertia();
        invMassB = bodyB.get$invMass();
        invIB = bodyB.get$invInertia();
        rn1A = $.cross(ccp1.get$rA(), cc.get$normal(), null);
        rn1B = $.cross(ccp1.get$rB(), cc.get$normal(), null);
        rn2A = $.cross(ccp2.get$rA(), cc.get$normal(), null);
        rn2B = $.cross(ccp2.get$rB(), cc.get$normal(), null);
        t9 = invMassA + invMassB;
        if (typeof rn1A !== "number")
          throw $.iae(rn1A);
        t10 = invIA * rn1A;
        if (typeof rn1B !== "number")
          throw $.iae(rn1B);
        t11 = invIB * rn1B;
        k11 = t9 + t10 * rn1A + t11 * rn1B;
        if (typeof rn2A !== "number")
          throw $.iae(rn2A);
        if (typeof rn2B !== "number")
          throw $.iae(rn2B);
        k22 = t9 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
        k12 = t9 + t10 * rn2A + t11 * rn2B;
        if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
          $.set$x$x(cc.get$K().col0, k11);
          $.set$y$x(cc.get$K().col0, k12);
          $.set$x$x(cc.get$K().col1, k12);
          $.set$y$x(cc.get$K().col1, k22);
          t9 = $.get$x$x(cc.get$K().col0);
          $.set$x$x(cc.get$normalMass().get$col0(), t9);
          t9 = $.get$y$x(cc.get$K().col0);
          $.set$y$x(cc.get$normalMass().get$col0(), t9);
          t9 = $.get$x$x(cc.get$K().col1);
          $.set$x$x(cc.get$normalMass().get$col1(), t9);
          t9 = $.get$y$x(cc.get$K().col1);
          $.set$y$x(cc.get$normalMass().get$col1(), t9);
          cc.get$normalMass().invert$0();
        } else
          cc.set$pointCount(1);
      }
    }
  },
  init$3$bailout: function(state0, contacts, contactCount, impulseRatio, t3, friction, t4, restitution, i, t7, t5, t8, radiusA, t6, radiusB, bodyA, t1, bodyB, manifold, t2, vA, vB, wA, wB) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this.constraintCount = contactCount;
        if ($.JSInt_methods.$lt(this.constraints.length, contactCount)) {
          old = this.constraints;
          i = old.length;
          t1 = $.List_List($.max(i * 2, this.constraintCount), $.ContactConstraint);
          $.setRuntimeTypeInfo(t1, [$.ContactConstraint]);
          this.constraints = t1;
          $.JSArray_methods.setRange$3(this.constraints, 0, i, old);
          for (; t1 = this.constraints, i < t1.length; ++i)
            t1[i] = $.ContactConstraint$();
        }
        t1 = this.worldManifold;
        t2 = t1.points;
        t3 = t2.length;
        t4 = this.tangent;
        t5 = this.temp2;
        t6 = this.temp1;
        t7 = $.getInterceptor$asx(contacts);
        t8 = t1.normal;
        i = 0;
      default:
        var old, contact, fixtureA, fixtureB, t9, shapeA, t10, shapeB, t12, cc, t13, t11, t14, t15, j, cp, ccp, t16, t17, t18, rnA, rnB, t19, t20, t21, t22, t23, rtA, rtB, t24, t25, t26, t27, a, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.JSNumber_methods.$lt(i, this.constraintCount))
                  break L0;
                contact = t7.$index(contacts, i);
                fixtureA = contact.get$fixtureA();
                fixtureB = contact.get$fixtureB();
                t9 = $.getInterceptor$x(fixtureA);
                shapeA = t9.get$shape(fixtureA);
                t10 = $.getInterceptor$x(fixtureB);
                shapeB = t10.get$shape(fixtureB);
                radiusA = shapeA.get$radius();
                radiusB = shapeB.get$radius();
                bodyA = t9.get$body(fixtureA);
                bodyB = t10.get$body(fixtureB);
                manifold = contact.get$manifold();
                friction = Math.sqrt($.checkNum($.$mul$n(fixtureA.get$friction(), fixtureB.get$friction())));
                restitution = $.Settings_mixRestitution(fixtureA.get$restitution(), fixtureB.get$restitution());
              case 2:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                wA = bodyA.get$angularVelocity();
              case 3:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 4:
                state0 = 0;
                t1.initialize$5(t1, manifold, bodyA.get$originTransform(), radiusA, bodyB.get$originTransform(), radiusB);
                t12 = this.constraints;
                if (i >= t12.length)
                  throw $.ioore(i);
                cc = t12[i];
                cc.set$bodyA(bodyA);
                cc.set$bodyB(bodyB);
                cc.set$manifold(manifold);
                t12 = t8.x;
                cc.get$normal().x = t12;
                t12 = t8.y;
                cc.get$normal().y = t12;
                cc.set$pointCount(manifold.get$pointCount());
                cc.set$friction(friction);
                cc.set$restitution(restitution);
                t12 = manifold.get$localNormal().x;
                cc.get$localNormal().x = t12;
                t12 = manifold.get$localNormal().y;
                cc.get$localNormal().y = t12;
                t12 = manifold.get$localPoint().x;
                cc.get$localPoint().x = t12;
                t12 = manifold.get$localPoint().y;
                cc.get$localPoint().y = t12;
                cc.set$radius($.$add$ns(radiusA, radiusB));
                t12 = $.getInterceptor$x(manifold);
                t13 = $.getInterceptor$x(cc);
                t13.set$type(cc, t12.get$type(manifold));
                for (t9 = $.getInterceptor$n(restitution), t10 = $.getInterceptor$n(wA), t11 = $.getInterceptor$n(wB), t14 = $.getInterceptor$x(vB), t15 = $.getInterceptor$x(vA), j = 0; $.JSNumber_methods.$lt(j, cc.get$pointCount()); ++j) {
                  cp = $.$index$asx(t12.get$points(manifold), j);
                  ccp = $.$index$asx(t13.get$points(cc), j);
                  t16 = cp.get$normalImpulse();
                  if (typeof t16 !== "number")
                    throw $.iae(t16);
                  ccp.set$normalImpulse(impulseRatio * t16);
                  t17 = cp.get$tangentImpulse();
                  if (typeof t17 !== "number")
                    throw $.iae(t17);
                  ccp.set$tangentImpulse(impulseRatio * t17);
                  t18 = cp.get$localPoint().x;
                  ccp.get$localPoint().x = t18;
                  t18 = cp.get$localPoint().y;
                  ccp.get$localPoint().y = t18;
                  if (j >= t3)
                    throw $.ioore(j);
                  t18 = $.$sub$n($.get$x$x(t2[j]), bodyA.get$sweep().center.x);
                  ccp.get$rA().x = t18;
                  t18 = $.$sub$n($.get$y$x(t2[j]), bodyA.get$sweep().center.y);
                  ccp.get$rA().y = t18;
                  t18 = $.$sub$n($.get$x$x(t2[j]), bodyB.get$sweep().center.x);
                  ccp.get$rB().x = t18;
                  t18 = $.$sub$n($.get$y$x(t2[j]), bodyB.get$sweep().center.y);
                  ccp.get$rB().y = t18;
                  rnA = $.$sub$n($.$mul$n(ccp.get$rA().x, cc.get$normal().y), $.$mul$n(ccp.get$rA().y, cc.get$normal().x));
                  rnB = $.$sub$n($.$mul$n(ccp.get$rB().x, cc.get$normal().y), $.$mul$n(ccp.get$rB().y, cc.get$normal().x));
                  rnA = $.$mul$n(rnA, rnA);
                  rnB = $.$mul$n(rnB, rnB);
                  t18 = bodyA.get$invMass();
                  t19 = bodyB.get$invMass();
                  t20 = bodyA.get$invInertia();
                  if (typeof rnA !== "number")
                    throw $.iae(rnA);
                  t21 = bodyB.get$invInertia();
                  if (typeof rnB !== "number")
                    throw $.iae(rnB);
                  ccp.set$normalMass(1 / (t18 + t19 + t20 * rnA + t21 * rnB));
                  t22 = cc.get$normal().y;
                  if (typeof t22 !== "number")
                    throw $.iae(t22);
                  t4.x = 1 * t22;
                  t23 = cc.get$normal().x;
                  if (typeof t23 !== "number")
                    throw $.iae(t23);
                  t4.y = -1 * t23;
                  rtA = $.$sub$n($.$mul$n(ccp.get$rA().x, t4.y), $.$mul$n(ccp.get$rA().y, t4.x));
                  rtB = $.$sub$n($.$mul$n(ccp.get$rB().x, t4.y), $.$mul$n(ccp.get$rB().y, t4.x));
                  rtA = $.$mul$n(rtA, rtA);
                  rtB = $.$mul$n(rtB, rtB);
                  t24 = bodyA.get$invMass();
                  t25 = bodyB.get$invMass();
                  t26 = bodyA.get$invInertia();
                  if (typeof rtA !== "number")
                    throw $.iae(rtA);
                  t27 = bodyB.get$invInertia();
                  if (typeof rtB !== "number")
                    throw $.iae(rtB);
                  ccp.set$tangentMass(1 / (t24 + t25 + t26 * rtA + t27 * rtB));
                  ccp.set$velocityBias(0);
                  t5.x = $.$mul$n(t10.$negate(wA), ccp.get$rA().y);
                  t5.y = t10.$mul(wA, ccp.get$rA().x);
                  t6.x = $.$sub$n($.$sub$n($.$add$ns($.$mul$n(t11.$negate(wB), ccp.get$rB().y), t14.get$x(vB)), t15.get$x(vA)), t5.x);
                  t6.y = $.$sub$n($.$sub$n($.$add$ns(t11.$mul(wB, ccp.get$rB().x), t14.get$y(vB)), t15.get$y(vA)), t5.y);
                  a = cc.get$normal();
                  vRel = $.$add$ns($.$mul$n(a.x, t6.x), $.$mul$n(a.y, t6.y));
                  if ($.$lt$n(vRel, -1) === true)
                    ccp.set$velocityBias($.$mul$n(t9.$negate(restitution), vRel));
                }
                if ($.$eq(cc.get$pointCount(), 2) === true) {
                  ccp1 = $.$index$asx(t13.get$points(cc), 0);
                  ccp2 = $.$index$asx(t13.get$points(cc), 1);
                  invMassA = bodyA.get$invMass();
                  invIA = bodyA.get$invInertia();
                  invMassB = bodyB.get$invMass();
                  invIB = bodyB.get$invInertia();
                  rn1A = $.cross(ccp1.get$rA(), cc.get$normal(), null);
                  rn1B = $.cross(ccp1.get$rB(), cc.get$normal(), null);
                  rn2A = $.cross(ccp2.get$rA(), cc.get$normal(), null);
                  rn2B = $.cross(ccp2.get$rB(), cc.get$normal(), null);
                  t9 = invMassA + invMassB;
                  if (typeof rn1A !== "number")
                    throw $.iae(rn1A);
                  t10 = invIA * rn1A;
                  if (typeof rn1B !== "number")
                    throw $.iae(rn1B);
                  t11 = invIB * rn1B;
                  k11 = t9 + t10 * rn1A + t11 * rn1B;
                  if (typeof rn2A !== "number")
                    throw $.iae(rn2A);
                  if (typeof rn2B !== "number")
                    throw $.iae(rn2B);
                  k22 = t9 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
                  k12 = t9 + t10 * rn2A + t11 * rn2B;
                  if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
                    $.set$x$x(cc.get$K().col0, k11);
                    $.set$y$x(cc.get$K().col0, k12);
                    $.set$x$x(cc.get$K().col1, k12);
                    $.set$y$x(cc.get$K().col1, k22);
                    t9 = $.get$x$x(cc.get$K().col0);
                    $.set$x$x(cc.get$normalMass().get$col0(), t9);
                    t9 = $.get$y$x(cc.get$K().col0);
                    $.set$y$x(cc.get$normalMass().get$col0(), t9);
                    t9 = $.get$x$x(cc.get$K().col1);
                    $.set$x$x(cc.get$normalMass().get$col1(), t9);
                    t9 = $.get$y$x(cc.get$K().col1);
                    $.set$y$x(cc.get$normalMass().get$col1(), t9);
                    cc.get$normalMass().invert$0();
                  } else
                    cc.set$pointCount(1);
                }
                ++i;
            }
    }
  },
  warmStart$0: function() {
    var t1, i, t2, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, normal, j, ccp, Px, Py, t3, t4, t5, t6, t7, t8, t9, t10;
    for (t1 = this.tangent, i = 0; $.JSNumber_methods.$lt(i, this.constraintCount); ++i) {
      t2 = this.constraints;
      if (i >= t2.length)
        throw $.ioore(i);
      c = t2[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      invMassA = bodyA.get$invMass();
      invIA = bodyA.get$invInertia();
      invMassB = bodyB.get$invMass();
      invIB = bodyB.get$invInertia();
      normal = c.get$normal();
      $.cross(normal, 1, t1);
      for (t2 = $.getInterceptor$x(c), j = 0; $.JSNumber_methods.$lt(j, c.get$pointCount()); ++j) {
        ccp = $.$index$asx(t2.get$points(c), j);
        Px = $.$add$ns($.$mul$n(ccp.get$normalImpulse(), normal.x), $.$mul$n(ccp.get$tangentImpulse(), t1.x));
        Py = $.$add$ns($.$mul$n(ccp.get$normalImpulse(), normal.y), $.$mul$n(ccp.get$tangentImpulse(), t1.y));
        t3 = bodyA.get$angularVelocity();
        t4 = $.$sub$n($.$mul$n(ccp.get$rA().x, Py), $.$mul$n(ccp.get$rA().y, Px));
        if (typeof t4 !== "number")
          throw $.iae(t4);
        bodyA.set$angularVelocity($.$sub$n(t3, invIA * t4));
        t5 = bodyA.get$linearVelocity();
        t6 = $.getInterceptor$x(t5);
        t7 = $.getInterceptor$n(Px);
        t6.set$x(t5, $.$sub$n(t6.get$x(t5), t7.$mul(Px, invMassA)));
        t5 = bodyA.get$linearVelocity();
        t6 = $.getInterceptor$x(t5);
        t8 = $.getInterceptor$n(Py);
        t6.set$y(t5, $.$sub$n(t6.get$y(t5), t8.$mul(Py, invMassA)));
        t5 = bodyB.get$angularVelocity();
        t6 = $.$sub$n($.$mul$n(ccp.get$rB().x, Py), $.$mul$n(ccp.get$rB().y, Px));
        if (typeof t6 !== "number")
          throw $.iae(t6);
        bodyB.set$angularVelocity($.$add$ns(t5, invIB * t6));
        t9 = bodyB.get$linearVelocity();
        t10 = $.getInterceptor$x(t9);
        t10.set$x(t9, $.$add$ns(t10.get$x(t9), t7.$mul(Px, invMassB)));
        t9 = bodyB.get$linearVelocity();
        t10 = $.getInterceptor$x(t9);
        t10.set$y(t9, $.$add$ns(t10.get$y(t9), t8.$mul(Py, invMassB)));
      }
    }
  },
  solveVelocityConstraints$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, i, t11, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, t13, t14, friction, t12, j, ccp, a, t16, t21, t23, t27, t29, t32, vt, lambda, maxFriction, newImpulse, t38, lambda0, Px, Py, t43, t45, t46, t49, t51, t53, t54, t15, t17, t18, a1, t20, t22, b, t26, t28, t30, vn, t35, t24, cp1, cp2, t34, t37, t39, t40, t42, vn1, vn2, t48, t56, t58, t61, t63, t65, t67, t69;
    t1 = this.dv;
    t2 = this.tangent;
    t3 = this.d;
    t4 = this.x;
    t5 = this.P1;
    t6 = this.P2;
    t7 = this.temp1;
    t8 = this.temp2;
    t9 = this.dv1;
    t10 = this.dv2;
    i = 0;
    while (true) {
      t11 = this.constraintCount;
      if (typeof t11 !== "number")
        return this.solveVelocityConstraints$0$bailout(1, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10);
      if (!(i < t11))
        break;
      t11 = this.constraints;
      if (i >= t11.length)
        throw $.ioore(i);
      c = t11[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.solveVelocityConstraints$0$bailout(2, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.solveVelocityConstraints$0$bailout(3, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      invMassA = bodyA.get$invMass();
      invIA = bodyA.get$invInertia();
      invMassB = bodyB.get$invMass();
      invIB = bodyB.get$invInertia();
      t13 = c.get$normal().y;
      if (typeof t13 !== "number")
        throw $.iae(t13);
      t2.x = 1 * t13;
      t14 = c.get$normal().x;
      if (typeof t14 !== "number")
        throw $.iae(t14);
      t2.y = -1 * t14;
      friction = c.get$friction();
      if (typeof friction !== "number")
        return this.solveVelocityConstraints$0$bailout(4, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB);
      t11 = $.getInterceptor$x(c);
      t12 = $.getInterceptor$x(vB);
      t13 = $.getInterceptor$x(vA);
      j = 0;
      while (true) {
        t14 = c.get$pointCount();
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(5, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, t14);
        if (!(j < t14))
          break;
        t14 = t11.get$points(c);
        if (typeof t14 !== "string" && (typeof t14 !== "object" || t14 === null || t14.constructor !== Array && !t14.$isJavaScriptIndexingBehavior()))
          return this.solveVelocityConstraints$0$bailout(6, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, t14);
        if (j >= t14.length)
          throw $.ioore(j);
        ccp = t14[j];
        a = ccp.get$rA();
        t14 = -wB;
        t16 = ccp.get$rB().y;
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(7, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, a, t14, ccp, t16);
        t16 = t14 * t16;
        t14 = t12.get$x(vB);
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(8, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, a, t14, ccp, t16);
        t14 = t16 + t14;
        t16 = t13.get$x(vA);
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(9, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, a, t14, ccp, t16);
        t16 = t14 - t16;
        t14 = a.y;
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(10, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, a, t14, ccp, t16);
        t1.x = t16 + wA * t14;
        t21 = ccp.get$rB().x;
        if (typeof t21 !== "number")
          return this.solveVelocityConstraints$0$bailout(11, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, a, 0, ccp, 0, $.JSNumber_methods, t21);
        t21 = wB * t21;
        t23 = t12.get$y(vB);
        if (typeof t23 !== "number")
          return this.solveVelocityConstraints$0$bailout(12, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, a, 0, ccp, 0, $.JSNumber_methods, t21, t23);
        t23 = t21 + t23;
        t21 = t13.get$y(vA);
        if (typeof t21 !== "number")
          return this.solveVelocityConstraints$0$bailout(13, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, a, 0, ccp, 0, $.JSNumber_methods, t21, t23);
        t21 = t23 - t21;
        t23 = a.x;
        if (typeof t23 !== "number")
          return this.solveVelocityConstraints$0$bailout(14, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, t21, t23);
        t1.y = t21 - wA * t23;
        t27 = t1.x;
        if (typeof t27 !== "number")
          return this.solveVelocityConstraints$0$bailout(15, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, t27);
        t29 = t2.x;
        if (typeof t29 !== "number")
          return this.solveVelocityConstraints$0$bailout(16, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, t27, t29);
        t29 = t27 * t29;
        t27 = t1.y;
        if (typeof t27 !== "number")
          return this.solveVelocityConstraints$0$bailout(17, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, t27, t29);
        t32 = t2.y;
        if (typeof t32 !== "number")
          return this.solveVelocityConstraints$0$bailout(18, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, t27, t29, t32);
        vt = t29 + t27 * t32;
        t29 = ccp.get$tangentMass();
        if (typeof t29 !== "number")
          return this.solveVelocityConstraints$0$bailout(19, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, t29, 0, vt);
        lambda = t29 * -vt;
        t29 = ccp.get$normalImpulse();
        if (typeof t29 !== "number")
          return this.solveVelocityConstraints$0$bailout(20, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, t29, 0, 0, lambda);
        maxFriction = friction * t29;
        t29 = ccp.get$tangentImpulse();
        if (typeof t29 !== "number")
          return this.solveVelocityConstraints$0$bailout(21, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, t29, 0, 0, lambda, maxFriction);
        newImpulse = $.clamp(t29 + lambda, -maxFriction, maxFriction, null);
        if (typeof newImpulse !== "number")
          return this.solveVelocityConstraints$0$bailout(22, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse);
        t38 = ccp.get$tangentImpulse();
        if (typeof t38 !== "number")
          return this.solveVelocityConstraints$0$bailout(23, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, t38);
        lambda0 = newImpulse - t38;
        t38 = t2.x;
        if (typeof t38 !== "number")
          return this.solveVelocityConstraints$0$bailout(24, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, t38, lambda0);
        Px = t38 * lambda0;
        t38 = t2.y;
        if (typeof t38 !== "number")
          return this.solveVelocityConstraints$0$bailout(25, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, t38, lambda0, Px);
        Py = t38 * lambda0;
        t38 = t13.get$x(vA);
        if (typeof t38 !== "number")
          return this.solveVelocityConstraints$0$bailout(26, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, t38, 0, Px, Py);
        t13.set$x(vA, t38 - Px * invMassA);
        t43 = t13.get$y(vA);
        if (typeof t43 !== "number")
          return this.solveVelocityConstraints$0$bailout(27, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, $.JSNumber_methods, t43);
        t13.set$y(vA, t43 - Py * invMassA);
        t45 = ccp.get$rA();
        t46 = t45.x;
        if (typeof t46 !== "number")
          return this.solveVelocityConstraints$0$bailout(28, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, $.JSNumber_methods, 0, $.JSNumber_methods, t46);
        t46 *= Py;
        t45 = t45.y;
        if (typeof t45 !== "number")
          return this.solveVelocityConstraints$0$bailout(29, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, $.JSNumber_methods, 0, $.JSNumber_methods, t46, t45);
        wA -= invIA * (t46 - t45 * Px);
        t49 = t12.get$x(vB);
        if (typeof t49 !== "number")
          return this.solveVelocityConstraints$0$bailout(30, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, t49, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, $.JSNumber_methods, 0, $.JSNumber_methods);
        t12.set$x(vB, t49 + Px * invMassB);
        t51 = t12.get$y(vB);
        if (typeof t51 !== "number")
          return this.solveVelocityConstraints$0$bailout(31, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, 0, 0, $.JSNumber_methods, 0, 0, t51);
        t12.set$y(vB, t51 + Py * invMassB);
        t53 = ccp.get$rB();
        t54 = t53.x;
        if (typeof t54 !== "number")
          return this.solveVelocityConstraints$0$bailout(32, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, t54);
        t54 *= Py;
        t53 = t53.y;
        if (typeof t53 !== "number")
          return this.solveVelocityConstraints$0$bailout(33, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, $.JSNumber_methods, t12, t13, j, $.JSNumber_methods, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, 0, 0, 0, 0, 0, 0, 0, t54, t53);
        wB += invIB * (t54 - t53 * Px);
        ccp.set$tangentImpulse(newImpulse);
        ++j;
      }
      t14 = t14 === 1;
      t15 = t11.get$points(c);
      if (typeof t15 !== "string" && (typeof t15 !== "object" || t15 === null || t15.constructor !== Array && !t15.$isJavaScriptIndexingBehavior()))
        return this.solveVelocityConstraints$0$bailout(35, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, t15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14);
      t17 = -wB;
      t18 = t15.length;
      if (t14) {
        if (0 >= t18)
          throw $.ioore(0);
        ccp = t15[0];
        a1 = ccp.get$rA();
        t11 = ccp.get$rB().y;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(36, t3, t4, t5, t1, i, t6, t2, t7, t17, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, a1, $.JSNumber_methods);
        t11 = t17 * t11;
        t17 = t12.get$x(vB);
        if (typeof t17 !== "number")
          return this.solveVelocityConstraints$0$bailout(37, t3, t4, t5, t1, i, t6, t2, t7, t17, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, a1, $.JSNumber_methods);
        t17 = t11 + t17;
        t11 = t13.get$x(vA);
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(38, t3, t4, t5, t1, i, t6, t2, t7, t17, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, a1, $.JSNumber_methods);
        t11 = t17 - t11;
        t17 = a1.y;
        if (typeof t17 !== "number")
          return this.solveVelocityConstraints$0$bailout(39, t3, t4, t5, t1, i, t6, t2, t7, t17, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t11, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, a1, $.JSNumber_methods);
        t1.x = t11 + wA * t17;
        t20 = ccp.get$rB().x;
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(40, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, a1, $.JSNumber_methods, t20);
        t20 = wB * t20;
        t22 = t12.get$y(vB);
        if (typeof t22 !== "number")
          return this.solveVelocityConstraints$0$bailout(41, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, a1, $.JSNumber_methods, t20);
        t22 = t20 + t22;
        t20 = t13.get$y(vA);
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(42, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, a1, $.JSNumber_methods, t20);
        t20 = t22 - t20;
        t22 = a1.x;
        if (typeof t22 !== "number")
          return this.solveVelocityConstraints$0$bailout(43, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t20);
        t1.y = t20 - wA * t22;
        b = c.get$normal();
        t26 = t1.x;
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(44, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, t26);
        t28 = b.x;
        if (typeof t28 !== "number")
          return this.solveVelocityConstraints$0$bailout(45, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, t26, t28);
        t26 *= t28;
        t30 = t1.y;
        if (typeof t30 !== "number")
          return this.solveVelocityConstraints$0$bailout(46, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, t30, t26);
        t32 = b.y;
        if (typeof t32 !== "number")
          return this.solveVelocityConstraints$0$bailout(47, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, t32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, t30, t26);
        vn = t26 + t30 * t32;
        t26 = ccp.get$normalMass();
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(48, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, t26, vn);
        t26 = -t26;
        t35 = ccp.get$velocityBias();
        if (typeof t35 !== "number")
          return this.solveVelocityConstraints$0$bailout(49, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, t35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, t26, vn);
        lambda = t26 * (vn - t35);
        t26 = ccp.get$normalImpulse();
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(50, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, lambda, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, t26);
        a = t26 + lambda;
        newImpulse = a > 0 ? a : 0;
        lambda = newImpulse - t26;
        Px = t28 * lambda;
        Py = t32 * lambda;
        t11 = t13.get$x(vA);
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(54, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods);
        t13.set$x(vA, t11 - Px * invMassA);
        t15 = t13.get$y(vA);
        if (typeof t15 !== "number")
          return this.solveVelocityConstraints$0$bailout(55, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, 0, 0, ccp, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, t15);
        t13.set$y(vA, t15 - Py * invMassA);
        t13 = ccp.get$rA();
        t17 = t13.x;
        if (typeof t17 !== "number")
          return this.solveVelocityConstraints$0$bailout(56, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, t12, t17, 0, 0, 0, 0, ccp, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods);
        t17 *= Py;
        t13 = t13.y;
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(57, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, invIA, invMassB, invIB, 0, t12, t17, 0, 0, 0, 0, ccp, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, t13);
        wA -= invIA * (t17 - t13 * Px);
        t20 = t12.get$x(vB);
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(58, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, invMassB, invIB, 0, t12, 0, 0, 0, 0, 0, ccp, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, $.JSNumber_methods);
        t12.set$x(vB, t20 + Px * invMassB);
        t22 = t12.get$y(vB);
        if (typeof t22 !== "number")
          return this.solveVelocityConstraints$0$bailout(59, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, invMassB, invIB, 0, t12, 0, 0, 0, 0, 0, ccp, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, t22);
        t12.set$y(vB, t22 + Py * invMassB);
        t12 = ccp.get$rB();
        t24 = t12.x;
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(60, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, 0, invIB, 0, t24, 0, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods);
        t24 *= Py;
        t12 = t12.y;
        if (typeof t12 !== "number")
          return this.solveVelocityConstraints$0$bailout(61, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, 0, invIB, 0, t24, 0, 0, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, 0, Px, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, t12);
        wB += invIB * (t24 - t12 * Px);
        ccp.set$normalImpulse(newImpulse);
      } else {
        if (0 >= t18)
          throw $.ioore(0);
        cp1 = t15[0];
        if (1 >= t15.length)
          throw $.ioore(1);
        cp2 = t15[1];
        a = $.vec2$(cp1.get$normalImpulse(), cp2.get$normalImpulse());
        t11 = cp1.get$rB().y;
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(63, t3, t4, t5, t1, i, t6, t2, t7, t17, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, t11, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t11 = t17 * t11;
        t15 = t12.get$x(vB);
        if (typeof t15 !== "number")
          return this.solveVelocityConstraints$0$bailout(64, t3, t4, t5, t1, i, t6, t2, t7, t15, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, t11, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t15 = t11 + t15;
        t11 = t13.get$x(vA);
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(65, t3, t4, t5, t1, i, t6, t2, t7, t15, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, t11, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t11 = t15 - t11;
        t15 = cp1.get$rA().y;
        if (typeof t15 !== "number")
          return this.solveVelocityConstraints$0$bailout(66, t3, t4, t5, t1, i, t6, t2, t7, t15, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, t11, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t9.x = t11 + wA * t15;
        t21 = cp1.get$rB().x;
        if (typeof t21 !== "number")
          return this.solveVelocityConstraints$0$bailout(67, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t21);
        t21 = wB * t21;
        t23 = t12.get$y(vB);
        if (typeof t23 !== "number")
          return this.solveVelocityConstraints$0$bailout(68, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, t23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t21);
        t23 = t21 + t23;
        t21 = t13.get$y(vA);
        if (typeof t21 !== "number")
          return this.solveVelocityConstraints$0$bailout(69, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, t23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t21);
        t21 = t23 - t21;
        t23 = cp1.get$rA().x;
        if (typeof t23 !== "number")
          return this.solveVelocityConstraints$0$bailout(70, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, t23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t21);
        t9.y = t21 - wA * t23;
        t27 = cp2.get$rB().y;
        if (typeof t27 !== "number")
          return this.solveVelocityConstraints$0$bailout(71, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, t27, 0, 0, t17, 0, cp1, cp2);
        t27 = t17 * t27;
        t17 = t12.get$x(vB);
        if (typeof t17 !== "number")
          return this.solveVelocityConstraints$0$bailout(72, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, t27, 0, 0, t17, 0, cp1, cp2);
        t17 = t27 + t17;
        t27 = t13.get$x(vA);
        if (typeof t27 !== "number")
          return this.solveVelocityConstraints$0$bailout(73, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, t27, 0, 0, t17, 0, cp1, cp2);
        t27 = t17 - t27;
        t17 = cp2.get$rA().y;
        if (typeof t17 !== "number")
          return this.solveVelocityConstraints$0$bailout(74, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, t27, 0, 0, t17, 0, cp1, cp2);
        t10.x = t27 + wA * t17;
        t32 = cp2.get$rB().x;
        if (typeof t32 !== "number")
          return this.solveVelocityConstraints$0$bailout(75, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, t32);
        t32 = wB * t32;
        t34 = t12.get$y(vB);
        if (typeof t34 !== "number")
          return this.solveVelocityConstraints$0$bailout(76, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, t32, t34);
        t34 = t32 + t34;
        t13 = t13.get$y(vA);
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(77, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, t34);
        t13 = t34 - t13;
        t34 = cp2.get$rA().x;
        if (typeof t34 !== "number")
          return this.solveVelocityConstraints$0$bailout(78, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, t13, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, t34);
        t10.y = t13 - wA * t34;
        t37 = t9.x;
        if (typeof t37 !== "number")
          return this.solveVelocityConstraints$0$bailout(79, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, t37);
        t39 = c.get$normal();
        t40 = t39.x;
        if (typeof t40 !== "number")
          return this.solveVelocityConstraints$0$bailout(80, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, t37);
        t37 *= t40;
        t42 = t9.y;
        if (typeof t42 !== "number")
          return this.solveVelocityConstraints$0$bailout(81, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, t42);
        t39 = t39.y;
        if (typeof t39 !== "number")
          return this.solveVelocityConstraints$0$bailout(82, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, t42, t39);
        vn1 = t37 + t42 * t39;
        t37 = t10.x;
        if (typeof t37 !== "number")
          return this.solveVelocityConstraints$0$bailout(83, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1);
        t40 = t37 * t40;
        t37 = t10.y;
        if (typeof t37 !== "number")
          return this.solveVelocityConstraints$0$bailout(85, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, t40, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1);
        vn2 = t40 + t37 * t39;
        t40 = cp1.get$velocityBias();
        if (typeof t40 !== "number")
          return this.solveVelocityConstraints$0$bailout(87, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1, vn2);
        t40 = vn1 - t40;
        t48 = cp2.get$velocityBias();
        if (typeof t48 !== "number")
          return this.solveVelocityConstraints$0$bailout(88, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, vn2, t48);
        b = $.vec2$(t40, vn2 - t48);
        t40 = $.get$x$x(c.get$K().col0);
        if (typeof t40 !== "number")
          return this.solveVelocityConstraints$0$bailout(89, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t51 = a.x;
        if (typeof t51 !== "number")
          return this.solveVelocityConstraints$0$bailout(90, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, t51);
        t51 = t40 * t51;
        t40 = $.get$x$x(c.get$K().col1);
        if (typeof t40 !== "number")
          return this.solveVelocityConstraints$0$bailout(91, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, t51);
        t54 = a.y;
        if (typeof t54 !== "number")
          return this.solveVelocityConstraints$0$bailout(92, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, 0, 0, 0, 0, t54, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, t51);
        t8.x = t51 + t40 * t54;
        t56 = $.get$y$x(c.get$K().col0);
        if (typeof t56 !== "number")
          return this.solveVelocityConstraints$0$bailout(93, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56);
        t58 = a.x;
        if (typeof t58 !== "number")
          return this.solveVelocityConstraints$0$bailout(94, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t58);
        t58 = t56 * t58;
        t56 = $.get$y$x(c.get$K().col1);
        if (typeof t56 !== "number")
          return this.solveVelocityConstraints$0$bailout(95, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t58);
        t61 = a.y;
        if (typeof t61 !== "number")
          return this.solveVelocityConstraints$0$bailout(96, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t58, t61);
        t8.y = t58 + t56 * t61;
        t63 = b.x;
        if (typeof t63 !== "number")
          return this.solveVelocityConstraints$0$bailout(97, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63);
        t65 = t8.x;
        if (typeof t65 !== "number")
          return this.solveVelocityConstraints$0$bailout(98, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t65);
        b.x = t63 - t65;
        t67 = b.y;
        if (typeof t67 !== "number")
          return this.solveVelocityConstraints$0$bailout(99, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67);
        t69 = t8.y;
        if (typeof t69 !== "number")
          return this.solveVelocityConstraints$0$bailout(100, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, t69);
        b.y = t67 - t69;
        $loop$1: {
          c.get$normalMass().transformed$2(b, t4);
          t4.negate$0();
          t11 = t4.x;
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(101, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          if (t11 >= 0) {
            t11 = t4.y;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(102, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t11 = t11 >= 0;
          } else
            t11 = false;
          if (t11) {
            t3.copyFrom$1(t4).sub$1(a);
            t11 = t5.copyFrom$1(c.get$normal());
            t11.scale$1(t11, t3.x);
            t11 = t6.copyFrom$1(c.get$normal());
            t11.scale$1(t11, t3.y);
            t11 = t7.copyFrom$1(t5);
            t11.add$1(t11, t6);
            t11 = t8.copyFrom$1(t7);
            t11.scale$1(t11, invMassA);
            vA.sub$1(t8);
            t11 = t8.copyFrom$1(t7);
            t11.scale$1(t11, invMassB);
            t12.add$1(vB, t8);
            t12 = $.cross(cp1.get$rA(), t5, null);
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(103, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t13 = $.cross(cp2.get$rA(), t6, null);
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(104, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + t13);
            t15 = $.cross(cp1.get$rB(), t5, null);
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(105, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t17 = $.cross(cp2.get$rB(), t6, null);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(106, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wB += invIB * (t15 + t17);
            cp1.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          t11 = cp1.get$normalMass();
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(107, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t11 = -t11;
          t14 = b.x;
          if (typeof t14 !== "number")
            return this.solveVelocityConstraints$0$bailout(108, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t14, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t4.x = t11 * t14;
          t4.y = 0;
          t16 = $.get$y$x(c.get$K().col0);
          if (typeof t16 !== "number")
            return this.solveVelocityConstraints$0$bailout(109, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t18 = t4.x;
          if (typeof t18 !== "number")
            return this.solveVelocityConstraints$0$bailout(110, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, t18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t16 *= t18;
          t20 = b.y;
          if (typeof t20 !== "number")
            return this.solveVelocityConstraints$0$bailout(111, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          if (t18 >= 0 && t16 + t20 >= 0) {
            t3.copyFrom$1(t4).sub$1(a);
            t11 = t5.copyFrom$1(c.get$normal());
            t11.scale$1(t11, t3.x);
            t11 = t6.copyFrom$1(c.get$normal());
            t11.scale$1(t11, t3.y);
            t11 = t7.copyFrom$1(t5);
            t11.add$1(t11, t6);
            t11 = t8.copyFrom$1(t7);
            t11.scale$1(t11, invMassA);
            vA.sub$1(t8);
            t11 = t8.copyFrom$1(t7);
            t11.scale$1(t11, invMassB);
            t12.add$1(vB, t8);
            t12 = $.cross(cp1.get$rA(), t5, null);
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(113, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t13 = $.cross(cp2.get$rA(), t6, null);
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(114, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + t13);
            t15 = $.cross(cp1.get$rB(), t5, null);
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(115, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t17 = $.cross(cp2.get$rB(), t6, null);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(116, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wB += invIB * (t15 + t17);
            cp1.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          t4.x = 0;
          t11 = cp2.get$normalMass();
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(117, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t11 = -t11;
          t14 = b.y;
          if (typeof t14 !== "number")
            return this.solveVelocityConstraints$0$bailout(118, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, t14, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t4.y = t11 * t14;
          t16 = $.get$x$x(c.get$K().col1);
          if (typeof t16 !== "number")
            return this.solveVelocityConstraints$0$bailout(119, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t18 = t4.y;
          if (typeof t18 !== "number")
            return this.solveVelocityConstraints$0$bailout(120, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, t18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t16 *= t18;
          t20 = b.x;
          if (typeof t20 !== "number")
            return this.solveVelocityConstraints$0$bailout(121, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2);
          if (t18 >= 0 && t16 + t20 >= 0) {
            t3.copyFrom$1(t4).sub$1(a);
            t11 = t5.copyFrom$1(c.get$normal());
            t11.scale$1(t11, t3.x);
            t11 = t6.copyFrom$1(c.get$normal());
            t11.scale$1(t11, t3.y);
            t11 = t7.copyFrom$1(t5);
            t11.add$1(t11, t6);
            t11 = t8.copyFrom$1(t7);
            t11.scale$1(t11, invMassA);
            vA.sub$1(t8);
            t11 = t8.copyFrom$1(t7);
            t11.scale$1(t11, invMassB);
            t12.add$1(vB, t8);
            t12 = $.cross(cp1.get$rA(), t5, null);
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(123, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t13 = $.cross(cp2.get$rA(), t6, null);
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(124, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + t13);
            t15 = $.cross(cp1.get$rB(), t5, null);
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(125, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t17 = $.cross(cp2.get$rB(), t6, null);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(126, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wB += invIB * (t15 + t17);
            cp1.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          t4.x = 0;
          t4.y = 0;
          vn1 = b.x;
          if (typeof vn1 !== "number")
            return this.solveVelocityConstraints$0$bailout(127, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, b, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1);
          vn2 = b.y;
          if (typeof vn2 !== "number")
            return this.solveVelocityConstraints$0$bailout(128, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, c, wB, 0, vA, vB, invMassA, invIA, invMassB, invIB, 0, t12, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1, vn2);
          if (vn1 >= 0 && vn2 >= 0) {
            t3.copyFrom$1(t4).sub$1(a);
            t11 = t5.copyFrom$1(c.get$normal());
            t11.scale$1(t11, t3.x);
            t11 = t6.copyFrom$1(c.get$normal());
            t11.scale$1(t11, t3.y);
            t11 = t7.copyFrom$1(t5);
            t11.add$1(t11, t6);
            t11 = t8.copyFrom$1(t7);
            t11.scale$1(t11, invMassA);
            vA.sub$1(t8);
            t11 = t8.copyFrom$1(t7);
            t11.scale$1(t11, invMassB);
            t12.add$1(vB, t8);
            t12 = $.cross(cp1.get$rA(), t5, null);
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(129, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t13 = $.cross(cp2.get$rA(), t6, null);
            if (typeof t13 !== "number")
              return this.solveVelocityConstraints$0$bailout(130, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, invIA, 0, invIB, 0, t12, t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.JSNumber_methods, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + t13);
            t15 = $.cross(cp1.get$rB(), t5, null);
            if (typeof t15 !== "number")
              return this.solveVelocityConstraints$0$bailout(131, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t17 = $.cross(cp2.get$rB(), t6, null);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(132, t3, t4, t5, t1, i, t6, t2, t7, 0, t8, t9, t10, bodyA, bodyB, wA, 0, wB, 0, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wB += invIB * (t15 + t17);
            cp1.set$normalImpulse(t4.x);
            cp2.set$normalImpulse(t4.y);
            break $loop$1;
          }
          break $loop$1;
        }
      }
      bodyA.get$linearVelocity().copyFrom$1(vA);
      bodyA.set$angularVelocity(wA);
      bodyB.get$linearVelocity().copyFrom$1(vB);
      bodyB.set$angularVelocity(wB);
      ++i;
    }
  },
  solveVelocityConstraints$0$bailout: function(state0, t3, t4, t5, t1, i, t6, t2, t7, t11, t8, t9, t10, bodyA, bodyB, wA, c, wB, friction, vA, vB, invMassA, invIA, invMassB, invIB, t14, t12, t13, j, t15, a, t17, ccp, t18, t23, t24, t26, t30, t32, t35, vt, lambda, maxFriction, newImpulse, t41, lambda0, Px, Py, t46, t47, t49, t50, t52, t55, t57, t59, t16, t19, a1, t20, t21, b, t27, t29, vn, t25, t28, t31, cp1, cp2, t22, t34, t36, t39, t44, vn1, vn2, t53, t56, t61, t63, t66, t68, t70, t72, t74) {
    switch (state0) {
      case 0:
        t1 = this.dv;
        t2 = this.tangent;
        t3 = this.d;
        t4 = this.x;
        t5 = this.P1;
        t6 = this.P2;
        t7 = this.temp1;
        t8 = this.temp2;
        t9 = this.dv1;
        t10 = this.dv2;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t11 = this.constraintCount;
              case 1:
                state0 = 0;
                if (!$.JSNumber_methods.$lt(i, t11))
                  break L0;
                t11 = this.constraints;
                if (i >= t11.length)
                  throw $.ioore(i);
                c = t11[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                wA = bodyA.get$angularVelocity();
              case 2:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 3:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                invMassA = bodyA.get$invMass();
                invIA = bodyA.get$invInertia();
                invMassB = bodyB.get$invMass();
                invIB = bodyB.get$invInertia();
                t13 = c.get$normal().y;
                if (typeof t13 !== "number")
                  throw $.iae(t13);
                t2.x = 1 * t13;
                t14 = c.get$normal().x;
                if (typeof t14 !== "number")
                  throw $.iae(t14);
                t2.y = -1 * t14;
                friction = c.get$friction();
              case 4:
                state0 = 0;
                t11 = $.getInterceptor$x(c);
                t12 = $.getInterceptor$x(vB);
                t13 = $.getInterceptor$x(vA);
                t14 = $.getInterceptor$n(friction);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t15 = c.get$pointCount();
                      case 5:
                        state0 = 0;
                        if (!$.JSNumber_methods.$lt(j, t15))
                          break L1;
                        t15 = t11.get$points(c);
                      case 6:
                        state0 = 0;
                        ccp = $.$index$asx(t15, j);
                        a = ccp.get$rA();
                        t15 = $.getInterceptor$n(wB);
                        t17 = t15.$negate(wB);
                        t18 = ccp.get$rB().y;
                      case 7:
                        state0 = 0;
                        t18 = $.$mul$n(t17, t18);
                        t17 = t12.get$x(vB);
                      case 8:
                        state0 = 0;
                        t17 = $.$add$ns(t18, t17);
                        t18 = t13.get$x(vA);
                      case 9:
                        state0 = 0;
                        t18 = $.$sub$n(t17, t18);
                        t17 = a.y;
                      case 10:
                        state0 = 0;
                        t23 = $.getInterceptor$n(wA);
                        t1.x = $.$add$ns(t18, t23.$mul(wA, t17));
                        t24 = ccp.get$rB().x;
                      case 11:
                        state0 = 0;
                        t24 = t15.$mul(wB, t24);
                        t26 = t12.get$y(vB);
                      case 12:
                        state0 = 0;
                        t26 = $.$add$ns(t24, t26);
                        t24 = t13.get$y(vA);
                      case 13:
                        state0 = 0;
                        t24 = $.$sub$n(t26, t24);
                        t26 = a.x;
                      case 14:
                        state0 = 0;
                        t1.y = $.$sub$n(t24, t23.$mul(wA, t26));
                        t30 = t1.x;
                      case 15:
                        state0 = 0;
                        t32 = t2.x;
                      case 16:
                        state0 = 0;
                        t32 = $.$mul$n(t30, t32);
                        t30 = t1.y;
                      case 17:
                        state0 = 0;
                        t35 = t2.y;
                      case 18:
                        state0 = 0;
                        vt = $.$add$ns(t32, $.$mul$n(t30, t35));
                        t32 = ccp.get$tangentMass();
                      case 19:
                        state0 = 0;
                        lambda = $.$mul$n(t32, $.$negate$n(vt));
                        t32 = ccp.get$normalImpulse();
                      case 20:
                        state0 = 0;
                        maxFriction = t14.$mul(friction, t32);
                        t32 = ccp.get$tangentImpulse();
                      case 21:
                        state0 = 0;
                        newImpulse = $.clamp($.$add$ns(t32, lambda), $.$negate$n(maxFriction), maxFriction, null);
                      case 22:
                        state0 = 0;
                        t41 = ccp.get$tangentImpulse();
                      case 23:
                        state0 = 0;
                        lambda0 = $.$sub$n(newImpulse, t41);
                        t41 = t2.x;
                      case 24:
                        state0 = 0;
                        Px = $.$mul$n(t41, lambda0);
                        t41 = t2.y;
                      case 25:
                        state0 = 0;
                        Py = $.$mul$n(t41, lambda0);
                        t41 = t13.get$x(vA);
                      case 26:
                        state0 = 0;
                        t46 = $.getInterceptor$n(Px);
                        t13.set$x(vA, $.$sub$n(t41, t46.$mul(Px, invMassA)));
                        t47 = t13.get$y(vA);
                      case 27:
                        state0 = 0;
                        t49 = $.getInterceptor$n(Py);
                        t13.set$y(vA, $.$sub$n(t47, t49.$mul(Py, invMassA)));
                        t50 = ccp.get$rA().x;
                      case 28:
                        state0 = 0;
                        t50 = $.$mul$n(t50, Py);
                        t52 = ccp.get$rA().y;
                      case 29:
                        state0 = 0;
                        t50 = $.$sub$n(t50, $.$mul$n(t52, Px));
                        if (typeof t50 !== "number")
                          throw $.iae(t50);
                        wA = t23.$sub(wA, invIA * t50);
                        t23 = t12.get$x(vB);
                      case 30:
                        state0 = 0;
                        t12.set$x(vB, $.$add$ns(t23, t46.$mul(Px, invMassB)));
                        t55 = t12.get$y(vB);
                      case 31:
                        state0 = 0;
                        t12.set$y(vB, $.$add$ns(t55, t49.$mul(Py, invMassB)));
                        t57 = ccp.get$rB().x;
                      case 32:
                        state0 = 0;
                        t57 = $.$mul$n(t57, Py);
                        t59 = ccp.get$rB().y;
                      case 33:
                        state0 = 0;
                        t57 = $.$sub$n(t57, $.$mul$n(t59, Px));
                        if (typeof t57 !== "number")
                          throw $.iae(t57);
                        wB = t15.$add(wB, invIB * t57);
                        ccp.set$tangentImpulse(newImpulse);
                        ++j;
                    }
                t14 = c.get$pointCount();
              case 34:
                state0 = 0;
                t16 = $.$eq(t14, 1) === true;
                t17 = t11.get$points(c);
              case 35:
                state0 = 0;
                t19 = $.getInterceptor$n(wA);
                t20 = $.getInterceptor$n(wB);
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
              case 82:
              case 83:
              case 84:
              case 85:
              case 86:
              case 87:
              case 88:
              case 89:
              case 90:
              case 91:
              case 92:
              case 93:
              case 94:
              case 95:
              case 96:
              case 97:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
              case 103:
              case 104:
              case 105:
              case 106:
              case 107:
              case 108:
              case 109:
              case 110:
              case 111:
              case 112:
              case 113:
              case 114:
              case 115:
              case 116:
              case 117:
              case 118:
              case 119:
              case 120:
              case 121:
              case 122:
              case 123:
              case 124:
              case 125:
              case 126:
              case 127:
              case 128:
              case 129:
              case 130:
              case 131:
              case 132:
                if (state0 === 61 || state0 === 60 || state0 === 59 || state0 === 58 || state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 53 || state0 === 52 || state0 === 51 || state0 === 50 || state0 === 49 || state0 === 48 || state0 === 47 || state0 === 46 || state0 === 45 || state0 === 44 || state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 0 && t16)
                  switch (state0) {
                    case 0:
                      ccp = $.$index$asx(t17, 0);
                      a1 = ccp.get$rA();
                      t11 = t20.$negate(wB);
                      t14 = ccp.get$rB().y;
                    case 36:
                      state0 = 0;
                      t14 = $.$mul$n(t11, t14);
                      t11 = t12.get$x(vB);
                    case 37:
                      state0 = 0;
                      t11 = $.$add$ns(t14, t11);
                      t14 = t13.get$x(vA);
                    case 38:
                      state0 = 0;
                      t14 = $.$sub$n(t11, t14);
                      t11 = a1.y;
                    case 39:
                      state0 = 0;
                      t1.x = $.$add$ns(t14, t19.$mul(wA, t11));
                      t21 = ccp.get$rB().x;
                    case 40:
                      state0 = 0;
                      t21 = t20.$mul(wB, t21);
                      t23 = t12.get$y(vB);
                    case 41:
                      state0 = 0;
                      t23 = $.$add$ns(t21, t23);
                      t21 = t13.get$y(vA);
                    case 42:
                      state0 = 0;
                      t21 = $.$sub$n(t23, t21);
                      t23 = a1.x;
                    case 43:
                      state0 = 0;
                      t1.y = $.$sub$n(t21, t19.$mul(wA, t23));
                      b = c.get$normal();
                      t27 = t1.x;
                    case 44:
                      state0 = 0;
                      t29 = b.x;
                    case 45:
                      state0 = 0;
                      t29 = $.$mul$n(t27, t29);
                      t27 = t1.y;
                    case 46:
                      state0 = 0;
                      t32 = b.y;
                    case 47:
                      state0 = 0;
                      vn = $.$add$ns(t29, $.$mul$n(t27, t32));
                      t29 = ccp.get$normalMass();
                    case 48:
                      state0 = 0;
                      t29 = $.$negate$n(t29);
                      t35 = ccp.get$velocityBias();
                    case 49:
                      state0 = 0;
                      lambda = $.$mul$n(t29, $.$sub$n(vn, t35));
                      t29 = ccp.get$normalImpulse();
                    case 50:
                      state0 = 0;
                      a = $.$add$ns(t29, lambda);
                      newImpulse = $.$gt$n(a, 0) === true ? a : 0;
                      t11 = ccp.get$normalImpulse();
                    case 51:
                      state0 = 0;
                      lambda = $.$sub$n(newImpulse, t11);
                      t11 = c.get$normal().x;
                    case 52:
                      state0 = 0;
                      Px = $.$mul$n(t11, lambda);
                      t11 = c.get$normal().y;
                    case 53:
                      state0 = 0;
                      Py = $.$mul$n(t11, lambda);
                      t11 = t13.get$x(vA);
                    case 54:
                      state0 = 0;
                      t18 = $.getInterceptor$n(Px);
                      t13.set$x(vA, $.$sub$n(t11, t18.$mul(Px, invMassA)));
                      t21 = t13.get$y(vA);
                    case 55:
                      state0 = 0;
                      t23 = $.getInterceptor$n(Py);
                      t13.set$y(vA, $.$sub$n(t21, t23.$mul(Py, invMassA)));
                      t13 = ccp.get$rA().x;
                    case 56:
                      state0 = 0;
                      t13 = $.$mul$n(t13, Py);
                      t25 = ccp.get$rA().y;
                    case 57:
                      state0 = 0;
                      t13 = $.$sub$n(t13, $.$mul$n(t25, Px));
                      if (typeof t13 !== "number")
                        throw $.iae(t13);
                      wA = t19.$sub(wA, invIA * t13);
                      t19 = t12.get$x(vB);
                    case 58:
                      state0 = 0;
                      t12.set$x(vB, $.$add$ns(t19, t18.$mul(Px, invMassB)));
                      t28 = t12.get$y(vB);
                    case 59:
                      state0 = 0;
                      t12.set$y(vB, $.$add$ns(t28, t23.$mul(Py, invMassB)));
                      t12 = ccp.get$rB().x;
                    case 60:
                      state0 = 0;
                      t12 = $.$mul$n(t12, Py);
                      t31 = ccp.get$rB().y;
                    case 61:
                      state0 = 0;
                      t12 = $.$sub$n(t12, $.$mul$n(t31, Px));
                      if (typeof t12 !== "number")
                        throw $.iae(t12);
                      wB = t20.$add(wB, invIB * t12);
                      ccp.set$normalImpulse(newImpulse);
                  }
                else
                  switch (state0) {
                    case 0:
                      cp1 = $.$index$asx(t17, 0);
                      t11 = t11.get$points(c);
                    case 62:
                      state0 = 0;
                      cp2 = $.$index$asx(t11, 1);
                      a = $.vec2$(cp1.get$normalImpulse(), cp2.get$normalImpulse());
                      t11 = t20.$negate(wB);
                      t15 = cp1.get$rB().y;
                    case 63:
                      state0 = 0;
                      t15 = $.$mul$n(t11, t15);
                      t11 = t12.get$x(vB);
                    case 64:
                      state0 = 0;
                      t11 = $.$add$ns(t15, t11);
                      t15 = t13.get$x(vA);
                    case 65:
                      state0 = 0;
                      t15 = $.$sub$n(t11, t15);
                      t11 = cp1.get$rA().y;
                    case 66:
                      state0 = 0;
                      t9.x = $.$add$ns(t15, t19.$mul(wA, t11));
                      t22 = cp1.get$rB().x;
                    case 67:
                      state0 = 0;
                      t22 = t20.$mul(wB, t22);
                      t24 = t12.get$y(vB);
                    case 68:
                      state0 = 0;
                      t24 = $.$add$ns(t22, t24);
                      t22 = t13.get$y(vA);
                    case 69:
                      state0 = 0;
                      t22 = $.$sub$n(t24, t22);
                      t24 = cp1.get$rA().x;
                    case 70:
                      state0 = 0;
                      t9.y = $.$sub$n(t22, t19.$mul(wA, t24));
                      t28 = t20.$negate(wB);
                      t29 = cp2.get$rB().y;
                    case 71:
                      state0 = 0;
                      t29 = $.$mul$n(t28, t29);
                      t28 = t12.get$x(vB);
                    case 72:
                      state0 = 0;
                      t28 = $.$add$ns(t29, t28);
                      t29 = t13.get$x(vA);
                    case 73:
                      state0 = 0;
                      t29 = $.$sub$n(t28, t29);
                      t28 = cp2.get$rA().y;
                    case 74:
                      state0 = 0;
                      t10.x = $.$add$ns(t29, t19.$mul(wA, t28));
                      t34 = cp2.get$rB().x;
                    case 75:
                      state0 = 0;
                      t34 = t20.$mul(wB, t34);
                      t36 = t12.get$y(vB);
                    case 76:
                      state0 = 0;
                      t36 = $.$add$ns(t34, t36);
                      t13 = t13.get$y(vA);
                    case 77:
                      state0 = 0;
                      t13 = $.$sub$n(t36, t13);
                      t36 = cp2.get$rA().x;
                    case 78:
                      state0 = 0;
                      t10.y = $.$sub$n(t13, t19.$mul(wA, t36));
                      t39 = t9.x;
                    case 79:
                      state0 = 0;
                      t41 = c.get$normal().x;
                    case 80:
                      state0 = 0;
                      t41 = $.$mul$n(t39, t41);
                      t39 = t9.y;
                    case 81:
                      state0 = 0;
                      t44 = c.get$normal().y;
                    case 82:
                      state0 = 0;
                      vn1 = $.$add$ns(t41, $.$mul$n(t39, t44));
                      t41 = t10.x;
                    case 83:
                      state0 = 0;
                      t47 = c.get$normal().x;
                    case 84:
                      state0 = 0;
                      t47 = $.$mul$n(t41, t47);
                      t41 = t10.y;
                    case 85:
                      state0 = 0;
                      t50 = c.get$normal().y;
                    case 86:
                      state0 = 0;
                      vn2 = $.$add$ns(t47, $.$mul$n(t41, t50));
                      t47 = cp1.get$velocityBias();
                    case 87:
                      state0 = 0;
                      t47 = $.$sub$n(vn1, t47);
                      t53 = cp2.get$velocityBias();
                    case 88:
                      state0 = 0;
                      b = $.vec2$(t47, $.$sub$n(vn2, t53));
                      t47 = $.get$x$x(c.get$K().col0);
                    case 89:
                      state0 = 0;
                      t56 = a.x;
                    case 90:
                      state0 = 0;
                      t56 = $.$mul$n(t47, t56);
                      t47 = $.get$x$x(c.get$K().col1);
                    case 91:
                      state0 = 0;
                      t59 = a.y;
                    case 92:
                      state0 = 0;
                      t8.x = $.$add$ns(t56, $.$mul$n(t47, t59));
                      t61 = $.get$y$x(c.get$K().col0);
                    case 93:
                      state0 = 0;
                      t63 = a.x;
                    case 94:
                      state0 = 0;
                      t63 = $.$mul$n(t61, t63);
                      t61 = $.get$y$x(c.get$K().col1);
                    case 95:
                      state0 = 0;
                      t66 = a.y;
                    case 96:
                      state0 = 0;
                      t8.y = $.$add$ns(t63, $.$mul$n(t61, t66));
                      t68 = b.x;
                    case 97:
                      state0 = 0;
                      t70 = t8.x;
                    case 98:
                      state0 = 0;
                      b.x = $.$sub$n(t68, t70);
                      t72 = b.y;
                    case 99:
                      state0 = 0;
                      t74 = t8.y;
                    case 100:
                      state0 = 0;
                      b.y = $.$sub$n(t72, t74);
                    default:
                      $loop$1: {
                        switch (state0) {
                          case 0:
                            c.get$normalMass().transformed$2(b, t4);
                            t4.negate$0();
                            t11 = t4.x;
                          case 101:
                            state0 = 0;
                          case 102:
                            if (state0 === 102 || state0 === 0 && $.$ge$n(t11, 0) === true)
                              switch (state0) {
                                case 0:
                                  t11 = t4.y;
                                case 102:
                                  state0 = 0;
                                  t14 = $.$ge$n(t11, 0) === true;
                                  t11 = t14;
                              }
                            else
                              t11 = false;
                          default:
                            if (state0 === 106 || state0 === 105 || state0 === 104 || state0 === 103 || state0 === 0 && t11)
                              switch (state0) {
                                case 0:
                                  t3.copyFrom$1(t4).sub$1(a);
                                  t11 = t5.copyFrom$1(c.get$normal());
                                  t11.scale$1(t11, t3.x);
                                  t11 = t6.copyFrom$1(c.get$normal());
                                  t11.scale$1(t11, t3.y);
                                  t11 = t7.copyFrom$1(t5);
                                  t11.add$1(t11, t6);
                                  t11 = t8.copyFrom$1(t7);
                                  t11.scale$1(t11, invMassA);
                                  vA.sub$1(t8);
                                  t11 = t8.copyFrom$1(t7);
                                  t11.scale$1(t11, invMassB);
                                  t12.add$1(vB, t8);
                                  t12 = $.cross(cp1.get$rA(), t5, null);
                                case 103:
                                  state0 = 0;
                                  t13 = $.cross(cp2.get$rA(), t6, null);
                                case 104:
                                  state0 = 0;
                                  t13 = $.$add$ns(t12, t13);
                                  if (typeof t13 !== "number")
                                    throw $.iae(t13);
                                  wA = t19.$sub(wA, invIA * t13);
                                  t19 = $.cross(cp1.get$rB(), t5, null);
                                case 105:
                                  state0 = 0;
                                  t15 = $.cross(cp2.get$rB(), t6, null);
                                case 106:
                                  state0 = 0;
                                  t15 = $.$add$ns(t19, t15);
                                  if (typeof t15 !== "number")
                                    throw $.iae(t15);
                                  wB = t20.$add(wB, invIB * t15);
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            t11 = cp1.get$normalMass();
                          case 107:
                            state0 = 0;
                            t11 = $.$negate$n(t11);
                            t14 = b.x;
                          case 108:
                            state0 = 0;
                            t4.x = $.$mul$n(t11, t14);
                            t4.y = 0;
                            t16 = $.get$y$x(c.get$K().col0);
                          case 109:
                            state0 = 0;
                            t18 = t4.x;
                          case 110:
                            state0 = 0;
                            t18 = $.$mul$n(t16, t18);
                            t16 = b.y;
                          case 111:
                            state0 = 0;
                            vn2 = $.$add$ns(t18, t16);
                            t11 = t4.x;
                          case 112:
                            state0 = 0;
                          case 113:
                          case 114:
                          case 115:
                          case 116:
                            if (state0 === 116 || state0 === 115 || state0 === 114 || state0 === 113 || state0 === 0 && $.$ge$n(t11, 0) === true && $.$ge$n(vn2, 0) === true)
                              switch (state0) {
                                case 0:
                                  t3.copyFrom$1(t4).sub$1(a);
                                  t11 = t5.copyFrom$1(c.get$normal());
                                  t11.scale$1(t11, t3.x);
                                  t11 = t6.copyFrom$1(c.get$normal());
                                  t11.scale$1(t11, t3.y);
                                  t11 = t7.copyFrom$1(t5);
                                  t11.add$1(t11, t6);
                                  t11 = t8.copyFrom$1(t7);
                                  t11.scale$1(t11, invMassA);
                                  vA.sub$1(t8);
                                  t11 = t8.copyFrom$1(t7);
                                  t11.scale$1(t11, invMassB);
                                  t12.add$1(vB, t8);
                                  t12 = $.cross(cp1.get$rA(), t5, null);
                                case 113:
                                  state0 = 0;
                                  t13 = $.cross(cp2.get$rA(), t6, null);
                                case 114:
                                  state0 = 0;
                                  t13 = $.$add$ns(t12, t13);
                                  if (typeof t13 !== "number")
                                    throw $.iae(t13);
                                  wA = t19.$sub(wA, invIA * t13);
                                  t19 = $.cross(cp1.get$rB(), t5, null);
                                case 115:
                                  state0 = 0;
                                  t15 = $.cross(cp2.get$rB(), t6, null);
                                case 116:
                                  state0 = 0;
                                  t15 = $.$add$ns(t19, t15);
                                  if (typeof t15 !== "number")
                                    throw $.iae(t15);
                                  wB = t20.$add(wB, invIB * t15);
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            t4.x = 0;
                            t11 = cp2.get$normalMass();
                          case 117:
                            state0 = 0;
                            t11 = $.$negate$n(t11);
                            t14 = b.y;
                          case 118:
                            state0 = 0;
                            t4.y = $.$mul$n(t11, t14);
                            t16 = $.get$x$x(c.get$K().col1);
                          case 119:
                            state0 = 0;
                            t18 = t4.y;
                          case 120:
                            state0 = 0;
                            t18 = $.$mul$n(t16, t18);
                            t16 = b.x;
                          case 121:
                            state0 = 0;
                            vn1 = $.$add$ns(t18, t16);
                            t11 = t4.y;
                          case 122:
                            state0 = 0;
                          case 123:
                          case 124:
                          case 125:
                          case 126:
                            if (state0 === 126 || state0 === 125 || state0 === 124 || state0 === 123 || state0 === 0 && $.$ge$n(t11, 0) === true && $.$ge$n(vn1, 0) === true)
                              switch (state0) {
                                case 0:
                                  t3.copyFrom$1(t4).sub$1(a);
                                  t11 = t5.copyFrom$1(c.get$normal());
                                  t11.scale$1(t11, t3.x);
                                  t11 = t6.copyFrom$1(c.get$normal());
                                  t11.scale$1(t11, t3.y);
                                  t11 = t7.copyFrom$1(t5);
                                  t11.add$1(t11, t6);
                                  t11 = t8.copyFrom$1(t7);
                                  t11.scale$1(t11, invMassA);
                                  vA.sub$1(t8);
                                  t11 = t8.copyFrom$1(t7);
                                  t11.scale$1(t11, invMassB);
                                  t12.add$1(vB, t8);
                                  t12 = $.cross(cp1.get$rA(), t5, null);
                                case 123:
                                  state0 = 0;
                                  t13 = $.cross(cp2.get$rA(), t6, null);
                                case 124:
                                  state0 = 0;
                                  t13 = $.$add$ns(t12, t13);
                                  if (typeof t13 !== "number")
                                    throw $.iae(t13);
                                  wA = t19.$sub(wA, invIA * t13);
                                  t19 = $.cross(cp1.get$rB(), t5, null);
                                case 125:
                                  state0 = 0;
                                  t15 = $.cross(cp2.get$rB(), t6, null);
                                case 126:
                                  state0 = 0;
                                  t15 = $.$add$ns(t19, t15);
                                  if (typeof t15 !== "number")
                                    throw $.iae(t15);
                                  wB = t20.$add(wB, invIB * t15);
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            t4.x = 0;
                            t4.y = 0;
                            vn1 = b.x;
                          case 127:
                            state0 = 0;
                            vn2 = b.y;
                          case 128:
                            state0 = 0;
                          case 129:
                          case 130:
                          case 131:
                          case 132:
                            if (state0 === 132 || state0 === 131 || state0 === 130 || state0 === 129 || state0 === 0 && $.$ge$n(vn1, 0) === true && $.$ge$n(vn2, 0) === true)
                              switch (state0) {
                                case 0:
                                  t3.copyFrom$1(t4).sub$1(a);
                                  t11 = t5.copyFrom$1(c.get$normal());
                                  t11.scale$1(t11, t3.x);
                                  t11 = t6.copyFrom$1(c.get$normal());
                                  t11.scale$1(t11, t3.y);
                                  t11 = t7.copyFrom$1(t5);
                                  t11.add$1(t11, t6);
                                  t11 = t8.copyFrom$1(t7);
                                  t11.scale$1(t11, invMassA);
                                  vA.sub$1(t8);
                                  t11 = t8.copyFrom$1(t7);
                                  t11.scale$1(t11, invMassB);
                                  t12.add$1(vB, t8);
                                  t12 = $.cross(cp1.get$rA(), t5, null);
                                case 129:
                                  state0 = 0;
                                  t13 = $.cross(cp2.get$rA(), t6, null);
                                case 130:
                                  state0 = 0;
                                  t13 = $.$add$ns(t12, t13);
                                  if (typeof t13 !== "number")
                                    throw $.iae(t13);
                                  wA = t19.$sub(wA, invIA * t13);
                                  t19 = $.cross(cp1.get$rB(), t5, null);
                                case 131:
                                  state0 = 0;
                                  t15 = $.cross(cp2.get$rB(), t6, null);
                                case 132:
                                  state0 = 0;
                                  t15 = $.$add$ns(t19, t15);
                                  if (typeof t15 !== "number")
                                    throw $.iae(t15);
                                  wB = t20.$add(wB, invIB * t15);
                                  cp1.set$normalImpulse(t4.x);
                                  cp2.set$normalImpulse(t4.y);
                                  break $loop$1;
                              }
                            break $loop$1;
                        }
                      }
                  }
                bodyA.get$linearVelocity().copyFrom$1(vA);
                bodyA.set$angularVelocity(wA);
                bodyB.get$linearVelocity().copyFrom$1(vB);
                bodyB.set$angularVelocity(wB);
                ++i;
            }
    }
  },
  storeImpulses$0: function() {
    var i, t1, c, m, t2, j, t3;
    for (i = 0; $.JSNumber_methods.$lt(i, this.constraintCount); ++i) {
      t1 = this.constraints;
      if (i >= t1.length)
        throw $.ioore(i);
      c = t1[i];
      m = c.get$manifold();
      for (t1 = $.getInterceptor$x(c), t2 = $.getInterceptor$x(m), j = 0; $.JSNumber_methods.$lt(j, c.get$pointCount()); ++j) {
        t3 = $.$index$asx(t1.get$points(c), j).get$normalImpulse();
        $.$index$asx(t2.get$points(m), j).set$normalImpulse(t3);
        t3 = $.$index$asx(t1.get$points(c), j).get$tangentImpulse();
        $.$index$asx(t2.get$points(m), j).set$tangentImpulse(t3);
      }
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    var t1, t2, t3, t4, psm, normal, point, minSeparation, i, t5, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, j, t6, separation, C, rnA, rnB, K, impulse, t7, t9, t11, t13;
    t1 = this.P;
    t2 = this.temp1;
    t3 = this.rA;
    t4 = this.rB;
    psm = this.psolver;
    normal = psm.normal;
    point = psm.point;
    minSeparation = 0;
    i = 0;
    while (true) {
      t5 = this.constraintCount;
      if (typeof t5 !== "number")
        return this.solvePositionConstraints$1$bailout(1, t2, baumgarte, t5, t3, psm, normal, minSeparation, t4, i, point, t1);
      if (!(i < t5))
        break;
      t5 = this.constraints;
      if (i >= t5.length)
        throw $.ioore(i);
      c = t5[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      t5 = bodyA.get$mass();
      if (typeof t5 !== "number")
        return this.solvePositionConstraints$1$bailout(2, t2, baumgarte, t5, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c);
      invMassA = t5 * bodyA.get$invMass();
      invIA = t5 * bodyA.get$invInertia();
      t5 = bodyB.get$mass();
      if (typeof t5 !== "number")
        return this.solvePositionConstraints$1$bailout(4, t2, baumgarte, t5, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA);
      invMassB = t5 * bodyB.get$invMass();
      invIB = t5 * bodyB.get$invInertia();
      t5 = invMassA + invMassB;
      j = 0;
      while (true) {
        t6 = c.get$pointCount();
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(6, t2, baumgarte, $.JSNumber_methods, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA, invMassB, invIB, j, t6, $.JSNumber_methods, $.JSNumber_methods);
        if (!(j < t6))
          break;
        psm.initialize$2(psm, c, j);
        separation = psm.separation;
        t3.copyFrom$1(point).sub$1(bodyA.get$sweep().center);
        t4.copyFrom$1(point).sub$1(bodyB.get$sweep().center);
        minSeparation = $.min(minSeparation, separation);
        if (minSeparation !== (minSeparation | 0))
          return this.solvePositionConstraints$1$bailout(7, t2, baumgarte, $.JSNumber_methods, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA, invMassB, invIB, j, 0, $.JSNumber_methods, $.JSNumber_methods, separation);
        C = $.clamp(baumgarte * (separation + 0.005), -0.2, 0, null);
        if (typeof C !== "number")
          return this.solvePositionConstraints$1$bailout(8, t2, baumgarte, $.JSNumber_methods, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA, invMassB, invIB, j, 0, $.JSNumber_methods, $.JSNumber_methods, 0, C);
        rnA = $.cross(t3, normal, null);
        if (typeof rnA !== "number")
          return this.solvePositionConstraints$1$bailout(9, t2, baumgarte, $.JSNumber_methods, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA, invMassB, invIB, j, 0, $.JSNumber_methods, $.JSNumber_methods, 0, C, rnA);
        rnB = $.cross(t4, normal, null);
        if (typeof rnB !== "number")
          return this.solvePositionConstraints$1$bailout(10, t2, baumgarte, $.JSNumber_methods, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA, invMassB, invIB, j, 0, $.JSNumber_methods, $.JSNumber_methods, 0, C, rnA, rnB);
        K = t5 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t6 = t1.copyFrom$1(normal);
        t6.scale$1(t6, impulse);
        t6 = t2.copyFrom$1(t1);
        t6.scale$1(t6, invMassA);
        bodyA.get$sweep().center.sub$1(t2);
        t6 = bodyA.get$sweep();
        t7 = t6.angle;
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(11, t2, baumgarte, $.JSNumber_methods, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA, invMassB, invIB, j, t6, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, t7);
        t9 = $.cross(t3, t1, null);
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(12, t2, baumgarte, $.JSNumber_methods, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA, invMassB, invIB, j, t6, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, t7, t9);
        t6.angle = t7 - invIA * t9;
        bodyA.synchronizeTransform$0();
        t6 = t2.copyFrom$1(t1);
        t6.scale$1(t6, invMassB);
        t6 = bodyB.get$sweep().center;
        t6.add$1(t6, t2);
        t6 = bodyB.get$sweep();
        t11 = t6.angle;
        if (typeof t11 !== "number")
          return this.solvePositionConstraints$1$bailout(13, t2, baumgarte, $.JSNumber_methods, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA, invMassB, invIB, j, t6, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, t11);
        t13 = $.cross(t4, t1, null);
        if (typeof t13 !== "number")
          return this.solvePositionConstraints$1$bailout(14, t2, baumgarte, $.JSNumber_methods, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA, invMassB, invIB, j, t6, $.JSNumber_methods, $.JSNumber_methods, 0, 0, 0, 0, 0, 0, t11, t13);
        t6.angle = t11 + invIB * t13;
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solvePositionConstraints$1$bailout: function(state0, t2, baumgarte, t5, t3, psm, normal, minSeparation, t4, i, point, t1, bodyA, bodyB, c, invMassA, invIA, invMassB, invIB, j, t8, t7, t6, separation, C, rnA, rnB, t9, t11, t13, t15) {
    switch (state0) {
      case 0:
        t1 = this.P;
        t2 = this.temp1;
        t3 = this.rA;
        t4 = this.rB;
        psm = this.psolver;
        normal = psm.normal;
        point = psm.point;
        minSeparation = 0;
        i = 0;
      default:
        var t12, K, impulse;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t5 = this.constraintCount;
              case 1:
                state0 = 0;
                if (!$.JSNumber_methods.$lt(i, t5))
                  break L0;
                t5 = this.constraints;
                if (i >= t5.length)
                  throw $.ioore(i);
                c = t5[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                t5 = bodyA.get$mass();
              case 2:
                state0 = 0;
                invMassA = $.$mul$n(t5, bodyA.get$invMass());
                t5 = bodyA.get$mass();
              case 3:
                state0 = 0;
                invIA = $.$mul$n(t5, bodyA.get$invInertia());
                t5 = bodyB.get$mass();
              case 4:
                state0 = 0;
                invMassB = $.$mul$n(t5, bodyB.get$invMass());
                t5 = bodyB.get$mass();
              case 5:
                state0 = 0;
                invIB = $.$mul$n(t5, bodyB.get$invInertia());
                t5 = $.getInterceptor$n(invIA);
                t6 = $.getInterceptor$n(invIB);
                t7 = $.getInterceptor$ns(invMassA);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t8 = c.get$pointCount();
                      case 6:
                        state0 = 0;
                        if (!$.JSNumber_methods.$lt(j, t8))
                          break L1;
                        psm.initialize$2(psm, c, j);
                        separation = psm.separation;
                        t3.copyFrom$1(point).sub$1(bodyA.get$sweep().center);
                        t4.copyFrom$1(point).sub$1(bodyB.get$sweep().center);
                        minSeparation = $.min(minSeparation, separation);
                      case 7:
                        state0 = 0;
                        C = $.clamp(baumgarte * (separation + 0.005), -0.2, 0, null);
                      case 8:
                        state0 = 0;
                        rnA = $.cross(t3, normal, null);
                      case 9:
                        state0 = 0;
                        rnB = $.cross(t4, normal, null);
                      case 10:
                        state0 = 0;
                        t12 = t7.$add(invMassA, invMassB);
                        if (typeof rnA !== "number")
                          throw $.iae(rnA);
                        t12 = $.$add$ns(t12, $.$mul$n(t5.$mul(invIA, rnA), rnA));
                        if (typeof rnB !== "number")
                          throw $.iae(rnB);
                        K = $.$add$ns(t12, $.$mul$n(t6.$mul(invIB, rnB), rnB));
                        impulse = $.$gt$n(K, 0) === true ? $.$div$n($.$negate$n(C), K) : 0;
                        t8 = t1.copyFrom$1(normal);
                        t8.scale$1(t8, impulse);
                        t8 = t2.copyFrom$1(t1);
                        t8.scale$1(t8, invMassA);
                        bodyA.get$sweep().center.sub$1(t2);
                        t8 = bodyA.get$sweep();
                        t9 = t8.angle;
                      case 11:
                        state0 = 0;
                        t11 = $.cross(t3, t1, null);
                      case 12:
                        state0 = 0;
                        if (typeof t11 !== "number")
                          throw $.iae(t11);
                        t8.angle = $.$sub$n(t9, t5.$mul(invIA, t11));
                        bodyA.synchronizeTransform$0();
                        t8 = t2.copyFrom$1(t1);
                        t8.scale$1(t8, invMassB);
                        t8 = bodyB.get$sweep().center;
                        t8.add$1(t8, t2);
                        t8 = bodyB.get$sweep();
                        t13 = t8.angle;
                      case 13:
                        state0 = 0;
                        t15 = $.cross(t4, t1, null);
                      case 14:
                        state0 = 0;
                        if (typeof t15 !== "number")
                          throw $.iae(t15);
                        t8.angle = $.$add$ns(t13, t6.$mul(invIB, t15));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  },
  ContactSolver$0: function() {
    var i, t1;
    for (i = 0; t1 = this.constraints, i < t1.length; ++i)
      t1[i] = $.ContactConstraint$();
  }
};

$$.PositionSolverManifold = {"": "Object;normal<,point,separation,pointA,pointB,temp,planePoint,clipPoint",
  initialize$2: function(_, cc, index) {
    var t1, t2, t3, t4, t5;
    t1 = $.getInterceptor$x(cc);
    switch (t1.get$type(cc)) {
      case 0:
        t2 = this.pointA;
        cc.get$bodyA().getWorldPointToOut$2(cc.get$localPoint(), t2);
        t3 = this.pointB;
        cc.get$bodyB().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), 0).get$localPoint(), t3);
        t1 = this.normal;
        if (t2.$sub(t2, t3).get$length2() > 1.4208639999999999e-14) {
          t1.copyFrom$1(t3).sub$1(t2);
          t1.normalize$0();
        } else
          t1.splat$1(0);
        t1 = this.point.copyFrom$1(t2);
        t1 = t1.add$1(t1, t3);
        t1.scale$1(t1, 0.5);
        t1 = this.temp;
        t1.copyFrom$1(t3).sub$1(t2);
        t1 = t1.dot$1(this.normal);
        t2 = cc.get$radius();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        this.separation = t1 - t2;
        break;
      case 1:
        t2 = this.normal;
        cc.get$bodyA().getWorldVectorToOut$2(cc.get$localNormal(), t2);
        t3 = this.planePoint;
        cc.get$bodyA().getWorldPointToOut$2(cc.get$localPoint(), t3);
        t4 = this.clipPoint;
        cc.get$bodyB().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), index).get$localPoint(), t4);
        t5 = this.temp;
        t5.copyFrom$1(t4).sub$1(t3);
        t2 = t5.dot$1(t2);
        t5 = cc.get$radius();
        if (typeof t5 !== "number")
          throw $.iae(t5);
        this.separation = t2 - t5;
        this.point.copyFrom$1(t4);
        break;
      case 2:
        t2 = this.normal;
        cc.get$bodyB().getWorldVectorToOut$2(cc.get$localNormal(), t2);
        t3 = this.planePoint;
        cc.get$bodyB().getWorldPointToOut$2(cc.get$localPoint(), t3);
        t4 = this.clipPoint;
        cc.get$bodyA().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), index).get$localPoint(), t4);
        t5 = this.temp;
        t5.copyFrom$1(t4).sub$1(t3);
        t5 = t5.dot$1(t2);
        t3 = cc.get$radius();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        this.separation = t5 - t3;
        this.point.copyFrom$1(t4);
        t2.negate$0();
        break;
    }
  }
};

$$.PolygonAndCircleContact = {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.expect(1, $.get$type$x(fA), null, null, false);
    $.expect(0, $.get$type$x(fB), null, null, false);
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygonAndCircle$5(argManifold, $.get$shape$x(this.fixtureA), xfA, $.get$shape$x(this.fixtureB), xfB);
  }
};

$$.PolygonContact = {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.expect(1, $.get$type$x(fA), null, null, false);
    $.expect(1, $.get$type$x(fB), null, null, false);
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygons$5(argManifold, $.get$shape$x(this.fixtureA), xfA, $.get$shape$x(this.fixtureB), xfB);
  }
};

$$.TimeOfImpactConstraint = {"": "Object;localPoints<,localNormal<,localPoint<,type*,radius@,pointCount@,bodyA@,bodyB@",
  setFrom$1: function(argOther) {
    var t1, t2, i, t3, t4;
    for (t1 = this.localPoints, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      t4 = argOther.get$localPoints();
      if (i >= t4.length)
        throw $.ioore(i);
      t3.copyFrom$1(t4[i]);
    }
    this.localNormal.copyFrom$1(argOther.get$localNormal());
    this.localPoint.copyFrom$1(argOther.get$localPoint());
    this.type = $.get$type$x(argOther);
    this.radius = argOther.get$radius();
    this.pointCount = argOther.get$pointCount();
    this.bodyA = argOther.get$bodyA();
    this.bodyB = argOther.get$bodyB();
  },
  TimeOfImpactConstraint$0: function() {
    var t1, t2, i;
    for (t1 = this.localPoints, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = $.vec2$zero();
  }
};

$$.TimeOfImpactSolver = {"": "Object;constraints,count<,toiBody,psm,rA<,rB<,P,temp",
  initialize$3: function(_, contacts, argCount, argToiBody) {
    var t1, t2, i, t3, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, j, cp, t4;
    this.count = argCount;
    this.toiBody = argToiBody;
    t1 = this.count;
    t2 = this.constraints;
    i = t2.length;
    if (t1 >= i) {
      t3 = $.List_List($.max(t1, i * 2), $.TimeOfImpactConstraint);
      $.setRuntimeTypeInfo(t3, [$.TimeOfImpactConstraint]);
      this.constraints = t3;
      $.JSArray_methods.setRange$3(this.constraints, 0, i, t2);
      for (; t1 = this.constraints, i < t1.length; ++i)
        t1[i] = $.TimeOfImpactConstraint$();
    }
    for (t1 = contacts.length, i = 0; i < this.count; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      t2 = $.getInterceptor$x(fixtureA);
      shapeA = t2.get$shape(fixtureA);
      t3 = $.getInterceptor$x(fixtureB);
      shapeB = t3.get$shape(fixtureB);
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = t2.get$body(fixtureA);
      bodyB = t3.get$body(fixtureB);
      manifold = contact.get$manifold();
      t3 = this.constraints;
      if (i >= t3.length)
        throw $.ioore(i);
      constraint = t3[i];
      constraint.set$bodyA(bodyA);
      constraint.set$bodyB(bodyB);
      constraint.get$localNormal().copyFrom$1(manifold.get$localNormal());
      constraint.get$localPoint().copyFrom$1(manifold.get$localPoint());
      t3 = $.getInterceptor$x(manifold);
      $.set$type$x(constraint, t3.get$type(manifold));
      constraint.set$pointCount(manifold.get$pointCount());
      constraint.set$radius($.$add$ns(radiusA, radiusB));
      for (j = 0; $.JSNumber_methods.$lt(j, constraint.get$pointCount()); ++j) {
        cp = $.$index$asx(t3.get$points(manifold), j);
        t2 = constraint.get$localPoints();
        t4 = cp.get$localPoint();
        if (j >= t2.length)
          throw $.ioore(j);
        t2[j] = t4;
      }
    }
  },
  solve$1: function(baumgarte) {
    var t1, t2, t3, t4, t5, normal, point, minSeparation, i, t6, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, j, t7, separation, C, rnA, rnB, K, impulse, t8, t10, t12, t14;
    for (t1 = this.P, t2 = this.temp, t3 = this.rA, t4 = this.rB, t5 = this.psm, normal = t5.normal, point = t5.point, minSeparation = 0, i = 0; i < this.count; ++i) {
      t6 = this.constraints;
      if (i >= t6.length)
        throw $.ioore(i);
      c = t6[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      massA = bodyA.get$mass();
      if (typeof massA !== "number")
        return this.solve$1$bailout(1, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, massA, t3, bodyB, t4);
      massB = bodyB.get$mass();
      if (typeof massB !== "number")
        return this.solve$1$bailout(2, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, massA, t3, bodyB, t4, massB);
      if ($.$eq(bodyA, this.toiBody) === true)
        massB = 0;
      else
        massA = 0;
      invMassA = massA * bodyA.get$invMass();
      invIA = massA * bodyA.get$invInertia();
      invMassB = massB * bodyB.get$invMass();
      invIB = massB * bodyB.get$invInertia();
      t6 = invMassA + invMassB;
      j = 0;
      while (true) {
        t7 = c.get$pointCount();
        if (typeof t7 !== "number")
          return this.solve$1$bailout(3, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, 0, t3, bodyB, t4, 0, invMassA, invIA, invMassB, $.JSNumber_methods, invIB, $.JSNumber_methods, j, $.JSNumber_methods, t7);
        if (!(j < t7))
          break;
        t5.initialize$2(t5, c, j);
        separation = t5.separation;
        t3.copyFrom$1(point).sub$1(bodyA.get$sweep().center);
        t4.copyFrom$1(point).sub$1(bodyB.get$sweep().center);
        minSeparation = $.min(minSeparation, separation);
        if (minSeparation !== (minSeparation | 0))
          return this.solve$1$bailout(4, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, 0, t3, bodyB, t4, 0, invMassA, invIA, invMassB, $.JSNumber_methods, invIB, $.JSNumber_methods, j, $.JSNumber_methods, 0, separation);
        C = $.clamp(baumgarte * (separation + 0.005), -0.2, 0, null);
        if (typeof C !== "number")
          return this.solve$1$bailout(5, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, 0, t3, bodyB, t4, 0, invMassA, invIA, invMassB, $.JSNumber_methods, invIB, $.JSNumber_methods, j, $.JSNumber_methods, 0, 0, C);
        rnA = $.cross(t3, normal, null);
        if (typeof rnA !== "number")
          return this.solve$1$bailout(6, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, 0, t3, bodyB, t4, 0, invMassA, invIA, invMassB, $.JSNumber_methods, invIB, $.JSNumber_methods, j, $.JSNumber_methods, 0, 0, C, rnA);
        rnB = $.cross(t4, normal, null);
        if (typeof rnB !== "number")
          return this.solve$1$bailout(7, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, 0, t3, bodyB, t4, 0, invMassA, invIA, invMassB, $.JSNumber_methods, invIB, $.JSNumber_methods, j, $.JSNumber_methods, 0, 0, C, rnA, rnB);
        K = t6 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t7 = t1.copyFrom$1(normal);
        t7.scale$1(t7, impulse);
        t7 = t2.copyFrom$1(t1);
        t7.scale$1(t7, invMassA);
        bodyA.get$sweep().center.sub$1(t2);
        t7 = bodyA.get$sweep();
        t8 = t7.angle;
        if (typeof t8 !== "number")
          return this.solve$1$bailout(8, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, 0, t3, bodyB, t4, 0, invMassA, invIA, invMassB, $.JSNumber_methods, invIB, $.JSNumber_methods, j, $.JSNumber_methods, t7, 0, 0, 0, 0, t8);
        t10 = $.cross(t3, t1, null);
        if (typeof t10 !== "number")
          return this.solve$1$bailout(9, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, 0, t3, bodyB, t4, 0, invMassA, invIA, invMassB, $.JSNumber_methods, invIB, $.JSNumber_methods, j, $.JSNumber_methods, t7, 0, 0, 0, 0, t8, t10);
        t7.angle = t8 - invIA * t10;
        bodyA.synchronizeTransform$0();
        t7 = t2.copyFrom$1(t1);
        t7.scale$1(t7, invMassB);
        t7 = bodyB.get$sweep().center;
        t7.add$1(t7, t2);
        t7 = bodyB.get$sweep();
        t12 = t7.angle;
        if (typeof t12 !== "number")
          return this.solve$1$bailout(10, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, 0, t3, bodyB, t4, 0, invMassA, invIA, invMassB, $.JSNumber_methods, invIB, $.JSNumber_methods, j, $.JSNumber_methods, t7, 0, 0, 0, 0, 0, 0, t12);
        t14 = $.cross(t4, t1, null);
        if (typeof t14 !== "number")
          return this.solve$1$bailout(11, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, 0, t3, bodyB, t4, 0, invMassA, invIA, invMassB, $.JSNumber_methods, invIB, $.JSNumber_methods, j, $.JSNumber_methods, t7, 0, 0, 0, 0, 0, 0, t12, t14);
        t7.angle = t12 + invIB * t14;
        bodyB.synchronizeTransform$0();
        ++j;
      }
    }
    return minSeparation >= -0.0075;
  },
  solve$1$bailout: function(state0, baumgarte, c, t5, normal, point, i, minSeparation, t1, t2, bodyA, massA, t3, bodyB, t4, massB, invMassA, invIA, invMassB, t8, invIB, t7, j, t6, t9, separation, C, rnA, rnB, t10, t12, t14, t16) {
    switch (state0) {
      case 0:
        t1 = this.P;
        t2 = this.temp;
        t3 = this.rA;
        t4 = this.rB;
        t5 = this.psm;
        normal = t5.normal;
        point = t5.point;
        minSeparation = 0;
        i = 0;
      default:
        var t13, K, impulse;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < this.count))
                  break L0;
                t6 = this.constraints;
                if (i >= t6.length)
                  throw $.ioore(i);
                c = t6[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                massA = bodyA.get$mass();
              case 1:
                state0 = 0;
                massB = bodyB.get$mass();
              case 2:
                state0 = 0;
                if ($.$eq(bodyA, this.toiBody) === true)
                  massB = 0;
                else
                  massA = 0;
                t6 = $.getInterceptor$n(massA);
                invMassA = t6.$mul(massA, bodyA.get$invMass());
                invIA = t6.$mul(massA, bodyA.get$invInertia());
                t6 = $.getInterceptor$n(massB);
                invMassB = t6.$mul(massB, bodyB.get$invMass());
                invIB = t6.$mul(massB, bodyB.get$invInertia());
                t6 = $.getInterceptor$n(invIA);
                t7 = $.getInterceptor$n(invIB);
                t8 = $.getInterceptor$ns(invMassA);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t9 = c.get$pointCount();
                      case 3:
                        state0 = 0;
                        if (!$.JSNumber_methods.$lt(j, t9))
                          break L1;
                        t5.initialize$2(t5, c, j);
                        separation = t5.separation;
                        t3.copyFrom$1(point).sub$1(bodyA.get$sweep().center);
                        t4.copyFrom$1(point).sub$1(bodyB.get$sweep().center);
                        minSeparation = $.min(minSeparation, separation);
                      case 4:
                        state0 = 0;
                        C = $.clamp(baumgarte * (separation + 0.005), -0.2, 0, null);
                      case 5:
                        state0 = 0;
                        rnA = $.cross(t3, normal, null);
                      case 6:
                        state0 = 0;
                        rnB = $.cross(t4, normal, null);
                      case 7:
                        state0 = 0;
                        t13 = t8.$add(invMassA, invMassB);
                        if (typeof rnA !== "number")
                          throw $.iae(rnA);
                        t13 = $.$add$ns(t13, $.$mul$n(t6.$mul(invIA, rnA), rnA));
                        if (typeof rnB !== "number")
                          throw $.iae(rnB);
                        K = $.$add$ns(t13, $.$mul$n(t7.$mul(invIB, rnB), rnB));
                        impulse = $.$gt$n(K, 0) === true ? $.$div$n($.$negate$n(C), K) : 0;
                        t9 = t1.copyFrom$1(normal);
                        t9.scale$1(t9, impulse);
                        t9 = t2.copyFrom$1(t1);
                        t9.scale$1(t9, invMassA);
                        bodyA.get$sweep().center.sub$1(t2);
                        t9 = bodyA.get$sweep();
                        t10 = t9.angle;
                      case 8:
                        state0 = 0;
                        t12 = $.cross(t3, t1, null);
                      case 9:
                        state0 = 0;
                        if (typeof t12 !== "number")
                          throw $.iae(t12);
                        t9.angle = $.$sub$n(t10, t6.$mul(invIA, t12));
                        bodyA.synchronizeTransform$0();
                        t9 = t2.copyFrom$1(t1);
                        t9.scale$1(t9, invMassB);
                        t9 = bodyB.get$sweep().center;
                        t9.add$1(t9, t2);
                        t9 = bodyB.get$sweep();
                        t14 = t9.angle;
                      case 10:
                        state0 = 0;
                        t16 = $.cross(t4, t1, null);
                      case 11:
                        state0 = 0;
                        if (typeof t16 !== "number")
                          throw $.iae(t16);
                        t9.angle = $.$add$ns(t14, t7.$mul(invIB, t16));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  },
  TimeOfImpactSolver$0: function() {
    var i, t1;
    for (i = 0; t1 = this.constraints, i < t1.length; ++i)
      t1[i] = $.TimeOfImpactConstraint$();
  }
};

$$.TimeOfImpactSolverManifold = {"": "Object;normal<,point,separation,pointA,pointB,temp,planePoint,clipPoint",
  initialize$2: function(_, cc, index) {
    var t1, t2, t3, t4, t5, t6;
    switch ($.get$type$x(cc)) {
      case 0:
        t1 = this.pointA;
        t1.copyFrom$1(cc.get$bodyA().getWorldPoint$1(cc.get$localPoint()));
        t2 = this.pointB;
        t3 = cc.get$bodyB();
        t4 = cc.get$localPoints();
        if (0 >= t4.length)
          throw $.ioore(0);
        t2.copyFrom$1(t3.getWorldPoint$1(t4[0]));
        t3 = this.normal;
        if (t1.$sub(t1, t2).get$length2() > 1.4208639999999999e-14) {
          t3.copyFrom$1(t2).sub$1(t1);
          t3.normalize$0();
        } else
          t3.splat$1(0);
        t3 = this.point.copyFrom$1(t1);
        t3 = t3.add$1(t3, t2);
        t3.scale$1(t3, 0.5);
        t3 = this.temp;
        t3.copyFrom$1(t2).sub$1(t1);
        t3 = t3.dot$1(this.normal);
        t1 = cc.get$radius();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        this.separation = t3 - t1;
        break;
      case 1:
        t1 = this.normal;
        t1.copyFrom$1(cc.get$bodyA().getWorldVector$1(cc.get$localNormal()));
        t2 = this.planePoint;
        t2.copyFrom$1(cc.get$bodyA().getWorldPoint$1(cc.get$localPoint()));
        t3 = this.clipPoint;
        t4 = cc.get$bodyB();
        t5 = cc.get$localPoints();
        if (index < 0 || index >= t5.length)
          throw $.ioore(index);
        t3.copyFrom$1(t4.getWorldPoint$1(t5[index]));
        t6 = this.temp;
        t6.copyFrom$1(t3).sub$1(t2);
        t1 = t6.dot$1(t1);
        t6 = cc.get$radius();
        if (typeof t6 !== "number")
          throw $.iae(t6);
        this.separation = t1 - t6;
        this.point.copyFrom$1(t3);
        break;
      case 2:
        t1 = this.normal;
        t1.copyFrom$1(cc.get$bodyB().getWorldVector$1(cc.get$localNormal()));
        t2 = this.planePoint;
        t2.copyFrom$1(cc.get$bodyB().getWorldPoint$1(cc.get$localPoint()));
        t3 = this.clipPoint;
        t4 = cc.get$bodyA();
        t5 = cc.get$localPoints();
        if (index < 0 || index >= t5.length)
          throw $.ioore(index);
        t3.copyFrom$1(t4.getWorldPoint$1(t5[index]));
        t6 = this.temp;
        t6.copyFrom$1(t3).sub$1(t2);
        t6 = t6.dot$1(t1);
        t2 = cc.get$radius();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        this.separation = t6 - t2;
        this.point.copyFrom$1(t3);
        t1.negate$0();
        break;
    }
  }
};

$$.DefaultWorldPool = {"": "Object;collision<,timeOfImpact<,distance<",
  timeOfImpact$2: function(arg0, arg1) {
    return this.timeOfImpact.call$2(arg0, arg1);
  },
  getCircleContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null, $.CircleContact);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1($.CircleContact$(this));
    return queue;
  },
  getPolyCircleContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null, $.PolygonAndCircleContact);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1($.PolygonAndCircleContact$(this));
    return queue;
  },
  getPolyContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null, $.PolygonContact);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1($.PolygonContact$(this));
    return queue;
  },
  DefaultWorldPool$0: function() {
    this.distance = $.Distance$_construct();
    this.collision = $.Collision$_construct(this);
    this.timeOfImpact = $.TimeOfImpact$_construct(this);
  }
};

$$.MatchState = {"": "Object;state?"};

$$.BaseMatcher = {"": "Object;",
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    return mismatchDescription.add$1(mismatchDescription, "was ").addDescriptionOf$1(item);
  },
  $isMatcher: true
};

$$._DeepMatcher = {"": "BaseMatcher;_expected,_limit,count<",
  _compareIterables$4: function(expected, actual, matcher, depth) {
    var expectedIterator, actualIterator, position, reason, r;
    if (!(typeof actual === "object" && actual !== null && (actual.constructor === Array || actual.$isIterable())))
      return "is not Iterable";
    expectedIterator = $.get$iterator$ax(expected);
    actualIterator = $.get$iterator$ax(actual);
    for (position = 0, reason = null; reason == null;)
      if (expectedIterator.moveNext$0() === true)
        if (actualIterator.moveNext$0() === true) {
          r = matcher.call$4(expectedIterator.get$current(), actualIterator.get$current(), "mismatch at position " + $.S(position), depth);
          if (r != null)
            reason = $.toString$0(r);
          ++position;
        } else
          reason = "shorter than expected";
      else {
        if (actualIterator.moveNext$0() === true)
          ;
        else
          return;
        reason = "longer than expected";
      }
    return reason;
  },
  _recursiveMatch$4: function(expected, actual, $location, depth) {
    var t1, canRecurse, reason, r, err, t2, t3, eType, aType, includeTypes;
    if (typeof expected !== "object" || expected === null || expected.constructor !== Array && !expected.$isJavaScriptIndexingBehavior())
      return this._recursiveMatch$4$bailout(1, expected, actual, $location, depth);
    if (typeof depth !== "number")
      return this._recursiveMatch$4$bailout(1, expected, actual, $location, depth);
    if (depth !== 0) {
      t1 = this._limit;
      if (typeof t1 !== "number")
        return this._recursiveMatch$4$bailout(2, expected, actual, $location, depth, $.JSNumber_methods, t1);
      canRecurse = t1 > 1;
    } else
      canRecurse = true;
    if (expected === actual)
      reason = null;
    else {
      t1 = this._limit;
      if (typeof t1 !== "number")
        return this._recursiveMatch$4$bailout(3, expected, actual, $location, depth, $.JSNumber_methods, $.JSArray_methods, canRecurse, t1);
      if (depth > t1)
        reason = $.StringDescription$("recursion depth limit exceeded");
      else if (canRecurse) {
        r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), depth + 1);
        reason = r != null ? $.StringDescription$(r) : null;
      } else if (false)
        if (!(typeof actual === "object" && actual !== null && !!actual.$isMap))
          reason = $.StringDescription$("expected a map");
        else {
          err = expected.length === actual.get$length(actual) ? "" : "different map lengths; ";
          for (t1 = $.get$iterator$ax(expected.get$keys()); reason = null, t1.moveNext$0() === true;) {
            t2 = t1.get$current();
            if (!actual.containsKey$1(t2)) {
              reason = $.StringDescription$(err);
              reason.add$1(reason, "missing map key ");
              reason.addDescriptionOf$1(t2);
              break;
            }
          }
          if (reason == null) {
            for (t1 = $.get$iterator$ax(actual.get$keys()); t1.moveNext$0() === true;) {
              t2 = t1.get$current();
              if (!expected.containsKey$1(t2)) {
                reason = $.StringDescription$(err);
                reason.add$1(reason, "extra map key ");
                reason.addDescriptionOf$1(t2);
                break;
              }
            }
            if (reason == null)
              for (t1 = $.get$iterator$ax(expected.get$keys()), t2 = depth + 1; t1.moveNext$0() === true;) {
                t3 = t1.get$current();
                if (t3 !== (t3 | 0))
                  throw $.iae(t3);
                if (t3 < 0 || t3 >= expected.length)
                  throw $.ioore(t3);
                reason = this._recursiveMatch$4(expected[t3], actual.$index(actual, t3), "with key <" + $.S(t3) + "> " + $.S($location), t2);
                if (reason != null)
                  break;
              }
          }
        }
      else {
        reason = $.StringDescription$("");
        eType = this.typeName$1(expected);
        aType = this.typeName$1(actual);
        t1 = $.$eq(eType, aType) === true;
        includeTypes = !t1;
        if (!t1 || depth > 1) {
          reason.add$1(reason, "expected ");
          if (includeTypes) {
            t1 = reason.add$1(reason, eType);
            t1.add$1(t1, ":");
          }
          t1 = reason.addDescriptionOf$1(expected);
          t1.add$1(t1, " but ");
        }
        reason.add$1(reason, "was ");
        if (includeTypes) {
          t1 = reason.add$1(reason, aType);
          t1.add$1(t1, ":");
        }
        reason.addDescriptionOf$1(actual);
      }
    }
    if (reason != null) {
      t1 = $.get$length$asx($location);
      if (typeof t1 !== "number")
        return this._recursiveMatch$4$bailout(4, 0, 0, $location, 0, t1, 0, 0, 0, reason);
      t1 = t1 > 0;
    } else
      t1 = false;
    if (t1)
      $.add$1$ax($.add$1$ax(reason, " "), $location);
    return reason;
  },
  _recursiveMatch$4$bailout: function(state0, expected, actual, $location, depth, t1, t2, canRecurse, t3, reason) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(depth);
      case 2:
        if (state0 === 2 || state0 === 0 && t1.$eq(depth, 0) !== true)
          switch (state0) {
            case 0:
              t2 = this._limit;
            case 2:
              state0 = 0;
              canRecurse = $.$gt$n(t2, 1) === true;
          }
        else
          canRecurse = true;
        t2 = $.getInterceptor(expected);
      case 3:
        if (state0 === 0 && t2.$eq(expected, actual) === true)
          reason = null;
        else
          switch (state0) {
            case 0:
              t3 = this._limit;
            case 3:
              state0 = 0;
              if (t1.$gt(depth, t3) === true)
                reason = $.StringDescription$("recursion depth limit exceeded");
              else if (typeof expected === "object" && expected !== null && (expected.constructor === Array || expected.$isIterable()) && canRecurse) {
                r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), t1.$add(depth, 1));
                reason = r != null ? $.StringDescription$(r) : null;
              } else if (typeof expected === "object" && expected !== null && !!expected.$isMap && canRecurse)
                if (!(typeof actual === "object" && actual !== null && !!actual.$isMap))
                  reason = $.StringDescription$("expected a map");
                else {
                  err = $.$eq(t2.get$length(expected), actual.get$length(actual)) === true ? "" : "different map lengths; ";
                  for (t3 = $.get$iterator$ax(expected.get$keys()); reason = null, t3.moveNext$0() === true;) {
                    t4 = t3.get$current();
                    if (!actual.containsKey$1(t4)) {
                      reason = $.StringDescription$(err);
                      reason.add$1(reason, "missing map key ");
                      reason.addDescriptionOf$1(t4);
                      break;
                    }
                  }
                  if (reason == null) {
                    for (t3 = $.get$iterator$ax(actual.get$keys()); t3.moveNext$0() === true;) {
                      t4 = t3.get$current();
                      if (!expected.containsKey$1(t4)) {
                        reason = $.StringDescription$(err);
                        reason.add$1(reason, "extra map key ");
                        reason.addDescriptionOf$1(t4);
                        break;
                      }
                    }
                    if (reason == null)
                      for (t3 = $.get$iterator$ax(expected.get$keys()); t3.moveNext$0() === true;) {
                        t4 = t3.get$current();
                        reason = this._recursiveMatch$4(t2.$index(expected, t4), actual.$index(actual, t4), "with key <" + $.S(t4) + "> " + $.S($location), t1.$add(depth, 1));
                        if (reason != null)
                          break;
                      }
                  }
                }
              else {
                reason = $.StringDescription$("");
                eType = this.typeName$1(expected);
                aType = this.typeName$1(actual);
                t2 = $.$eq(eType, aType) === true;
                includeTypes = !t2;
                if (!t2 || t1.$gt(depth, 1) === true) {
                  reason.add$1(reason, "expected ");
                  if (includeTypes) {
                    t1 = reason.add$1(reason, eType);
                    t1.add$1(t1, ":");
                  }
                  t1 = reason.addDescriptionOf$1(expected);
                  t1.add$1(t1, " but ");
                }
                reason.add$1(reason, "was ");
                if (includeTypes) {
                  t1 = reason.add$1(reason, aType);
                  t1.add$1(t1, ":");
                }
                reason.addDescriptionOf$1(actual);
              }
          }
      case 4:
        var r, err, t4, eType, aType, includeTypes;
        if (state0 === 4 || state0 === 0 && reason != null)
          switch (state0) {
            case 0:
              t1 = $.get$length$asx($location);
            case 4:
              state0 = 0;
              t3 = $.$gt$n(t1, 0) === true;
              t1 = t3;
          }
        else
          t1 = false;
        if (t1)
          $.add$1$ax($.add$1$ax(reason, " "), $location);
        return reason;
    }
  },
  get$_recursiveMatch: function() {
    return new $.BoundClosure$4(this, "_recursiveMatch$4");
  },
  typeName$1: function(x) {
    var t1, exception;
    try {
      if (x == null)
        return "null";
      t1 = $.get$runtimeType$(x);
      t1 = t1.toString$0(t1);
      return t1;
    } catch (exception) {
      $.unwrapException(exception);
      return "Unknown";
    }

  },
  _match$2: function(expected, actual) {
    var reason = this._recursiveMatch$4(expected, actual, "", 0);
    return reason == null ? null : $.toString$0(reason);
  },
  matches$2: function(_, item, matchState) {
    return this._match$2(this._expected, item) == null;
  },
  describe$1: function(description) {
    return description.addDescriptionOf$1(this._expected);
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    return mismatchDescription.add$1(mismatchDescription, this._match$2(this._expected, item));
  }
};

$$._Predicate = {"": "BaseMatcher;_matcher,_description",
  _matcher$1: function(arg0) {
    return this._matcher.call$1(arg0);
  },
  matches$2: function(_, item, matchState) {
    return this._matcher$1(item);
  },
  describe$1: function(description) {
    return description.add$1(description, this._description);
  }
};

$$.StringDescription = {"": "Object;_out",
  toString$0: function(_) {
    return this._out;
  },
  add$1: function(_, text) {
    this._out = $.S(this._out) + $.S(text);
    return this;
  },
  addDescriptionOf$1: function(value) {
    var t1, description, t2, t3;
    if (typeof value === "object" && value !== null && !!value.$isMatcher)
      value.describe$1(this);
    else if (typeof value === "string")
      this._addEscapedString$1(value);
    else {
      t1 = $.getInterceptor(value);
      if (value == null)
        description = "null";
      else {
        t2 = t1.toString$0(value);
        if (typeof t2 !== "string")
          return this.addDescriptionOf$1$bailout(1, value, t1, t2);
        description = t2;
      }
      if ($.JSString_methods.startsWith$1(description, "<") && $.JSString_methods.endsWith$1(description, ">") === true)
        this._out = $.S(this._out) + description;
      else {
        t2 = $.JSString_methods.startsWith$1(description, "Instance of");
        t3 = this._out;
        if (t2) {
          this._out = $.S(t3) + "<";
          this._out = $.S(this._out) + description;
          this._out = $.S(this._out) + ":";
          t2 = $.toString$0(t1.get$hashCode(value));
          this._out = $.S(this._out) + $.S(t2);
          this._out = $.S(this._out) + ">";
        } else {
          this._out = $.S(t3) + "<";
          this._out = $.S(this._out) + description;
          this._out = $.S(this._out) + ">";
        }
      }
    }
    return this;
  },
  addDescriptionOf$1$bailout: function(state0, value, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        var description, t3;
        if (state0 === 0 && typeof value === "object" && value !== null && !!value.$isMatcher)
          value.describe$1(this);
        else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && typeof value === "string")
                this._addEscapedString$1(value);
              else
                switch (state0) {
                  case 0:
                    t1 = $.getInterceptor(value);
                  case 1:
                    if (state0 === 0 && value == null)
                      description = "null";
                    else
                      switch (state0) {
                        case 0:
                          t2 = t1.toString$0(value);
                        case 1:
                          state0 = 0;
                          description = t2;
                      }
                    t2 = $.getInterceptor$s(description);
                    if (t2.startsWith$1(description, "<") && t2.endsWith$1(description, ">") === true)
                      this._out = $.S(this._out) + $.S(description);
                    else {
                      t2 = t2.startsWith$1(description, "Instance of");
                      t3 = this._out;
                      if (t2) {
                        this._out = $.S(t3) + "<";
                        this._out = $.S(this._out) + $.S(description);
                        this._out = $.S(this._out) + ":";
                        t2 = $.toString$0(t1.get$hashCode(value));
                        this._out = $.S(this._out) + $.S(t2);
                        this._out = $.S(this._out) + ">";
                      } else {
                        this._out = $.S(t3) + "<";
                        this._out = $.S(this._out) + $.S(description);
                        this._out = $.S(this._out) + ">";
                      }
                    }
                }
          }
        return this;
    }
  },
  _addEscapedString$1: function(string) {
    var i, t1;
    this._out = $.S(this._out) + "'";
    for (i = 0; i < string.length; ++i) {
      if (i >= string.length)
        throw $.ioore(i);
      t1 = this._escape$1(string[i]);
      this._out = $.S(this._out) + $.S(t1);
    }
    this._out = $.S(this._out) + "'";
  },
  _escape$1: function(ch) {
    if (ch === "'")
      return "'";
    else if (ch === "\n")
      return "\\n";
    else if (ch === "\r")
      return "\\r";
    else if (ch === "\t")
      return "\\t";
    else
      return ch;
  },
  StringDescription$1: function(init) {
    this._out = init;
  }
};

$$.TestFailure = {"": "Object;_message",
  toString$0: function(_) {
    return this._message;
  }
};

$$.DefaultFailureHandler = {"": "Object;",
  fail$1: function(reason) {
    throw $.$$throw($.TestFailure$(reason));
  },
  failMatch$5: function(actual, matcher, reason, matchState, verbose) {
    this.fail$1($._assertErrorFormatter.call$5(actual, matcher, reason, matchState, verbose));
  },
  DefaultFailureHandler$0: function() {
    if ($._assertErrorFormatter == null)
      $._assertErrorFormatter = $._defaultErrorFormatter;
  }
};

$$.mat2 = {"": "Object;col0<,col1<",
  toString$0: function(_) {
    return "[0] " + $.S(this.getRow$1(0)) + "\n" + "[1] " + $.S(this.getRow$1(1)) + "\n";
  },
  get$rows: function(_) {
    return 2;
  },
  get$length: function(_) {
    return 2;
  },
  $index: function(_, column) {
    switch (column) {
      case 0:
        return this.col0;
      case 1:
        return this.col1;
    }
    throw $.$$throw($.ArgumentError$(column));
  },
  $indexSet: function(_, column, arg) {
    switch (column) {
      case 0:
        this.col0 = arg;
        break;
      case 1:
        this.col1 = arg;
        break;
    }
    throw $.$$throw($.ArgumentError$(column));
  },
  getRow$1: function(row) {
    var r = $.vec2$zero();
    r.x = $.$index$asx(this.col0, row);
    r.y = $.$index$asx(this.col1, row);
    return r;
  },
  _mul_scale$1: function(arg) {
    var r, t1;
    r = $.mat2$zero();
    t1 = $.$mul$n($.get$x$x(this.col0), arg);
    $.set$x$x(r.col0, t1);
    t1 = $.$mul$n($.get$y$x(this.col0), arg);
    $.set$y$x(r.col0, t1);
    t1 = $.$mul$n($.get$x$x(this.col1), arg);
    $.set$x$x(r.col1, t1);
    t1 = $.$mul$n($.get$y$x(this.col1), arg);
    $.set$y$x(r.col1, t1);
    return r;
  },
  _mul_matrix$1: function(arg) {
    var r, t1;
    r = $.mat2$zero();
    t1 = $.$add$ns($.$mul$n($.get$x$x(this.col0), $.get$x$x(arg.get$col0())), $.$mul$n($.get$x$x(this.col1), $.get$y$x(arg.get$col0())));
    $.set$x$x(r.col0, t1);
    t1 = $.$add$ns($.$mul$n($.get$x$x(this.col0), $.get$x$x(arg.get$col1())), $.$mul$n($.get$x$x(this.col1), $.get$y$x(arg.get$col1())));
    $.set$x$x(r.col1, t1);
    t1 = $.$add$ns($.$mul$n($.get$y$x(this.col0), $.get$x$x(arg.get$col0())), $.$mul$n($.get$y$x(this.col1), $.get$y$x(arg.get$col0())));
    $.set$y$x(r.col0, t1);
    t1 = $.$add$ns($.$mul$n($.get$y$x(this.col0), $.get$x$x(arg.get$col1())), $.$mul$n($.get$y$x(this.col1), $.get$y$x(arg.get$col1())));
    $.set$y$x(r.col1, t1);
    return r;
  },
  _mul_vector$1: function(arg) {
    var r = $.vec2$zero();
    r.x = $.$add$ns($.$mul$n($.get$x$x(this.col0), arg.x), $.$mul$n($.get$x$x(this.col1), arg.y));
    r.y = $.$add$ns($.$mul$n($.get$y$x(this.col0), arg.x), $.$mul$n($.get$y$x(this.col1), arg.y));
    return r;
  },
  $mul: function(_, arg) {
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    if (typeof arg === "object" && arg !== null && !!arg.$isvec2)
      return this._mul_vector$1(arg);
    if (2 === $.get$rows$x(arg))
      return this._mul_matrix$1(arg);
    throw $.$$throw($.ArgumentError$(arg));
  },
  $add: function(_, arg) {
    var r, t1, t3, t5, t7, t9, t11, t13, t15;
    r = $.mat2$zero();
    t1 = $.get$x$x(this.col0);
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, arg, r, t1);
    t3 = $.get$x$x(arg.get$col0());
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, arg, r, t1, t3);
    $.set$x$x(r.col0, t1 + t3);
    t5 = $.get$y$x(this.col0);
    if (typeof t5 !== "number")
      return this.$$add$bailout(3, arg, r, 0, t5);
    t7 = $.get$y$x(arg.get$col0());
    if (typeof t7 !== "number")
      return this.$$add$bailout(4, arg, r, 0, t5, t7);
    $.set$y$x(r.col0, t5 + t7);
    t9 = $.get$x$x(this.col1);
    if (typeof t9 !== "number")
      return this.$$add$bailout(5, arg, r, 0, 0, t9);
    t11 = $.get$x$x(arg.get$col1());
    if (typeof t11 !== "number")
      return this.$$add$bailout(6, arg, r, 0, 0, t9, t11);
    $.set$x$x(r.col1, t9 + t11);
    t13 = $.get$y$x(this.col1);
    if (typeof t13 !== "number")
      return this.$$add$bailout(7, arg, r, 0, 0, 0, t13);
    t15 = $.get$y$x(arg.get$col1());
    if (typeof t15 !== "number")
      return this.$$add$bailout(8, 0, r, 0, 0, 0, t13, t15);
    $.set$y$x(r.col1, t13 + t15);
    return r;
  },
  $$add$bailout: function(state0, arg, r, t1, t3, t5, t7, t9) {
    switch (state0) {
      case 0:
        r = $.mat2$zero();
        t1 = $.get$x$x(this.col0);
      case 1:
        state0 = 0;
        t3 = $.get$x$x(arg.get$col0());
      case 2:
        state0 = 0;
        t3 = $.$add$ns(t1, t3);
        $.set$x$x(r.col0, t3);
        t3 = $.get$y$x(this.col0);
      case 3:
        state0 = 0;
        t5 = $.get$y$x(arg.get$col0());
      case 4:
        state0 = 0;
        t5 = $.$add$ns(t3, t5);
        $.set$y$x(r.col0, t5);
        t5 = $.get$x$x(this.col1);
      case 5:
        state0 = 0;
        t7 = $.get$x$x(arg.get$col1());
      case 6:
        state0 = 0;
        t7 = $.$add$ns(t5, t7);
        $.set$x$x(r.col1, t7);
        t7 = $.get$y$x(this.col1);
      case 7:
        state0 = 0;
        t9 = $.get$y$x(arg.get$col1());
      case 8:
        state0 = 0;
        t9 = $.$add$ns(t7, t9);
        $.set$y$x(r.col1, t9);
        return r;
    }
  },
  $sub: function(_, arg) {
    var r, t1, t3, t5, t7, t9, t11, t13, t15;
    r = $.mat2$zero();
    t1 = $.get$x$x(this.col0);
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, arg, r, t1);
    t3 = $.get$x$x(arg.get$col0());
    if (typeof t3 !== "number")
      return this.$$sub$bailout(2, arg, r, t1, t3);
    $.set$x$x(r.col0, t1 - t3);
    t5 = $.get$y$x(this.col0);
    if (typeof t5 !== "number")
      return this.$$sub$bailout(3, arg, r, 0, t5);
    t7 = $.get$y$x(arg.get$col0());
    if (typeof t7 !== "number")
      return this.$$sub$bailout(4, arg, r, 0, t5, t7);
    $.set$y$x(r.col0, t5 - t7);
    t9 = $.get$x$x(this.col1);
    if (typeof t9 !== "number")
      return this.$$sub$bailout(5, arg, r, 0, 0, t9);
    t11 = $.get$x$x(arg.get$col1());
    if (typeof t11 !== "number")
      return this.$$sub$bailout(6, arg, r, 0, 0, t9, t11);
    $.set$x$x(r.col1, t9 - t11);
    t13 = $.get$y$x(this.col1);
    if (typeof t13 !== "number")
      return this.$$sub$bailout(7, arg, r, 0, 0, 0, t13);
    t15 = $.get$y$x(arg.get$col1());
    if (typeof t15 !== "number")
      return this.$$sub$bailout(8, 0, r, 0, 0, 0, t13, t15);
    $.set$y$x(r.col1, t13 - t15);
    return r;
  },
  $$sub$bailout: function(state0, arg, r, t1, t3, t5, t7, t9) {
    switch (state0) {
      case 0:
        r = $.mat2$zero();
        t1 = $.get$x$x(this.col0);
      case 1:
        state0 = 0;
        t3 = $.get$x$x(arg.get$col0());
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
        $.set$x$x(r.col0, t3);
        t3 = $.get$y$x(this.col0);
      case 3:
        state0 = 0;
        t5 = $.get$y$x(arg.get$col0());
      case 4:
        state0 = 0;
        t5 = $.$sub$n(t3, t5);
        $.set$y$x(r.col0, t5);
        t5 = $.get$x$x(this.col1);
      case 5:
        state0 = 0;
        t7 = $.get$x$x(arg.get$col1());
      case 6:
        state0 = 0;
        t7 = $.$sub$n(t5, t7);
        $.set$x$x(r.col1, t7);
        t7 = $.get$y$x(this.col1);
      case 7:
        state0 = 0;
        t9 = $.get$y$x(arg.get$col1());
      case 8:
        state0 = 0;
        t9 = $.$sub$n(t7, t9);
        $.set$y$x(r.col1, t9);
        return r;
    }
  },
  $negate: function(_) {
    var r = $.mat2$zero();
    r.$indexSet(r, 0, $.$negate$n(this.$index(this, 0)));
    r.$indexSet(r, 1, $.$negate$n(this.$index(this, 1)));
    return r;
  },
  transposed$0: function() {
    var r, t1;
    r = $.mat2$zero();
    t1 = $.get$x$x(this.col0);
    $.set$x$x(r.col0, t1);
    t1 = $.get$x$x(this.col1);
    $.set$y$x(r.col0, t1);
    t1 = $.get$y$x(this.col0);
    $.set$x$x(r.col1, t1);
    t1 = $.get$y$x(this.col1);
    $.set$y$x(r.col1, t1);
    return r;
  },
  invert$0: function() {
    var t1, t3, t6, det, invDet, temp, t2, t4;
    t1 = $.get$x$x(this.col0);
    if (typeof t1 !== "number")
      return this.invert$0$bailout(1, t1);
    t3 = $.get$y$x(this.col1);
    if (typeof t3 !== "number")
      return this.invert$0$bailout(2, t1, t3);
    t3 = t1 * t3;
    t1 = $.get$y$x(this.col0);
    if (typeof t1 !== "number")
      return this.invert$0$bailout(3, t1, t3);
    t6 = $.get$x$x(this.col1);
    if (typeof t6 !== "number")
      return this.invert$0$bailout(4, t1, t3, t6);
    det = t3 - t1 * t6;
    if (det === 0)
      return 0;
    invDet = 1 / det;
    temp = $.get$x$x(this.col0);
    if (typeof temp !== "number")
      return this.invert$0$bailout(5, 0, 0, 0, det, invDet, temp);
    t2 = $.get$y$x(this.col1);
    if (typeof t2 !== "number")
      return this.invert$0$bailout(6, 0, 0, 0, det, invDet, temp, t2);
    $.set$x$x(this.col0, t2 * invDet);
    t4 = $.get$y$x(this.col0);
    if (typeof t4 !== "number")
      return this.invert$0$bailout(7, 0, 0, 0, det, invDet, temp, t4);
    $.set$y$x(this.col0, -t4 * invDet);
    t6 = $.get$x$x(this.col1);
    if (typeof t6 !== "number")
      return this.invert$0$bailout(8, 0, 0, 0, det, invDet, temp, 0, t6);
    $.set$x$x(this.col1, -t6 * invDet);
    $.set$y$x(this.col1, temp * invDet);
    return det;
  },
  invert$0$bailout: function(state0, t1, t3, t6, det, invDet, temp, t2, t5) {
    switch (state0) {
      case 0:
        t1 = $.get$x$x(this.col0);
      case 1:
        state0 = 0;
        t3 = $.get$y$x(this.col1);
      case 2:
        state0 = 0;
        t3 = $.$mul$n(t1, t3);
        t1 = $.get$y$x(this.col0);
      case 3:
        state0 = 0;
        t6 = $.get$x$x(this.col1);
      case 4:
        state0 = 0;
        det = $.$sub$n(t3, $.$mul$n(t1, t6));
        if ($.$eq(det, 0) === true)
          return 0;
        if (typeof det !== "number")
          throw $.iae(det);
        invDet = 1 / det;
        temp = $.get$x$x(this.col0);
      case 5:
        state0 = 0;
        t2 = $.get$y$x(this.col1);
      case 6:
        state0 = 0;
        t2 = $.$mul$n(t2, invDet);
        $.set$x$x(this.col0, t2);
        t2 = $.get$y$x(this.col0);
      case 7:
        state0 = 0;
        t5 = $.$mul$n($.$negate$n(t2), invDet);
        $.set$y$x(this.col0, t5);
        t5 = $.get$x$x(this.col1);
      case 8:
        var t7;
        state0 = 0;
        t7 = $.$mul$n($.$negate$n(t5), invDet);
        $.set$x$x(this.col1, t7);
        t7 = $.$mul$n(temp, invDet);
        $.set$y$x(this.col1, t7);
        return det;
    }
  },
  setRotation$1: function(radians) {
    var radians_, c, s;
    radians_ = $.toDouble$0$n(radians);
    c = Math.cos($.checkNum(radians_));
    s = Math.sin($.checkNum(radians_));
    $.set$x$x(this.col0, c);
    $.set$y$x(this.col0, s);
    $.set$x$x(this.col1, -s);
    $.set$y$x(this.col1, c);
  },
  clone$0: function(_) {
    return $.mat2$copy(this);
  },
  copyFrom$1: function(arg) {
    var t1 = $.get$x$x(arg.get$col0());
    $.set$x$x(this.col0, t1);
    t1 = $.get$y$x(arg.get$col0());
    $.set$y$x(this.col0, t1);
    t1 = $.get$x$x(arg.get$col1());
    $.set$x$x(this.col1, t1);
    t1 = $.get$y$x(arg.get$col1());
    $.set$y$x(this.col1, t1);
    return this;
  },
  add$1: function(_, o) {
    var t1, t3, t5, t7, t9, t11, t13, t15;
    t1 = $.get$x$x(this.col0);
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, o, t1);
    t3 = $.get$x$x(o.get$col0());
    if (typeof t3 !== "number")
      return this.add$1$bailout(2, o, t1, t3);
    $.set$x$x(this.col0, t1 + t3);
    t5 = $.get$y$x(this.col0);
    if (typeof t5 !== "number")
      return this.add$1$bailout(3, o, 0, t5);
    t7 = $.get$y$x(o.get$col0());
    if (typeof t7 !== "number")
      return this.add$1$bailout(4, o, 0, t5, t7);
    $.set$y$x(this.col0, t5 + t7);
    t9 = $.get$x$x(this.col1);
    if (typeof t9 !== "number")
      return this.add$1$bailout(5, o, 0, 0, t9);
    t11 = $.get$x$x(o.get$col1());
    if (typeof t11 !== "number")
      return this.add$1$bailout(6, o, 0, 0, t9, t11);
    $.set$x$x(this.col1, t9 + t11);
    t13 = $.get$y$x(this.col1);
    if (typeof t13 !== "number")
      return this.add$1$bailout(7, o, 0, 0, 0, t13);
    t15 = $.get$y$x(o.get$col1());
    if (typeof t15 !== "number")
      return this.add$1$bailout(8, 0, 0, 0, 0, t13, t15);
    $.set$y$x(this.col1, t13 + t15);
    return this;
  },
  add$1$bailout: function(state0, o, t1, t3, t5, t7, t9) {
    switch (state0) {
      case 0:
        t1 = $.get$x$x(this.col0);
      case 1:
        state0 = 0;
        t3 = $.get$x$x(o.get$col0());
      case 2:
        state0 = 0;
        t3 = $.$add$ns(t1, t3);
        $.set$x$x(this.col0, t3);
        t3 = $.get$y$x(this.col0);
      case 3:
        state0 = 0;
        t5 = $.get$y$x(o.get$col0());
      case 4:
        state0 = 0;
        t5 = $.$add$ns(t3, t5);
        $.set$y$x(this.col0, t5);
        t5 = $.get$x$x(this.col1);
      case 5:
        state0 = 0;
        t7 = $.get$x$x(o.get$col1());
      case 6:
        state0 = 0;
        t7 = $.$add$ns(t5, t7);
        $.set$x$x(this.col1, t7);
        t7 = $.get$y$x(this.col1);
      case 7:
        state0 = 0;
        t9 = $.get$y$x(o.get$col1());
      case 8:
        state0 = 0;
        t9 = $.$add$ns(t7, t9);
        $.set$y$x(this.col1, t9);
        return this;
    }
  },
  sub$1: function(o) {
    var t1, t3, t5, t7, t9, t11, t13, t15;
    t1 = $.get$x$x(this.col0);
    if (typeof t1 !== "number")
      return this.sub$1$bailout(1, o, t1);
    t3 = $.get$x$x(o.get$col0());
    if (typeof t3 !== "number")
      return this.sub$1$bailout(2, o, t1, t3);
    $.set$x$x(this.col0, t1 - t3);
    t5 = $.get$y$x(this.col0);
    if (typeof t5 !== "number")
      return this.sub$1$bailout(3, o, 0, t5);
    t7 = $.get$y$x(o.get$col0());
    if (typeof t7 !== "number")
      return this.sub$1$bailout(4, o, 0, t5, t7);
    $.set$y$x(this.col0, t5 - t7);
    t9 = $.get$x$x(this.col1);
    if (typeof t9 !== "number")
      return this.sub$1$bailout(5, o, 0, 0, t9);
    t11 = $.get$x$x(o.get$col1());
    if (typeof t11 !== "number")
      return this.sub$1$bailout(6, o, 0, 0, t9, t11);
    $.set$x$x(this.col1, t9 - t11);
    t13 = $.get$y$x(this.col1);
    if (typeof t13 !== "number")
      return this.sub$1$bailout(7, o, 0, 0, 0, t13);
    t15 = $.get$y$x(o.get$col1());
    if (typeof t15 !== "number")
      return this.sub$1$bailout(8, 0, 0, 0, 0, t13, t15);
    $.set$y$x(this.col1, t13 - t15);
    return this;
  },
  sub$1$bailout: function(state0, o, t1, t3, t5, t7, t9) {
    switch (state0) {
      case 0:
        t1 = $.get$x$x(this.col0);
      case 1:
        state0 = 0;
        t3 = $.get$x$x(o.get$col0());
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
        $.set$x$x(this.col0, t3);
        t3 = $.get$y$x(this.col0);
      case 3:
        state0 = 0;
        t5 = $.get$y$x(o.get$col0());
      case 4:
        state0 = 0;
        t5 = $.$sub$n(t3, t5);
        $.set$y$x(this.col0, t5);
        t5 = $.get$x$x(this.col1);
      case 5:
        state0 = 0;
        t7 = $.get$x$x(o.get$col1());
      case 6:
        state0 = 0;
        t7 = $.$sub$n(t5, t7);
        $.set$x$x(this.col1, t7);
        t7 = $.get$y$x(this.col1);
      case 7:
        state0 = 0;
        t9 = $.get$y$x(o.get$col1());
      case 8:
        state0 = 0;
        t9 = $.$sub$n(t7, t9);
        $.set$y$x(this.col1, t9);
        return this;
    }
  },
  transform$1: function(_, arg) {
    var t1, x_, y_;
    t1 = $.getInterceptor$x(arg);
    x_ = $.$add$ns($.$mul$n($.get$x$x(this.col0), t1.get$x(arg)), $.$mul$n($.get$x$x(this.col1), t1.get$y(arg)));
    y_ = $.$add$ns($.$mul$n($.get$y$x(this.col0), t1.get$x(arg)), $.$mul$n($.get$y$x(this.col1), t1.get$y(arg)));
    t1.set$x(arg, x_);
    t1.set$y(arg, y_);
    return arg;
  },
  transformed$2: function(arg, out) {
    if (out == null)
      out = $.vec2$copy(arg);
    else
      out.copyFrom$1(arg);
    return this.transform$1(this, out);
  },
  mat2$copy$1: function(other) {
    var t1;
    this.col0 = $.vec2$zero();
    this.col1 = $.vec2$zero();
    t1 = $.get$x$x(other.get$col0());
    $.set$x$x(this.col0, t1);
    t1 = $.get$y$x(other.get$col0());
    $.set$y$x(this.col0, t1);
    t1 = $.get$x$x(other.get$col1());
    $.set$x$x(this.col1, t1);
    t1 = $.get$y$x(other.get$col1());
    $.set$y$x(this.col1, t1);
  },
  mat2$zero$0: function() {
    this.col0 = $.vec2$zero();
    this.col1 = $.vec2$zero();
    $.set$x$x(this.col0, 0);
    $.set$y$x(this.col0, 0);
    $.set$x$x(this.col1, 0);
    $.set$y$x(this.col1, 0);
  }
};

$$.vec2 = {"": "Object;x*,y*",
  makeZero$0: function() {
    this.x = 0;
    this.y = 0;
    return this;
  },
  makeCopy$1: function(other) {
    var t1 = $.getInterceptor$x(other);
    this.x = t1.get$x(other);
    this.y = t1.get$y(other);
    return this;
  },
  makeRaw$2: function(x_, y_) {
    this.x = $.toDouble$0$n(x_);
    this.y = $.toDouble$0$n(y_);
    return this;
  },
  splat$1: function(arg) {
    var a = $.JSInt_methods.toDouble$0(arg);
    this.x = a;
    this.y = a;
    return this;
  },
  toString$0: function(_) {
    return $.S(this.x) + "," + $.S(this.y);
  },
  $negate: function(_) {
    return $.vec2$raw($.$negate$n(this.x), $.$negate$n(this.y));
  },
  $sub: function(_, other) {
    var t1, t3, t4;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    t3 = $.getInterceptor$x(other);
    t4 = t3.get$x(other);
    if (typeof t4 !== "number")
      return this.$$sub$bailout(2, other, t1, t4, t3);
    t4 = t1 - t4;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(3, other, t1, t4, t3);
    t3 = t3.get$y(other);
    if (typeof t3 !== "number")
      return this.$$sub$bailout(4, 0, t1, t4, t3);
    return $.vec2$raw(t4, t1 - t3);
  },
  $$sub$bailout: function(state0, other, t1, t4, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(other);
        t4 = t3.get$x(other);
      case 2:
        state0 = 0;
        t4 = $.$sub$n(t1, t4);
        t1 = this.y;
      case 3:
        state0 = 0;
        t3 = t3.get$y(other);
      case 4:
        state0 = 0;
        return $.vec2$raw(t4, $.$sub$n(t1, t3));
    }
  },
  $add: function(_, other) {
    var t1, t3, t4;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t3 = $.getInterceptor$x(other);
    t4 = t3.get$x(other);
    if (typeof t4 !== "number")
      return this.$$add$bailout(2, other, t1, t4, t3);
    t4 = t1 + t4;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, other, t1, t4, t3);
    t3 = t3.get$y(other);
    if (typeof t3 !== "number")
      return this.$$add$bailout(4, 0, t1, t4, t3);
    return $.vec2$raw(t4, t1 + t3);
  },
  $$add$bailout: function(state0, other, t1, t4, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(other);
        t4 = t3.get$x(other);
      case 2:
        state0 = 0;
        t4 = $.$add$ns(t1, t4);
        t1 = this.y;
      case 3:
        state0 = 0;
        t3 = t3.get$y(other);
      case 4:
        state0 = 0;
        return $.vec2$raw(t4, $.$add$ns(t1, t3));
    }
  },
  $div: function(_, other) {
    var o;
    if (typeof other === "number") {
      o = 1 / $.JSNumber_methods.toDouble$0(other);
      return $.vec2$raw($.$mul$n(this.x, o), $.$mul$n(this.y, o));
    }
    if (typeof other === "object" && other !== null && !!other.$isvec2)
      return $.vec2$raw($.$div$n(this.x, other.x), $.$div$n(this.y, other.y));
  },
  $mul: function(_, other) {
    var o, t1, t3, t6;
    if (typeof other === "number") {
      o = $.JSNumber_methods.toDouble$0(other);
      t1 = this.x;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(1, o, t1);
      t1 *= o;
      t3 = this.y;
      if (typeof t3 !== "number")
        return this.$$mul$bailout(2, o, t1, t3);
      return $.vec2$raw(t1, t3 * o);
    }
    if (typeof other === "object" && other !== null && !!other.$isvec2) {
      t1 = this.x;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(3, 0, t1, 0, other);
      t3 = other.x;
      if (typeof t3 !== "number")
        return this.$$mul$bailout(4, 0, t1, t3, other);
      t3 = t1 * t3;
      t1 = this.y;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(5, 0, t1, t3, other);
      t6 = other.y;
      if (typeof t6 !== "number")
        return this.$$mul$bailout(6, 0, t1, t3, 0, t6);
      return $.vec2$raw(t3, t1 * t6);
    }
  },
  $$mul$bailout: function(state0, o, t1, t3, other, t6) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && typeof other === "number")
          switch (state0) {
            case 0:
              o = $.JSNumber_methods.toDouble$0(other);
              t1 = this.x;
            case 1:
              state0 = 0;
              t1 = $.$mul$n(t1, o);
              t3 = this.y;
            case 2:
              state0 = 0;
              return $.vec2$raw(t1, $.$mul$n(t3, o));
          }
      case 3:
      case 4:
      case 5:
      case 6:
        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && typeof other === "object" && other !== null && !!other.$isvec2)
          switch (state0) {
            case 0:
              t1 = this.x;
            case 3:
              state0 = 0;
              t3 = other.x;
            case 4:
              state0 = 0;
              t3 = $.$mul$n(t1, t3);
              t1 = this.y;
            case 5:
              state0 = 0;
              t6 = other.y;
            case 6:
              state0 = 0;
              return $.vec2$raw(t3, $.$mul$n(t1, t6));
          }
    }
  },
  $index: function(_, i) {
    switch (i) {
      case 0:
        return this.x;
      case 1:
        return this.y;
    }
    return 0;
  },
  $indexSet: function(_, i, v) {
    switch (i) {
      case 0:
        this.x = v;
        break;
      case 1:
        this.y = v;
        break;
    }
  },
  get$length: function(_) {
    var t1, sum, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.get$length$bailout(1, t1);
    sum = 0 + t1 * t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.get$length$bailout(2, t3, sum);
    return $.sqrt(sum + t3 * t3);
  },
  get$length$bailout: function(state0, t1, sum) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        sum = 0 + t1;
        t1 = this.y;
      case 2:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        return $.sqrt(sum + t1);
    }
  },
  get$length2: function() {
    var t1, t2;
    t1 = this.x;
    t1 = $.$mul$n(t1, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = this.y;
    t2 = $.$mul$n(t2, t2);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return 0 + t1 + t2;
  },
  normalize$0: function() {
    var l = this.get$length(this);
    if (l === 0)
      return this;
    this.x = $.$div$n(this.x, l);
    this.y = $.$div$n(this.y, l);
    return this;
  },
  dot$1: function(other) {
    var t1, t3, t4, sum, t6;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.dot$1$bailout(1, other, t1);
    t3 = $.getInterceptor$x(other);
    t4 = t3.get$x(other);
    if (typeof t4 !== "number")
      return this.dot$1$bailout(2, other, t1, t3, t4);
    sum = 0 + t1 * t4;
    t6 = this.y;
    if (typeof t6 !== "number")
      return this.dot$1$bailout(3, other, 0, t3, t6, sum);
    t3 = t3.get$y(other);
    if (typeof t3 !== "number")
      return this.dot$1$bailout(4, 0, 0, t3, t6, sum);
    return sum + t6 * t3;
  },
  dot$1$bailout: function(state0, other, t1, t3, t4, sum) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(other);
        t4 = t3.get$x(other);
      case 2:
        state0 = 0;
        t4 = $.$mul$n(t1, t4);
        if (typeof t4 !== "number")
          throw $.iae(t4);
        sum = 0 + t4;
        t4 = this.y;
      case 3:
        state0 = 0;
        t3 = t3.get$y(other);
      case 4:
        state0 = 0;
        t3 = $.$mul$n(t4, t3);
        if (typeof t3 !== "number")
          throw $.iae(t3);
        return sum + t3;
    }
  },
  cross$1: function(other) {
    var t1 = $.getInterceptor$x(other);
    return $.$sub$n($.$mul$n(this.x, t1.get$y(other)), $.$mul$n(this.y, t1.get$x(other)));
  },
  set$xy: function(arg) {
    var t1 = $.getInterceptor$x(arg);
    this.x = t1.get$x(arg);
    this.y = t1.get$y(arg);
  },
  set$t: function(arg) {
    this.y = arg;
    return arg;
  },
  get$xy: function() {
    return $.vec2$(this.x, this.y);
  },
  add$1: function(_, arg) {
    var t1 = $.getInterceptor$x(arg);
    this.x = $.$add$ns(this.x, t1.get$x(arg));
    this.y = $.$add$ns(this.y, t1.get$y(arg));
    return this;
  },
  sub$1: function(arg) {
    var t1, t3, t5, t7;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.sub$1$bailout(1, arg, t1);
    t3 = arg.x;
    if (typeof t3 !== "number")
      return this.sub$1$bailout(2, arg, t1, t3);
    this.x = t1 - t3;
    t5 = this.y;
    if (typeof t5 !== "number")
      return this.sub$1$bailout(3, arg, 0, 0, t5);
    t7 = arg.y;
    if (typeof t7 !== "number")
      return this.sub$1$bailout(4, 0, 0, 0, t5, t7);
    this.y = t5 - t7;
    return this;
  },
  sub$1$bailout: function(state0, arg, t1, t3, t5, t7) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = arg.x;
      case 2:
        state0 = 0;
        this.x = $.$sub$n(t1, t3);
        t5 = this.y;
      case 3:
        state0 = 0;
        t7 = arg.y;
      case 4:
        state0 = 0;
        this.y = $.$sub$n(t5, t7);
        return this;
    }
  },
  scale$1: function(_, arg) {
    var a, t1, t3;
    a = $.toDouble$0$n(arg);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.scale$1$bailout(1, a, t1);
    this.x = t1 * a;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.scale$1$bailout(2, a, 0, t3);
    this.y = t3 * a;
    return this;
  },
  scale$1$bailout: function(state0, a, t1, t3) {
    switch (state0) {
      case 0:
        a = $.toDouble$0$n(arg);
        t1 = this.x;
      case 1:
        state0 = 0;
        this.x = $.$mul$n(t1, a);
        t3 = this.y;
      case 2:
        state0 = 0;
        this.y = $.$mul$n(t3, a);
        return this;
    }
  },
  negate$0: function() {
    this.x = $.$negate$n(this.x);
    this.y = $.$negate$n(this.y);
    return this;
  },
  absolute$0: function() {
    this.x = $.abs$0$n(this.x);
    this.y = $.abs$0$n(this.y);
    return this;
  },
  clone$0: function(_) {
    return $.vec2$copy(this);
  },
  copyFrom$1: function(arg) {
    var t1 = $.getInterceptor$x(arg);
    this.x = t1.get$x(arg);
    this.y = t1.get$y(arg);
    return this;
  },
  setComponents$2: function(x_, y_) {
    this.x = $.JSNumber_methods.toDouble$0(x_);
    this.y = $.JSNumber_methods.toDouble$0(y_);
    return this;
  },
  vec2$raw$2: function(x_, y_) {
    this.makeRaw$2(x_, y_);
  },
  vec2$copy$1: function(other) {
    this.makeCopy$1(other);
  },
  vec2$2: function(x_, y_) {
    var t1;
    this.y = 0;
    this.x = 0;
    if (typeof x_ === "object" && x_ !== null && !!x_.$isvec2) {
      this.set$xy(x_.get$xy());
      return;
    }
    t1 = typeof x_ === "number";
    if (t1 && typeof y_ === "number") {
      this.x = $.toDouble$0$n(x_);
      this.y = $.toDouble$0$n(y_);
      return;
    }
    if (t1) {
      t1 = $.JSNumber_methods.toDouble$0(x_);
      this.y = t1;
      this.x = t1;
      return;
    }
  },
  vec2$zero$0: function() {
    this.makeZero$0();
  },
  $isvec2: true
};

$$.vec3 = {"": "Object;x*,y*,z*",
  makeZero$0: function() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    return this;
  },
  makeCopy$1: function(other) {
    var t1 = $.getInterceptor$x(other);
    this.x = t1.get$x(other);
    this.y = t1.get$y(other);
    this.z = t1.get$z(other);
    return this;
  },
  makeRaw$3: function(x_, y_, z_) {
    this.x = $.toDouble$0$n(x_);
    this.y = $.toDouble$0$n(y_);
    this.z = $.toDouble$0$n(z_);
    return this;
  },
  toString$0: function(_) {
    return $.S(this.x) + "," + $.S(this.y) + "," + $.S(this.z);
  },
  $negate: function(_) {
    var t1, t3, t5;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$negate$bailout(1, t1);
    t1 = -t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.$$negate$bailout(2, t1, t3);
    t3 = -t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.$$negate$bailout(3, t1, t3, t5);
    return $.vec3$raw(t1, t3, -t5);
  },
  $$negate$bailout: function(state0, t1, t3, t5) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$negate$n(t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        t3 = $.$negate$n(t3);
        t5 = this.z;
      case 3:
        state0 = 0;
        return $.vec3$raw(t1, t3, $.$negate$n(t5));
    }
  },
  $sub: function(_, other) {
    var t1, t3, t4, t7;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    t3 = $.getInterceptor$x(other);
    t4 = t3.get$x(other);
    if (typeof t4 !== "number")
      return this.$$sub$bailout(2, other, t1, t4, t3);
    t4 = t1 - t4;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(3, other, t1, t4, t3);
    t7 = t3.get$y(other);
    if (typeof t7 !== "number")
      return this.$$sub$bailout(4, other, t1, t4, t3, t7);
    t7 = t1 - t7;
    t1 = this.z;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(5, other, t1, t4, t3, t7);
    t3 = t3.get$z(other);
    if (typeof t3 !== "number")
      return this.$$sub$bailout(6, 0, t1, t4, t3, t7);
    return $.vec3$raw(t4, t7, t1 - t3);
  },
  $$sub$bailout: function(state0, other, t1, t4, t3, t7) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(other);
        t4 = t3.get$x(other);
      case 2:
        state0 = 0;
        t4 = $.$sub$n(t1, t4);
        t1 = this.y;
      case 3:
        state0 = 0;
        t7 = t3.get$y(other);
      case 4:
        state0 = 0;
        t7 = $.$sub$n(t1, t7);
        t1 = this.z;
      case 5:
        state0 = 0;
        t3 = t3.get$z(other);
      case 6:
        state0 = 0;
        return $.vec3$raw(t4, t7, $.$sub$n(t1, t3));
    }
  },
  $add: function(_, other) {
    var t1, t3, t4, t7;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t3 = $.getInterceptor$x(other);
    t4 = t3.get$x(other);
    if (typeof t4 !== "number")
      return this.$$add$bailout(2, other, t1, t4, t3);
    t4 = t1 + t4;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, other, t1, t4, t3);
    t7 = t3.get$y(other);
    if (typeof t7 !== "number")
      return this.$$add$bailout(4, other, t1, t4, t3, t7);
    t7 = t1 + t7;
    t1 = this.z;
    if (typeof t1 !== "number")
      return this.$$add$bailout(5, other, t1, t4, t3, t7);
    t3 = t3.get$z(other);
    if (typeof t3 !== "number")
      return this.$$add$bailout(6, 0, t1, t4, t3, t7);
    return $.vec3$raw(t4, t7, t1 + t3);
  },
  $$add$bailout: function(state0, other, t1, t4, t3, t7) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(other);
        t4 = t3.get$x(other);
      case 2:
        state0 = 0;
        t4 = $.$add$ns(t1, t4);
        t1 = this.y;
      case 3:
        state0 = 0;
        t7 = t3.get$y(other);
      case 4:
        state0 = 0;
        t7 = $.$add$ns(t1, t7);
        t1 = this.z;
      case 5:
        state0 = 0;
        t3 = t3.get$z(other);
      case 6:
        state0 = 0;
        return $.vec3$raw(t4, t7, $.$add$ns(t1, t3));
    }
  },
  $div: function(_, other) {
    var o;
    if (typeof other === "number") {
      o = 1 / $.JSNumber_methods.toDouble$0(other);
      return $.vec3$raw($.$mul$n(this.x, o), $.$mul$n(this.y, o), $.$mul$n(this.z, o));
    }
    if (typeof other === "object" && other !== null && !!other.$isvec3)
      return $.vec3$raw($.$div$n(this.x, other.x), $.$div$n(this.y, other.y), $.$div$n(this.z, other.z));
  },
  $mul: function(_, other) {
    var o, t1, t3, t5, t6, t9;
    if (typeof other === "number") {
      o = $.JSNumber_methods.toDouble$0(other);
      t1 = this.x;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(1, o, t1);
      t1 *= o;
      t3 = this.y;
      if (typeof t3 !== "number")
        return this.$$mul$bailout(2, o, t1, t3);
      t3 *= o;
      t5 = this.z;
      if (typeof t5 !== "number")
        return this.$$mul$bailout(3, o, t1, t3, t5);
      return $.vec3$raw(t1, t3, t5 * o);
    }
    if (typeof other === "object" && other !== null && !!other.$isvec3) {
      t1 = this.x;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(4, 0, t1, 0, 0, other);
      t3 = other.x;
      if (typeof t3 !== "number")
        return this.$$mul$bailout(5, 0, t1, t3, 0, other);
      t3 = t1 * t3;
      t1 = this.y;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(6, 0, t1, t3, 0, other);
      t6 = other.y;
      if (typeof t6 !== "number")
        return this.$$mul$bailout(7, 0, t1, t3, 0, other, t6);
      t6 = t1 * t6;
      t1 = this.z;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(8, 0, t1, t3, 0, other, t6);
      t9 = other.z;
      if (typeof t9 !== "number")
        return this.$$mul$bailout(9, 0, t1, t3, 0, 0, t6, t9);
      return $.vec3$raw(t3, t6, t1 * t9);
    }
  },
  $$mul$bailout: function(state0, o, t1, t3, t5, other, t6, t9) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof other === "number")
          switch (state0) {
            case 0:
              o = $.JSNumber_methods.toDouble$0(other);
              t1 = this.x;
            case 1:
              state0 = 0;
              t1 = $.$mul$n(t1, o);
              t3 = this.y;
            case 2:
              state0 = 0;
              t3 = $.$mul$n(t3, o);
              t5 = this.z;
            case 3:
              state0 = 0;
              return $.vec3$raw(t1, t3, $.$mul$n(t5, o));
          }
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && typeof other === "object" && other !== null && !!other.$isvec3)
          switch (state0) {
            case 0:
              t1 = this.x;
            case 4:
              state0 = 0;
              t3 = other.x;
            case 5:
              state0 = 0;
              t3 = $.$mul$n(t1, t3);
              t1 = this.y;
            case 6:
              state0 = 0;
              t6 = other.y;
            case 7:
              state0 = 0;
              t6 = $.$mul$n(t1, t6);
              t1 = this.z;
            case 8:
              state0 = 0;
              t9 = other.z;
            case 9:
              state0 = 0;
              return $.vec3$raw(t3, t6, $.$mul$n(t1, t9));
          }
    }
  },
  $index: function(_, i) {
    switch (i) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
    }
    return 0;
  },
  $indexSet: function(_, i, v) {
    switch (i) {
      case 0:
        this.x = v;
        break;
      case 1:
        this.y = v;
        break;
      case 2:
        this.z = v;
        break;
    }
  },
  get$length: function(_) {
    var t1, sum, t3, t5;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.get$length$bailout(1, t1);
    sum = 0 + t1 * t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.get$length$bailout(2, t3, sum);
    sum += t3 * t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.get$length$bailout(3, t5, sum);
    return $.sqrt(sum + t5 * t5);
  },
  get$length$bailout: function(state0, t1, sum) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        sum = 0 + t1;
        t1 = this.y;
      case 2:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        sum += t1;
        t1 = this.z;
      case 3:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        return $.sqrt(sum + t1);
    }
  },
  dot$1: function(other) {
    var t1, t3, t4, sum, t6, t8, t10;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.dot$1$bailout(1, other, t1);
    t3 = $.getInterceptor$x(other);
    t4 = t3.get$x(other);
    if (typeof t4 !== "number")
      return this.dot$1$bailout(2, other, t1, t3, t4);
    sum = 0 + t1 * t4;
    t6 = this.y;
    if (typeof t6 !== "number")
      return this.dot$1$bailout(3, other, 0, t3, t6, sum);
    t8 = t3.get$y(other);
    if (typeof t8 !== "number")
      return this.dot$1$bailout(4, other, 0, t3, t6, sum, t8);
    sum += t6 * t8;
    t10 = this.z;
    if (typeof t10 !== "number")
      return this.dot$1$bailout(5, other, 0, t3, 0, sum, t10);
    t3 = t3.get$z(other);
    if (typeof t3 !== "number")
      return this.dot$1$bailout(6, 0, 0, t3, 0, sum, t10);
    return sum + t10 * t3;
  },
  dot$1$bailout: function(state0, other, t1, t3, t4, sum, t6) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(other);
        t4 = t3.get$x(other);
      case 2:
        state0 = 0;
        t4 = $.$mul$n(t1, t4);
        if (typeof t4 !== "number")
          throw $.iae(t4);
        sum = 0 + t4;
        t4 = this.y;
      case 3:
        state0 = 0;
        t6 = t3.get$y(other);
      case 4:
        state0 = 0;
        t6 = $.$mul$n(t4, t6);
        if (typeof t6 !== "number")
          throw $.iae(t6);
        sum += t6;
        t6 = this.z;
      case 5:
        state0 = 0;
        t3 = t3.get$z(other);
      case 6:
        state0 = 0;
        t3 = $.$mul$n(t6, t3);
        if (typeof t3 !== "number")
          throw $.iae(t3);
        return sum + t3;
    }
  },
  cross$2: function(other, out) {
    var t1, t2;
    if (out == null)
      out = $.vec3$zero();
    t1 = $.getInterceptor$x(other);
    t2 = $.getInterceptor$x(out);
    t2.set$x(out, $.$sub$n($.$mul$n(this.y, t1.get$z(other)), $.$mul$n(this.z, t1.get$y(other))));
    t2.set$y(out, $.$sub$n($.$mul$n(this.z, t1.get$x(other)), $.$mul$n(this.x, t1.get$z(other))));
    t2.set$z(out, $.$sub$n($.$mul$n(this.x, t1.get$y(other)), $.$mul$n(this.y, t1.get$x(other))));
    return out;
  },
  cross$1: function(other) {
    return this.cross$2(other, null);
  },
  set$t: function(arg) {
    this.y = arg;
    return arg;
  },
  add$1: function(_, arg) {
    var t1 = $.getInterceptor$x(arg);
    this.x = $.$add$ns(this.x, t1.get$x(arg));
    this.y = $.$add$ns(this.y, t1.get$y(arg));
    this.z = $.$add$ns(this.z, t1.get$z(arg));
    return this;
  },
  sub$1: function(arg) {
    var t1, t3, t5, t7, t9, t11;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.sub$1$bailout(1, arg, t1);
    t3 = arg.x;
    if (typeof t3 !== "number")
      return this.sub$1$bailout(2, arg, t1, t3);
    this.x = t1 - t3;
    t5 = this.y;
    if (typeof t5 !== "number")
      return this.sub$1$bailout(3, arg, 0, 0, t5);
    t7 = arg.y;
    if (typeof t7 !== "number")
      return this.sub$1$bailout(4, arg, 0, 0, t5, t7);
    this.y = t5 - t7;
    t9 = this.z;
    if (typeof t9 !== "number")
      return this.sub$1$bailout(5, arg, 0, 0, 0, 0, t9);
    t11 = arg.get$z(arg);
    if (typeof t11 !== "number")
      return this.sub$1$bailout(6, 0, 0, 0, 0, 0, t9, t11);
    this.z = t9 - t11;
    return this;
  },
  sub$1$bailout: function(state0, arg, t1, t3, t5, t7, t9, t11) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = arg.x;
      case 2:
        state0 = 0;
        this.x = $.$sub$n(t1, t3);
        t5 = this.y;
      case 3:
        state0 = 0;
        t7 = arg.y;
      case 4:
        state0 = 0;
        this.y = $.$sub$n(t5, t7);
        t9 = this.z;
      case 5:
        state0 = 0;
        t11 = arg.get$z(arg);
      case 6:
        state0 = 0;
        this.z = $.$sub$n(t9, t11);
        return this;
    }
  },
  scale$1: function(_, arg) {
    var a, t1, t3, t5;
    a = $.toDouble$0$n(arg);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.scale$1$bailout(1, a, t1);
    this.x = t1 * a;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.scale$1$bailout(2, a, 0, t3);
    this.y = t3 * a;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.scale$1$bailout(3, a, 0, 0, t5);
    this.z = t5 * a;
    return this;
  },
  scale$1$bailout: function(state0, a, t1, t3, t5) {
    switch (state0) {
      case 0:
        a = $.toDouble$0$n(arg);
        t1 = this.x;
      case 1:
        state0 = 0;
        this.x = $.$mul$n(t1, a);
        t3 = this.y;
      case 2:
        state0 = 0;
        this.y = $.$mul$n(t3, a);
        t5 = this.z;
      case 3:
        state0 = 0;
        this.z = $.$mul$n(t5, a);
        return this;
    }
  },
  clone$0: function(_) {
    return $.vec3$copy(this);
  },
  copyFrom$1: function(arg) {
    var t1 = $.getInterceptor$x(arg);
    this.x = t1.get$x(arg);
    this.y = t1.get$y(arg);
    this.z = t1.get$z(arg);
    return this;
  },
  vec3$copy$1: function(other) {
    this.makeCopy$1(other);
  },
  vec3$raw$3: function(x_, y_, z_) {
    this.makeRaw$3(x_, y_, z_);
  },
  vec3$zero$0: function() {
    this.makeZero$0();
  },
  $isvec3: true
};

$$.vec4 = {"": "Object;x*,y*,z*,w<",
  makeZero$0: function() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.w = 0;
    return this;
  },
  makeCopy$1: function(other) {
    var t1 = $.getInterceptor$x(other);
    this.x = t1.get$x(other);
    this.y = t1.get$y(other);
    this.z = t1.get$z(other);
    this.w = other.get$w();
    return this;
  },
  makeRaw$4: function(x_, y_, z_, w_) {
    this.x = $.toDouble$0$n(x_);
    this.y = $.toDouble$0$n(y_);
    this.z = $.toDouble$0$n(z_);
    this.w = $.toDouble$0$n(w_);
    return this;
  },
  toString$0: function(_) {
    return $.S(this.x) + "," + $.S(this.y) + "," + $.S(this.z) + "," + $.S(this.w);
  },
  $negate: function(_) {
    var t1, t3, t5, t7;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$negate$bailout(1, t1);
    t1 = -t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.$$negate$bailout(2, t1, t3);
    t3 = -t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.$$negate$bailout(3, t1, t3, t5);
    t5 = -t5;
    t7 = this.w;
    if (typeof t7 !== "number")
      return this.$$negate$bailout(4, t1, t3, t5, t7);
    return $.vec4$raw(t1, t3, t5, -t7);
  },
  $$negate$bailout: function(state0, t1, t3, t5, t7) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$negate$n(t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        t3 = $.$negate$n(t3);
        t5 = this.z;
      case 3:
        state0 = 0;
        t5 = $.$negate$n(t5);
        t7 = this.w;
      case 4:
        state0 = 0;
        return $.vec4$raw(t1, t3, t5, $.$negate$n(t7));
    }
  },
  $sub: function(_, other) {
    var t1, t3, t4, t7, t12;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    t3 = $.getInterceptor$x(other);
    t4 = t3.get$x(other);
    if (typeof t4 !== "number")
      return this.$$sub$bailout(2, other, t1, t4, t3);
    t4 = t1 - t4;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(3, other, t1, t4, t3);
    t7 = t3.get$y(other);
    if (typeof t7 !== "number")
      return this.$$sub$bailout(4, other, t1, t4, t3, t7);
    t7 = t1 - t7;
    t1 = this.z;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(5, other, t1, t4, t3, t7);
    t3 = t3.get$z(other);
    if (typeof t3 !== "number")
      return this.$$sub$bailout(6, other, t1, t4, t3, t7);
    t3 = t1 - t3;
    t1 = this.w;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(7, other, t1, t4, t3, t7);
    t12 = other.get$w();
    if (typeof t12 !== "number")
      return this.$$sub$bailout(8, 0, t1, t4, t3, t7, t12);
    return $.vec4$raw(t4, t7, t3, t1 - t12);
  },
  $$sub$bailout: function(state0, other, t1, t4, t3, t7, t12) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(other);
        t4 = t3.get$x(other);
      case 2:
        state0 = 0;
        t4 = $.$sub$n(t1, t4);
        t1 = this.y;
      case 3:
        state0 = 0;
        t7 = t3.get$y(other);
      case 4:
        state0 = 0;
        t7 = $.$sub$n(t1, t7);
        t1 = this.z;
      case 5:
        state0 = 0;
        t3 = t3.get$z(other);
      case 6:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
        t1 = this.w;
      case 7:
        state0 = 0;
        t12 = other.get$w();
      case 8:
        state0 = 0;
        return $.vec4$raw(t4, t7, t3, $.$sub$n(t1, t12));
    }
  },
  $add: function(_, other) {
    var t1, t3, t4, t7, t12;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t3 = $.getInterceptor$x(other);
    t4 = t3.get$x(other);
    if (typeof t4 !== "number")
      return this.$$add$bailout(2, other, t1, t4, t3);
    t4 = t1 + t4;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, other, t1, t4, t3);
    t7 = t3.get$y(other);
    if (typeof t7 !== "number")
      return this.$$add$bailout(4, other, t1, t4, t3, t7);
    t7 = t1 + t7;
    t1 = this.z;
    if (typeof t1 !== "number")
      return this.$$add$bailout(5, other, t1, t4, t3, t7);
    t3 = t3.get$z(other);
    if (typeof t3 !== "number")
      return this.$$add$bailout(6, other, t1, t4, t3, t7);
    t3 = t1 + t3;
    t1 = this.w;
    if (typeof t1 !== "number")
      return this.$$add$bailout(7, other, t1, t4, t3, t7);
    t12 = other.get$w();
    if (typeof t12 !== "number")
      return this.$$add$bailout(8, 0, t1, t4, t3, t7, t12);
    return $.vec4$raw(t4, t7, t3, t1 + t12);
  },
  $$add$bailout: function(state0, other, t1, t4, t3, t7, t12) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(other);
        t4 = t3.get$x(other);
      case 2:
        state0 = 0;
        t4 = $.$add$ns(t1, t4);
        t1 = this.y;
      case 3:
        state0 = 0;
        t7 = t3.get$y(other);
      case 4:
        state0 = 0;
        t7 = $.$add$ns(t1, t7);
        t1 = this.z;
      case 5:
        state0 = 0;
        t3 = t3.get$z(other);
      case 6:
        state0 = 0;
        t3 = $.$add$ns(t1, t3);
        t1 = this.w;
      case 7:
        state0 = 0;
        t12 = other.get$w();
      case 8:
        state0 = 0;
        return $.vec4$raw(t4, t7, t3, $.$add$ns(t1, t12));
    }
  },
  $div: function(_, other) {
    var o;
    if (typeof other === "number") {
      o = 1 / $.JSNumber_methods.toDouble$0(other);
      return $.vec4$raw($.$mul$n(this.x, o), $.$mul$n(this.y, o), $.$mul$n(this.z, o), $.$mul$n(this.w, o));
    }
    if (typeof other === "object" && other !== null && !!other.$isvec4)
      return $.vec4$raw($.$div$n(this.x, other.x), $.$div$n(this.y, other.y), $.$div$n(this.z, other.z), $.$div$n(this.w, other.w));
  },
  $mul: function(_, other) {
    var o, t1, t3, t5, t7, t6, t9, t12;
    if (typeof other === "number") {
      o = $.JSNumber_methods.toDouble$0(other);
      t1 = this.x;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(1, o, t1);
      t1 *= o;
      t3 = this.y;
      if (typeof t3 !== "number")
        return this.$$mul$bailout(2, o, t1, t3);
      t3 *= o;
      t5 = this.z;
      if (typeof t5 !== "number")
        return this.$$mul$bailout(3, o, t1, t3, t5);
      t5 *= o;
      t7 = this.w;
      if (typeof t7 !== "number")
        return this.$$mul$bailout(4, o, t1, t3, t5, t7);
      return $.vec4$raw(t1, t3, t5, t7 * o);
    }
    if (typeof other === "object" && other !== null && !!other.$isvec4) {
      t1 = this.x;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(5, 0, t1, 0, 0, 0, other);
      t3 = other.x;
      if (typeof t3 !== "number")
        return this.$$mul$bailout(6, 0, t1, t3, 0, 0, other);
      t3 = t1 * t3;
      t1 = this.y;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(7, 0, t1, t3, 0, 0, other);
      t6 = other.y;
      if (typeof t6 !== "number")
        return this.$$mul$bailout(8, 0, t1, t3, 0, 0, other, t6);
      t6 = t1 * t6;
      t1 = this.z;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(9, 0, t1, t3, 0, 0, other, t6);
      t9 = other.z;
      if (typeof t9 !== "number")
        return this.$$mul$bailout(10, 0, t1, t3, 0, 0, other, t6, t9);
      t9 = t1 * t9;
      t1 = this.w;
      if (typeof t1 !== "number")
        return this.$$mul$bailout(11, 0, t1, t3, 0, 0, other, t6, t9);
      t12 = other.w;
      if (typeof t12 !== "number")
        return this.$$mul$bailout(12, 0, t1, t3, 0, 0, 0, t6, t9, t12);
      return $.vec4$raw(t3, t6, t9, t1 * t12);
    }
  },
  $$mul$bailout: function(state0, o, t1, t3, t5, t7, other, t6, t9, t12) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof other === "number")
          switch (state0) {
            case 0:
              o = $.JSNumber_methods.toDouble$0(other);
              t1 = this.x;
            case 1:
              state0 = 0;
              t1 = $.$mul$n(t1, o);
              t3 = this.y;
            case 2:
              state0 = 0;
              t3 = $.$mul$n(t3, o);
              t5 = this.z;
            case 3:
              state0 = 0;
              t5 = $.$mul$n(t5, o);
              t7 = this.w;
            case 4:
              state0 = 0;
              return $.vec4$raw(t1, t3, t5, $.$mul$n(t7, o));
          }
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        if (state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && typeof other === "object" && other !== null && !!other.$isvec4)
          switch (state0) {
            case 0:
              t1 = this.x;
            case 5:
              state0 = 0;
              t3 = other.x;
            case 6:
              state0 = 0;
              t3 = $.$mul$n(t1, t3);
              t1 = this.y;
            case 7:
              state0 = 0;
              t6 = other.y;
            case 8:
              state0 = 0;
              t6 = $.$mul$n(t1, t6);
              t1 = this.z;
            case 9:
              state0 = 0;
              t9 = other.z;
            case 10:
              state0 = 0;
              t9 = $.$mul$n(t1, t9);
              t1 = this.w;
            case 11:
              state0 = 0;
              t12 = other.w;
            case 12:
              state0 = 0;
              return $.vec4$raw(t3, t6, t9, $.$mul$n(t1, t12));
          }
    }
  },
  $index: function(_, i) {
    switch (i) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
    }
    return 0;
  },
  $indexSet: function(_, i, v) {
    switch (i) {
      case 0:
        this.x = v;
        break;
      case 1:
        this.y = v;
        break;
      case 2:
        this.z = v;
        break;
      case 3:
        this.w = v;
        break;
    }
  },
  get$length: function(_) {
    var t1, sum, t3, t5, t7;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.get$length$bailout(1, t1);
    sum = 0 + t1 * t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.get$length$bailout(2, t3, sum);
    sum += t3 * t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.get$length$bailout(3, t5, sum);
    sum += t5 * t5;
    t7 = this.w;
    if (typeof t7 !== "number")
      return this.get$length$bailout(4, t7, sum);
    return $.sqrt(sum + t7 * t7);
  },
  get$length$bailout: function(state0, t1, sum) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        sum = 0 + t1;
        t1 = this.y;
      case 2:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        sum += t1;
        t1 = this.z;
      case 3:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        sum += t1;
        t1 = this.w;
      case 4:
        state0 = 0;
        t1 = $.$mul$n(t1, t1);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        return $.sqrt(sum + t1);
    }
  },
  dot$1: function(other) {
    var t1, t3, t4, sum, t6, t8, t10, t13, t15;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.dot$1$bailout(1, other, t1);
    t3 = $.getInterceptor$x(other);
    t4 = t3.get$x(other);
    if (typeof t4 !== "number")
      return this.dot$1$bailout(2, other, t1, t3, t4);
    sum = 0 + t1 * t4;
    t6 = this.y;
    if (typeof t6 !== "number")
      return this.dot$1$bailout(3, other, 0, t3, t6, sum);
    t8 = t3.get$y(other);
    if (typeof t8 !== "number")
      return this.dot$1$bailout(4, other, 0, t3, t6, sum, t8);
    sum += t6 * t8;
    t10 = this.z;
    if (typeof t10 !== "number")
      return this.dot$1$bailout(5, other, 0, t3, 0, sum, t10);
    t3 = t3.get$z(other);
    if (typeof t3 !== "number")
      return this.dot$1$bailout(6, other, 0, t3, 0, sum, t10);
    sum += t10 * t3;
    t13 = this.w;
    if (typeof t13 !== "number")
      return this.dot$1$bailout(7, other, 0, t13, 0, sum);
    t15 = other.get$w();
    if (typeof t15 !== "number")
      return this.dot$1$bailout(8, 0, 0, t13, 0, sum, 0, t15);
    return sum + t13 * t15;
  },
  dot$1$bailout: function(state0, other, t1, t3, t4, sum, t6, t9) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(other);
        t4 = t3.get$x(other);
      case 2:
        state0 = 0;
        t4 = $.$mul$n(t1, t4);
        if (typeof t4 !== "number")
          throw $.iae(t4);
        sum = 0 + t4;
        t4 = this.y;
      case 3:
        state0 = 0;
        t6 = t3.get$y(other);
      case 4:
        state0 = 0;
        t6 = $.$mul$n(t4, t6);
        if (typeof t6 !== "number")
          throw $.iae(t6);
        sum += t6;
        t6 = this.z;
      case 5:
        state0 = 0;
        t3 = t3.get$z(other);
      case 6:
        state0 = 0;
        t3 = $.$mul$n(t6, t3);
        if (typeof t3 !== "number")
          throw $.iae(t3);
        sum += t3;
        t3 = this.w;
      case 7:
        state0 = 0;
        t9 = other.get$w();
      case 8:
        state0 = 0;
        t9 = $.$mul$n(t3, t9);
        if (typeof t9 !== "number")
          throw $.iae(t9);
        return sum + t9;
    }
  },
  set$a: function(arg) {
    this.w = arg;
    return arg;
  },
  set$t: function(arg) {
    this.y = arg;
    return arg;
  },
  get$a: function() {
    return this.w;
  },
  add$1: function(_, arg) {
    var t1 = $.getInterceptor$x(arg);
    this.x = $.$add$ns(this.x, t1.get$x(arg));
    this.y = $.$add$ns(this.y, t1.get$y(arg));
    this.z = $.$add$ns(this.z, t1.get$z(arg));
    this.w = $.$add$ns(this.w, arg.get$w());
    return this;
  },
  sub$1: function(arg) {
    var t1, t3, t5, t7, t9, t11, t13, t15;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.sub$1$bailout(1, arg, t1);
    t3 = arg.x;
    if (typeof t3 !== "number")
      return this.sub$1$bailout(2, arg, t1, t3);
    this.x = t1 - t3;
    t5 = this.y;
    if (typeof t5 !== "number")
      return this.sub$1$bailout(3, arg, 0, 0, t5);
    t7 = arg.y;
    if (typeof t7 !== "number")
      return this.sub$1$bailout(4, arg, 0, 0, t5, t7);
    this.y = t5 - t7;
    t9 = this.z;
    if (typeof t9 !== "number")
      return this.sub$1$bailout(5, arg, 0, 0, 0, 0, t9);
    t11 = arg.get$z(arg);
    if (typeof t11 !== "number")
      return this.sub$1$bailout(6, arg, 0, 0, 0, 0, t9, t11);
    this.z = t9 - t11;
    t13 = this.w;
    if (typeof t13 !== "number")
      return this.sub$1$bailout(7, arg, 0, 0, 0, 0, 0, 0, t13);
    t15 = arg.get$w();
    if (typeof t15 !== "number")
      return this.sub$1$bailout(8, 0, 0, 0, 0, 0, 0, 0, t13, t15);
    this.w = t13 - t15;
    return this;
  },
  sub$1$bailout: function(state0, arg, t1, t3, t5, t7, t9, t11, t13, t15) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = arg.x;
      case 2:
        state0 = 0;
        this.x = $.$sub$n(t1, t3);
        t5 = this.y;
      case 3:
        state0 = 0;
        t7 = arg.y;
      case 4:
        state0 = 0;
        this.y = $.$sub$n(t5, t7);
        t9 = this.z;
      case 5:
        state0 = 0;
        t11 = arg.get$z(arg);
      case 6:
        state0 = 0;
        this.z = $.$sub$n(t9, t11);
        t13 = this.w;
      case 7:
        state0 = 0;
        t15 = arg.get$w();
      case 8:
        state0 = 0;
        this.w = $.$sub$n(t13, t15);
        return this;
    }
  },
  scale$1: function(_, arg) {
    var a, t1, t3, t5, t7;
    a = $.toDouble$0$n(arg);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.scale$1$bailout(1, t1, a);
    this.x = t1 * a;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.scale$1$bailout(2, 0, a, t3);
    this.y = t3 * a;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.scale$1$bailout(3, 0, a, 0, t5);
    this.z = t5 * a;
    t7 = this.w;
    if (typeof t7 !== "number")
      return this.scale$1$bailout(4, 0, a, 0, 0, t7);
    this.w = t7 * a;
    return this;
  },
  scale$1$bailout: function(state0, t1, a, t3, t5, t7) {
    switch (state0) {
      case 0:
        a = $.toDouble$0$n(arg);
        t1 = this.x;
      case 1:
        state0 = 0;
        this.x = $.$mul$n(t1, a);
        t3 = this.y;
      case 2:
        state0 = 0;
        this.y = $.$mul$n(t3, a);
        t5 = this.z;
      case 3:
        state0 = 0;
        this.z = $.$mul$n(t5, a);
        t7 = this.w;
      case 4:
        state0 = 0;
        this.w = $.$mul$n(t7, a);
        return this;
    }
  },
  clone$0: function(_) {
    return $.vec4$copy(this);
  },
  copyFrom$1: function(arg) {
    var t1 = $.getInterceptor$x(arg);
    this.x = t1.get$x(arg);
    this.y = t1.get$y(arg);
    this.z = t1.get$z(arg);
    this.w = arg.get$w();
    return this;
  },
  vec4$copy$1: function(other) {
    this.makeCopy$1(other);
  },
  vec4$zero$0: function() {
    this.makeZero$0();
  },
  vec4$raw$4: function(x_, y_, z_, w_) {
    this.makeRaw$4(x_, y_, z_, w_);
  },
  $isvec4: true
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
};

// Bound closures
$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$2 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};

$$.BoundClosure$4 = {"": "Closure;self,target",
  call$4: function(p0, p1, p2, p3) {
    return this.self[this.target](p0, p1, p2, p3);
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.DominoTower$ = function() {
  var t1 = $.List_List($, $.Body);
  $.setRuntimeTypeInfo(t1, [$.Body]);
  t1 = new $.DominoTower(null, t1, null, null, null, null, null, null, null, null, null, 10, null);
  t1.Demo$3("Domino tower", null, 10);
  return t1;
};

$.DominoTower_main = function() {
  var tower = $.DominoTower$();
  tower.initialize$0(tower);
  tower.initializeAnimation$0();
  tower.runAnimation$0();
};

$.main = function() {
  $.DominoTower_main();
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !src.$isJavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart) === true)
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t2 = $.getInterceptor$asx(src); t1 = $.getInterceptor$n(i), t1.$ge(i, srcStart) === true; i = t1.$sub(i, 1), j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = $.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)) === true; i = t3.$add(i, 1), j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
};

$.ListIterator$ = function(iterable, E) {
  var t1 = new $.ListIterator(iterable, iterable.length, 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f, E) {
  var t1 = new $.WhereIterator(_iterator, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.Sort__doSort = function(a, left, right, compare) {
  if (right - left <= 32)
    $.Sort_insertionSort_(a, left, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, right, compare);
};

$.Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.$isJavaScriptIndexingBehavior())
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.$gt$n(compare.call$2(a[t1], el), 0) === true;
        t1 = t2;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$.Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.$gt$n(compare.call$2(a[t1], el), 0) === true;
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= a.length)
        throw $.ioore(j0);
      $.JSArray_methods.$indexSet(a, j, a[j0]);
      j = j0;
    }
    $.JSArray_methods.$indexSet(a, j, el);
  }
};

$.Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, k, ak, comp, t3, great0, less0, t4;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.$isJavaScriptIndexingBehavior())
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.JSNumber_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  if (index1 !== (index1 | 0))
    throw $.iae(index1);
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 !== (index2 | 0))
    throw $.iae(index2);
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 !== (index3 | 0))
    throw $.iae(index3);
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 !== (index4 | 0))
    throw $.iae(index4);
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 !== (index5 | 0))
    throw $.iae(index5);
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  t1 = $.$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$n(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t2 = less - 1;
  t3 = a.length;
  if (t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (left >= t3)
    throw $.ioore(left);
  a[left] = t4;
  a[t2] = el2;
  t2 = great + 1;
  if (t2 < 0 || t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (right >= t3)
    throw $.ioore(right);
  a[right] = t4;
  a[t2] = el4;
  $.Sort__doSort(a, left, less - 2, compare);
  $.Sort__doSort(a, great + 2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    $.Sort__doSort(a, less, great, compare);
  } else
    $.Sort__doSort(a, less, great, compare);
};

$.Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, t3, great0, less0;
  sixth = $.JSNumber_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  if (index1 !== (index1 | 0))
    throw $.iae(index1);
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 !== (index2 | 0))
    throw $.iae(index2);
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 !== (index3 | 0))
    throw $.iae(index3);
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 !== (index4 | 0))
    throw $.iae(index4);
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 !== (index5 | 0))
    throw $.iae(index5);
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  $.JSArray_methods.$indexSet(a, index1, el1);
  $.JSArray_methods.$indexSet(a, index3, el3);
  $.JSArray_methods.$indexSet(a, index5, el5);
  if (left < 0 || left >= a.length)
    throw $.ioore(left);
  $.JSArray_methods.$indexSet(a, index2, a[left]);
  if (right < 0 || right >= a.length)
    throw $.ioore(right);
  $.JSArray_methods.$indexSet(a, index4, a[right]);
  less = left + 1;
  great = right - 1;
  t1 = $.$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.JSArray_methods.$indexSet(a, k, a[less]);
          $.JSArray_methods.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$n(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              $.JSArray_methods.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, less, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, k, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.JSArray_methods.$indexSet(a, k, a[less]);
          $.JSArray_methods.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              $.JSArray_methods.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, less, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, k, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
  t2 = less - 1;
  if (t2 >= a.length)
    throw $.ioore(t2);
  $.JSArray_methods.$indexSet(a, left, a[t2]);
  $.JSArray_methods.$indexSet(a, t2, el2);
  t2 = great + 1;
  if (t2 < 0 || t2 >= a.length)
    throw $.ioore(t2);
  $.JSArray_methods.$indexSet(a, right, a[t2]);
  $.JSArray_methods.$indexSet(a, t2, el4);
  $.Sort__doSort(a, left, less - 2, compare);
  $.Sort__doSort(a, great + 2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.JSArray_methods.$indexSet(a, k, a[less]);
          $.JSArray_methods.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              $.JSArray_methods.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, less, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.JSArray_methods.$indexSet(a, k, a[great]);
              $.JSArray_methods.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
    $.Sort__doSort(a, less, great, compare);
  } else
    $.Sort__doSort(a, less, great, compare);
};

$.ToString_collectionToString = function(c) {
  var result = $.StringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List($, null));
  return result.toString$0(result);
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, first, t3;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(c), first = true; t2.moveNext$0() === true; first = false) {
    t3 = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(t3, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!o.$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    result.write$1(o);
};

$.ToString__containsRef = function(c, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(c); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.StringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List($, null));
  return result.toString$0(result);
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitMap_anon(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.$$throw($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $globalState.currentManagerId = t2;
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  replyTo.send$2("spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, t2, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  t1 = $.getInterceptor$x(worker);
  t1.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t2 = $globalState;
  workerId = t2.nextManagerId;
  t2.nextManagerId = workerId + 1;
  t1.set$id(worker, workerId);
  t2 = $globalState.managers;
  t2.$indexSet(t2, workerId, worker);
  t1.postMessage$1(worker, $._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports, $.List).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.TimerImpl$periodic = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(false, false, null);
  t1.TimerImpl$periodic$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && value !== 0 || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.Primitives_numMicroseconds = function() {
  if (typeof window != "undefined" && window !== null) {
    var performance = window.performance;
    if (performance != null && typeof performance.webkitNow == "function")
      return $.JSNumber_methods.floor$0(1000 * performance.webkitNow());
  }
  return 1000 * Date.now();
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") === true || $.JSString_methods.endsWith$1(message, "is undefined") === true || $.JSString_methods.endsWith$1(message, "is null or undefined") === true || $.JSString_methods.endsWith$1(message, "of undefined") === true || $.JSString_methods.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure.$eq(closure, null))
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.substitute(substitution, $.getRuntimeTypeInfo(target));
  return $arguments == null ? null : $arguments[index];
};

$.propertyTypeCastError = function(value, property) {
  var t1 = $.getInterceptor$asx(property);
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + $.S(actualType) + " to" + " incompatible type " + expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.TypeImpl$ = function(typeName) {
  return new $.TypeImpl(typeName);
};

$.getRuntimeTypeAsString = function(runtimeType) {
  var t1, className;
  t1 = $.getInterceptor$asx(runtimeType);
  className = t1.$index(runtimeType, 0).builtin$cls;
  if ($.$eq(t1.get$length(runtimeType), 1) === true)
    return className;
  return className + "<" + $.S($.joinArguments(runtimeType, 1)) + ">";
};

$.runtimeTypeToString = function(type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && (type.constructor === Array))
    return $.getRuntimeTypeAsString(type);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !types.$isJavaScriptIndexingBehavior()))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(", ");
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    buffer.write$1($.runtimeTypeToString(types[index]));
  }
  return buffer.toString$0(buffer);
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var buffer, t1, index, firstArgument;
  buffer = $.StringBuffer$("");
  for (t1 = $.getInterceptor$asx(types), index = startIndex, firstArgument = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(", ");
    buffer.write$1($.runtimeTypeToString(t1.$index(types, index)));
  }
  return buffer.toString$0(buffer);
};

$.getRuntimeTypeString = function(object) {
  var className, typeInfo;
  className = (object.constructor === Array) ? "List" : object.constructor.builtin$cls;
  typeInfo = object.$builtinTypeInfo;
  if (typeInfo == null)
    return className;
  return className + "<" + $.S($.joinArguments(typeInfo, 0)) + ">";
};

$.substitute = function(substitution, $arguments) {
  if (substitution != null && (substitution.constructor === Array))
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments;
};

$.createRuntimeType = function($name) {
  return $.TypeImpl$($name);
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (typeof(navigator) !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!$.isDartObject(obj)) {
    tag = $.getTypeNameOf(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (secondTag != null)
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT10));
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, $name))
      $.defineProperty(proto, $name, method);
  }
  return method.apply(obj, $arguments);
};

$.isDartObject = function(obj) {
  return ((obj) instanceof ($.Object));
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && $._dynamicMetadata0() != null)
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (method != null)
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (f != null && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT10)[$name];
  if (dartMethod != null)
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = $.List_List($, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.JSString_methods.substring$1(receiver, startIndex));
  else
    return $.get$iterator$ax($.allMatches$1$s(other, $.JSString_methods.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.write$1(to);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        result.write$1(receiver[i]);
        result.write$1(to);
      }
      return result.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$._CompleterImpl$ = function(T) {
  var t1 = new $._CompleterImpl($._FutureImpl$(T), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureListenerWrapper$ = function(future, T) {
  var t1 = new $._FutureListenerWrapper(future, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$immediate = function(value, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures, T) {
  var t1, t2, t3, t4, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    t4 = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    t4.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0) === true)
    return $._FutureImpl$immediate($.CONSTANT3, null);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._CompleterImpl$($.List);
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue, S, T) {
  var t1 = new $._ThenFuture(_onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._CatchErrorFuture$ = function(_onError, _test, T) {
  var t1 = new $._CatchErrorFuture(_test, _onError, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SubscribeFuture$ = function(onValue, _onError, S, T) {
  var t1 = new $._SubscribeFuture(_onError, onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._FutureWrapper$ = function(_future, T) {
  var t1 = new $._FutureWrapper(_future);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.Timer_Timer = function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  if ($.$lt$n(milliseconds, 0) === true)
    milliseconds = 0;
  return $.TimerImpl$(milliseconds, callback);
};

$.Timer_Timer$periodic = function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  if ($.$lt$n(milliseconds, 0) === true)
    milliseconds = 0;
  return $.TimerImpl$periodic(milliseconds, callback);
};

$.Timer_run = function(callback) {
  $.add$1$ax($.get$Timer__runCallbacks(), callback);
  if ($.$eq($.get$length$asx($.get$Timer__runCallbacks()), 1) === true)
    $.Timer_Timer($.CONSTANT4, new $.Timer_run_anon());
};

$.IterableMixinWorkaround_sortList = function(list, compare) {
  if (compare == null)
    compare = $.Comparable_compare;
  $.Sort__doSort(list, 0, list.length - 1, compare);
};

$.IterableMixinWorkaround_setRangeList = function(list, start, $length, from, startFrom) {
  var t1 = $.getInterceptor($length);
  if (t1.$eq($length, 0) === true)
    return;
  if (t1.$lt($length, 0) === true)
    throw $.$$throw($.ArgumentError$($length));
  t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  if ($.$gt$n(t1.$add(start, $length), list.length) === true)
    throw $.$$throw($.RangeError$value(t1.$add(start, $length)));
  $.Arrays_copy(from, startFrom, list, start, $length);
};

$._HashMapTable$ = function(K, V) {
  var t1 = new $._HashMapTable(null, 8, 0, 0, 0, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._HashTable$1(8, K);
  return t1;
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap($._HashMapTable$(K, V));
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1.HashMap$0(K, V);
  return t1;
};

$._HashTableKeyIterable$ = function(hashTable, K) {
  var t1 = new $._HashTableKeyIterable(hashTable);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._HashTableKeyIterator$ = function(hashTable, K) {
  var t1 = new $._HashTableKeyIterator(hashTable, hashTable._modificationCount, 0, null);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._HashTableValueIterable$ = function(hashTable, _entryIndex, V) {
  var t1 = new $._HashTableValueIterable(_entryIndex, hashTable);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$._HashTableValueIterator$ = function(hashTable, _entryIndex, V) {
  var t1 = new $._HashTableValueIterator(_entryIndex, hashTable, hashTable.get$_modificationCount(), 0, null);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$._LinkedHashMapTable$ = function(K, V) {
  var t1 = new $._LinkedHashMapTable(null, 8, 0, 0, 0, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._HashTable$1(8, K);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap($._LinkedHashMapTable$(K, V));
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1.LinkedHashMap$0(K, V);
  return t1;
};

$._LinkedHashTableKeyIterable$ = function(_table, K) {
  var t1 = new $._LinkedHashTableKeyIterable(_table);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._LinkedHashTableKeyIterator$ = function(hashTable, K) {
  var t1 = new $._LinkedHashTableKeyIterator(hashTable, hashTable.get$_modificationCount(), hashTable._next$1(0), null);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._LinkedHashTableValueIterable$ = function(_hashTable, _valueIndex, V) {
  var t1 = new $._LinkedHashTableValueIterable(_hashTable, _valueIndex);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$._LinkedHashTableValueIterator$ = function(hashTable, _valueIndex, V) {
  var t1 = new $._LinkedHashTableValueIterator(_valueIndex, hashTable, hashTable.get$_modificationCount(), hashTable._next$1(0), null);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  var t1 = $.getInterceptor$n(number);
  return t1.$and(number, t1.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var number0, nextNumber;
  number0 = $.$shl$n(number, 2) - 1;
  for (number = number0; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue, E) {
  var t1 = new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.Comparable_compare = function(a, b) {
  return $.compareTo$1$ns(a, b);
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new $.Duration($.$add$ns($.$add$ns($.$add$ns($.$add$ns($.$add$ns($.$mul$n(days, 86400000000), $.$mul$n(hours, 3600000000)), $.$mul$n(minutes, 60000000)), $.$mul$n(seconds, 1000000)), $.$mul$n(milliseconds, 1000)), microseconds));
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll$2$s($.replaceAll$2$s($.replaceAll$2$s($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.IntegerDivisionByZeroException$ = function() {
  return new $.IntegerDivisionByZeroException();
};

$.List_List = function($length, E) {
  var t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.Stopwatch$ = function() {
  return new $.Stopwatch(null, null);
};

$.Stopwatch__frequency = function() {
  return 1000000;
};

$.Stopwatch__now = function() {
  return $.Primitives_numMicroseconds();
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.query = function(selector) {
  return $.query$1$x(document, selector);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
  return document.createElement(tag);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._WrappedList$ = function(_list, E) {
  var t1 = new $._WrappedList(_list);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._WrappedIterator$ = function(_iterator, E) {
  var t1 = new $._WrappedIterator(_iterator);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1 = new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.forEach$1$ax(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$.Device_userAgent = function() {
  return $.get$userAgent$x($.get$navigator$x($.window()));
};

$.Device_isOpera = function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = $.contains$2$asx($.Device_userAgent(), "Opera", 0);
  return $.Device__isOpera;
};

$.Device_isIE = function() {
  if ($.Device__isIE == null)
    $.Device__isIE = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "MSIE", 0) === true;
  return $.Device__isIE;
};

$.Device_isFirefox = function() {
  if ($.Device__isFirefox == null)
    $.Device__isFirefox = $.contains$2$asx($.Device_userAgent(), "Firefox", 0);
  return $.Device__isFirefox;
};

$.Device_cssPrefix = function() {
  if ($.Device__cachedCssPrefix == null)
    if ($.Device_isFirefox() === true)
      $.Device__cachedCssPrefix = "-moz-";
    else if ($.Device_isIE() === true)
      $.Device__cachedCssPrefix = "-ms-";
    else if ($.Device_isOpera() === true)
      $.Device__cachedCssPrefix = "-o-";
    else
      $.Device__cachedCssPrefix = "-webkit-";
  return $.Device__cachedCssPrefix;
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, $.get$nodes$x(node));
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (end < start)
    throw $.$$throw($.RangeError$value(end));
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true)
    throw $.$$throw($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)) === true)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end) === true; i = t1.$add(i, 1))
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.min = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.JSDouble_methods.get$isNegative(b) === true || $.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if ($.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      if (b === 0 && $.JSNumber_methods.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.CanvasDraw$ = function(viewport, ctx) {
  var t1 = new $.CanvasDraw(ctx, 1, viewport);
  t1.CanvasDraw$2(viewport, ctx);
  return t1;
};

$.ContactFilter$ = function() {
  return new $.ContactFilter();
};

$.ContactImpulse$ = function() {
  var t1, t2;
  t1 = $.List_List(2, $.num);
  $.setRuntimeTypeInfo(t1, [$.num]);
  t2 = $.List_List(2, $.num);
  $.setRuntimeTypeInfo(t2, [$.num]);
  return new $.ContactImpulse(t1, t2);
};

$.AxisAlignedBox$ = function(lowerBound, upperBound) {
  var t1 = new $.AxisAlignedBox(lowerBound, upperBound);
  t1.AxisAlignedBox$2(lowerBound, upperBound);
  return t1;
};

$.AxisAlignedBox_testOverlap = function(a, b) {
  return !($.$gt$n($.get$x$x(b.lowerBound), $.get$x$x(a.get$upperBound())) === true || $.$gt$n($.get$y$x(b.lowerBound), $.get$y$x(a.get$upperBound())) === true || $.$gt$n($.get$x$x(a.get$lowerBound()), $.get$x$x(b.upperBound)) === true || $.$gt$n($.get$y$x(a.get$lowerBound()), $.get$y$x(b.upperBound)) === true);
};

$.Collision$_construct = function(pool) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16;
  t1 = $.DistanceInput$();
  t2 = $.SimplexCache$();
  t3 = $.DistanceOutput$();
  t4 = $.EdgeResults$();
  t5 = $.EdgeResults$();
  t6 = $.List_List(2, $.ClipVertex);
  $.setRuntimeTypeInfo(t6, [$.ClipVertex]);
  t7 = $.vec2$zero();
  t8 = $.vec2$zero();
  t9 = $.vec2$zero();
  t10 = $.vec2$zero();
  t11 = $.vec2$zero();
  t12 = $.vec2$zero();
  t13 = $.vec2$zero();
  t14 = $.vec2$zero();
  t15 = $.List_List(2, $.ClipVertex);
  $.setRuntimeTypeInfo(t15, [$.ClipVertex]);
  t16 = $.List_List(2, $.ClipVertex);
  $.setRuntimeTypeInfo(t16, [$.ClipVertex]);
  t16 = new $.Collision(pool, t2, t1, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16);
  t16.Collision$_construct$1(pool);
  return t16;
};

$.Collision_clipSegmentToLine = function(vOut, vIn, norm, offset) {
  var t1, distance0, distance1, numOut, numOut0, vin;
  t1 = vIn.length;
  if (0 >= t1)
    throw $.ioore(0);
  distance0 = norm.dot$1(vIn[0].get$v()) - offset;
  if (1 >= t1)
    throw $.ioore(1);
  distance1 = norm.dot$1(vIn[1].get$v()) - offset;
  if (distance0 <= 0) {
    if (0 >= vOut.length)
      throw $.ioore(0);
    vOut[0].setFrom$1(vIn[0]);
    numOut = 1;
  } else
    numOut = 0;
  if (distance1 <= 0) {
    numOut0 = numOut + 1;
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].setFrom$1(vIn[1]);
    numOut = numOut0;
  }
  if (distance0 * distance1 < 0) {
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    t1 = vOut[numOut].get$v().copyFrom$1(vIn[1].get$v()).sub$1(vIn[0].get$v());
    t1 = t1.scale$1(t1, distance0 / (distance0 - distance1));
    t1.add$1(t1, vIn[0].get$v());
    vin = distance0 > 0 ? vIn[0] : vIn[1];
    $.get$id$x(vOut[numOut]).setFrom$1($.get$id$x(vin));
    ++numOut;
  }
  return numOut;
};

$.ClipVertex$ = function() {
  return new $.ClipVertex($.vec2$zero(), $.ContactID$());
};

$.EdgeResults$ = function() {
  return new $.EdgeResults(0, 0);
};

$.ContactID$ = function() {
  return new $.ContactID($.Features$());
};

$.Distance$_construct = function() {
  var t1, t2, t3;
  t1 = $.Simplex$();
  t2 = $.List_List(3, $.$int);
  $.setRuntimeTypeInfo(t2, [$.$int]);
  t3 = $.List_List(3, $.$int);
  $.setRuntimeTypeInfo(t3, [$.$int]);
  return new $.Distance(0, 0, 20, t1, t2, t3, $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero());
};

$.DistanceInput$ = function() {
  return new $.DistanceInput($.DistanceProxy$(), $.DistanceProxy$(), $.Transform$(), $.Transform$(), false);
};

$.DistanceOutput$ = function() {
  return new $.DistanceOutput($.vec2$zero(), $.vec2$zero(), null, null);
};

$.DistanceProxy$ = function() {
  var t1 = $.List_List(8, $.vec2);
  $.setRuntimeTypeInfo(t1, [$.vec2]);
  t1 = new $.DistanceProxy(t1, 0, 0);
  t1.DistanceProxy$0();
  return t1;
};

$.Features$ = function() {
  return new $.Features(0, 0, 0, 0);
};

$.Manifold$ = function() {
  var t1 = $.List_List(2, $.ManifoldPoint);
  $.setRuntimeTypeInfo(t1, [$.ManifoldPoint]);
  t1 = new $.Manifold(t1, $.vec2$zero(), $.vec2$zero(), null, 0);
  t1.Manifold$0();
  return t1;
};

$.ManifoldPoint$ = function() {
  return new $.ManifoldPoint($.vec2$zero(), 0, 0, $.ContactID$());
};

$.Simplex$ = function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.SimplexVertex$();
  t2 = $.SimplexVertex$();
  t3 = $.SimplexVertex$();
  t4 = $.List_List(3, $.SimplexVertex);
  $.setRuntimeTypeInfo(t4, [$.SimplexVertex]);
  t5 = $.vec2$zero();
  t6 = $.vec2$zero();
  t6 = new $.Simplex(t1, t2, t3, t4, 0, t5, $.vec2$zero(), t6, $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero());
  t6.Simplex$0();
  return t6;
};

$.SimplexCache$ = function() {
  var t1, t2;
  t1 = $.List_List(3, $.$int);
  $.setRuntimeTypeInfo(t1, [$.$int]);
  t2 = $.List_List(3, $.$int);
  $.setRuntimeTypeInfo(t2, [$.$int]);
  t2 = new $.SimplexCache(0, 0, t1, t2);
  t2.SimplexCache$0();
  return t2;
};

$.SimplexVertex$ = function() {
  return new $.SimplexVertex($.vec2$zero(), $.vec2$zero(), $.vec2$zero(), 0, 0, 0);
};

$.TimeOfImpact$_construct = function(argPool) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = $.SimplexCache$();
  t2 = $.DistanceInput$();
  t3 = $.Transform$();
  t4 = $.Transform$();
  t5 = $.DistanceOutput$();
  t6 = $.SeparationFunction$();
  t7 = $.List_List(2, $.$int);
  $.setRuntimeTypeInfo(t7, [$.$int]);
  t7 = new $.TimeOfImpact(t1, t2, t3, t4, t5, t6, t7, $.Sweep$(), $.Sweep$(), argPool);
  t7.TimeOfImpact$_construct$1(argPool);
  return t7;
};

$.SeparationFunction$ = function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
  t1 = $.DistanceProxy$();
  t2 = $.DistanceProxy$();
  t3 = $.vec2$zero();
  t4 = $.vec2$zero();
  t5 = $.Sweep$();
  t6 = $.Sweep$();
  t7 = $.vec2$zero();
  t8 = $.vec2$zero();
  t9 = $.vec2$zero();
  t10 = $.vec2$zero();
  t11 = $.vec2$zero();
  t12 = $.vec2$zero();
  t13 = $.vec2$zero();
  t14 = $.vec2$zero();
  t15 = $.vec2$zero();
  t16 = $.vec2$zero();
  t17 = $.Transform$();
  t18 = $.Transform$();
  return new $.SeparationFunction(t1, t2, 0, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, $.vec2$zero(), $.vec2$zero(), t16, t17, t18);
};

$.TimeOfImpactInput$ = function() {
  return new $.TimeOfImpactInput($.DistanceProxy$(), $.DistanceProxy$(), $.Sweep$(), $.Sweep$(), 0);
};

$.TimeOfImpactOutput$ = function() {
  return new $.TimeOfImpactOutput(0, 0);
};

$.WorldManifold$ = function() {
  var t1, t2, t3, t4;
  t1 = $.vec2$zero();
  t2 = $.vec2$zero();
  t3 = $.vec2$zero();
  t4 = $.List_List(2, $.vec2);
  $.setRuntimeTypeInfo(t4, [$.vec2]);
  t3 = new $.WorldManifold(t1, t4, t2, t3);
  t3.WorldManifold$0();
  return t3;
};

$.BroadPhase$ = function() {
  var t1 = new $.BroadPhase($.DynamicTree$(), 0, null, null, 16, 0, null);
  t1.BroadPhase$0();
  return t1;
};

$.DynamicTree$ = function() {
  var t1, t2, t3;
  t1 = $.List_List(4, $.vec2);
  $.setRuntimeTypeInfo(t1, [$.vec2]);
  t2 = $.vec2$zero();
  t3 = $.AxisAlignedBox$(null, null);
  t3 = new $.DynamicTree(null, 0, null, 0, 0, $.Queue_Queue($.DynamicTreeNode), t1, 0, t2, t3, $.vec2$zero(), $.vec2$zero(), $.vec2$zero());
  t3.DynamicTree$0();
  return t3;
};

$.DynamicTreeNode$_construct = function() {
  return new $.DynamicTreeNode($.AxisAlignedBox$(null, null), null, null, null, null, null, null);
};

$.Pair$ = function() {
  return new $.Pair(null, null);
};

$.MassData$ = function() {
  return new $.MassData(0, $.vec2$zero(), 0);
};

$.PolygonShape$ = function() {
  var t1, t2;
  t1 = $.List_List(8, $.vec2);
  $.setRuntimeTypeInfo(t1, [$.vec2]);
  t2 = $.List_List(8, $.vec2);
  $.setRuntimeTypeInfo(t2, [$.vec2]);
  t2 = new $.PolygonShape($.vec2$zero(), t1, t2, 0, 1, 0.01);
  t2.PolygonShape$0();
  return t2;
};

$.PolygonShape$copy = function(other) {
  var t1, t2, t3, t4;
  t1 = other.radius;
  t2 = other.vertexCount;
  t3 = $.List_List(8, $.vec2);
  $.setRuntimeTypeInfo(t3, [$.vec2]);
  t4 = $.List_List(8, $.vec2);
  $.setRuntimeTypeInfo(t4, [$.vec2]);
  t1 = new $.PolygonShape($.vec2$copy(other.centroid), t3, t4, t2, 1, t1);
  t1.PolygonShape$copy$1(other);
  return t1;
};

$.CanvasViewportTransform$ = function(_extents, _center) {
  var t1 = new $.CanvasViewportTransform(null, $.vec2$copy(_extents), 20, $.vec2$copy(_center));
  t1.CanvasViewportTransform$2(_extents, _center);
  return t1;
};

$.Color3$ = function() {
  return new $.Color3(0, 0, 0);
};

$.Color3$fromRGB = function(r, g, b) {
  return new $.Color3(r, g, b);
};

$.Color3$fromRGBF = function(r, g, b) {
  return new $.Color3($.JSNumber_methods.toInt$0($.JSDouble_methods.floor$0(r * 255)), $.JSNumber_methods.toInt$0($.JSDouble_methods.floor$0(g * 255)), $.JSNumber_methods.toInt$0($.JSDouble_methods.floor$0(b * 255)));
};

$.Settings_mixRestitution = function(restitution1, restitution2) {
  return $.$gt$n(restitution1, restitution2) === true ? restitution1 : restitution2;
};

$.Sweep$ = function() {
  return new $.Sweep($.vec2$zero(), $.vec2$zero(), $.vec2$zero(), 0, 0);
};

$.Transform$ = function() {
  return new $.Transform($.vec2$zero(), $.mat2$zero());
};

$.Transform_mulToOut = function(transform, vector, out) {
  var t1, t2, t3, tempY, t4;
  t1 = transform.position;
  t2 = transform.rotation;
  t3 = $.getInterceptor$x(vector);
  tempY = $.$add$ns($.$add$ns(t1.y, $.$mul$n($.get$y$x(t2.col0), t3.get$x(vector))), $.$mul$n($.get$y$x(t2.col1), t3.get$y(vector)));
  t4 = $.getInterceptor$x(out);
  t4.set$x(out, $.$add$ns($.$add$ns(t1.x, $.$mul$n($.get$x$x(t2.col0), t3.get$x(vector))), $.$mul$n($.get$x$x(t2.col1), t3.get$y(vector))));
  t4.set$y(out, tempY);
};

$.Transform_mulTransToOut = function(T, v, out) {
  var v1, t1, b, b1, tempy, t2;
  v1 = v.$sub(v, T.position);
  t1 = T.rotation;
  b = t1.col0;
  b1 = t1.col1;
  t1 = $.getInterceptor$x(b1);
  tempy = $.$add$ns($.$mul$n(v1.x, t1.get$x(b1)), $.$mul$n(v1.y, t1.get$y(b1)));
  t2 = $.getInterceptor$x(b);
  out.x = $.$add$ns($.$mul$n(v1.x, t2.get$x(b)), $.$mul$n(v1.y, t2.get$y(b)));
  out.y = tempy;
};

$.Body$ = function(bd, world) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  t1 = $.Transform$();
  t2 = $.Sweep$();
  t3 = $.vec2$copy(bd.linearVelocity);
  t4 = $.vec2$zero();
  t5 = bd.userData;
  t6 = $.FixtureDef$();
  t7 = $.MassData$();
  t8 = $.Transform$();
  t9 = $.vec2$zero();
  t10 = $.vec2$zero();
  t10 = new $.Body(world, 0, null, 0, t5, t3, 0, null, null, null, null, null, 0, null, t4, 0, 0, 0, bd.linearDamping, bd.angularDamping, bd.type, null, t1, t2, t6, t7, t8, t9, t10);
  t10.Body$2(bd, world);
  return t10;
};

$.BodyDef$ = function() {
  return new $.BodyDef(0, 0, null, $.vec2$zero(), $.vec2$zero(), 0, false, null, false, true, 0, 0, true, true);
};

$.ContactManager$ = function(argPool) {
  var t1 = $.ContactFilter$();
  return new $.ContactManager($.BroadPhase$(), null, 0, t1, null, argPool);
};

$.Filter$ = function() {
  return new $.Filter(0, 0, 0);
};

$.Fixture$ = function() {
  return new $.Fixture($.AxisAlignedBox$(null, null), null, null, null, null, null, null, null, $.Filter$(), null, null, $.AxisAlignedBox$(null, null), $.AxisAlignedBox$(null, null));
};

$.FixtureDef$ = function() {
  var t1 = new $.FixtureDef(null, null, 0.2, 0, 0, false, $.Filter$());
  t1.FixtureDef$0();
  return t1;
};

$.Island$ = function() {
  return new $.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, $.ContactSolver$(), $.vec2$zero(), $.ContactImpulse$());
};

$.Position$ = function() {
  var t1 = new $.Position(null, null);
  t1.Position$0();
  return t1;
};

$.Velocity$ = function() {
  var t1 = new $.Velocity(null, null);
  t1.Velocity$0();
  return t1;
};

$.TimeStep$ = function() {
  return new $.TimeStep(0, 0, 0, 0, 0, true);
};

$.World$ = function(gravity, doSleep, argPool) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14;
  t1 = $.List_List(2, [$.List, $.ContactRegister]);
  $.setRuntimeTypeInfo(t1, [[$.List, $.ContactRegister]]);
  t2 = $.vec2$zero();
  t3 = $.vec2$zero();
  t4 = $.TimeStep$();
  t5 = $.vec2$zero();
  t6 = $.vec2$zero();
  t7 = $.WorldQueryWrapper$();
  t8 = $.TimeOfImpactInput$();
  t9 = $.TimeOfImpactOutput$();
  t10 = $.Sweep$();
  t11 = $.TimeOfImpactSolver$();
  t12 = $.List_List(32, $.Contact);
  $.setRuntimeTypeInfo(t12, [$.Contact]);
  t13 = $.Island$();
  t14 = $.List_List(10, $.Body);
  $.setRuntimeTypeInfo(t14, [$.Body]);
  t14 = new $.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14);
  t14.World$3(gravity, doSleep, argPool);
  return t14;
};

$.WorldQueryWrapper$ = function() {
  return new $.WorldQueryWrapper(null, null);
};

$.CircleContact$ = function(argPool) {
  var t1 = $.Manifold$();
  return new $.CircleContact(null, null, null, $.ContactEdge$(), $.ContactEdge$(), null, null, t1, null, argPool, $.Manifold$());
};

$.ContactConstraint$ = function() {
  var t1 = $.List_List(2, $.ContactConstraintPoint);
  $.setRuntimeTypeInfo(t1, [$.ContactConstraintPoint]);
  t1 = new $.ContactConstraint(t1, $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.mat2$zero(), $.mat2$zero(), null, null, null, null, null, null, 0, null);
  t1.ContactConstraint$0();
  return t1;
};

$.ContactConstraintPoint$ = function() {
  return new $.ContactConstraintPoint($.vec2$zero(), $.vec2$zero(), $.vec2$zero(), 0, 0, 0, 0, 0);
};

$.ContactEdge$ = function() {
  return new $.ContactEdge(null, null, null, null);
};

$.ContactRegister$ = function() {
  return new $.ContactRegister(null, false);
};

$.ContactSolver$ = function() {
  var t1 = $.List_List(256, $.ContactConstraint);
  $.setRuntimeTypeInfo(t1, [$.ContactConstraint]);
  t1 = new $.ContactSolver(t1, null, $.WorldManifold$(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.PositionSolverManifold$(), $.vec2$zero(), $.vec2$zero());
  t1.ContactSolver$0();
  return t1;
};

$.PositionSolverManifold$ = function() {
  return new $.PositionSolverManifold($.vec2$zero(), $.vec2$zero(), 0, $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero());
};

$.PolygonAndCircleContact$ = function(argPool) {
  var t1 = $.Manifold$();
  return new $.PolygonAndCircleContact(null, null, null, $.ContactEdge$(), $.ContactEdge$(), null, null, t1, null, argPool, $.Manifold$());
};

$.PolygonContact$ = function(argPool) {
  var t1 = $.Manifold$();
  return new $.PolygonContact(null, null, null, $.ContactEdge$(), $.ContactEdge$(), null, null, t1, null, argPool, $.Manifold$());
};

$.TimeOfImpactConstraint$ = function() {
  var t1 = $.List_List(2, $.vec2);
  $.setRuntimeTypeInfo(t1, [$.vec2]);
  t1 = new $.TimeOfImpactConstraint(t1, $.vec2$zero(), $.vec2$zero(), 0, 0, 0, null, null);
  t1.TimeOfImpactConstraint$0();
  return t1;
};

$.TimeOfImpactSolver$ = function() {
  var t1 = $.List_List(4, $.TimeOfImpactConstraint);
  $.setRuntimeTypeInfo(t1, [$.TimeOfImpactConstraint]);
  t1 = new $.TimeOfImpactSolver(t1, 0, null, $.TimeOfImpactSolverManifold$(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero());
  t1.TimeOfImpactSolver$0();
  return t1;
};

$.TimeOfImpactSolverManifold$ = function() {
  return new $.TimeOfImpactSolverManifold($.vec2$zero(), $.vec2$zero(), 0, $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero(), $.vec2$zero());
};

$.DefaultWorldPool$ = function() {
  var t1 = new $.DefaultWorldPool(null, null, null);
  t1.DefaultWorldPool$0();
  return t1;
};

$.MatchState$ = function(state) {
  return new $.MatchState(state);
};

$._DeepMatcher$ = function(_expected, limit) {
  return new $._DeepMatcher(_expected, limit, null);
};

$._Predicate$ = function(_matcher, _description) {
  return new $._Predicate(_matcher, _description);
};

$.StringDescription$ = function(init) {
  var t1 = new $.StringDescription(null);
  t1.StringDescription$1(init);
  return t1;
};

$.TestFailure$ = function(message) {
  return new $.TestFailure(message);
};

$.expect = function(actual, matcher, failureHandler, reason, verbose) {
  var doesMatch, matchState, e, trace, exception, t1;
  matcher = $.wrapMatcher(matcher);
  doesMatch = null;
  matchState = $.MatchState$(null);
  try {
    doesMatch = $.matches$2$x(matcher, actual, matchState);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    doesMatch = false;
    if (reason == null) {
      t1 = e;
      reason = $.S(typeof t1 === "string" ? e : $.toString$0(e)) + " at " + $.S(trace);
    }
  }

  if (doesMatch !== true) {
    if (failureHandler == null)
      failureHandler = $.getOrCreateExpectFailureHandler();
    failureHandler.failMatch$5(actual, matcher, reason, matchState, verbose);
  }
};

$.wrapMatcher = function(x) {
  if (typeof x === "object" && x !== null && !!x.$isMatcher)
    return x;
  else if (typeof x === "function" || typeof x === "object" && x !== null && !!x.$isFunction)
    return $._Predicate$(x, "satisfies function");
  else
    return $._DeepMatcher$(x, 100);
};

$.DefaultFailureHandler$ = function() {
  var t1 = new $.DefaultFailureHandler();
  t1.DefaultFailureHandler$0();
  return t1;
};

$.configureExpectFailureHandler = function(handler) {
  $._assertFailureHandler = handler == null ? $.DefaultFailureHandler$() : handler;
};

$.getOrCreateExpectFailureHandler = function() {
  if ($._assertFailureHandler == null)
    $.configureExpectFailureHandler(null);
  return $._assertFailureHandler;
};

$._defaultErrorFormatter = function(actual, matcher, reason, matchState, verbose) {
  var description, t1, count, t2;
  description = $.StringDescription$("");
  t1 = description.add$1(description, "Expected: ").addDescriptionOf$1(matcher);
  t1.add$1(t1, "\n     but: ");
  matcher.describeMismatch$4(actual, description, matchState, verbose);
  description.add$1(description, ".\n");
  if (verbose === true)
    if (typeof actual === "object" && actual !== null && (actual.constructor === Array || actual.$isIterable())) {
      t1 = description.add$1(description, "Actual: ").addDescriptionOf$1(actual);
      t1.add$1(t1, "\n");
    } else if (typeof actual === "object" && actual !== null && !!actual.$isMap) {
      description.add$1(description, "Actual: ");
      for (t1 = $.get$iterator$ax(actual.get$keys()), count = 25; t1.moveNext$0() === true;) {
        t2 = t1.get$current();
        if (count === 0) {
          description.add$1(description, "...\n");
          break;
        }
        description.addDescriptionOf$1(t2);
        description.add$1(description, " : ");
        description.addDescriptionOf$1(actual.$index(actual, t2));
        description.add$1(description, "\n");
        --count;
      }
    }
  if (reason != null) {
    t1 = description.add$1(description, reason);
    t1.add$1(t1, "\n");
  }
  return description.toString$0(description);
};

$.min0 = function(x, y, out) {
  var t1, t2;
  if (typeof x === "number")
    return $.min(x, y);
  if (typeof x === "object" && x !== null && !!x.$isvec2) {
    if (out == null)
      out = $.vec2$zero();
    t1 = $.getInterceptor$x(y);
    t2 = $.min(x.x, t1.get$x(y));
    $.propertyTypeCast(out, "$isvec2");
    out.x = t2;
    out.y = $.min(x.y, t1.get$y(y));
    return out;
  }
  if (typeof x === "object" && x !== null && !!x.$isvec3) {
    if (out == null)
      out = $.vec3$zero();
    t1 = $.getInterceptor$x(y);
    t2 = $.min(x.x, t1.get$x(y));
    $.propertyTypeCast(out, "$isvec3");
    out.x = t2;
    out.y = $.min(x.y, t1.get$y(y));
    out.z = $.min(x.z, t1.get$z(y));
    return out;
  }
  if (typeof x === "object" && x !== null && !!x.$isvec4) {
    if (out == null)
      out = $.vec4$zero();
    t1 = $.getInterceptor$x(y);
    t2 = $.min(x.x, t1.get$x(y));
    $.propertyTypeCast(out, "$isvec4");
    out.x = t2;
    out.y = $.min(x.y, t1.get$y(y));
    out.z = $.min(x.z, t1.get$z(y));
    out.w = $.min(x.w, y.get$w());
    return out;
  }
  throw $.$$throw($.ArgumentError$(x));
};

$.max0 = function(x, y, out) {
  var t1, t2;
  if (typeof x === "number")
    return $.max(x, y);
  if (typeof x === "object" && x !== null && !!x.$isvec2) {
    if (out == null)
      out = $.vec2$zero();
    t1 = $.getInterceptor$x(y);
    t2 = $.max(x.x, t1.get$x(y));
    $.propertyTypeCast(out, "$isvec2");
    out.x = t2;
    out.y = $.max(x.y, t1.get$y(y));
    return out;
  }
  if (typeof x === "object" && x !== null && !!x.$isvec3) {
    if (out == null)
      out = $.vec3$zero();
    t1 = $.getInterceptor$x(y);
    t2 = $.max(x.x, t1.get$x(y));
    $.propertyTypeCast(out, "$isvec3");
    out.x = t2;
    out.y = $.max(x.y, t1.get$y(y));
    out.z = $.max(x.z, t1.get$z(y));
    return out;
  }
  if (typeof x === "object" && x !== null && !!x.$isvec4) {
    if (out == null)
      out = $.vec4$zero();
    t1 = $.getInterceptor$x(y);
    t2 = $.max(x.x, t1.get$x(y));
    $.propertyTypeCast(out, "$isvec4");
    out.x = t2;
    out.y = $.max(x.y, t1.get$y(y));
    out.z = $.max(x.z, t1.get$z(y));
    out.w = $.max(x.w, y.get$w());
    return out;
  }
  throw $.$$throw($.ArgumentError$(x));
};

$.clamp = function(x, min_, max_, out) {
  var t1, t2, t3, t4, t5, t6;
  if (typeof x === "number") {
    if ($.JSDouble_methods.$lt(x, min_))
      t1 = min_;
    else
      t1 = $.JSDouble_methods.$gt(x, max_) ? max_ : x;
    return t1;
  }
  if (typeof x === "object" && x !== null && !!x.$isvec2) {
    if (out == null)
      out = $.vec2$zero();
    t1 = x.x;
    t2 = $.getInterceptor$x(min_);
    t3 = t2.get$x(min_);
    t4 = $.getInterceptor$x(max_);
    t5 = t4.get$x(max_);
    t6 = $.getInterceptor$n(t1);
    if (t6.$lt(t1, t3) === true)
      t1 = t3;
    else if (t6.$gt(t1, t5) === true)
      t1 = t5;
    $.propertyTypeCast(out, "$isvec2");
    out.x = t1;
    t1 = x.y;
    t2 = t2.get$y(min_);
    t4 = t4.get$y(max_);
    t3 = $.getInterceptor$n(t1);
    if (t3.$lt(t1, t2) === true)
      t1 = t2;
    else if (t3.$gt(t1, t4) === true)
      t1 = t4;
    out.y = t1;
    return out;
  }
  if (typeof x === "object" && x !== null && !!x.$isvec3) {
    if (out == null)
      out = $.vec3$zero();
    t1 = x.x;
    t2 = $.getInterceptor$x(min_);
    t3 = t2.get$x(min_);
    t4 = $.getInterceptor$x(max_);
    t5 = t4.get$x(max_);
    t6 = $.getInterceptor$n(t1);
    if (t6.$lt(t1, t3) === true)
      t1 = t3;
    else if (t6.$gt(t1, t5) === true)
      t1 = t5;
    $.propertyTypeCast(out, "$isvec3");
    out.x = t1;
    t1 = x.y;
    t3 = t2.get$y(min_);
    t5 = t4.get$y(max_);
    t6 = $.getInterceptor$n(t1);
    if (t6.$lt(t1, t3) === true)
      t1 = t3;
    else if (t6.$gt(t1, t5) === true)
      t1 = t5;
    out.y = t1;
    t1 = x.z;
    t2 = t2.get$z(min_);
    t4 = t4.get$z(max_);
    t3 = $.getInterceptor$n(t1);
    if (t3.$lt(t1, t2) === true)
      t1 = t2;
    else if (t3.$gt(t1, t4) === true)
      t1 = t4;
    out.z = t1;
    return out;
  }
  if (typeof x === "object" && x !== null && !!x.$isvec4) {
    if (out == null)
      out = $.vec4$zero();
    t1 = x.x;
    t2 = $.getInterceptor$x(min_);
    t3 = t2.get$x(min_);
    t4 = $.getInterceptor$x(max_);
    t5 = t4.get$x(max_);
    t6 = $.getInterceptor$n(t1);
    if (t6.$lt(t1, t3) === true)
      t1 = t3;
    else if (t6.$gt(t1, t5) === true)
      t1 = t5;
    $.propertyTypeCast(out, "$isvec4");
    out.x = t1;
    t1 = x.y;
    t3 = t2.get$y(min_);
    t5 = t4.get$y(max_);
    t6 = $.getInterceptor$n(t1);
    if (t6.$lt(t1, t3) === true)
      t1 = t3;
    else if (t6.$gt(t1, t5) === true)
      t1 = t5;
    out.y = t1;
    t1 = x.z;
    t2 = t2.get$z(min_);
    t4 = t4.get$z(max_);
    t3 = $.getInterceptor$n(t1);
    if (t3.$lt(t1, t2) === true)
      t1 = t2;
    else if (t3.$gt(t1, t4) === true)
      t1 = t4;
    out.z = t1;
    t1 = x.w;
    t2 = min_.get$w();
    t3 = max_.get$w();
    t4 = $.getInterceptor$n(t1);
    if (t4.$lt(t1, t2) === true)
      t1 = t2;
    else if (t4.$gt(t1, t3) === true)
      t1 = t3;
    out.w = t1;
    return out;
  }
  throw $.$$throw($.ArgumentError$(x));
};

$.mat2$zero = function() {
  var t1 = new $.mat2(null, null);
  t1.mat2$zero$0();
  return t1;
};

$.mat2$copy = function(other) {
  var t1 = new $.mat2(null, null);
  t1.mat2$copy$1(other);
  return t1;
};

$.vec2$ = function(x_, y_) {
  var t1 = new $.vec2(null, null);
  t1.vec2$2(x_, y_);
  return t1;
};

$.vec2$zero = function() {
  var t1 = new $.vec2(null, null);
  t1.vec2$zero$0();
  return t1;
};

$.vec2$copy = function(other) {
  var t1 = new $.vec2(null, null);
  t1.vec2$copy$1(other);
  return t1;
};

$.vec2$raw = function(x_, y_) {
  var t1 = new $.vec2(null, null);
  t1.vec2$raw$2(x_, y_);
  return t1;
};

$.vec3$zero = function() {
  var t1 = new $.vec3(null, null, null);
  t1.vec3$zero$0();
  return t1;
};

$.vec3$copy = function(other) {
  var t1 = new $.vec3(null, null, null);
  t1.vec3$copy$1(other);
  return t1;
};

$.vec3$raw = function(x_, y_, z_) {
  var t1 = new $.vec3(null, null, null);
  t1.vec3$raw$3(x_, y_, z_);
  return t1;
};

$.vec4$zero = function() {
  var t1 = new $.vec4(null, null, null, null);
  t1.vec4$zero$0();
  return t1;
};

$.vec4$copy = function(other) {
  var t1 = new $.vec4(null, null, null, null);
  t1.vec4$copy$1(other);
  return t1;
};

$.vec4$raw = function(x_, y_, z_, w_) {
  var t1 = new $.vec4(null, null, null, null);
  t1.vec4$raw$4(x_, y_, z_, w_);
  return t1;
};

$.dot = function(x, y) {
  return x.dot$1(y);
};

$.cross = function(x, y, out) {
  var t1, t2, t3;
  if (typeof x === "object" && x !== null && !!x.$isvec3 && typeof y === "object" && y !== null && !!y.$isvec3)
    return x.cross$2(y, out);
  else {
    t1 = typeof x === "object" && x !== null && !!x.$isvec2;
    if (t1 && typeof y === "object" && y !== null && !!y.$isvec2)
      return x.cross$1(y);
    else if (typeof x === "number" && typeof y === "object" && y !== null && !!y.$isvec2) {
      x = $.toDouble$0$n(x);
      if (out == null)
        out = $.vec2$zero();
      t1 = $.getInterceptor$x(y);
      t2 = t1.get$y(y);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t3 = $.getInterceptor$x(out);
      t3.set$x(out, -x * t2);
      t1 = t1.get$x(y);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t3.set$y(out, x * t1);
      return out;
    } else if (t1 && typeof y === "number") {
      y = $.toDouble$0$n(y);
      if (out == null)
        out = $.vec2$zero();
      t1 = $.getInterceptor$x(x);
      t2 = t1.get$y(x);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t3 = $.getInterceptor$x(out);
      t3.set$x(out, y * t2);
      t1 = t1.get$x(x);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t3.set$y(out, -y * t1);
      return out;
    }
  }
  return;
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$._defaultErrorFormatter.call$5 = $._defaultErrorFormatter;
$._defaultErrorFormatter.$name = "_defaultErrorFormatter";
$.num = {builtin$cls: "num"};
$.TableRowElement = {builtin$cls: "TableRowElement"};
$.Match = {builtin$cls: "Match"};
$.String = {builtin$cls: "String"};
$.ReceivePort = {builtin$cls: "ReceivePort"};
$.Joint = {builtin$cls: "Joint"};
$.Node = {builtin$cls: "Node"};
$.$int = {builtin$cls: "$int"};
$.Element = {builtin$cls: "Element"};
$._ManagerStub = {builtin$cls: "_ManagerStub"};
$.List = {builtin$cls: "List"};
$.CONSTANT1 = new $._NullKey();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT3 = Isolate.makeConstantList([]);
$.JSInt_methods = $.JSInt.prototype;
$.CONSTANT = new $.NullThrownError();
$.CONSTANT7 = $.createRuntimeType('Null');
$.CONSTANT8 = $.createRuntimeType('bool');
$.JSArray_methods = $.JSArray.prototype;
$.CONSTANT10 = new $.Object();
$.JSBool_methods = $.JSBool.prototype;
$.CONSTANT2 = new $._LinkedHashTableHeadMarker();
$.JSDouble_methods = $.JSDouble.prototype;
$.JSNull_methods = $.JSNull.prototype;
$.CONSTANT9 = $.createRuntimeType('String');
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.CONSTANT5 = $.createRuntimeType('$int');
$.CONSTANT6 = $.createRuntimeType('$double');
$.CONSTANT4 = new $.Duration(0);
$.CONSTANT0 = new $._DeadEntry();
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__cachedCssPrefix = null;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$._assertFailureHandler = null;
$._assertErrorFormatter = null;
$.$$dom_arc$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return $.getInterceptor$x(receiver).$$dom_arc$6(receiver, a0, a1, a2, a3, a4, a5);
};
$.$$dom_removeChild$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_removeChild$1(receiver, a0);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (!(typeof receiver == "object"))
    return !(a0 == null) && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$shr$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shr(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$._getContext_1$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver)._getContext_1$2(receiver, a0, a1);
};
$._getContext_2$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver)._getContext_2$1(receiver, a0);
};
$._getPropertyValue$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver)._getPropertyValue$1(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.allMatches$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).allMatches$1(receiver, a0);
};
$.append$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).append$1(receiver, a0);
};
$.arc$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return $.getInterceptor$x(receiver).arc$6(receiver, a0, a1, a2, a3, a4, a5);
};
$.beginPath$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).beginPath$0(receiver);
};
$.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
$.clone$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).clone$0(receiver);
};
$.closePath$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).closePath$0(receiver);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.fill$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).fill$0(receiver);
};
$.floor$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).floor$0(receiver);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_body(receiver);
};
$.get$$$dom_childNodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_childNodes(receiver);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$$$dom_firstElementChild$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_firstElementChild(receiver);
};
$.get$$$dom_lastElementChild$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_lastElementChild(receiver);
};
$.get$$$dom_rows$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_rows(receiver);
};
$.get$_get_parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$_get_parent(receiver);
};
$.get$body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$body(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$error$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$error(receiver);
};
$.get$filter$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$filter(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$navigator$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$navigator(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parent(receiver);
};
$.get$parentNode$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parentNode(receiver);
};
$.get$points$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$points(receiver);
};
$.get$position$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$position(receiver);
};
$.get$rows$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$rows(receiver);
};
$.get$runtimeType$ = function(receiver) {
  return $.getInterceptor(receiver).get$runtimeType(receiver);
};
$.get$shape$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$shape(receiver);
};
$.get$type$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$type(receiver);
};
$.get$userAgent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$userAgent(receiver);
};
$.get$x$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$x(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.getContext$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
$.getPropertyValue$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getPropertyValue$1(receiver, a0);
};
$.lineTo$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).lineTo$2(receiver, a0, a1);
};
$.matches$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).matches$2(receiver, a0, a1);
};
$.moveTo$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).moveTo$2(receiver, a0, a1);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.query$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).query$1(receiver, a0);
};
$.remainder$1$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).remainder$1(receiver, a0);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.removeLast$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).removeLast$0(receiver);
};
$.replaceAll$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.requestAnimationFrame$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).requestAnimationFrame$1(receiver, a0);
};
$.reset$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).reset$0(receiver);
};
$.scale$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).scale$1(receiver, a0);
};
$.set$children$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$children(receiver, value);
};
$.set$fillStyle$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$parent$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$parent(receiver, value);
};
$.set$strokeStyle$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$strokeStyle(receiver, value);
};
$.set$text$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$text(receiver, value);
};
$.set$type$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$type(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.set$x$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$x(receiver, value);
};
$.set$y$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$y(receiver, value);
};
$.setFillColorRgb$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).setFillColorRgb$4(receiver, a0, a1, a2, a3);
};
$.setProperty$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).setProperty$3(receiver, a0, a1, a2);
};
$.setRange$3$ax = function(receiver, a0, a1, a2) {
  return $.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
};
$.setStrokeColorRgb$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).setStrokeColorRgb$4(receiver, a0, a1, a2, a3);
};
$.step$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).step$1(receiver, a0);
};
$.stroke$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).stroke$0(receiver);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.sublist$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
$.toDouble$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toDouble$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return void 0;
  return receiver;
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
// Native classes
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isCollection: function() {
    return false;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return false;
  },
  $asIterable: function() {
    return null;
  },
  $isList: function() {
    return false;
  },
  $asList: function() {
    return null;
  },
  $isElement: function() {
    return false;
  },
  $asElement: function() {
    return null;
  },
  toString$0: function(_) {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function(_) {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(_, a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "type%",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLAreaElement", {"": "shape="});

$.$defineNativeClass("HTMLButtonElement", {"": "type%"});

$.$defineNativeClass("HTMLCanvasElement", {"": "height},width}",
  getContext$2: function(receiver, contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return $._getContext_1$2$x(receiver, contextId, $.convertDartToNative_Dictionary(attrs));
    return $._getContext_2$1$x(receiver, contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, $);
  },
  _getContext_1$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId,attrs);
  },
  _getContext_2$1: function(receiver, contextId) {
    return receiver.getContext(contextId);
  }
});

$.$defineNativeClass("CanvasRenderingContext2D", {"": "fillStyle},strokeStyle}",
  $$dom_arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    return receiver.arc(x,y,radius,startAngle,endAngle,anticlockwise);
  },
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x,y,width,height);
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x,y);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x,y);
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  setFillColorRgb$4: function(receiver, r, g, b, a) {
    $.set$fillStyle$x(receiver, "rgba(" + $.S(r) + ", " + $.S(g) + ", " + $.S(b) + ", " + $.S(a) + ")");
  },
  setStrokeColorRgb$4: function(receiver, r, g, b, a) {
    $.set$strokeStyle$x(receiver, "rgba(" + $.S(r) + ", " + $.S(g) + ", " + $.S(b) + ", " + $.S(a) + ")");
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    $.$$dom_arc$6$x(receiver, x, y, radius, startAngle, endAngle, anticlockwise);
  }
});

$.$defineNativeClass("CharacterData", {"": "length="});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length=",
  _getPropertyValue$1: function(receiver, propertyName) {
    return receiver.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = $._getPropertyValue$1$x(receiver, propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  get$filter: function(receiver) {
    return $.getPropertyValue$1$x(receiver, $.S($.Device_cssPrefix()) + "filter");
  },
  set$height: function(receiver, value) {
    $.setProperty$3$x(receiver, "height", value, "");
  },
  get$position: function(receiver) {
    return $.getPropertyValue$1$x(receiver, "position");
  },
  set$width: function(receiver, value) {
    $.setProperty$3$x(receiver, "width", value, "");
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body=",
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  }
});

$.$defineNativeClass("DocumentFragment", {"": "_children%",
  get$children: function(receiver) {
    var t1 = $.getInterceptor$x(receiver);
    if (t1.get$_children(receiver) == null)
      t1.set$_children(receiver, $.FilteredElementList$(receiver));
    return t1.get$_children(receiver);
  },
  set$innerHtml: function(receiver, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$innerHtml")) {
      var t1, t2, e, nodes;
      t1 = $.getInterceptor$x(receiver);
      t2 = t1.get$nodes(receiver);
      t2.clear$0(t2);
      e = $.Element_Element$tag("div");
      t2 = $.getInterceptor$x(e);
      t2.set$innerHtml(e, value);
      nodes = $.List_List$from(t2.get$nodes(e), true, null);
      t1 = t1.get$nodes(receiver);
      t1.addAll$1(t1, nodes);
    } else
      return Object.prototype.set$innerHtml.call(this, receiver, value);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("Element", {"": "$$dom_children:children=,id=,innerHtml:innerHTML},$$dom_firstElementChild:firstElementChild=,$$dom_lastElementChild:lastElementChild=",
  get$children: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(receiver);
    } else
      return Object.prototype.get$children.call(this, receiver);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height},type%,width}"});

$.$defineNativeClass("Event", {"": "type="});

$.$defineNativeClass("EventException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLFieldSetElement", {"": "type="});

$.$defineNativeClass("FileException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length=",
  reset$0: function(receiver) {
    return receiver.reset();
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function(receiver) {
    return $.get$$$dom_body$x($.document());
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height},width}"});

$.$defineNativeClass("HTMLImageElement", {"": "height},width},x=,y="});

$.$defineNativeClass("HTMLInputElement", {"": "height},type%,width}",
  step$1: function($receiver, arg0) {
    return this.step.call$1(arg0);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLKeygenElement", {"": "type="});

$.$defineNativeClass("HTMLLIElement", {"": "type%"});

$.$defineNativeClass("HTMLLinkElement", {"": "type%"});

$.$defineNativeClass("HTMLMediaElement", {"": "error="});

$.$defineNativeClass("Navigator", {"": "userAgent="});

$.$defineNativeClass("Node", {"": "$$dom_childNodes:childNodes=,parent:parentElement=,parentNode=,text:textContent}",
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = $.get$parentNode$x(receiver);
    if (t1 != null)
      $.$$dom_removeChild$1$x(t1, receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = $.get$parentNode$x(receiver);
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  $$dom_removeChild$1: function(receiver, oldChild) {
    return receiver.removeChild(oldChild);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild,oldChild);
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "type%"});

$.$defineNativeClass("HTMLObjectElement", {"": "height},type%,width}"});

$.$defineNativeClass("HTMLOutputElement", {"": "type="});

$.$defineNativeClass("HTMLProgressElement", {"": "position="});

$.$defineNativeClass("RangeException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLScriptElement", {"": "type%"});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,type="});

$.$defineNativeClass("ShadowRoot", {"": "innerHtml:innerHTML}"});

$.$defineNativeClass("HTMLSourceElement", {"": "type%"});

$.$defineNativeClass("SpeechRecognitionError", {"": "error="});

$.$defineNativeClass("HTMLStyleElement", {"": "type%"});

$.$defineNativeClass("HTMLTableElement", {"": "$$dom_rows:rows=",
  get$rows: function(receiver) {
    return $._WrappedList$($.get$$$dom_rows$x(receiver), $.TableRowElement);
  }
});

$.$defineNativeClass("HTMLTableSectionElement", {"": "$$dom_rows:rows=",
  get$rows: function(receiver) {
    return $._WrappedList$($.get$$$dom_rows$x(receiver), $.TableRowElement);
  }
});

$.$defineNativeClass("HTMLTextAreaElement", {"": "rows=,type="});

$.$defineNativeClass("HTMLVideoElement", {"": "height},width}"});

$.$defineNativeClass("DOMWindow", {"": "navigator=,_get_parent:parent=",
  requestAnimationFrame$1: function(receiver, callback) {
    var t1 = $.getInterceptor$x(receiver);
    t1._ensureRequestAnimationFrame$0(receiver);
    return t1._requestAnimationFrame$1(receiver, callback);
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$parent: function(receiver) {
    return $._convertNativeToDart_Window($.get$_get_parent$x(receiver));
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x,y);
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "type=,x=,y="});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "x=,y="});

$.$defineNativeClass("SVGFECompositeElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "x=,y=",
  scale$1: function($receiver, arg0) {
    return this.scale.call$1(arg0);
  }
});

$.$defineNativeClass("SVGFEFloodElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEImageElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEMergeElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEOffsetElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEPointLightElement", {"": "x=,y=,z="});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "x=,y="});

$.$defineNativeClass("SVGFESpotLightElement", {"": "x=,y=,z="});

$.$defineNativeClass("SVGFETileElement", {"": "x=,y="});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "type=,x=,y="});

$.$defineNativeClass("SVGFilterElement", {"": "x=,y="});

$.$defineNativeClass("SVGForeignObjectElement", {"": "x=,y="});

$.$defineNativeClass("SVGImageElement", {"": "x=,y="});

$.$defineNativeClass("SVGMaskElement", {"": "x=,y="});

$.$defineNativeClass("SVGPatternElement", {"": "x=,y="});

$.$defineNativeClass("SVGPolygonElement", {"": "points="});

$.$defineNativeClass("SVGPolylineElement", {"": "points="});

$.$defineNativeClass("SVGRect", {"": "height},width},x%,y%"});

$.$defineNativeClass("SVGRectElement", {"": "x=,y="});

$.$defineNativeClass("SVGScriptElement", {"": "type%"});

$.$defineNativeClass("SVGStyleElement", {"": "type%"});

$.$defineNativeClass("SVGElement", {
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver);
  },
  set$children: function(receiver, value) {
    var children = $.get$children$x(receiver);
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    $.set$children$x(receiver, $.get$children$x($.$index$asx(t1.get$children(container), 0)));
  },
  get$$$dom_children: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "x=,y="});

$.$defineNativeClass("SVGTextPositioningElement", {"": "x=,y="});

$.$defineNativeClass("SVGUseElement", {"": "x=,y="});

$.$defineNativeClass("SVGComponentTransferFunctionElement", {"": "type="});

$.$defineNativeClass("SVGCursorElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "x=,y="});

$.$defineNativeClass("SVGGlyphRefElement", {"": "x%,y%"});

// 87 dynamic classes.
// 195 classes
// 17 !leaf
(function() {
  var v0_TextPositioningElement = "SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement", v1__SVGComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v2_MediaElement = "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement", v3_SvgElement = [v0_TextPositioningElement, v1__SVGComponentTransferFunctionElement, "SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGStyledElement|SVGSwitchElement|SVGSymbolElement|SVGTextContentElement|SVGTextPathElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement"].join("|"), v4_Element = [v2_MediaElement, v3_SvgElement, "Element|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement"].join("|"), v5_DocumentFragment = "DocumentFragment|ShadowRoot", v6_CharacterData = "CDATASection|CharacterData|Comment|Text", v7_Document = "Document|HTMLDocument|SVGDocument";
  $.dynamicSetMetadata([["CharacterData", v6_CharacterData], ["Document", v7_Document], ["DocumentFragment", v5_DocumentFragment], ["HTMLMediaElement", v2_MediaElement], ["SVGTextPositioningElement", v0_TextPositioningElement], ["SVGComponentTransferFunctionElement", v1__SVGComponentTransferFunctionElement], ["SVGElement", v3_SvgElement], ["Element", v4_Element], ["Event", "ErrorEvent|Event|SpeechRecognitionError"], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["Node", [v4_Element, v5_DocumentFragment, v6_CharacterData, v7_Document, "Attr|DocumentType|EntityReference|Node|Notation|ProcessingInstruction"].join("|")], ["NodeList", "NodeList|RadioNodeList"]]);
})();

$.main.call$0 = $.main;
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if ((!superclass || typeof superclass) != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=DominoTower.dart.js.map
