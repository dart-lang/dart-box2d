<?xml version="1.0" encoding="UTF-8"?>
<project name="DartBox2D" default="default">
  <!-- Expect ant-contrib 1.0b5 available -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <property environment="env" />
  <fail message="ERROR: Please set environmental variable DART_SDK">
    <condition>
      <not>
        <isset property="env.DART_SDK" />
      </not>
    </condition>
  </fail>

  <property name="dart.sdk.dir" value="${env.DART_SDK}" />
  <property name="dartdoc.dart" value="${dart.sdk.dir}/bin/dartdoc" />
  <property name="dart_analyzer" value="${dart.sdk.dir}/bin/dart_analyzer" />
  <property name="dart_analyzer.args" value="--enable_type_checks" />
  <property name="pub.dart" value="${dart.sdk.dir}/bin/pub" />

  <!-- Set envvar DB2D_WITH_CHECKS to compile with checks. -->
  <condition property="withChecks" value="true">
    <isset property="env.DB2D_WITH_CHECKS"/>
  </condition>
  <property name="withChecks" value="false" />

  <!-- Set envvar DB2D_THREAD_COUNT to parallelize.
       May affect output readability. -->
  <condition property="threadCount" value="${env.DB2D_THREAD_COUNT}">
    <matches pattern="^\d+$" string="${env.DB2D_THREAD_COUNT}"/>
  </condition>
  <property name="threadCount" value="1" />

  <path id="demos">
    <fileset dir="example/demos">
      <include name="*.dart" />
      <exclude name="demo.dart" />
      <include name="racer/racer.dart" />
    </fileset>
  </path>

  <macrodef name="dart_analyze">
    <attribute name="file" />
    <sequential>
      <echo>Analyzing @{file}</echo>
      <exec executable="${dart_analyzer}" failonerror="true">
        <arg line="${dart_analyzer.args} @{file}" />
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="dart2js">
    <attribute name="file" />
    <attribute name="withChecks" default="false" />

    <sequential>
      <local name="dart2js.args" />
      <if>
        <istrue value="@{withChecks}" />
        <then>
          <property name="dart2js.args" value="-c" />
        </then>
        <else>
          <property name="dart2js.args" value="" />
        </else>
      </if>

      <echo>Generating JS "@{file}.js" from "@{file}"</echo>
      <exec executable="${dart.sdk.dir}/bin/dart2js" failonerror="true">
        <arg line="${dart2js.args} -o@{file}.js @{file}"/>
      </exec>
    </sequential>
  </macrodef>

  <!-- MAIN -->
  <target name="default"
    depends="pub-install, analyze, generate-JS, generate-docs"
    description="Analyze, generate JS and library's DartDoc." />

  <target name="pub-install">
    <exec executable="${pub.dart}" failonerror="true">
      <arg line="install"/>
    </exec>
    <exec executable="${pub.dart}" failonerror="true">
      <arg line="update"/>
    </exec>
  </target>

  <target name="analyze"
    depends="analyze-libs, analyze-demos, analyze-benchmarks"
    description="Run dart_analyzer over library and all demos." />

  <target name="analyze-libs">
    <dart_analyze file="lib/box2d.dart" />
    <dart_analyze file="lib/box2d_browser.dart" />
  </target>

  <target name="analyze-demos">
    <for param="file" trim="true" parallel="true" threadCount="${threadCount}">
      <path refid="demos" />
      <sequential>
        <dart_analyze file="@{file}" />
      </sequential>
    </for>
  </target>

  <target name="analyze-benchmarks">
    <dart_analyze file="example/benchmarks/BenchmarkRunner.dart" />
  </target>

  <target name="generate-docs" description="Generate DartDoc for library.">
    <echo>Generating documentation</echo>
    <exec executable="${dartdoc.dart}" failonerror="true">
      <arg line="--no-show-private --omit-generation-time --pkg ./packages lib/box2d_browser.dart lib/box2d.dart"  />
    </exec>
  </target>

  <target name="generate-JS"
    depends="generate-JS-demos, generate-JS-benchmarks"
    description="Run dart2js on all demos and benchmarks." />

  <target name="generate-JS-demos">
    <for param="file" trim="true" parallel="true" threadCount="${threadCount}">
      <path refid="demos" />
      <sequential>
        <dart2js file="@{file}" withChecks="${withChecks}" />
      </sequential>
    </for>
  </target>

  <target name="generate-JS-benchmarks">
    <dart2js file="example/benchmarks/BenchmarkRunner.dart"
      withChecks="${withChecks}" />
  </target>

</project>

