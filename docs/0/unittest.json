{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"file:///usr/local/google/home/dominich/sdk/dart-sdk//lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"}],"uri":"file:///usr/local/google/home/dominich/sdk/dart-sdk//lib/core/core.dart","kind":"library","line":"5"}],"id":"unittest","name":"package:unittest/unittest.dart","children":[{"returnType":{"name":"void","refId":"void"},"id":"disableTest1()","name":"disableTest","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"testId","name":"testId","kind":"param"}],"kind":"method","comment":"Disable a test by ID. ","line":"857"},{"returnType":{"name":"void","refId":"void"},"id":"enableTest1()","name":"enableTest","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"testId","name":"testId","kind":"param"}],"kind":"method","comment":"Enable a test by ID. ","line":"854"},{"returnType":{"name":"void","refId":"void"},"id":"_setTestEnabledState2()","name":"_setTestEnabledState","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"testId","name":"testId","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"state","name":"state","kind":"param"}],"kind":"method","comment":"Enable/disable a test by ID. ","isPrivate":true,"line":"839"},{"returnType":{"name":"void","refId":"void"},"id":"setSoloTest1()","name":"setSoloTest","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"id","name":"id","kind":"param"}],"kind":"method","comment":"Select a solo test by ID. ","line":"829"},{"returnType":{"name":"void","refId":"void"},"id":"ensureInitialized0()","name":"ensureInitialized","kind":"method","comment":"\nLazily initializes the test library if not already initialized.\n","line":"804"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"_fullSpec1()","name":"_fullSpec","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"spec","name":"spec","kind":"param"}],"kind":"method","isPrivate":true,"line":"796"},{"id":"_completeTests0()","name":"_completeTests","kind":"method","comment":"Publish results on the page and notify controller. ","isPrivate":true,"line":"777"},{"id":"_nextBatch0()","name":"_nextBatch","kind":"method","comment":"\nRuns a batch of tests, yielding whenever an asynchronous test starts\nrunning. Tests will resume executing when such asynchronous test calls\n[done] or if it fails with an exception.\n","isPrivate":true,"line":"758"},{"id":"_registerException3()","name":"_registerException","children":[{"id":"testNum","name":"testNum","kind":"param"},{"id":"e","name":"e","kind":"param"},{"isOptional":true,"id":"trace","name":"trace","kind":"param"}],"kind":"method","comment":"\nRegisters that an exception was caught for the current test.\n","isPrivate":true,"line":"743"},{"returnType":{"name":"void","refId":"void"},"id":"registerException2()","name":"registerException","children":[{"id":"e","name":"e","kind":"param"},{"isOptional":true,"id":"trace","name":"trace","kind":"param"}],"kind":"method","comment":"\nRegisters that an exception was caught for the current test.\n","line":"736"},{"id":"_guardAsync3()","name":"_guardAsync","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"tryBody","name":"tryBody","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"finallyBody","name":"finallyBody","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"testNum","name":"testNum","kind":"param"}],"kind":"method","isPrivate":true,"line":"722"},{"id":"guardAsync1()","name":"guardAsync","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"tryBody","name":"tryBody","kind":"param"}],"kind":"method","comment":"\nRun [tryBody] guarded in a try-catch block. If an exception is thrown, it is\npassed to the corresponding test.\n\nThe value returned by [tryBody] (if any) is returned by [guardAsync].\n","line":"718"},{"returnType":{"name":"void","refId":"void"},"id":"runTests0()","name":"runTests","kind":"method","comment":"Runs all queued tests, one at a time. ","line":"696"},{"returnType":{"name":"void","refId":"void"},"id":"filterTests1()","name":"filterTests","children":[{"id":"testFilter","name":"testFilter","kind":"param"}],"kind":"method","comment":"\nFilter the tests. [testFilter] can be a [RegExp], a [String] or a\npredicate function. This is different to enabling/disabling tests\nin that it removes the tests completely.\n","line":"682"},{"returnType":{"name":"void","refId":"void"},"id":"rerunTests0()","name":"rerunTests","kind":"method","line":"671"},{"id":"_defer1()","name":"_defer","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","children":[{"returnType":{"name":"void","refId":"void"},"id":"Function","name":"Function","uri":"file:///usr/local/google/home/dominich/sdk/dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nRuns [callback] at the end of the event loop. Note that we don't wrap\nthe callback in guardAsync; this is for test framework functions which\nshould not be throwing unexpected exceptions that end up failing test\ncases! Furthermore, we need the final exception to be thrown but not\ncaught by the test framework if any test cases failed. However, tests\nthat make use of a similar defer function *should* wrap the callback\n(as we do in unitttest_test.dart).\n","isPrivate":true,"line":"667"},{"returnType":{"name":"void","refId":"void"},"id":"_reportTestError2()","name":"_reportTestError","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"msg","name":"msg","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"trace","name":"trace","kind":"param"}],"kind":"method","comment":"\nUtility function that can be used to notify the test framework that an\n error was caught outside of this library.\n","isPrivate":true,"line":"649"},{"returnType":{"name":"void","refId":"void"},"id":"_nextTestCase0()","name":"_nextTestCase","kind":"method","comment":"Advance to the next test case. ","isPrivate":true,"line":"638"},{"returnType":{"name":"void","refId":"void"},"id":"tearDown1()","name":"tearDown","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"teardownTest","name":"teardownTest","kind":"param"}],"kind":"method","comment":"\nRegister a [tearDown] function for a test [group]. This function will\nbe called after each test in the group is run. Note that if groups\nare nested only the most locally scoped [teardownTest] function will be run.\n[setUp] and [tearDown] should be called within the [group] before any\ncalls to [test]. The [teardownTest] function can be asynchronous; in this\ncase it must return a [Future].\n","line":"633"},{"returnType":{"name":"void","refId":"void"},"id":"setUp1()","name":"setUp","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"setupTest","name":"setupTest","kind":"param"}],"kind":"method","comment":"\nRegister a [setUp] function for a test [group]. This function will\nbe called before each test in the group is run. Note that if groups\nare nested only the most locally scoped [setUpTest] function will be run.\n[setUp] and [tearDown] should be called within the [group] before any\ncalls to [test]. The [setupTest] function can be asynchronous; in this\ncase it must return a [Future].\n","line":"621"},{"returnType":{"name":"void","refId":"void"},"id":"group2()","name":"group","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"description","name":"description","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"body","name":"body","children":[{"returnType":{"name":"void","refId":"void"},"id":"Function","name":"Function","uri":"file:///usr/local/google/home/dominich/sdk/dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nCreates a new named group of tests. Calls to group() or test() within the\nbody of the function passed to this will inherit this group's description.\n","line":"581"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"protectAsync22()","name":"protectAsync2","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param"}],"kind":"method","comment":"\nLike [protectAsync0] but [callback] should take 2 positional arguments.\n","line":"573"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"protectAsync12()","name":"protectAsync1","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param"}],"kind":"method","comment":"\nLike [protectAsync0] but [callback] should take 1 positional argument.\n","line":"565"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"protectAsync02()","name":"protectAsync0","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param"}],"kind":"method","comment":"\nWraps the [callback] in a new function and returns that function. The new\nfunction will be able to handle exceptions by directing them to the correct\ntest. This is thus similar to expectAsync0. Use it to wrap any callbacks that\nmight optionally be called but may never be called during the test.\n[callback] should take 0 positional arguments (named arguments are not\nsupported). [id] can be used to identify the callback in error\nmessages (for example if it is called after the test case is complete).\n","line":"557"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"_protectAsync2()","name":"_protectAsync","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param"}],"kind":"method","comment":"\nWraps the [callback] in a new function and returns that function. The new\nfunction will be able to handle exceptions by directing them to the correct\ntest. This is thus similar to expectAsync0. Use it to wrap any callbacks that\nmight optionally be called but may never be called during the test.\n[callback] should take between 0 and 4 positional arguments (named arguments\nare not supported). [id] can be used to identify the callback in error\nmessages (for example if it is called after the test case is complete).\n","isPrivate":true,"line":"543"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"expectAsyncUntil23()","name":"expectAsyncUntil2","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"isDone","name":"isDone","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param"}],"kind":"method","comment":"\nLike [expectAsyncUntil0] but [callback] should take 2 positional arguments.\n","line":"530"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"expectAsyncUntil13()","name":"expectAsyncUntil1","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"isDone","name":"isDone","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param"}],"kind":"method","comment":"\nLike [expectAsyncUntil0] but [callback] should take 1 positional argument.\n","line":"522"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"expectAsyncUntil03()","name":"expectAsyncUntil0","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"isDone","name":"isDone","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param"}],"kind":"method","comment":"\nIndicate that [callback] is expected to be called until [isDone] returns\ntrue. The unittest framework check [isDone] after each callback and only\nwhen it returns true will it continue with the following test. Using\n[expectAsyncUntil0] will also ensure that errors that occur within\n[callback] are tracked and reported. [callback] should take 0 positional\narguments (named arguments are not supported). [id] can be used to\nidentify the callback in error messages (for example if it is called\nafter the test case is complete).\n","line":"514"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"_expectAsyncUntil3()","name":"_expectAsyncUntil","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"isDone","name":"isDone","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param"}],"kind":"method","comment":"\nIndicate that [callback] is expected to be called until [isDone] returns\ntrue. The unittest framework checks [isDone] after each callback and only\nwhen it returns true will it continue with the following test. Using\n[expectAsyncUntil] will also ensure that errors that occur within\n[callback] are tracked and reported. [callback] should take between 0 and\n4 positional arguments (named arguments are not supported). [id] can be\nused to identify the callback in error messages (for example if it is called\nafter the test case is complete).\n","isPrivate":true,"line":"499"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"expectAsync24()","name":"expectAsync2","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param","line":"485"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"0","isOptional":true,"id":"max","name":"max","kind":"param","line":"485"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param","line":"485"}],"kind":"method","comment":"Like [expectAsync0] but [callback] should take 2 positional arguments. ","line":"484"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"expectAsync14()","name":"expectAsync1","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param","line":"478"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"0","isOptional":true,"id":"max","name":"max","kind":"param","line":"478"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param","line":"478"}],"kind":"method","comment":"Like [expectAsync0] but [callback] should take 1 positional argument. ","line":"477"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"expectAsync04()","name":"expectAsync0","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param","line":"471"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"0","isOptional":true,"id":"max","name":"max","kind":"param","line":"471"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param","line":"471"}],"kind":"method","comment":"\nIndicate that [callback] is expected to be called a [count] number of times\n(by default 1). The unittest framework will wait for the callback to run the\nspecified [count] times before it continues with the following test.  Using\n[expectAsync0] will also ensure that errors that occur within [callback] are\ntracked and reported. [callback] should take 0 positional arguments (named\narguments are not supported). [id] can be used to provide more\ndescriptive error messages if the callback is called more often than\nexpected. [max] can be used to specify an upper bound on the number of\ncalls; if this is exceeded the test will fail (or be marked as in error if\nit was already complete). A value of 0 for [max] (the default) will set\nthe upper bound to the same value as [count]; i.e. the callback should be\ncalled exactly [count] times. A value of -1 for [max] will mean no upper\nbound.\n","line":"470"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"id":"_expectAsync4()","name":"_expectAsync","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param","line":"450"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"0","isOptional":true,"id":"max","name":"max","kind":"param","line":"450"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"id","name":"id","kind":"param","line":"450"}],"kind":"method","comment":"\nIndicate that [callback] is expected to be called a [count] number of times\n(by default 1). The unittest framework will wait for the callback to run the\nspecified [count] times before it continues with the following test.  Using\n[_expectAsync] will also ensure that errors that occur within [callback] are\ntracked and reported. [callback] should take between 0 and 4 positional\narguments (named arguments are not supported here). [id] can be used\nto provide more descriptive error messages if the callback is called more\noften than expected.\n","isPrivate":true,"line":"449"},{"returnType":{"name":"void","refId":"void"},"id":"solo_test2()","name":"solo_test","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"spec","name":"spec","kind":"param"},{"ref":{"name":"TestFunction","refId":"unittest/TestFunction"},"id":"body","name":"body","kind":"param"}],"kind":"method","comment":"\nCreates a new test case with the given description and body. The\ndescription will include the descriptions of any surrounding group()\ncalls.\n\n\"solo_\" means that this will be the only test that is run. All other tests\nwill be skipped. This is a convenience function to let you quickly isolate\na single test by adding \"solo_\" before it to temporarily disable all other\ntests.\n","line":"268"},{"returnType":{"name":"void","refId":"void"},"id":"test2()","name":"test","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"spec","name":"spec","kind":"param"},{"ref":{"name":"TestFunction","refId":"unittest/TestFunction"},"id":"body","name":"body","kind":"param"}],"kind":"method","comment":"\nCreates a new test case with the given description and body. The\ndescription will include the descriptions of any surrounding group()\ncalls.\n","line":"253"},{"returnType":{"name":"TestCase","refId":"unittest/TestCase"},"id":"currentTestCase0()","name":"currentTestCase","kind":"method","line":"217"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"TestCase","refId":"unittest/TestCase"}]},"id":"testCases0()","name":"testCases","kind":"method","comment":"Get the list of tests. ","line":"199"},{"returnType":{"name":"void","refId":"void"},"id":"logMessage1()","name":"logMessage","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","line":"184"},{"returnType":{"name":"Configuration","refId":"unittest/Configuration"},"id":"configure1()","name":"configure","children":[{"ref":{"name":"Configuration","refId":"unittest/Configuration"},"id":"config","name":"config","kind":"param"}],"kind":"method","comment":"\nSet the [Configuration] used by the unittest library. Returns any\nprevious configuration.\nTODO: consider deprecating in favor of a setter now we have a getter.\n","line":"178"},{"returnType":{"name":"Configuration","refId":"unittest/Configuration"},"id":"config0()","name":"config","kind":"method","line":"171"},{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"id":"currentTestCase","name":"currentTestCase","kind":"property","line":"217"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"TestCase","refId":"unittest/TestCase"}]},"id":"testCases","name":"testCases","kind":"property","comment":"Get the list of tests. ","line":"199"},{"ref":{"name":"Configuration","refId":"unittest/Configuration"},"id":"config","name":"config","kind":"property","line":"171"},{"ref":{"name":"Map","refId":"dart.core/Map"},"id":"testState","name":"testState","kind":"variable","line":"246"},{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"id":"_soloTest","name":"_soloTest","kind":"variable","isPrivate":true,"line":"237"},{"id":"ERROR","name":"ERROR","kind":"variable","line":"234"},{"id":"FAIL","name":"FAIL","kind":"variable","line":"233"},{"id":"PASS","name":"PASS","kind":"variable","line":"232"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"_uncaughtErrorMessage","name":"_uncaughtErrorMessage","kind":"variable","isPrivate":true,"line":"225"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_initialized","name":"_initialized","kind":"variable","isPrivate":true,"line":"223"},{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"id":"_currentTestCase","name":"_currentTestCase","kind":"variable","isPrivate":true,"line":"215"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_currentTest","name":"_currentTest","kind":"variable","isPrivate":true,"line":"214"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"_testTeardown","name":"_testTeardown","kind":"variable","isPrivate":true,"line":"211"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"_testSetup","name":"_testSetup","kind":"variable","isPrivate":true,"line":"208"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"_testRunner","name":"_testRunner","kind":"variable","isPrivate":true,"line":"205"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"TestCase","refId":"unittest/TestCase"}]},"id":"_tests","name":"_tests","kind":"variable","isPrivate":true,"line":"196"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"groupSep","name":"groupSep","kind":"variable","line":"193"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"_currentGroup","name":"_currentGroup","kind":"variable","isPrivate":true,"line":"190"},{"ref":{"name":"Configuration","refId":"unittest/Configuration"},"id":"_config","name":"_config","kind":"variable","isPrivate":true,"line":"169"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"TestCase","name":"TestCase","children":[{"returnType":{"name":"void","refId":"void"},"id":"_prepTest0()","name":"_prepTest","kind":"method","isPrivate":true,"line":"70"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"id":"_runTest0()","name":"_runTest","kind":"method","isPrivate":true,"line":"76"},{"returnType":{"name":"void","refId":"void"},"id":"_finishTest0()","name":"_finishTest","kind":"method","isPrivate":true,"line":"94"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"id":"_run0()","name":"_run","kind":"method","comment":"\nPerform any associated [_setUp] function and run the test. Returns\na [Future] that can be used to schedule the next test. If the test runs\nto completion synchronously, or is disabled, null is returned, to\ntell unittest to schedule the next test immediately.\n","isPrivate":true,"line":"106"},{"returnType":{"name":"void","refId":"void"},"id":"_notifyComplete0()","name":"_notifyComplete","kind":"method","isPrivate":true,"line":"137"},{"returnType":{"name":"void","refId":"void"},"id":"_setResult3()","name":"_setResult","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"testResult","name":"testResult","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"messageText","name":"messageText","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"stack","name":"stack","kind":"param"}],"kind":"method","isPrivate":true,"line":"146"},{"returnType":{"name":"void","refId":"void"},"id":"_complete3()","name":"_complete","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"testResult","name":"testResult","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"id":"messageText","name":"messageText","kind":"param","line":"159"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"id":"stack","name":"stack","kind":"param","line":"160"}],"kind":"method","isPrivate":true,"line":"158"},{"returnType":{"name":"void","refId":"void"},"id":"pass0()","name":"pass","kind":"method","line":"187"},{"returnType":{"name":"void","refId":"void"},"id":"fail2()","name":"fail","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"messageText","name":"messageText","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"id":"stack","name":"stack","kind":"param"}],"kind":"method","line":"191"},{"returnType":{"name":"void","refId":"void"},"id":"error2()","name":"error","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"messageText","name":"messageText","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"id":"stack","name":"stack","kind":"param"}],"kind":"method","line":"203"},{"returnType":{"name":"void","refId":"void"},"id":"_markCallbackComplete0()","name":"_markCallbackComplete","kind":"method","isPrivate":true,"line":"207"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"property","comment":"Error or failure message. ","line":"36"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"result","name":"result","kind":"property","comment":"\nOne of [PASS], [FAIL], [ERROR], or [null] if the test hasn't run yet.\n","line":"42"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"stackTrace","name":"stackTrace","kind":"property","comment":"Stack trace associated with this test, or [null] if it succeeded. ","line":"46"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"id":"startTime","name":"startTime","kind":"property","line":"52"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"id":"runningTime","name":"runningTime","kind":"property","line":"55"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isComplete","name":"isComplete","kind":"property","line":"68"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"id","name":"id","kind":"variable","line":"14"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"description","name":"description","kind":"variable","line":"17"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"setUp","name":"setUp","kind":"variable","line":"20"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"tearDown","name":"tearDown","kind":"variable","line":"23"},{"ref":{"name":"TestFunction","refId":"unittest/TestFunction"},"id":"testFunction","name":"testFunction","kind":"variable","line":"26"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_callbackFunctionsOutstanding","name":"_callbackFunctionsOutstanding","kind":"variable","isPrivate":true,"line":"32"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"_message","name":"_message","kind":"variable","isPrivate":true,"line":"34"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"_result","name":"_result","kind":"variable","isPrivate":true,"line":"38"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"_stackTrace","name":"_stackTrace","kind":"variable","isPrivate":true,"line":"44"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"currentGroup","name":"currentGroup","kind":"variable","line":"49"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"id":"_startTime","name":"_startTime","kind":"variable","isPrivate":true,"line":"51"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"id":"_runningTime","name":"_runningTime","kind":"variable","isPrivate":true,"line":"54"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"enabled","name":"enabled","kind":"variable","line":"57"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_doneTeardown","name":"_doneTeardown","kind":"variable","isPrivate":true,"line":"59"},{"ref":{"name":"Completer","refId":"dart.async/Completer"},"id":"_testComplete","name":"_testComplete","kind":"variable","isPrivate":true,"line":"61"},{"id":"TestCase._internal3()","name":"TestCase._internal","children":[{"initializedField":{"name":"id","refId":"unittest/TestCase/id"},"ref":{"name":"int","refId":"dart.core/int"},"id":"id","name":"id","kind":"param"},{"initializedField":{"name":"description","refId":"unittest/TestCase/description"},"ref":{"name":"String","refId":"dart.core/String"},"id":"description","name":"description","kind":"param"},{"initializedField":{"name":"testFunction","refId":"unittest/TestCase/testFunction"},"ref":{"name":"TestFunction","refId":"unittest/TestFunction"},"id":"testFunction","name":"testFunction","kind":"param"}],"kind":"constructor","isPrivate":true,"line":"63"}],"uri":"package:unittest/src/test_case.dart","kind":"class","comment":"\nRepresents the state for an individual unit test.\n\nCreate by calling [test] or [solo_test].\n","line":"12"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Configuration","name":"Configuration","children":[{"returnType":{"name":"void","refId":"void"},"id":"onInit0()","name":"onInit","kind":"method","comment":"\nCalled as soon as the unittest framework becomes initialized. This is done\neven before tests are added to the test framework. It might be used to\ndetermine/debug errors that occur before the test harness starts executing.\nIt is also used to tell the vm or browser that tests are going to be run\nasynchronously and that the process should wait until they are done.\n","line":"39"},{"returnType":{"name":"void","refId":"void"},"id":"onStart0()","name":"onStart","kind":"method","comment":"Called as soon as the unittest framework starts running. ","line":"45"},{"returnType":{"name":"void","refId":"void"},"id":"onTestStart1()","name":"onTestStart","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"id":"testCase","name":"testCase","kind":"param"}],"kind":"method","comment":"\nCalled when each test starts. Useful to show intermediate progress on\na test suite.\n","line":"51"},{"returnType":{"name":"void","refId":"void"},"id":"onTestResult1()","name":"onTestResult","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"id":"testCase","name":"testCase","kind":"param"}],"kind":"method","comment":"\nCalled when each test is first completed. Useful to show intermediate\nprogress on a test suite.\n","line":"59"},{"returnType":{"name":"void","refId":"void"},"id":"onTestResultChanged1()","name":"onTestResultChanged","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"id":"testCase","name":"testCase","kind":"param"}],"kind":"method","comment":"\nCalled when an already completed test changes state; for example a test\nthat was marked as passing may later be marked as being in error because\nit still had callbacks being invoked.\n","line":"68"},{"returnType":{"name":"void","refId":"void"},"id":"logMessage1()","name":"logMessage","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"\nCan be called by tests to log status. Tests should use this\ninstead of print. Subclasses should not override this; they\nshould instead override logMessage which is passed the test case.\n","line":"77"},{"returnType":{"name":"void","refId":"void"},"id":"logTestCaseMessage2()","name":"logTestCaseMessage","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"id":"testCase","name":"testCase","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"\nHandles the logging of messages by a test case. The default in\nthis base configuration is to call print();\n","line":"91"},{"returnType":{"name":"void","refId":"void"},"id":"onSummary5()","name":"onSummary","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"passed","name":"passed","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"failed","name":"failed","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"errors","name":"errors","kind":"param"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"TestCase","refId":"unittest/TestCase"}]},"id":"results","name":"results","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"uncaughtError","name":"uncaughtError","kind":"param","line":"104"}],"kind":"method","comment":"\nCalled with the result of all test cases. The default implementation prints\nthe result summary using the built-in [print] command. Browser tests\ncommonly override this to reformat the output.\n\nWhen [uncaughtError] is not null, it contains an error that occured outside\nof tests (e.g. setting up the test).\n","line":"103"},{"returnType":{"name":"void","refId":"void"},"id":"onDone1()","name":"onDone","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"success","name":"success","kind":"param"}],"kind":"method","comment":"\nCalled when the unittest framework is done running. [success] indicates\nwhether all tests passed successfully.\n","line":"141"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"_indent1()","name":"_indent","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"str","name":"str","kind":"param"}],"kind":"method","isPrivate":true,"line":"151"},{"returnType":{"name":"void","refId":"void"},"id":"handleExternalError3()","name":"handleExternalError","children":[{"id":"e","name":"e","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"id":"stack","name":"stack","kind":"param"}],"kind":"method","comment":"Handle errors that happen outside the tests. ","line":"161"},{"id":"_postMessage1()","name":"_postMessage","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","isPrivate":true,"line":"164"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"property","comment":"\nSubclasses can override this with something useful for diagnostics.\nParticularly useful in cases where we have parent/child configurations\nsuch as layout tests.\n","line":"24"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"autoStart","name":"autoStart","kind":"property","comment":"\nIf true, then tests are started automatically (otherwise [runTests]\nmust be called explicitly after the tests are set up.\n","line":"30"},{"ref":{"name":"ReceivePort","refId":"dart.isolate/ReceivePort"},"id":"_receivePort","name":"_receivePort","kind":"variable","isPrivate":true,"line":"17"}],"uri":"package:unittest/src/config.dart","kind":"class","comment":"\nHooks to configure the unittest library for different platforms. This class\nimplements the API in a platform-independent way. Tests that want to take\nadvantage of the platform can create a subclass and override methods from\nthis class.\n","line":"14"},{"id":"TestFunction","name":"TestFunction","kind":"typedef","comment":"Signature for a test function. ","line":"860"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"_SpreadArgsHelper","name":"_SpreadArgsHelper","children":[{"isStatic":true,"id":"_makeCallbackId2()","name":"_makeCallbackId","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"id","name":"id","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"}],"kind":"method","isPrivate":true,"line":"330"},{"id":"shouldCallBack0()","name":"shouldCallBack","kind":"method","line":"351"},{"id":"after0()","name":"after","kind":"method","line":"371"},{"id":"invoke5()","name":"invoke","children":[{"defaultValue":"sentinel","isOptional":true,"id":"arg0","name":"arg0","kind":"param"},{"defaultValue":"sentinel","isOptional":true,"id":"arg1","name":"arg1","kind":"param"},{"defaultValue":"sentinel","isOptional":true,"id":"arg2","name":"arg2","kind":"param"},{"defaultValue":"sentinel","isOptional":true,"id":"arg3","name":"arg3","kind":"param","line":"384"},{"defaultValue":"sentinel","isOptional":true,"id":"arg4","name":"arg4","kind":"param","line":"384"}],"kind":"method","line":"383"},{"id":"invoke00()","name":"invoke0","kind":"method","line":"408"},{"id":"invoke11()","name":"invoke1","children":[{"id":"arg1","name":"arg1","kind":"param"}],"kind":"method","line":"418"},{"id":"invoke22()","name":"invoke2","children":[{"id":"arg1","name":"arg1","kind":"param"},{"id":"arg2","name":"arg2","kind":"param"}],"kind":"method","line":"428"},{"isFinal":true,"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"variable","line":"290"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"minExpectedCalls","name":"minExpectedCalls","kind":"variable","line":"291"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"maxExpectedCalls","name":"maxExpectedCalls","kind":"variable","line":"292"},{"isFinal":true,"ref":{"name":"Function","refId":"dart.core/Function"},"id":"isDone","name":"isDone","kind":"variable","line":"293"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"testNum","name":"testNum","kind":"variable","line":"294"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"id","name":"id","kind":"variable","line":"295"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"actualCalls","name":"actualCalls","kind":"variable","line":"296"},{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"id":"testCase","name":"testCase","kind":"variable","line":"297"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"complete","name":"complete","kind":"variable","line":"298"},{"isStatic":true,"id":"sentinel","name":"sentinel","kind":"variable","line":"299"},{"id":"_SpreadArgsHelper5()","name":"_SpreadArgsHelper","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"callback","name":"callback","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"minExpected","name":"minExpected","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"maxExpected","name":"maxExpected","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"isDone","name":"isDone","kind":"param","line":"302"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"id","name":"id","kind":"param","line":"302"}],"kind":"constructor","line":"301"}],"kind":"class","comment":"Simulates spread arguments using named arguments. ","isPrivate":true,"line":"289"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"_Sentinel","name":"_Sentinel","children":[{"id":"_Sentinel0()","name":"_Sentinel","kind":"constructor","line":"283"}],"kind":"class","comment":"Sentinel value for [_SpreadArgsHelper]. ","isPrivate":true,"line":"282"}],"uri":"package:unittest/unittest.dart","kind":"library","comment":"\nA library for writing dart unit tests.\n\nTo import this library, install the\n[unittest package](http://pub.dartlang.org/packages/unittest) via the pub\npackage manager. See the [Getting Started](http://pub.dartlang.org/doc)\nguide for more details.\n\n##Concepts##\n\n * __Tests__: Tests are specified via the top-level function [test], they can be\n   organized together using [group].\n * __Checks__: Test expectations can be specified via [expect]\n * __Matchers__: [expect] assertions are written declaratively using the\n   [Matcher] class.\n * __Configuration__: The framework can be adapted by calling [configure] with a\n   [Configuration]. See the other libraries in the `unittest` package for\n   alternative implementations of [Configuration] including\n   `compact_vm_config.dart`, `html_config.dart` and\n   `html_enhanced_config.dart`.\n\n##Examples##\n\nA trivial test:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      test('this is a test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n    }\n\nMultiple tests:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      test('this is a test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n      test('this is another test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n    }\n\nMultiple tests, grouped by category:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      group('group A', () {\n        test('test A.1', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n        test('test A.2', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n      });\n      group('group B', () {\n        test('this B.1', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n      });\n    }\n\nAsynchronous tests: if callbacks expect between 0 and 2 positional arguments,\ndepending on the suffix of expectAsyncX(). expectAsyncX() will wrap a\nfunction into a new callback and will not consider the test complete until\nthat callback is run. A count argument can be provided to specify the number\nof times the callback should be called (the default is 1).\n\n    import 'package:unittest/unittest.dart';\n    import 'dart:isolate';\n    main() {\n      test('callback is executed once', () {\n        // wrap the callback of an asynchronous call with [expectAsync0] if\n        // the callback takes 0 arguments...\n        var timer = Timer.run(expectAsync0(() {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        }));\n      });\n\n      test('callback is executed twice', () {\n        var callback = expectAsync0(() {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        }, count: 2); // <-- we can indicate multiplicity to [expectAsync0]\n        Timer.run(callback);\n        Timer.run(callback);\n      });\n    }\n\nexpectAsyncX() will wrap the callback code in a try/catch handler to handle\nexceptions (treated as test failures). There may be times when the number of\ntimes a callback should be called is non-deterministic. In this case a dummy\ncallback can be created with expectAsync0((){}) and this can be called from\nthe real callback when it is finally complete. In this case the body of the\ncallback should be protected within a call to guardAsync(); this will ensure\nthat exceptions are properly handled.\n\nA variation on this is expectAsyncUntilX(), which takes a callback as the\nfirst parameter and a predicate function as the second parameter; after each\ntime * the callback is called, the predicate function will be called; if it\nreturns false the test will still be considered incomplete.\n\nTest functions can return [Future]s, which provide another way of doing\nasynchronous tests. The test framework will handle exceptions thrown by\nthe Future, and will advance to the next test when the Future is complete.\nIt is still important to use expectAsync/guardAsync with any parts of the\ntest that may be invoked from a top level context (for example, with\nTimer.run()], as the Future exception handler may not capture exceptions\nin such code.\n\nNote: due to some language limitations we have to use different functions\ndepending on the number of positional arguments of the callback. In the\nfuture, we plan to expose a single `expectAsync` function that can be used\nregardless of the number of positional arguments. This requires new langauge\nfeatures or fixes to the current spec (e.g. see\n[Issue 2706](http://dartbug.com/2706)).\n\nMeanwhile, we plan to add this alternative API for callbacks of more than 2\narguments or that take named parameters. (this is not implemented yet,\nbut will be coming here soon).\n\n    import 'package:unittest/unittest.dart';\n    import 'dart:isolate';\n    main() {\n      test('callback is executed', () {\n        // indicate ahead of time that an async callback is expected.\n        var async = startAsync();\n        Timer.run(() {\n          // Guard the body of the callback, so errors are propagated\n          // correctly.\n          guardAsync(() {\n            int x = 2 + 3;\n            expect(x, equals(5));\n          });\n          // indicate that the asynchronous callback was invoked.\n          async.complete();\n        });\n      });\n    }\n\n","line":"154"}