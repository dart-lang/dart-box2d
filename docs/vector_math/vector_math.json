{"name":"vector_math","qualifiedName":"vector_math/vector_math","comment":"","variables":{"sqrtOneHalf":{"name":"sqrtOneHalf","qualifiedName":"vector_math/vector_math.sqrtOneHalf","comment":"<p>Use SQRT1_2 from dart:math instead</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[{"name":"dart-core.Deprecated","parameters":["next release"]}]},"radians2degrees":{"name":"radians2degrees","qualifiedName":"vector_math/vector_math.radians2degrees","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"degrees2radians":{"name":"degrees2radians","qualifiedName":"vector_math/vector_math.degrees2radians","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"buildPlaneVectors":{"name":"buildPlaneVectors","qualifiedName":"vector_math/vector_math.buildPlaneVectors","comment":"<p>Sets <a>vector_math/vector_math.buildPlaneVectors.u</a> and <a>vector_math/vector_math.buildPlaneVectors.v</a> to be two vectors orthogonal to each other and\n<a>vector_math/vector_math.buildPlaneVectors.planeNormal</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"planeNormal":{"name":"planeNormal","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"u":{"name":"u","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cross2B":{"name":"cross2B","qualifiedName":"vector_math/vector_math.cross2B","comment":"<p>2D cross product. vec2 x double.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector2","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cross2A":{"name":"cross2A","qualifiedName":"vector_math/vector_math.cross2A","comment":"<p>2D cross product. double x vec2.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector2","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cross2":{"name":"cross2","qualifiedName":"vector_math/vector_math.cross2","comment":"<p>2D cross product. vec2 x vec2.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector2","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cross3":{"name":"cross3","qualifiedName":"vector_math/vector_math.cross3","comment":"<p>3D Cross product.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"dot3":{"name":"dot3","qualifiedName":"vector_math/vector_math.dot3","comment":"<p>3D dot product.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"dot2":{"name":"dot2","qualifiedName":"vector_math/vector_math.dot2","comment":"<p>2D dot product.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector2","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"pickRay":{"name":"pickRay","qualifiedName":"vector_math/vector_math.pickRay","comment":"<p>On success, <a>vector_math/vector_math.pickRay.rayNear</a> and <a>vector_math/vector_math.pickRay.rayFar</a> are the points where\nthe screen space <a>vector_math/vector_math.pickRay.pickX</a>, <a>vector_math/vector_math.pickRay.pickY</a> intersect with the near and far\nplanes respectively.</p>\n<p>The viewport is specified by (<a>vector_math/vector_math.pickRay.viewportX</a>, <a>vector_math/vector_math.pickRay.viewportWidth</a>) and\n(<a>vector_math/vector_math.pickRay.viewportY</a>, <a>vector_math/vector_math.pickRay.viewportHeight</a>).</p>\n<p><a>vector_math/vector_math.pickRay.cameraMatrix</a> includes both the projection and view transforms.</p>\n<p>Returns false on error, for example, the mouse is not in the viewport</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"cameraMatrix":{"name":"cameraMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"value":"null","annotations":[]},"viewportX":{"name":"viewportX","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportWidth":{"name":"viewportWidth","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportY":{"name":"viewportY","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportHeight":{"name":"viewportHeight","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickX":{"name":"pickX","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickY":{"name":"pickY","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"rayNear":{"name":"rayNear","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"rayFar":{"name":"rayFar","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"unproject":{"name":"unproject","qualifiedName":"vector_math/vector_math.unproject","comment":"<p>On success, Sets <a>vector_math/vector_math.unproject.pickWorld</a> to be the world space position of\nthe screen space <a>vector_math/vector_math.unproject.pickX</a>, <a>vector_math/vector_math.unproject.pickY</a>, and <a>vector_math/vector_math.unproject.pickZ</a>.</p>\n<p>The viewport is specified by (<a>vector_math/vector_math.unproject.viewportX</a>, <a>vector_math/vector_math.unproject.viewportWidth</a>) and\n(<a>vector_math/vector_math.unproject.viewportY</a>, <a>vector_math/vector_math.unproject.viewportHeight</a>).</p>\n<p><a>vector_math/vector_math.unproject.cameraMatrix</a> includes both the projection and view transforms.</p>\n<p><a>vector_math/vector_math.unproject.pickZ</a> is typically either 0.0 (near plane) or 1.0 (far plane).</p>\n<p>Returns false on error, for example, the mouse is not in the viewport</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"cameraMatrix":{"name":"cameraMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"value":"null","annotations":[]},"viewportX":{"name":"viewportX","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportWidth":{"name":"viewportWidth","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportY":{"name":"viewportY","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportHeight":{"name":"viewportHeight","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickX":{"name":"pickX","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickY":{"name":"pickY","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickZ":{"name":"pickZ","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickWorld":{"name":"pickWorld","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makePlaneReflection":{"name":"makePlaneReflection","qualifiedName":"vector_math/vector_math.makePlaneReflection","comment":"<p>Returns a transformation matrix that transforms points by reflecting\nthem through the plane specified with <a>vector_math/vector_math.makePlaneReflection.planeNormal</a> and <a>vector_math/vector_math.makePlaneReflection.planePoint</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"parameters":{"planeNormal":{"name":"planeNormal","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"planePoint":{"name":"planePoint","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makePlaneProjection":{"name":"makePlaneProjection","qualifiedName":"vector_math/vector_math.makePlaneProjection","comment":"<p>Returns a transformation matrix that transforms points onto\nthe plane specified with <a>vector_math/vector_math.makePlaneProjection.planeNormal</a> and <a>vector_math/vector_math.makePlaneProjection.planePoint</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"parameters":{"planeNormal":{"name":"planeNormal","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"planePoint":{"name":"planePoint","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makeOrthographicMatrix":{"name":"makeOrthographicMatrix","qualifiedName":"vector_math/vector_math.makeOrthographicMatrix","comment":"<p>Constructs a new OpenGL orthographic projection matrix.</p>\n<p><a>vector_math/vector_math.makeOrthographicMatrix.left</a>, <a>vector_math/vector_math.makeOrthographicMatrix.right</a> specify the coordinates for the left and right vertical\nclipping planes.\n<a>vector_math/vector_math.makeOrthographicMatrix.bottom</a>, <a>vector_math/vector_math.makeOrthographicMatrix.top</a> specify the coordinates for the bottom and top horizontal\nclipping planes.\n<a>vector_math/vector_math.makeOrthographicMatrix.near</a>, <a>vector_math/vector_math.makeOrthographicMatrix.far</a> specify the coordinates to the near and far depth clipping\nplanes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"parameters":{"left":{"name":"left","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"right":{"name":"right","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"bottom":{"name":"bottom","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"top":{"name":"top","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"near":{"name":"near","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"far":{"name":"far","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setOrthographicMatrix":{"name":"setOrthographicMatrix","qualifiedName":"vector_math/vector_math.setOrthographicMatrix","comment":"<p>Constructs an OpenGL orthographic projection matrix in <a>vector_math/vector_math.setOrthographicMatrix.orthographicMatrix</a>.</p>\n<p><a>vector_math/vector_math.setOrthographicMatrix.left</a>, <a>vector_math/vector_math.setOrthographicMatrix.right</a> specify the coordinates for the left and right vertical\nclipping planes.\n<a>vector_math/vector_math.setOrthographicMatrix.bottom</a>, <a>vector_math/vector_math.setOrthographicMatrix.top</a> specify the coordinates for the bottom and top horizontal\nclipping planes.\n<a>vector_math/vector_math.setOrthographicMatrix.near</a>, <a>vector_math/vector_math.setOrthographicMatrix.far</a> specify the coordinates to the near and far depth clipping\nplanes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"orthographicMatrix":{"name":"orthographicMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"value":"null","annotations":[]},"left":{"name":"left","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"right":{"name":"right","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"bottom":{"name":"bottom","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"top":{"name":"top","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"near":{"name":"near","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"far":{"name":"far","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makeFrustumMatrix":{"name":"makeFrustumMatrix","qualifiedName":"vector_math/vector_math.makeFrustumMatrix","comment":"<p>Constructs a new OpenGL perspective projection matrix.</p>\n<p><a>vector_math/vector_math.makeFrustumMatrix.left</a>, <a>vector_math/vector_math.makeFrustumMatrix.right</a> specify the coordinates for the left and right vertical\nclipping planes.\n<a>vector_math/vector_math.makeFrustumMatrix.bottom</a>, <a>vector_math/vector_math.makeFrustumMatrix.top</a> specify the coordinates for the bottom and top horizontal\nclipping planes.\n<a>vector_math/vector_math.makeFrustumMatrix.near</a>, <a>vector_math/vector_math.makeFrustumMatrix.far</a> specify the coordinates to the near and far depth clipping\nplanes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"parameters":{"left":{"name":"left","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"right":{"name":"right","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"bottom":{"name":"bottom","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"top":{"name":"top","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"near":{"name":"near","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"far":{"name":"far","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setFrustumMatrix":{"name":"setFrustumMatrix","qualifiedName":"vector_math/vector_math.setFrustumMatrix","comment":"<p>Constructs an OpenGL perspective projection matrix in <a>vector_math/vector_math.setFrustumMatrix.perspectiveMatrix</a>.</p>\n<p><a>vector_math/vector_math.setFrustumMatrix.left</a>, <a>vector_math/vector_math.setFrustumMatrix.right</a> specify the coordinates for the left and right vertical\nclipping planes.\n<a>vector_math/vector_math.setFrustumMatrix.bottom</a>, <a>vector_math/vector_math.setFrustumMatrix.top</a> specify the coordinates for the bottom and top horizontal\nclipping planes.\n<a>vector_math/vector_math.setFrustumMatrix.near</a>, <a>vector_math/vector_math.setFrustumMatrix.far</a> specify the coordinates to the near and far depth clipping\nplanes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"perspectiveMatrix":{"name":"perspectiveMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"value":"null","annotations":[]},"left":{"name":"left","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"right":{"name":"right","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"bottom":{"name":"bottom","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"top":{"name":"top","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"near":{"name":"near","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"far":{"name":"far","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makePerspectiveMatrix":{"name":"makePerspectiveMatrix","qualifiedName":"vector_math/vector_math.makePerspectiveMatrix","comment":"<p>Constructs a new OpenGL perspective projection matrix.</p>\n<p><a>vector_math/vector_math.makePerspectiveMatrix.fovYRadians</a> specifies the field of view angle, in radians, in the y\ndirection.\n<a>vector_math/vector_math.makePerspectiveMatrix.aspectRatio</a> specifies the aspect ratio that determines the field of view\nin the x direction. The aspect ratio of x (width) to y (height).\n<a>vector_math/vector_math.makePerspectiveMatrix.zNear</a> specifies the distance from the viewer to the near plane\n(always positive).\n<a>vector_math/vector_math.makePerspectiveMatrix.zFar</a> specifies the distance from the viewer to the far plane\n(always positive).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"parameters":{"fovYRadians":{"name":"fovYRadians","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"aspectRatio":{"name":"aspectRatio","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"zNear":{"name":"zNear","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"zFar":{"name":"zFar","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setPerspectiveMatrix":{"name":"setPerspectiveMatrix","qualifiedName":"vector_math/vector_math.setPerspectiveMatrix","comment":"<p>Constructs an OpenGL perspective projection matrix in <a>vector_math/vector_math.setPerspectiveMatrix.perspectiveMatrix</a>.</p>\n<p><a>vector_math/vector_math.setPerspectiveMatrix.fovYRadians</a> specifies the field of view angle, in radians, in the y\ndirection.\n<a>vector_math/vector_math.setPerspectiveMatrix.aspectRatio</a> specifies the aspect ratio that determines the field of view\nin the x direction. The aspect ratio of x (width) to y (height).\n<a>vector_math/vector_math.setPerspectiveMatrix.zNear</a> specifies the distance from the viewer to the near plane\n(always positive).\n<a>vector_math/vector_math.setPerspectiveMatrix.zFar</a> specifies the distance from the viewer to the far plane\n(always positive).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"perspectiveMatrix":{"name":"perspectiveMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"value":"null","annotations":[]},"fovYRadians":{"name":"fovYRadians","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"aspectRatio":{"name":"aspectRatio","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"zNear":{"name":"zNear","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"zFar":{"name":"zFar","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makeViewMatrix":{"name":"makeViewMatrix","qualifiedName":"vector_math/vector_math.makeViewMatrix","comment":"<p>Constructs a new OpenGL view matrix.</p>\n<p><a>vector_math/vector_math.makeViewMatrix.cameraPosition</a> specifies the position of the camera.\n<a>vector_math/vector_math.makeViewMatrix.cameraFocusPosition</a> specifies the position the camera is focused on.\n<a>vector_math/vector_math.makeViewMatrix.upDirection</a> specifies the direction of the up vector (usually, +Y).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"parameters":{"cameraPosition":{"name":"cameraPosition","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"cameraFocusPosition":{"name":"cameraFocusPosition","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"upDirection":{"name":"upDirection","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setViewMatrix":{"name":"setViewMatrix","qualifiedName":"vector_math/vector_math.setViewMatrix","comment":"<p>Constructs an OpenGL view matrix in <a>vector_math/vector_math.setViewMatrix.viewMatrix</a>.</p>\n<p><a>vector_math/vector_math.setViewMatrix.cameraPosition</a> specifies the position of the camera.\n<a>vector_math/vector_math.setViewMatrix.cameraFocusPosition</a> specifies the position the camera is focused on.\n<a>vector_math/vector_math.setViewMatrix.upDirection</a> specifies the direction of the up vector (usually, +Y).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"viewMatrix":{"name":"viewMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Matrix4","inner":[]}],"value":"null","annotations":[]},"cameraPosition":{"name":"cameraPosition","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"cameraFocusPosition":{"name":"cameraFocusPosition","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]},"upDirection":{"name":"upDirection","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math/vector_math.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"absoluteError":{"name":"absoluteError","qualifiedName":"vector_math/vector_math.absoluteError","comment":"<p>Returns absolute error between <a>vector_math/vector_math.absoluteError.calculated</a> and <a>vector_math/vector_math.absoluteError.correct</a>.\nThe type of <a>vector_math/vector_math.absoluteError.calculated</a> and <a>vector_math/vector_math.absoluteError.correct</a> must match and can\nbe any vector, matrix, or quaternion.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"calculated":{"name":"calculated","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"correct":{"name":"correct","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"relativeError":{"name":"relativeError","qualifiedName":"vector_math/vector_math.relativeError","comment":"<p>Returns relative error between <a>vector_math/vector_math.relativeError.calculated</a> and <a>vector_math/vector_math.relativeError.correct</a>.\nThe type of <a>vector_math/vector_math.relativeError.calculated</a> and <a>vector_math/vector_math.relativeError.correct</a> must match and can\nbe any vector, matrix, or quaternion.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"calculated":{"name":"calculated","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"correct":{"name":"correct","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"mix":{"name":"mix","qualifiedName":"vector_math/vector_math.mix","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"min":{"name":"min","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"max":{"name":"max","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"radians":{"name":"radians","qualifiedName":"vector_math/vector_math.radians","comment":"<p>Convert <a>vector_math/vector_math.radians.degrees</a> to radians.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"degrees":{"name":"degrees","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"degrees":{"name":"degrees","qualifiedName":"vector_math/vector_math.degrees","comment":"<p>Convert <a>vector_math/vector_math.degrees.radians</a> to degrees.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"radians":{"name":"radians","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Vector4","qualifiedName":"vector_math/vector_math.Vector4","preview":"<p>4D column vector.</p>"},{"name":"Vector3","qualifiedName":"vector_math/vector_math.Vector3","preview":"<p>3D column vector.</p>"},{"name":"Vector2","qualifiedName":"vector_math/vector_math.Vector2","preview":"<p>2D column vector.</p>"},{"name":"Triangle","qualifiedName":"vector_math/vector_math.Triangle"},{"name":"Sphere","qualifiedName":"vector_math/vector_math.Sphere"},{"name":"Ray","qualifiedName":"vector_math/vector_math.Ray"},{"name":"Quaternion","qualifiedName":"vector_math/vector_math.Quaternion"},{"name":"Plane","qualifiedName":"vector_math/vector_math.Plane"},{"name":"SimplexNoise","qualifiedName":"vector_math/vector_math.SimplexNoise"},{"name":"Matrix4","qualifiedName":"vector_math/vector_math.Matrix4","preview":"<p>4D Matrix.\nValues are stored in column major order.</p>"},{"name":"Matrix3","qualifiedName":"vector_math/vector_math.Matrix3","preview":"<p>3D Matrix.\nValues are stored in column major order.</p>"},{"name":"Matrix2","qualifiedName":"vector_math/vector_math.Matrix2","preview":"<p>2D Matrix.\nValues are stored in column major order.</p>"},{"name":"Frustum","qualifiedName":"vector_math/vector_math.Frustum"},{"name":"Colors","qualifiedName":"vector_math/vector_math.Colors","preview":"<p>Contains functions for converting between different color models and \nmanipulating colors. In addition to that, some known colors can be accessed\nfor fast prototyping.</p>"},{"name":"Aabb3","qualifiedName":"vector_math/vector_math.Aabb3"},{"name":"Aabb2","qualifiedName":"vector_math/vector_math.Aabb2"}],"typedef":{},"error":[]},"packageName":"vector_math","packageIntro":"<h1>vector_math</h1>\n<p><a href=\"https://drone.io/johnmccutchan/vector_math/latest\">!<a href=\"https://drone.io/johnmccutchan/vector_math/status.png\">Build Status</a></a></p>\n<h2>Introduction</h2>\n<p>A Vector math library for 2D and 3D applications.</p>\n<h2>Features</h2><ul><li>2D,3D, and 4D vector and matrix types.</li><li>Quaternion type for animating rotations.</li><li>Collision detection: AABB, rays, spheres, ...</li><li>Flexible getters and setters, for example, <code>`position.xwz = color.grb;</code>`.</li><li>Fully documented.</li><li>Well tested.</li><li>Heavily optimized.</li></ul>\n<h2>Libraries using vector_math</h2><ul><li><a href=\"http://github.com/johnmccutchan/spectre\">Spectre</a></li><li><a href=\"https://github.com/threeDart/\">Three.dart</a></li><li><a href=\"https://github.com/dart-lang/dart-box2d\">Box2D</a></li></ul>\n<h2>Getting Started</h2>\n<p>1\\. Add the following to your project's <strong>pubspec.yaml</strong> and run <code>`pub get</code>`.</p>\n<pre><code>dependencies:\n  vector_math: any\n</code></pre>\n<p>If you want to stay on the latest developent version, add a dependency to the \nGit repository. You may also need to use it if another library uses the Git \ndependency.</p>\n<pre><code>dependencies:\n  vector_math:\n    git: https://github.com/johnmccutchan/vector_math.git\n</code></pre>\n<p>2\\. Add the correct import for your project. </p>\n<pre><code>import 'package:vector_math/vector_math.dart';\n</code></pre>\n<h2>Documentation</h2>\n<p>Read the <a href=\"http://johnmccutchan.github.io/vector_math.html\">docs</a></p>\n<h2>Examples</h2>\n<p>1\\. Using the GLSL getter and setter syntax.</p>\n<pre><code>import 'package:vector_math/vector_math.dart';\n\nvoid main() {\n\tVector3 x = new Vector3.zero(); // Zero vector\n\tVector4 y = new Vector4.all(4.0); // Vector with 4.0 in all lanes\n\tx.zyx = y.xzz; // Sets z,y,x the values in x,z,z\n}\n</code></pre>\n<p>2\\. Transforming a vector.</p>\n<pre><code>import 'dart:math';\nimport 'package:vector_math/vector_math.dart';\n\nvoid main() {\n\t// Rotation of PI/2 degrees around the Y axis followed by a \n\t// translation of (5.0, 2.0, 3.0).\n\tMatrix4 T = new Matrix4.rotationY(PI*0.5).translate(5.0, 2.0, 3.0);\n\t// A point.\n\tVector3 position = new Vector3(1.0, 1.0, 1.0);\n\t// Transform position by T.\n\tT.transform3(position);\n}\n</code></pre>\n<p>3\\. Invert a matrix</p>\n<pre><code>import 'dart:math';\nimport 'package:vector_math/vector_math.dart';\n\nvoid main() {\n\t// Rotation of 90 degrees around the Y axis followed by a \n\t// translation of (5.0, 2.0, 3.0).\n\tMatrix4 T = new Matrix4.rotationY(PI*0.5).translate(5.0, 2.0, 3.0);\n\t// Invert T.\n\tT.invert();\n\t// Invert just the rotation in T.\n\tT.invertRotation();\n}\n</code></pre>\n<p>4\\. Rotate a vector using a quaternion</p>\n<pre><code>import 'dart:math';\nimport 'package:vector_math/vector_math.dart';\n\nvoid main() {\n\t// The X axis.\n\tVector3 axis = new Vector3(1.0, 0.0, 0.0);\n\t// 90 degrees.\n\tdouble angle = PI/2.0;\n\t// Quaternion encoding a 90 degree rotation along the X axis. \n\tQuaternion q = new Quaternion.axisAngle(axis, angle);\n\t// A point.\n\tVector3 point = new Vector3(1.0, 1.0, 1.0);\n\t// Rotate point by q.\n\tq.rotate(point);\n}\n</code></pre>\n<p>5\\. Check if two axis aligned bounding boxes intersect</p>\n<pre><code>import 'package:vector_math/vector_math.dart';\n\nvoid main() {\n\t// Define the first box with a minimum and a maximum.\n\tAabb2 aabbOne = new Aabb2.minMax(new Vector2.zero(), new Vector2(4.0, 4.0));\n\t// Define the second box\n\tAabb2 aabbTwo = new Aabb2.minMax(new Vector2(5.0, 5.0), new Vector2(6.0, 6.0));\n\t// Extend the second box to contain a point\n\taabbTwo.hullPoint(new Vector2(3.0, 3.0));\n\t// Check if the two boxes intersect, returns true in this case.\n\tbool intersect = aabbOne.intersectsWithAabb2(aabbTwo);\n}\n</code></pre>\n<p>6\\. Check where a ray and a sphere intersect</p>\n<pre><code>import 'package:vector_math/vector_math.dart';\n\nvoid main() {\n\t// Define a ray starting at the origin and going into positive x-direction.\n\tRay ray = new Ray.originDirection(new Vector3.zero(), new Vector3(1.0, 0.0, 0.0));\n\t// Defines a sphere with the center (5.0 0.0 0.0) and a radius of 2.\n\tSphere sphere = new Sphere.centerRadius(new Vector3(5.0, 0.0, 0.0), 2);\n\t// Checks if the ray intersect with the sphere and returns the distance of the \n\t// intersection from the origin of the ray. Would return null if no intersection\n\t// is found.\n\tdouble distancFromOrigin = ray.intersectsWithSphere(sphere);\n\t// Evaluate the position of the intersection, in this case (3.0 0.0 0.0).\n\tVector3 position = ray.at(distancFromOrigin);\n}\n</code></pre>\n<p>7\\. Work with colors</p>\n<pre><code>import 'package:vector_math/vector_math.dart';\n\nvoid main() {\n\t// Access a build-in color, colors are stored in 4-dimensional vectors.\n\tVector4 red = Colors.red;\n\tVector4 gray = new Vector4.zero();\n\t// Convert the red color to a grayscaled color.\n\tColors.toGrayscale(red, gray);\n\t// Parse a blue color from a hex string.\n\tVector4 blue = new Vector4.zero();\n\tColors.fromHexString('#0000FF', blue);\n\t// Convert the blue color from RGB to HSL.\n\tColors.rgbToHsl(blue, blue);\n\t// Reduce the lightness of the color by 50%.\n\tblue.z *= 0.5;\n\t// Convert the HSL color back to RGB.\n\tColors.hslToRgb(blue, blue);\n}\n</code></pre>"}