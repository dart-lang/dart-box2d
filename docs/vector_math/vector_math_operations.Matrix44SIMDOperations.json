{"name":"Matrix44SIMDOperations","qualifiedName":"vector_math/vector_math_operations.Matrix44SIMDOperations","comment":"<p>Static methods operating on 4x4 matrices packed column major into a\nFloat32x4List.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"multiply":{"name":"multiply","qualifiedName":"vector_math/vector_math_operations.Matrix44SIMDOperations.multiply","comment":"<p><a>vector_math/vector_math_operations.Matrix44SIMDOperations.multiply.out</a> = <a>vector_math/vector_math_operations.Matrix44SIMDOperations.multiply.A</a> * <a>vector_math/vector_math_operations.Matrix44SIMDOperations.multiply.B</a>; Starting at <a>vector_math/vector_math_operations.Matrix44SIMDOperations.multiply.outOffset</a>, <a>vector_math/vector_math_operations.Matrix44SIMDOperations.multiply.aOffset</a>, and <a>vector_math/vector_math_operations.Matrix44SIMDOperations.multiply.bOffset</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float32x4List","inner":[]}],"value":"null","annotations":[]},"outOffset":{"name":"outOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"A":{"name":"A","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float32x4List","inner":[]}],"value":"null","annotations":[]},"aOffset":{"name":"aOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"B":{"name":"B","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float32x4List","inner":[]}],"value":"null","annotations":[]},"bOffset":{"name":"bOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"transform4":{"name":"transform4","qualifiedName":"vector_math/vector_math_operations.Matrix44SIMDOperations.transform4","comment":"<p>Transform the 4D <a>vector_math/vector_math_operations.Matrix44SIMDOperations.transform4.vector</a> starting at <a>vector_math/vector_math_operations.Matrix44SIMDOperations.transform4.vectorOffset</a> by the 4x4 <a>vector_math/vector_math_operations.Matrix44SIMDOperations.transform4.matrix</a>\nstarting at <a>vector_math/vector_math_operations.Matrix44SIMDOperations.transform4.matrixOffset</a>. Store result in <a>vector_math/vector_math_operations.Matrix44SIMDOperations.transform4.out</a> starting at <a>vector_math/vector_math_operations.Matrix44SIMDOperations.transform4.outOffset</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float32x4List","inner":[]}],"value":"null","annotations":[]},"outOffset":{"name":"outOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"matrix":{"name":"matrix","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float32x4List","inner":[]}],"value":"null","annotations":[]},"matrixOffset":{"name":"matrixOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"vector":{"name":"vector","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float32x4List","inner":[]}],"value":"null","annotations":[]},"vectorOffset":{"name":"vectorOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"zero":{"name":"zero","qualifiedName":"vector_math/vector_math_operations.Matrix44SIMDOperations.zero","comment":"","commentFrom":"vector_math_operations.Matrix44SIMDOperations.zero","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"matrix":{"name":"matrix","optional":false,"named":false,"default":false,"type":[{"outer":"dart-typed_data.Float32x4List","inner":[]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"vector_math/vector_math_operations.Matrix44SIMDOperations.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>vector_math/vector_math_operations.Matrix44SIMDOperations.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"vector_math/vector_math_operations.Matrix44SIMDOperations.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"vector_math/vector_math_operations.Matrix44SIMDOperations.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>vector_math/vector_math_operations.Matrix44SIMDOperations.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>vector_math/vector_math_operations.Matrix44SIMDOperations.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"vector_math/vector_math_operations.Matrix44SIMDOperations.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"vector_math/vector_math_operations.Matrix44SIMDOperations.noSuchMethod","comment":"<p><a>vector_math/vector_math_operations.Matrix44SIMDOperations.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>vector_math/vector_math_operations.Matrix44SIMDOperations.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>vector_math/vector_math_operations.Matrix44SIMDOperations.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>vector_math/vector_math_operations.Matrix44SIMDOperations.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}