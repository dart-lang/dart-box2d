{"name":"World","qualifiedName":"box2d/box2d.World","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"WORLD_POOL_SIZE":{"name":"WORLD_POOL_SIZE","qualifiedName":"box2d/box2d.World.WORLD_POOL_SIZE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"WORLD_POOL_CONTAINER_SIZE":{"name":"WORLD_POOL_CONTAINER_SIZE","qualifiedName":"box2d/box2d.World.WORLD_POOL_CONTAINER_SIZE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NEW_FIXTURE":{"name":"NEW_FIXTURE","qualifiedName":"box2d/box2d.World.NEW_FIXTURE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"LOCKED":{"name":"LOCKED","qualifiedName":"box2d/box2d.World.LOCKED","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"CLEAR_FORCES":{"name":"CLEAR_FORCES","qualifiedName":"box2d/box2d.World.CLEAR_FORCES","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"center":{"name":"center","qualifiedName":"box2d/box2d.World.center","comment":"<p>Pooling</p>","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"axis":{"name":"axis","qualifiedName":"box2d/box2d.World.axis","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"timestep":{"name":"timestep","qualifiedName":"box2d/box2d.World.timestep","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.TimeStep","inner":[]}],"annotations":[]},"cA":{"name":"cA","qualifiedName":"box2d/box2d.World.cA","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"cB":{"name":"cB","qualifiedName":"box2d/box2d.World.cB","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"wqwrapper":{"name":"wqwrapper","qualifiedName":"box2d/box2d.World.wqwrapper","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.WorldQueryWrapper","inner":[]}],"annotations":[]},"toiInput":{"name":"toiInput","qualifiedName":"box2d/box2d.World.toiInput","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.TimeOfImpactInput","inner":[]}],"annotations":[]},"toiOutput":{"name":"toiOutput","qualifiedName":"box2d/box2d.World.toiOutput","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.TimeOfImpactOutput","inner":[]}],"annotations":[]},"backup":{"name":"backup","qualifiedName":"box2d/box2d.World.backup","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Sweep","inner":[]}],"annotations":[]},"toiSolver":{"name":"toiSolver","qualifiedName":"box2d/box2d.World.toiSolver","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.TimeOfImpactSolver","inner":[]}],"annotations":[]},"island":{"name":"island","qualifiedName":"box2d/box2d.World.island","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Island","inner":[]}],"annotations":[]},"contacts":{"name":"contacts","qualifiedName":"box2d/box2d.World.contacts","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.Contact","inner":[]}]}],"annotations":[]},"stack":{"name":"stack","qualifiedName":"box2d/box2d.World.stack","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.Body","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"contactFilter=":{"name":"contactFilter=","qualifiedName":"box2d/box2d.World.contactFilter=","comment":"<p>Register a contact filter to provide specific control over collision.\nOtherwise the default filter is used (_defaultFilter). The listener is\nowned by you and must remain in scope.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"filter":{"name":"filter","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.ContactFilter","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"contactListener=":{"name":"contactListener=","qualifiedName":"box2d/box2d.World.contactListener=","comment":"<p>Register a contact event listener. The listener is owned by you and must\nremain in scope.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.ContactListener","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"debugDraw=":{"name":"debugDraw=","qualifiedName":"box2d/box2d.World.debugDraw=","comment":"<p>Register a routine for debug drawing. The debug draw functions are called\ninside with World.DrawDebugData method. The debug draw object is owned\nby you and must remain in scope.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"debugDraw":{"name":"debugDraw","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.DebugDraw","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"autoClearForces=":{"name":"autoClearForces=","qualifiedName":"box2d/box2d.World.autoClearForces=","comment":"<p>Set flag to control automatic clearing of forces after each time step.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"flag":{"name":"flag","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"contactListener":{"name":"contactListener","qualifiedName":"box2d/box2d.World.contactListener","comment":"","commentFrom":"box2d.World.contactListener","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.ContactListener","inner":[]}],"parameters":{},"annotations":[]},"contactList":{"name":"contactList","qualifiedName":"box2d/box2d.World.contactList","comment":"<p>Get the world contact list. With the returned contact, use Contact.getNext\nto get the next contact in the world list. A null contact indicates the\nend of the list.</p>\n<p>return the head of the world contact list.\nwarning contacts are</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Contact","inner":[]}],"parameters":{},"annotations":[]},"proxyCount":{"name":"proxyCount","qualifiedName":"box2d/box2d.World.proxyCount","comment":"<p>Get the number of broad-phase proxies.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"contactCount":{"name":"contactCount","qualifiedName":"box2d/box2d.World.contactCount","comment":"<p>Get the number of contacts (each may have 0 or more contact points).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"locked":{"name":"locked","qualifiedName":"box2d/box2d.World.locked","comment":"<p>Is the world locked (in the middle of a time step).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"bodyList":{"name":"bodyList","qualifiedName":"box2d/box2d.World.bodyList","comment":"","commentFrom":"box2d.World.bodyList","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Body","inner":[]}],"parameters":{},"annotations":[]},"jointList":{"name":"jointList","qualifiedName":"box2d/box2d.World.jointList","comment":"","commentFrom":"box2d.World.jointList","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Joint","inner":[]}],"parameters":{},"annotations":[]},"jointCount":{"name":"jointCount","qualifiedName":"box2d/box2d.World.jointCount","comment":"","commentFrom":"box2d.World.jointCount","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"autoClearForces":{"name":"autoClearForces","qualifiedName":"box2d/box2d.World.autoClearForces","comment":"<p>Get the flag that controls automatic clearing of forces after each time\nstep.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"box2d/box2d.World.World-","comment":"<p>Constructs a world object.</p>\n<p>gravity\n  the world gravity vector.\ndoSleep\n  improve performance by not simulating inactive bodies.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_gravity":{"name":"_gravity","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"_allowSleep":{"name":"_allowSleep","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"_pool":{"name":"_pool","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"popContact":{"name":"popContact","qualifiedName":"box2d/box2d.World.popContact","comment":"","commentFrom":"box2d.World.popContact","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Contact","inner":[]}],"parameters":{"fixtureA":{"name":"fixtureA","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Fixture","inner":[]}],"value":"null","annotations":[]},"fixtureB":{"name":"fixtureB","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Fixture","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"pushContact":{"name":"pushContact","qualifiedName":"box2d/box2d.World.pushContact","comment":"","commentFrom":"box2d.World.pushContact","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"contact":{"name":"contact","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Contact","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addBody":{"name":"addBody","qualifiedName":"box2d/box2d.World.addBody","comment":"<p>Add a rigid body to the world.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Body","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"createBody":{"name":"createBody","qualifiedName":"box2d/box2d.World.createBody","comment":"<p>Create a rigid body given a definition. No reference to the definition\nis retained.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Body","inner":[]}],"parameters":{"def":{"name":"def","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.BodyDef","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"createJoint":{"name":"createJoint","qualifiedName":"box2d/box2d.World.createJoint","comment":"<p>Create a joint to constrain bodies together. No reference to the definition\nis retained. This may cause the connected bodies to cease colliding.</p>\n<p>Warning: This function is locked during callbacks.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Joint","inner":[]}],"parameters":{"def":{"name":"def","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.JointDef","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"destroyJoint":{"name":"destroyJoint","qualifiedName":"box2d/box2d.World.destroyJoint","comment":"<p>Destroy a joint. This may cause the connected bodies to begin colliding.</p>\n<p>Warning: This function is locked during callbacks.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"joint":{"name":"joint","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Joint","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"destroyBody":{"name":"destroyBody","qualifiedName":"box2d/box2d.World.destroyBody","comment":"<p>Destroy a rigid body given a definition. No reference to the definition\nis retained. This function is locked during callbacks.</p>\n<p>warning: This automatically deletes all associated shapes.\nwarning: This function is locked during callbacks.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Body","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"step":{"name":"step","qualifiedName":"box2d/box2d.World.step","comment":"<p>Take a time step. This performs collision detection, integration,\nand constraint solution.</p>\n<p>param timeStep\n  the amount of time to simulate, this should not vary.\nparam velocityIterations\n  for the velocity constraint solver.\nparam positionIterations\n  for the position constraint solver.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"dt":{"name":"dt","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"velocityIterations":{"name":"velocityIterations","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"positionIterations":{"name":"positionIterations","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"clearForces":{"name":"clearForces","qualifiedName":"box2d/box2d.World.clearForces","comment":"<p>Call this after you are done with time steps to clear the forces.\nYou normally call this after each call to Step, unless you are\nperforming sub-steps. By default, forces will be automatically cleared,\nso you don't need to call this function.</p>\n<p>see setAutoClearForces</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"drawDebugData":{"name":"drawDebugData","qualifiedName":"box2d/box2d.World.drawDebugData","comment":"<p>Call this to draw shapes and other debug draw data.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"queryAABB":{"name":"queryAABB","qualifiedName":"box2d/box2d.World.queryAABB","comment":"<p>Query the world for all fixtures that potentially overlap the\nprovided AABB.</p>\n<p>param callback\n  a user implemented callback class.\nparam aabb\n  the query box.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.QueryCallback","inner":[]}],"value":"null","annotations":[]},"aabb":{"name":"aabb","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Aabb2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"solve":{"name":"solve","qualifiedName":"box2d/box2d.World.solve","comment":"","commentFrom":"box2d.World.solve","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"timeStep":{"name":"timeStep","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.TimeStep","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"solveTimeOfImpact":{"name":"solveTimeOfImpact","qualifiedName":"box2d/box2d.World.solveTimeOfImpact","comment":"","commentFrom":"box2d.World.solveTimeOfImpact","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"solveTimeOfImpactGivenBody":{"name":"solveTimeOfImpactGivenBody","qualifiedName":"box2d/box2d.World.solveTimeOfImpactGivenBody","comment":"","commentFrom":"box2d.World.solveTimeOfImpactGivenBody","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Body","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"drawShape":{"name":"drawShape","qualifiedName":"box2d/box2d.World.drawShape","comment":"","commentFrom":"box2d.World.drawShape","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"fixture":{"name":"fixture","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Fixture","inner":[]}],"value":"null","annotations":[]},"xf":{"name":"xf","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Color3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"drawJoint":{"name":"drawJoint","qualifiedName":"box2d/box2d.World.drawJoint","comment":"<p>Draws a joint for debugging purposes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"joint":{"name":"joint","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Joint","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d.World.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d.World.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d.World.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d.World.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d.World.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d.World.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d.World.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d.World.noSuchMethod","comment":"<p><a>box2d/box2d.World.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d.World.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d.World.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d.World.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}