{"name":"ContactListener","qualifiedName":"box2d/box2d_browser.ContactListener","comment":"","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"beginContact":{"name":"beginContact","qualifiedName":"box2d/box2d_browser.ContactListener.beginContact","comment":"<p>Called when two fixtures begin to touch.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"contact":{"name":"contact","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Contact","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"endContact":{"name":"endContact","qualifiedName":"box2d/box2d_browser.ContactListener.endContact","comment":"<p>Called when two fixtures cease to touch.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"contact":{"name":"contact","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Contact","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"preSolve":{"name":"preSolve","qualifiedName":"box2d/box2d_browser.ContactListener.preSolve","comment":"<p>This is called after a contact is updated. This allows you to inspect a\ncontact before it goes to the solver. If you are careful, you can modify \nthe contact manifold (e.g. disable contact).\nA copy of the old manifold is provided so that you can detect changes.\nNote: this is called only for awake bodies.\nNote: this is called even when the number of contact points is zero.\nNote: this is not called for sensors.\nNote: if you set the number of contact points to zero, you will not\nget an EndContact callback. However, you may get a BeginContact callback\nthe next step.\nNote: the oldManifold parameter is pooled, so it will be the same object\nfor every callback for each thread.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"contact":{"name":"contact","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Contact","inner":[]}],"value":"null","annotations":[]},"oldManifold":{"name":"oldManifold","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Manifold","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"postSolve":{"name":"postSolve","qualifiedName":"box2d/box2d_browser.ContactListener.postSolve","comment":"<p>This lets you inspect a contact after the solver is finished. This is\nuseful for inspecting impulses.\nNote: the contact manifold does not include time of impact impulses,\nwhich can be arbitrarily large if the sub-step is small. Hence the impulse\nis provided explicitly in a separate data structure.\nNote: this is only called for contacts that are touching, solid, and awake.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"contact":{"name":"contact","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Contact","inner":[]}],"value":"null","annotations":[]},"impulse":{"name":"impulse","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.ContactImpulse","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d_browser.ContactListener.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d_browser.ContactListener.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d_browser.ContactListener.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d_browser.ContactListener.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d_browser.ContactListener.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d_browser.ContactListener.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d_browser.ContactListener.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d_browser.ContactListener.noSuchMethod","comment":"<p><a>box2d/box2d_browser.ContactListener.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d_browser.ContactListener.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d_browser.ContactListener.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d_browser.ContactListener.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}