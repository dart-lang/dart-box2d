{"name":"Body","qualifiedName":"box2d/box2d_browser.Body","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"ISLAND_FLAG":{"name":"ISLAND_FLAG","qualifiedName":"box2d/box2d.Body.ISLAND_FLAG","comment":"<p>Flags for different states the body can take on.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"AWAKE_FLAG":{"name":"AWAKE_FLAG","qualifiedName":"box2d/box2d.Body.AWAKE_FLAG","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"AUTO_SLEEP_FLAG":{"name":"AUTO_SLEEP_FLAG","qualifiedName":"box2d/box2d.Body.AUTO_SLEEP_FLAG","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"BULLET_FLAG":{"name":"BULLET_FLAG","qualifiedName":"box2d/box2d.Body.BULLET_FLAG","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"FIXED_ROTATION_FLAG":{"name":"FIXED_ROTATION_FLAG","qualifiedName":"box2d/box2d.Body.FIXED_ROTATION_FLAG","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"ACTIVE_FLAG":{"name":"ACTIVE_FLAG","qualifiedName":"box2d/box2d.Body.ACTIVE_FLAG","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TO_I_FLAG":{"name":"TO_I_FLAG","qualifiedName":"box2d/box2d.Body.TO_I_FLAG","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"originTransform":{"name":"originTransform","qualifiedName":"box2d/box2d.Body.originTransform","comment":"<p>The body origin transform.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"annotations":[]},"sweep":{"name":"sweep","qualifiedName":"box2d/box2d.Body.sweep","comment":"<p>The swept motion for CCD.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Sweep","inner":[]}],"annotations":[]},"oldCenter":{"name":"oldCenter","qualifiedName":"box2d/box2d.Body.oldCenter","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"tempCenter":{"name":"tempCenter","qualifiedName":"box2d/box2d.Body.tempCenter","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"world":{"name":"world","qualifiedName":"box2d/box2d.Body.world","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.World","inner":[]}],"annotations":[]},"flags":{"name":"flags","qualifiedName":"box2d/box2d.Body.flags","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"contactList":{"name":"contactList","qualifiedName":"box2d/box2d.Body.contactList","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.ContactEdge","inner":[]}],"annotations":[]},"sleepTime":{"name":"sleepTime","qualifiedName":"box2d/box2d.Body.sleepTime","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"userData":{"name":"userData","qualifiedName":"box2d/box2d.Body.userData","comment":"<p>User can store what they want in here.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Object","inner":[]}],"annotations":[]},"mass":{"name":"mass","qualifiedName":"box2d/box2d.Body.mass","comment":"<p>This body's mass.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"invMass":{"name":"invMass","qualifiedName":"box2d/box2d.Body.invMass","comment":"<p>The inverse of the body mass.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"next":{"name":"next","qualifiedName":"box2d/box2d.Body.next","comment":"<p>For mantaining the linked list of bodies.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Body","inner":[]}],"annotations":[]},"prev":{"name":"prev","qualifiedName":"box2d/box2d.Body.prev","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Body","inner":[]}],"annotations":[]},"fixtureList":{"name":"fixtureList","qualifiedName":"box2d/box2d.Body.fixtureList","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Fixture","inner":[]}],"annotations":[]},"fixtureCount":{"name":"fixtureCount","qualifiedName":"box2d/box2d.Body.fixtureCount","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"jointList":{"name":"jointList","qualifiedName":"box2d/box2d.Body.jointList","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.JointEdge","inner":[]}],"annotations":[]},"invInertia":{"name":"invInertia","qualifiedName":"box2d/box2d.Body.invInertia","comment":"<p>The inverse of the intertia about the center of mass.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"linearDamping":{"name":"linearDamping","qualifiedName":"box2d/box2d.Body.linearDamping","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"angularDamping":{"name":"angularDamping","qualifiedName":"box2d/box2d.Body.angularDamping","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"islandIndex":{"name":"islandIndex","qualifiedName":"box2d/box2d.Body.islandIndex","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"linearVelocity=":{"name":"linearVelocity=","qualifiedName":"box2d/box2d_browser.Body.linearVelocity=","comment":"","commentFrom":"box2d.Body.linearVelocity=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"angularVelocity=":{"name":"angularVelocity=","qualifiedName":"box2d/box2d_browser.Body.angularVelocity=","comment":"","commentFrom":"box2d.Body.angularVelocity=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"w":{"name":"w","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"massData=":{"name":"massData=","qualifiedName":"box2d/box2d_browser.Body.massData=","comment":"<p>Set the mass properties to override the mass properties of the fixtures.\nNote that this changes the center of mass position.\nNote that creating or destroying fixtures can also alter the mass.\nThis function has no effect if the body isn't dynamic.</p>\n<p>data\n  the mass properties.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.MassData","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"type=":{"name":"type=","qualifiedName":"box2d/box2d_browser.Body.type=","comment":"<p>The type of this body. This may alter the mass and velocity.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"otherType":{"name":"otherType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"bullet=":{"name":"bullet=","qualifiedName":"box2d/box2d_browser.Body.bullet=","comment":"<p>Should this body be treated like a bullet for continuous collision\ndetection?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"flag":{"name":"flag","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"sleepingAllowed=":{"name":"sleepingAllowed=","qualifiedName":"box2d/box2d_browser.Body.sleepingAllowed=","comment":"<p>You can disable sleeping on this body. If you disable sleeping, the\nbody will be woken.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"flag":{"name":"flag","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"awake=":{"name":"awake=","qualifiedName":"box2d/box2d_browser.Body.awake=","comment":"<p>The sleep state of the body. A sleeping body has very\nlow CPU cost.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"flag":{"name":"flag","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"active=":{"name":"active=","qualifiedName":"box2d/box2d_browser.Body.active=","comment":"<p>Set the active state of the body. An inactive body is not\nsimulated and cannot be collided with or woken up.\nIf you pass a flag of true, all fixtures will be added to the\nbroad-phase.\nIf you pass a flag of false, all fixtures will be removed from\nthe broad-phase and all contacts will be destroyed.\nFixtures and joints are otherwise unaffected. You may continue\nto create/destroy fixtures and joints on inactive bodies.\nFixtures on an inactive body are implicitly inactive and will\nnot participate in collisions, ray-casts, or queries.\nJoints connected to an inactive body are implicitly inactive.\nAn inactive body is still owned by a World object and remains\nin the body list.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"flag":{"name":"flag","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"fixedRotation=":{"name":"fixedRotation=","qualifiedName":"box2d/box2d_browser.Body.fixedRotation=","comment":"<p>Set this body to have fixed rotation. This causes the mass\nto be reset.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"flag":{"name":"flag","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"position":{"name":"position","qualifiedName":"box2d/box2d_browser.Body.position","comment":"<p>Get the world body origin position. Do not modify.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math_64.Vector2","inner":[]}],"parameters":{},"annotations":[]},"angle":{"name":"angle","qualifiedName":"box2d/box2d_browser.Body.angle","comment":"<p>Get the angle in radians.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]},"worldCenter":{"name":"worldCenter","qualifiedName":"box2d/box2d_browser.Body.worldCenter","comment":"<p>Get the world position of the center of mass. Do not modify.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math_64.Vector2","inner":[]}],"parameters":{},"annotations":[]},"localCenter":{"name":"localCenter","qualifiedName":"box2d/box2d_browser.Body.localCenter","comment":"<p>Get the local position of the center of mass. Do not modify.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math_64.Vector2","inner":[]}],"parameters":{},"annotations":[]},"linearVelocity":{"name":"linearVelocity","qualifiedName":"box2d/box2d_browser.Body.linearVelocity","comment":"","commentFrom":"box2d.Body.linearVelocity","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math_64.Vector2","inner":[]}],"parameters":{},"annotations":[]},"angularVelocity":{"name":"angularVelocity","qualifiedName":"box2d/box2d_browser.Body.angularVelocity","comment":"","commentFrom":"box2d.Body.angularVelocity","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]},"inertia":{"name":"inertia","qualifiedName":"box2d/box2d_browser.Body.inertia","comment":"<p>Get the central rotational inertia of the body.</p>\n<p>returns the rotational inertia, usually in kg-m^2.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]},"type":{"name":"type","qualifiedName":"box2d/box2d_browser.Body.type","comment":"<p>The type of this body. Either dynamic, static, or kinematic.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"bullet":{"name":"bullet","qualifiedName":"box2d/box2d_browser.Body.bullet","comment":"<p>Is this body treated like a bullet for continuous collision detection?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"sleepingAllowed":{"name":"sleepingAllowed","qualifiedName":"box2d/box2d_browser.Body.sleepingAllowed","comment":"<p>Is this body allowed to sleep?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"awake":{"name":"awake","qualifiedName":"box2d/box2d_browser.Body.awake","comment":"","commentFrom":"box2d.Body.awake","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"active":{"name":"active","qualifiedName":"box2d/box2d_browser.Body.active","comment":"<p>Get the active state of the body.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"fixedRotation":{"name":"fixedRotation","qualifiedName":"box2d/box2d_browser.Body.fixedRotation","comment":"<p>Does this body have fixed rotation?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"box2d/box2d_browser.Body.Body-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"bd":{"name":"bd","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.BodyDef","inner":[]}],"value":"null","annotations":[]},"world":{"name":"world","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"createFixture":{"name":"createFixture","qualifiedName":"box2d/box2d_browser.Body.createFixture","comment":"<p>Creates a fixture and attach it to this body. Use this function if you need\nto set some fixture parameters, like friction. Otherwise you can create the\nfixture directly from a shape.\nIf the density is non-zero, this function automatically updates the mass\nof the body.\nContacts are not created until the next time step.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d_browser.Fixture","inner":[]}],"parameters":{"def":{"name":"def","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.FixtureDef","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"createFixtureFromShape":{"name":"createFixtureFromShape","qualifiedName":"box2d/box2d_browser.Body.createFixtureFromShape","comment":"<p>Creates a fixture from a shape and attach it to this body.\nThis is a convenience function. Use FixtureDef if you need to set\nparameters like friction, restitution, user data, or filtering.\nIf the density is non-zero, this function automatically updates the mass\nof the body.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d_browser.Fixture","inner":[]}],"parameters":{"shape":{"name":"shape","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Shape","inner":[]}],"value":"null","annotations":[]},"density":{"name":"density","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"destroyFixture":{"name":"destroyFixture","qualifiedName":"box2d/box2d_browser.Body.destroyFixture","comment":"<p>Destroy a fixture. This removes the fixture from the broad-phase and\ndestroys all contacts associated with this fixture. This will\nautomatically adjust the mass of the body if the body is dynamic and the\nfixture has positive density.\nAll fixtures attached to a body are implicitly destroyed when the body is\ndestroyed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"fixture":{"name":"fixture","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Fixture","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setTransform":{"name":"setTransform","qualifiedName":"box2d/box2d_browser.Body.setTransform","comment":"<p>Set the position of the body's origin and rotation.\nThis breaks any contacts and wakes the other bodies.\nManipulating a body's transform may cause non-physical behavior.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"argPosition":{"name":"argPosition","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]},"argAngle":{"name":"argAngle","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"applyForce":{"name":"applyForce","qualifiedName":"box2d/box2d_browser.Body.applyForce","comment":"<p>Apply a force at a world point. If the force is not\napplied at the center of mass, it will generate a torque and\naffect the angular velocity. This wakes up the body.</p>\n<p>force\n  the world force vector, usually in Newtons (N).\npoint\n  the world position of the point of application.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"force":{"name":"force","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]},"point":{"name":"point","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"applyTorque":{"name":"applyTorque","qualifiedName":"box2d/box2d_browser.Body.applyTorque","comment":"<p>Apply a torque. This affects the angular velocity\nwithout affecting the linear velocity of the center of mass.\nThis wakes up the body.</p>\n<p>torque\n  about the z-axis (out of the screen), usually in N-m.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"torque":{"name":"torque","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"applyLinearImpulse":{"name":"applyLinearImpulse","qualifiedName":"box2d/box2d_browser.Body.applyLinearImpulse","comment":"<p>Apply an impulse at a point. This immediately modifies the velocity.\nIt also modifies the angular velocity if the point of application\nis not at the center of mass. This wakes up the body.</p>\n<p>impulse\n  the world impulse vector, usually in N-seconds or kg-m/s.\npoint\n  the world position of the point of application.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"impulse":{"name":"impulse","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]},"point":{"name":"point","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"applyAngularImpulse":{"name":"applyAngularImpulse","qualifiedName":"box2d/box2d_browser.Body.applyAngularImpulse","comment":"<p>Apply an angular impulse.</p>\n<p>impulse\n  the angular impulse in units of kg<em>m</em>m/s</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"impulse":{"name":"impulse","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getMassData":{"name":"getMassData","qualifiedName":"box2d/box2d_browser.Body.getMassData","comment":"<p>Get the mass data of the body. The rotational inertia is relative\nto the center of mass. Result is returned through the given out parameter\ndata.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.MassData","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"resetMassData":{"name":"resetMassData","qualifiedName":"box2d/box2d_browser.Body.resetMassData","comment":"<p>This resets the mass properties to the sum of the mass properties of the\nfixtures.\nThis normally does not need to be called unless you called setMassData to\noverride the mass and you later want to reset the mass.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"getWorldPoint":{"name":"getWorldPoint","qualifiedName":"box2d/box2d_browser.Body.getWorldPoint","comment":"<p>Get the world coordinates of a point given the local coordinates.</p>\n<p>localPoint\n  a point on the body measured relative the the body's origin.\nreturns the same point expressed in world coordinates.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math_64.Vector2","inner":[]}],"parameters":{"localPoint":{"name":"localPoint","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getWorldPointToOut":{"name":"getWorldPointToOut","qualifiedName":"box2d/box2d_browser.Body.getWorldPointToOut","comment":"<p>Get the world coordinates of a point given the local coordinates to the\ngiven out parameter.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"localPoint":{"name":"localPoint","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getWorldVector2":{"name":"getWorldVector2","qualifiedName":"box2d/box2d_browser.Body.getWorldVector2","comment":"<p>Get the world coordinates of a vector given the local coordinates.</p>\n<p>localVector: a vector fixed in the body.\nreturn the same vector expressed in world coordinates.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math_64.Vector2","inner":[]}],"parameters":{"localVector":{"name":"localVector","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getWorldVectorToOut":{"name":"getWorldVectorToOut","qualifiedName":"box2d/box2d_browser.Body.getWorldVectorToOut","comment":"<p>Get the world coordinates of a vector given the local coordinates to the\ngiven out paramater.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"localVector":{"name":"localVector","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getLocalPointToOut":{"name":"getLocalPointToOut","qualifiedName":"box2d/box2d_browser.Body.getLocalPointToOut","comment":"<p>Gets a local point relative to the body's origin given a world point.\nReturns this through the given out parameter.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"worldPoint":{"name":"worldPoint","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getLocalPoint":{"name":"getLocalPoint","qualifiedName":"box2d/box2d_browser.Body.getLocalPoint","comment":"<p>Gets a local point relative to the body's origin given a world point.</p>\n<p>worldPoint: point in world coordinates.\nreturns the corresponding local point relative to the body's origin.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math_64.Vector2","inner":[]}],"parameters":{"worldPoint":{"name":"worldPoint","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getLocalVector2":{"name":"getLocalVector2","qualifiedName":"box2d/box2d_browser.Body.getLocalVector2","comment":"<p>Gets a local vector given a world vector.</p>\n<p>worldVector: vector in world coordinates.\nreturns the corresponding local vector.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math_64.Vector2","inner":[]}],"parameters":{"worldVector":{"name":"worldVector","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getLocalVectorToOut":{"name":"getLocalVectorToOut","qualifiedName":"box2d/box2d_browser.Body.getLocalVectorToOut","comment":"<p>Gets a local vector given a world vector and stores the result in the given\nout parameter.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"worldVector":{"name":"worldVector","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getLinearVelocityFromWorldPoint":{"name":"getLinearVelocityFromWorldPoint","qualifiedName":"box2d/box2d_browser.Body.getLinearVelocityFromWorldPoint","comment":"<p>Get the world linear velocity of a world point attached to this body.</p>\n<p>worldPoint: point in world coordinates.\nreturns the world velocity of a point.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math_64.Vector2","inner":[]}],"parameters":{"worldPoint":{"name":"worldPoint","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getLinearVelocityFromWorldPointToOut":{"name":"getLinearVelocityFromWorldPointToOut","qualifiedName":"box2d/box2d_browser.Body.getLinearVelocityFromWorldPointToOut","comment":"","commentFrom":"box2d.Body.getLinearVelocityFromWorldPointToOut","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"worldPoint":{"name":"worldPoint","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getLinearVelocityFromLocalPoint":{"name":"getLinearVelocityFromLocalPoint","qualifiedName":"box2d/box2d_browser.Body.getLinearVelocityFromLocalPoint","comment":"<p>Get the world velocity of a local point.</p>\n<p>localPoint: point in local coordinates.\nreturns the world velocity of a point.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math_64.Vector2","inner":[]}],"parameters":{"localPoint":{"name":"localPoint","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getLinearVelocityFromLocalPointToOut":{"name":"getLinearVelocityFromLocalPointToOut","qualifiedName":"box2d/box2d_browser.Body.getLinearVelocityFromLocalPointToOut","comment":"<p>Get the world velocity of a local point and store the result in the given\nout parameter.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"localPoint":{"name":"localPoint","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"synchronizeFixtures":{"name":"synchronizeFixtures","qualifiedName":"box2d/box2d_browser.Body.synchronizeFixtures","comment":"","commentFrom":"box2d.Body.synchronizeFixtures","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"synchronizeTransform":{"name":"synchronizeTransform","qualifiedName":"box2d/box2d_browser.Body.synchronizeTransform","comment":"","commentFrom":"box2d.Body.synchronizeTransform","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"shouldCollide":{"name":"shouldCollide","qualifiedName":"box2d/box2d_browser.Body.shouldCollide","comment":"<p>This is used to prevent connected bodies from colliding.\nIt may lie, depending on the collideConnected flag.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Body","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"advance":{"name":"advance","qualifiedName":"box2d/box2d_browser.Body.advance","comment":"","commentFrom":"box2d.Body.advance","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"t":{"name":"t","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d_browser.Body.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d_browser.Body.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d_browser.Body.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d_browser.Body.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d_browser.Body.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d_browser.Body.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d_browser.Body.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d_browser.Body.noSuchMethod","comment":"<p><a>box2d/box2d_browser.Body.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d_browser.Body.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d_browser.Body.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d_browser.Body.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}