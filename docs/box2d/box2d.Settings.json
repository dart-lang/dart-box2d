{"name":"Settings","qualifiedName":"box2d/box2d.Settings","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"CONTACT_STACK_INIT_SIZE":{"name":"CONTACT_STACK_INIT_SIZE","qualifiedName":"box2d/box2d.Settings.CONTACT_STACK_INIT_SIZE","comment":"<p>Size that pool stacks are initialized to.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"EPSILON":{"name":"EPSILON","qualifiedName":"box2d/box2d.Settings.EPSILON","comment":"<p>A \"close to Zero\" num epsilon value for use</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"MAX_TIME_OF_IMPACT_CONTACTS":{"name":"MAX_TIME_OF_IMPACT_CONTACTS","qualifiedName":"box2d/box2d.Settings.MAX_TIME_OF_IMPACT_CONTACTS","comment":"<p>Maximum number of contacts to be handled to solve a TimeOfImpact island.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"LINEAR_SLEEP_TOLERANCE":{"name":"LINEAR_SLEEP_TOLERANCE","qualifiedName":"box2d/box2d.Settings.LINEAR_SLEEP_TOLERANCE","comment":"<p>A body cannot sleep if its linear velocity is above this tolerance.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"MAX_LINEAR_CORRECTION":{"name":"MAX_LINEAR_CORRECTION","qualifiedName":"box2d/box2d.Settings.MAX_LINEAR_CORRECTION","comment":"<p>The maximum linear position correction used when solving constraints.\nThis helps to prevent overshoot.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"ANGULAR_SLEEP_TOLERANCE":{"name":"ANGULAR_SLEEP_TOLERANCE","qualifiedName":"box2d/box2d.Settings.ANGULAR_SLEEP_TOLERANCE","comment":"<p>A body cannot sleep if its angular velocity is above this tolerance.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"TIME_TO_SLEEP":{"name":"TIME_TO_SLEEP","qualifiedName":"box2d/box2d.Settings.TIME_TO_SLEEP","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"TREE_REBALANCE_STEPS":{"name":"TREE_REBALANCE_STEPS","qualifiedName":"box2d/box2d.Settings.TREE_REBALANCE_STEPS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MAX_INTEGER":{"name":"MAX_INTEGER","qualifiedName":"box2d/box2d.Settings.MAX_INTEGER","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"SMALL_NUMBER":{"name":"SMALL_NUMBER","qualifiedName":"box2d/box2d.Settings.SMALL_NUMBER","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"BIG_NUMBER":{"name":"BIG_NUMBER","qualifiedName":"box2d/box2d.Settings.BIG_NUMBER","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"LINEAR_SLOP":{"name":"LINEAR_SLOP","qualifiedName":"box2d/box2d.Settings.LINEAR_SLOP","comment":"<p>A small length used as a collision and constant tolerance. Usually it\nis chosen to be numerically significant, but visually insignificant.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"POLYGON_RADIUS":{"name":"POLYGON_RADIUS","qualifiedName":"box2d/box2d.Settings.POLYGON_RADIUS","comment":"<p>The radius of the polygon/edge shape skin. This should not be modified.\nMaking this smaller means polygons will have and insufficient for\ncontinuous collision. Making it larger may create artifacts for vertex\ncollision.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"VELOCITY_THRESHOLD":{"name":"VELOCITY_THRESHOLD","qualifiedName":"box2d/box2d.Settings.VELOCITY_THRESHOLD","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"BOUNDING_BOX_EXTENSION":{"name":"BOUNDING_BOX_EXTENSION","qualifiedName":"box2d/box2d.Settings.BOUNDING_BOX_EXTENSION","comment":"<p>Fattens bounding boxes in the dynamic tree by this amount. Allows proxies\nto move by small amounts without needing to adjust the tree. This value is\nin meters.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"BOUNDING_BOX_MULTIPLIER":{"name":"BOUNDING_BOX_MULTIPLIER","qualifiedName":"box2d/box2d.Settings.BOUNDING_BOX_MULTIPLIER","comment":"<p>This is used to fatten AABBs in the dynamic tree. This is used to predict\nthe future position based on the current displacement.\nThis is a dimensionless multiplier.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"CONTACT_BAUMGARTE":{"name":"CONTACT_BAUMGARTE","qualifiedName":"box2d/box2d.Settings.CONTACT_BAUMGARTE","comment":"<p>This scale factor controls how fast overlap is resolved. Ideally this\nwould be 1 so that overlap is removed in one time step. However using\nvalues close to 1 often lead to overshoot.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"MAX_TRANSLATION":{"name":"MAX_TRANSLATION","qualifiedName":"box2d/box2d.Settings.MAX_TRANSLATION","comment":"<p>The maximum linear velocity of a body. This limit is very large and is\nused to prevent numerical problems. You shouldn't need to adjust this.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"MAX_TRANSLATION_SQUARED":{"name":"MAX_TRANSLATION_SQUARED","qualifiedName":"box2d/box2d.Settings.MAX_TRANSLATION_SQUARED","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"MAX_ROTATION":{"name":"MAX_ROTATION","qualifiedName":"box2d/box2d.Settings.MAX_ROTATION","comment":"<p>The maximum angular velocity of a body. This limit is very large and is\nused to prevent numerical problems. You shouldn't need to adjust this.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"MAX_ROTATION_SQUARED":{"name":"MAX_ROTATION_SQUARED","qualifiedName":"box2d/box2d.Settings.MAX_ROTATION_SQUARED","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"MAX_MANIFOLD_POINTS":{"name":"MAX_MANIFOLD_POINTS","qualifiedName":"box2d/box2d.Settings.MAX_MANIFOLD_POINTS","comment":"<p>The maximum number of contact points between two convex shapes.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"ANGULAR_SLOP":{"name":"ANGULAR_SLOP","qualifiedName":"box2d/box2d.Settings.ANGULAR_SLOP","comment":"<p>A small angle used as a collision and constraint tolerance. Usually it is\nchosen to be numerically significant, but visually insignificant.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"MAX_ANGULAR_CORRECTION":{"name":"MAX_ANGULAR_CORRECTION","qualifiedName":"box2d/box2d.Settings.MAX_ANGULAR_CORRECTION","comment":"<p>The maximum angular position correction used when solving constraints.\nThis helps to prevent overshoot.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"MAX_POLYGON_VERTICES":{"name":"MAX_POLYGON_VERTICES","qualifiedName":"box2d/box2d.Settings.MAX_POLYGON_VERTICES","comment":"<p>The maximum number of vertices on a convex polygon.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"mixFriction":{"name":"mixFriction","qualifiedName":"box2d/box2d.Settings.mixFriction","comment":"<p>Friction mixing law.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"friction1":{"name":"friction1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"friction2":{"name":"friction2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"mixRestitution":{"name":"mixRestitution","qualifiedName":"box2d/box2d.Settings.mixRestitution","comment":"<p>Restitution mixing law.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"restitution1":{"name":"restitution1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"restitution2":{"name":"restitution2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d.Settings.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d.Settings.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d.Settings.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d.Settings.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d.Settings.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d.Settings.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d.Settings.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d.Settings.noSuchMethod","comment":"<p><a>box2d/box2d.Settings.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d.Settings.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d.Settings.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d.Settings.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}