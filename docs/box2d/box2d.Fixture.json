{"name":"Fixture","qualifiedName":"box2d/box2d.Fixture","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"filter":{"name":"filter","qualifiedName":"box2d/box2d.Fixture.filter","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Filter","inner":[]}],"annotations":[]},"box":{"name":"box","qualifiedName":"box2d/box2d.Fixture.box","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Aabb2","inner":[]}],"annotations":[]},"density":{"name":"density","qualifiedName":"box2d/box2d.Fixture.density","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"next":{"name":"next","qualifiedName":"box2d/box2d.Fixture.next","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Fixture","inner":[]}],"annotations":[]},"body":{"name":"body","qualifiedName":"box2d/box2d.Fixture.body","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Body","inner":[]}],"annotations":[]},"shape":{"name":"shape","qualifiedName":"box2d/box2d.Fixture.shape","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Shape","inner":[]}],"annotations":[]},"friction":{"name":"friction","qualifiedName":"box2d/box2d.Fixture.friction","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"restitution":{"name":"restitution","qualifiedName":"box2d/box2d.Fixture.restitution","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"proxy":{"name":"proxy","qualifiedName":"box2d/box2d.Fixture.proxy","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.DynamicTreeNode","inner":[]}],"annotations":[]},"isSensor":{"name":"isSensor","qualifiedName":"box2d/box2d.Fixture.isSensor","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"userData":{"name":"userData","qualifiedName":"box2d/box2d.Fixture.userData","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"type":{"name":"type","qualifiedName":"box2d/box2d.Fixture.type","comment":"<p>Get the type of the child shape.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"box2d/box2d.Fixture.Fixture-","comment":"<p>Constructs a new Fixture with default values.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"create":{"name":"create","qualifiedName":"box2d/box2d.Fixture.create","comment":"<p>Sets this fixture according to the given body and definition.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Body","inner":[]}],"value":"null","annotations":[]},"def":{"name":"def","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.FixtureDef","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"destroy":{"name":"destroy","qualifiedName":"box2d/box2d.Fixture.destroy","comment":"<p>Destroys this fixture. Before being called, this shape's proxy must be\ndestroyed. After being called, this fixture's shape is null.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"createProxy":{"name":"createProxy","qualifiedName":"box2d/box2d.Fixture.createProxy","comment":"<p>These support body activation/deactivation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"broadPhase":{"name":"broadPhase","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.BroadPhase","inner":[]}],"value":"null","annotations":[]},"xf":{"name":"xf","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"destroyProxy":{"name":"destroyProxy","qualifiedName":"box2d/box2d.Fixture.destroyProxy","comment":"<p>Destroys this Fixture's proxy.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"broadPhase":{"name":"broadPhase","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.BroadPhase","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"synchronize":{"name":"synchronize","qualifiedName":"box2d/box2d.Fixture.synchronize","comment":"","commentFrom":"box2d.Fixture.synchronize","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"broadPhase":{"name":"broadPhase","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.BroadPhase","inner":[]}],"value":"null","annotations":[]},"transformOne":{"name":"transformOne","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"transformTwo":{"name":"transformTwo","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getMassData":{"name":"getMassData","qualifiedName":"box2d/box2d.Fixture.getMassData","comment":"<p>Get the mass data for this fixture. The mass data is based on the density\nand the shape. The rotational inertia is about the shape's origin.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"massData":{"name":"massData","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.MassData","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"testPoint":{"name":"testPoint","qualifiedName":"box2d/box2d.Fixture.testPoint","comment":"","commentFrom":"box2d.Fixture.testPoint","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"p":{"name":"p","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"raycast":{"name":"raycast","qualifiedName":"box2d/box2d.Fixture.raycast","comment":"","commentFrom":"box2d.Fixture.raycast","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"output":{"name":"output","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.RayCastOutput","inner":[]}],"value":"null","annotations":[]},"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.RayCastInput","inner":[]}],"value":"null","annotations":[]},"childIndex":{"name":"childIndex","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d.Fixture.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d.Fixture.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d.Fixture.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d.Fixture.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d.Fixture.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d.Fixture.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d.Fixture.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d.Fixture.noSuchMethod","comment":"<p><a>box2d/box2d.Fixture.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d.Fixture.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d.Fixture.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d.Fixture.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}