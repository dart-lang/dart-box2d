{"name":"BroadPhase","qualifiedName":"box2d/box2d_browser.BroadPhase","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":["box2d/box2d.TreeCallback"],"subclass":[],"variables":{"NULL_PROXY":{"name":"NULL_PROXY","qualifiedName":"box2d/box2d.BroadPhase.NULL_PROXY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"PAIR_CAPACITY":{"name":"PAIR_CAPACITY","qualifiedName":"box2d/box2d.BroadPhase.PAIR_CAPACITY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"proxyCount":{"name":"proxyCount","qualifiedName":"box2d/box2d.BroadPhase.proxyCount","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"moveBuffer":{"name":"moveBuffer","qualifiedName":"box2d/box2d.BroadPhase.moveBuffer","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.DynamicTreeNode","inner":[]}]}],"annotations":[]},"queryProxy":{"name":"queryProxy","qualifiedName":"box2d/box2d.BroadPhase.queryProxy","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.DynamicTreeNode","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"box2d/box2d_browser.BroadPhase.BroadPhase-","comment":"<p>Constructs a new BroadPhase.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"createProxy":{"name":"createProxy","qualifiedName":"box2d/box2d_browser.BroadPhase.createProxy","comment":"<p>Creates a proxy with an initial bounding box. Pairs are not reported until\nupdatePairs is called.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d_browser.DynamicTreeNode","inner":[]}],"parameters":{"box":{"name":"box","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Aabb2","inner":[]}],"value":"null","annotations":[]},"userData":{"name":"userData","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"destroyProxy":{"name":"destroyProxy","qualifiedName":"box2d/box2d_browser.BroadPhase.destroyProxy","comment":"<p>Destroys a proxy. It is up to the client to remove any pairs.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"proxy":{"name":"proxy","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.DynamicTreeNode","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"moveProxy":{"name":"moveProxy","qualifiedName":"box2d/box2d_browser.BroadPhase.moveProxy","comment":"<p>Call MoveProxy as many times as you like, then when you are done\ncall UpdatePairs to constize the proxy pairs (for your time step).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"proxy":{"name":"proxy","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.DynamicTreeNode","inner":[]}],"value":"null","annotations":[]},"box":{"name":"box","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Aabb2","inner":[]}],"value":"null","annotations":[]},"displacement":{"name":"displacement","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"testOverlap":{"name":"testOverlap","qualifiedName":"box2d/box2d_browser.BroadPhase.testOverlap","comment":"<p>Returns true if the bounding boxes of the given proxies overlap.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"proxyA":{"name":"proxyA","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.DynamicTreeNode","inner":[]}],"value":"null","annotations":[]},"proxyB":{"name":"proxyB","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.DynamicTreeNode","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"updatePairs":{"name":"updatePairs","qualifiedName":"box2d/box2d_browser.BroadPhase.updatePairs","comment":"<p>Add pairs according to whether we need to keep track of\ntheir relationship. Pairs are added by calling the addPair method on the\ngiven callback.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.PairCallback","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"treeCallback":{"name":"treeCallback","qualifiedName":"box2d/box2d_browser.BroadPhase.treeCallback","comment":"<p>The callback function to use for this tree. Is called from\nDynamicTree.query when we are gathering pairs.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"proxy":{"name":"proxy","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.DynamicTreeNode","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"query":{"name":"query","qualifiedName":"box2d/box2d_browser.BroadPhase.query","comment":"<p>Query an axis aligned box for overlapping proxies. The callback funciton is\ncalled for each proxy that overlaps the supplied box.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.TreeCallback","inner":[]}],"value":"null","annotations":[]},"box":{"name":"box","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Aabb2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"computeHeight":{"name":"computeHeight","qualifiedName":"box2d/box2d_browser.BroadPhase.computeHeight","comment":"<p>Returns the height of embedded tree.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d_browser.BroadPhase.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d_browser.BroadPhase.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d_browser.BroadPhase.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d_browser.BroadPhase.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d_browser.BroadPhase.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d_browser.BroadPhase.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d_browser.BroadPhase.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d_browser.BroadPhase.noSuchMethod","comment":"<p><a>box2d/box2d_browser.BroadPhase.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d_browser.BroadPhase.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d_browser.BroadPhase.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d_browser.BroadPhase.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"treeCallback":{"name":"treeCallback","qualifiedName":"box2d/box2d_browser.BroadPhase.treeCallback","comment":"","commentFrom":"","inheritedFrom":"box2d.TreeCallback.treeCallback","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.DynamicTreeNode","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}