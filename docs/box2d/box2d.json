{"name":"box2d","qualifiedName":"box2d/box2d","comment":"","variables":{"sqrtOneHalf":{"name":"sqrtOneHalf","qualifiedName":"box2d/box2d.sqrtOneHalf","comment":"<p>Use SQRT1_2 from dart:math instead</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[{"name":"dart-core.Deprecated","parameters":["next release"]}]},"radians2degrees":{"name":"radians2degrees","qualifiedName":"box2d/box2d.radians2degrees","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"degrees2radians":{"name":"degrees2radians","qualifiedName":"box2d/box2d.degrees2radians","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"buildPlaneVectors":{"name":"buildPlaneVectors","qualifiedName":"box2d/box2d.buildPlaneVectors","comment":"<p>Sets <a>box2d/box2d.buildPlaneVectors.u</a> and <a>box2d/box2d.buildPlaneVectors.v</a> to be two vectors orthogonal to each other and\n<a>box2d/box2d.buildPlaneVectors.planeNormal</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"planeNormal":{"name":"planeNormal","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"u":{"name":"u","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cross2B":{"name":"cross2B","qualifiedName":"box2d/box2d.cross2B","comment":"<p>2D cross product. vec2 x double.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cross2A":{"name":"cross2A","qualifiedName":"box2d/box2d.cross2A","comment":"<p>2D cross product. double x vec2.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cross2":{"name":"cross2","qualifiedName":"box2d/box2d.cross2","comment":"<p>2D cross product. vec2 x vec2.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cross3":{"name":"cross3","qualifiedName":"box2d/box2d.cross3","comment":"<p>3D Cross product.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"dot3":{"name":"dot3","qualifiedName":"box2d/box2d.dot3","comment":"<p>3D dot product.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"dot2":{"name":"dot2","qualifiedName":"box2d/box2d.dot2","comment":"<p>2D dot product.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"pickRay":{"name":"pickRay","qualifiedName":"box2d/box2d.pickRay","comment":"<p>On success, <a>box2d/box2d.pickRay.rayNear</a> and <a>box2d/box2d.pickRay.rayFar</a> are the points where\nthe screen space <a>box2d/box2d.pickRay.pickX</a>, <a>box2d/box2d.pickRay.pickY</a> intersect with the near and far\nplanes respectively.</p>\n<p>The viewport is specified by (<a>box2d/box2d.pickRay.viewportX</a>, <a>box2d/box2d.pickRay.viewportWidth</a>) and\n(<a>box2d/box2d.pickRay.viewportY</a>, <a>box2d/box2d.pickRay.viewportHeight</a>).</p>\n<p><a>box2d/box2d.pickRay.cameraMatrix</a> includes both the projection and view transforms.</p>\n<p>Returns false on error, for example, the mouse is not in the viewport</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"cameraMatrix":{"name":"cameraMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"value":"null","annotations":[]},"viewportX":{"name":"viewportX","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportWidth":{"name":"viewportWidth","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportY":{"name":"viewportY","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportHeight":{"name":"viewportHeight","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickX":{"name":"pickX","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickY":{"name":"pickY","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"rayNear":{"name":"rayNear","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"rayFar":{"name":"rayFar","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"unproject":{"name":"unproject","qualifiedName":"box2d/box2d.unproject","comment":"<p>On success, Sets <a>box2d/box2d.unproject.pickWorld</a> to be the world space position of\nthe screen space <a>box2d/box2d.unproject.pickX</a>, <a>box2d/box2d.unproject.pickY</a>, and <a>box2d/box2d.unproject.pickZ</a>.</p>\n<p>The viewport is specified by (<a>box2d/box2d.unproject.viewportX</a>, <a>box2d/box2d.unproject.viewportWidth</a>) and\n(<a>box2d/box2d.unproject.viewportY</a>, <a>box2d/box2d.unproject.viewportHeight</a>).</p>\n<p><a>box2d/box2d.unproject.cameraMatrix</a> includes both the projection and view transforms.</p>\n<p><a>box2d/box2d.unproject.pickZ</a> is typically either 0.0 (near plane) or 1.0 (far plane).</p>\n<p>Returns false on error, for example, the mouse is not in the viewport</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"cameraMatrix":{"name":"cameraMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"value":"null","annotations":[]},"viewportX":{"name":"viewportX","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportWidth":{"name":"viewportWidth","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportY":{"name":"viewportY","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"viewportHeight":{"name":"viewportHeight","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickX":{"name":"pickX","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickY":{"name":"pickY","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickZ":{"name":"pickZ","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"pickWorld":{"name":"pickWorld","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makePlaneReflection":{"name":"makePlaneReflection","qualifiedName":"box2d/box2d.makePlaneReflection","comment":"<p>Returns a transformation matrix that transforms points by reflecting\nthem through the plane specified with <a>box2d/box2d.makePlaneReflection.planeNormal</a> and <a>box2d/box2d.makePlaneReflection.planePoint</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"parameters":{"planeNormal":{"name":"planeNormal","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"planePoint":{"name":"planePoint","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makePlaneProjection":{"name":"makePlaneProjection","qualifiedName":"box2d/box2d.makePlaneProjection","comment":"<p>Returns a transformation matrix that transforms points onto\nthe plane specified with <a>box2d/box2d.makePlaneProjection.planeNormal</a> and <a>box2d/box2d.makePlaneProjection.planePoint</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"parameters":{"planeNormal":{"name":"planeNormal","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"planePoint":{"name":"planePoint","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makeOrthographicMatrix":{"name":"makeOrthographicMatrix","qualifiedName":"box2d/box2d.makeOrthographicMatrix","comment":"<p>Constructs a new OpenGL orthographic projection matrix.</p>\n<p><a>box2d/box2d.makeOrthographicMatrix.left</a>, <a>box2d/box2d.makeOrthographicMatrix.right</a> specify the coordinates for the left and right vertical\nclipping planes.\n<a>box2d/box2d.makeOrthographicMatrix.bottom</a>, <a>box2d/box2d.makeOrthographicMatrix.top</a> specify the coordinates for the bottom and top horizontal\nclipping planes.\n<a>box2d/box2d.makeOrthographicMatrix.near</a>, <a>box2d/box2d.makeOrthographicMatrix.far</a> specify the coordinates to the near and far depth clipping\nplanes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"parameters":{"left":{"name":"left","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"right":{"name":"right","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"bottom":{"name":"bottom","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"top":{"name":"top","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"near":{"name":"near","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"far":{"name":"far","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setOrthographicMatrix":{"name":"setOrthographicMatrix","qualifiedName":"box2d/box2d.setOrthographicMatrix","comment":"<p>Constructs an OpenGL orthographic projection matrix in <a>box2d/box2d.setOrthographicMatrix.orthographicMatrix</a>.</p>\n<p><a>box2d/box2d.setOrthographicMatrix.left</a>, <a>box2d/box2d.setOrthographicMatrix.right</a> specify the coordinates for the left and right vertical\nclipping planes.\n<a>box2d/box2d.setOrthographicMatrix.bottom</a>, <a>box2d/box2d.setOrthographicMatrix.top</a> specify the coordinates for the bottom and top horizontal\nclipping planes.\n<a>box2d/box2d.setOrthographicMatrix.near</a>, <a>box2d/box2d.setOrthographicMatrix.far</a> specify the coordinates to the near and far depth clipping\nplanes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"orthographicMatrix":{"name":"orthographicMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"value":"null","annotations":[]},"left":{"name":"left","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"right":{"name":"right","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"bottom":{"name":"bottom","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"top":{"name":"top","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"near":{"name":"near","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"far":{"name":"far","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makeFrustumMatrix":{"name":"makeFrustumMatrix","qualifiedName":"box2d/box2d.makeFrustumMatrix","comment":"<p>Constructs a new OpenGL perspective projection matrix.</p>\n<p><a>box2d/box2d.makeFrustumMatrix.left</a>, <a>box2d/box2d.makeFrustumMatrix.right</a> specify the coordinates for the left and right vertical\nclipping planes.\n<a>box2d/box2d.makeFrustumMatrix.bottom</a>, <a>box2d/box2d.makeFrustumMatrix.top</a> specify the coordinates for the bottom and top horizontal\nclipping planes.\n<a>box2d/box2d.makeFrustumMatrix.near</a>, <a>box2d/box2d.makeFrustumMatrix.far</a> specify the coordinates to the near and far depth clipping\nplanes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"parameters":{"left":{"name":"left","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"right":{"name":"right","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"bottom":{"name":"bottom","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"top":{"name":"top","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"near":{"name":"near","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"far":{"name":"far","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setFrustumMatrix":{"name":"setFrustumMatrix","qualifiedName":"box2d/box2d.setFrustumMatrix","comment":"<p>Constructs an OpenGL perspective projection matrix in <a>box2d/box2d.setFrustumMatrix.perspectiveMatrix</a>.</p>\n<p><a>box2d/box2d.setFrustumMatrix.left</a>, <a>box2d/box2d.setFrustumMatrix.right</a> specify the coordinates for the left and right vertical\nclipping planes.\n<a>box2d/box2d.setFrustumMatrix.bottom</a>, <a>box2d/box2d.setFrustumMatrix.top</a> specify the coordinates for the bottom and top horizontal\nclipping planes.\n<a>box2d/box2d.setFrustumMatrix.near</a>, <a>box2d/box2d.setFrustumMatrix.far</a> specify the coordinates to the near and far depth clipping\nplanes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"perspectiveMatrix":{"name":"perspectiveMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"value":"null","annotations":[]},"left":{"name":"left","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"right":{"name":"right","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"bottom":{"name":"bottom","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"top":{"name":"top","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"near":{"name":"near","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"far":{"name":"far","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makePerspectiveMatrix":{"name":"makePerspectiveMatrix","qualifiedName":"box2d/box2d.makePerspectiveMatrix","comment":"<p>Constructs a new OpenGL perspective projection matrix.</p>\n<p><a>box2d/box2d.makePerspectiveMatrix.fovYRadians</a> specifies the field of view angle, in radians, in the y\ndirection.\n<a>box2d/box2d.makePerspectiveMatrix.aspectRatio</a> specifies the aspect ratio that determines the field of view\nin the x direction. The aspect ratio of x (width) to y (height).\n<a>box2d/box2d.makePerspectiveMatrix.zNear</a> specifies the distance from the viewer to the near plane\n(always positive).\n<a>box2d/box2d.makePerspectiveMatrix.zFar</a> specifies the distance from the viewer to the far plane\n(always positive).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"parameters":{"fovYRadians":{"name":"fovYRadians","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"aspectRatio":{"name":"aspectRatio","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"zNear":{"name":"zNear","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"zFar":{"name":"zFar","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setPerspectiveMatrix":{"name":"setPerspectiveMatrix","qualifiedName":"box2d/box2d.setPerspectiveMatrix","comment":"<p>Constructs an OpenGL perspective projection matrix in <a>box2d/box2d.setPerspectiveMatrix.perspectiveMatrix</a>.</p>\n<p><a>box2d/box2d.setPerspectiveMatrix.fovYRadians</a> specifies the field of view angle, in radians, in the y\ndirection.\n<a>box2d/box2d.setPerspectiveMatrix.aspectRatio</a> specifies the aspect ratio that determines the field of view\nin the x direction. The aspect ratio of x (width) to y (height).\n<a>box2d/box2d.setPerspectiveMatrix.zNear</a> specifies the distance from the viewer to the near plane\n(always positive).\n<a>box2d/box2d.setPerspectiveMatrix.zFar</a> specifies the distance from the viewer to the far plane\n(always positive).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"perspectiveMatrix":{"name":"perspectiveMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"value":"null","annotations":[]},"fovYRadians":{"name":"fovYRadians","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"aspectRatio":{"name":"aspectRatio","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"zNear":{"name":"zNear","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"zFar":{"name":"zFar","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"makeViewMatrix":{"name":"makeViewMatrix","qualifiedName":"box2d/box2d.makeViewMatrix","comment":"<p>Constructs a new OpenGL view matrix.</p>\n<p><a>box2d/box2d.makeViewMatrix.cameraPosition</a> specifies the position of the camera.\n<a>box2d/box2d.makeViewMatrix.cameraFocusPosition</a> specifies the position the camera is focused on.\n<a>box2d/box2d.makeViewMatrix.upDirection</a> specifies the direction of the up vector (usually, +Y).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"parameters":{"cameraPosition":{"name":"cameraPosition","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"cameraFocusPosition":{"name":"cameraFocusPosition","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"upDirection":{"name":"upDirection","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setViewMatrix":{"name":"setViewMatrix","qualifiedName":"box2d/box2d.setViewMatrix","comment":"<p>Constructs an OpenGL view matrix in <a>box2d/box2d.setViewMatrix.viewMatrix</a>.</p>\n<p><a>box2d/box2d.setViewMatrix.cameraPosition</a> specifies the position of the camera.\n<a>box2d/box2d.setViewMatrix.cameraFocusPosition</a> specifies the position the camera is focused on.\n<a>box2d/box2d.setViewMatrix.upDirection</a> specifies the direction of the up vector (usually, +Y).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"viewMatrix":{"name":"viewMatrix","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Matrix4","inner":[]}],"value":"null","annotations":[]},"cameraPosition":{"name":"cameraPosition","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"cameraFocusPosition":{"name":"cameraFocusPosition","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"upDirection":{"name":"upDirection","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"absoluteError":{"name":"absoluteError","qualifiedName":"box2d/box2d.absoluteError","comment":"<p>Returns absolute error between <a>box2d/box2d.absoluteError.calculated</a> and <a>box2d/box2d.absoluteError.correct</a>.\nThe type of <a>box2d/box2d.absoluteError.calculated</a> and <a>box2d/box2d.absoluteError.correct</a> must match and can\nbe any vector, matrix, or quaternion.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"calculated":{"name":"calculated","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"correct":{"name":"correct","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"relativeError":{"name":"relativeError","qualifiedName":"box2d/box2d.relativeError","comment":"<p>Returns relative error between <a>box2d/box2d.relativeError.calculated</a> and <a>box2d/box2d.relativeError.correct</a>.\nThe type of <a>box2d/box2d.relativeError.calculated</a> and <a>box2d/box2d.relativeError.correct</a> must match and can\nbe any vector, matrix, or quaternion.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"calculated":{"name":"calculated","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"correct":{"name":"correct","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"mix":{"name":"mix","qualifiedName":"box2d/box2d.mix","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"min":{"name":"min","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"max":{"name":"max","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"radians":{"name":"radians","qualifiedName":"box2d/box2d.radians","comment":"<p>Convert <a>box2d/box2d.radians.degrees</a> to radians.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"degrees":{"name":"degrees","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"degrees":{"name":"degrees","qualifiedName":"box2d/box2d.degrees","comment":"<p>Convert <a>box2d/box2d.degrees.radians</a> to degrees.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"radians":{"name":"radians","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Vector4","qualifiedName":"box2d/box2d.Vector4","preview":"<p>4D column vector.</p>"},{"name":"Vector3","qualifiedName":"box2d/box2d.Vector3","preview":"<p>3D column vector.</p>"},{"name":"Vector2","qualifiedName":"box2d/box2d.Vector2","preview":"<p>2D column vector.</p>"},{"name":"Triangle","qualifiedName":"box2d/box2d.Triangle"},{"name":"Sphere","qualifiedName":"box2d/box2d.Sphere"},{"name":"Ray","qualifiedName":"box2d/box2d.Ray"},{"name":"Quaternion","qualifiedName":"box2d/box2d.Quaternion"},{"name":"Plane","qualifiedName":"box2d/box2d.Plane"},{"name":"SimplexNoise","qualifiedName":"box2d/box2d.SimplexNoise"},{"name":"Matrix4","qualifiedName":"box2d/box2d.Matrix4","preview":"<p>4D Matrix.\nValues are stored in column major order.</p>"},{"name":"Matrix3","qualifiedName":"box2d/box2d.Matrix3","preview":"<p>3D Matrix.\nValues are stored in column major order.</p>"},{"name":"Matrix2","qualifiedName":"box2d/box2d.Matrix2","preview":"<p>2D Matrix.\nValues are stored in column major order.</p>"},{"name":"Frustum","qualifiedName":"box2d/box2d.Frustum"},{"name":"Colors","qualifiedName":"box2d/box2d.Colors","preview":"<p>Contains functions for converting between different color models and \nmanipulating colors. In addition to that, some known colors can be accessed\nfor fast prototyping.</p>"},{"name":"Aabb3","qualifiedName":"box2d/box2d.Aabb3"},{"name":"Aabb2","qualifiedName":"box2d/box2d.Aabb2"},{"name":"DefaultWorldPool","qualifiedName":"box2d/box2d.DefaultWorldPool"},{"name":"RevoluteJointDef","qualifiedName":"box2d/box2d.RevoluteJointDef"},{"name":"RevoluteJoint","qualifiedName":"box2d/box2d.RevoluteJoint"},{"name":"FrictionJointDef","qualifiedName":"box2d/box2d.FrictionJointDef"},{"name":"FrictionJoint","qualifiedName":"box2d/box2d.FrictionJoint"},{"name":"DistanceJointDef","qualifiedName":"box2d/box2d.DistanceJointDef"},{"name":"DistanceJoint","qualifiedName":"box2d/box2d.DistanceJoint"},{"name":"ConstantVolumeJointDef","qualifiedName":"box2d/box2d.ConstantVolumeJointDef"},{"name":"ConstantVolumeJoint","qualifiedName":"box2d/box2d.ConstantVolumeJoint"},{"name":"LimitState","qualifiedName":"box2d/box2d.LimitState"},{"name":"JointType","qualifiedName":"box2d/box2d.JointType"},{"name":"JointDef","qualifiedName":"box2d/box2d.JointDef"},{"name":"JointEdge","qualifiedName":"box2d/box2d.JointEdge"},{"name":"Joint","qualifiedName":"box2d/box2d.Joint"},{"name":"TimeOfImpactConstraint","qualifiedName":"box2d/box2d.TimeOfImpactConstraint"},{"name":"TimeOfImpactSolverManifold","qualifiedName":"box2d/box2d.TimeOfImpactSolverManifold"},{"name":"TimeOfImpactSolver","qualifiedName":"box2d/box2d.TimeOfImpactSolver"},{"name":"PolygonContact","qualifiedName":"box2d/box2d.PolygonContact"},{"name":"PolygonAndCircleContact","qualifiedName":"box2d/box2d.PolygonAndCircleContact"},{"name":"PositionSolverManifold","qualifiedName":"box2d/box2d.PositionSolverManifold"},{"name":"ContactSolver","qualifiedName":"box2d/box2d.ContactSolver"},{"name":"ContactRegister","qualifiedName":"box2d/box2d.ContactRegister"},{"name":"CircleContact","qualifiedName":"box2d/box2d.CircleContact"},{"name":"ContactCreator","qualifiedName":"box2d/box2d.ContactCreator"},{"name":"ContactEdge","qualifiedName":"box2d/box2d.ContactEdge"},{"name":"ContactConstraintPoint","qualifiedName":"box2d/box2d.ContactConstraintPoint"},{"name":"ContactConstraint","qualifiedName":"box2d/box2d.ContactConstraint"},{"name":"Contact","qualifiedName":"box2d/box2d.Contact"},{"name":"WorldQueryWrapper","qualifiedName":"box2d/box2d.WorldQueryWrapper"},{"name":"World","qualifiedName":"box2d/box2d.World"},{"name":"TimeStep","qualifiedName":"box2d/box2d.TimeStep"},{"name":"Velocity","qualifiedName":"box2d/box2d.Velocity","preview":"<p>This is an internal structure</p>"},{"name":"Position","qualifiedName":"box2d/box2d.Position","preview":"<p>This is an internal structure</p>"},{"name":"Island","qualifiedName":"box2d/box2d.Island"},{"name":"FixtureDef","qualifiedName":"box2d/box2d.FixtureDef"},{"name":"Fixture","qualifiedName":"box2d/box2d.Fixture"},{"name":"Filter","qualifiedName":"box2d/box2d.Filter"},{"name":"ContactManager","qualifiedName":"box2d/box2d.ContactManager"},{"name":"BodyType","qualifiedName":"box2d/box2d.BodyType"},{"name":"BodyDef","qualifiedName":"box2d/box2d.BodyDef"},{"name":"Body","qualifiedName":"box2d/box2d.Body"},{"name":"ViewportTransform","qualifiedName":"box2d/box2d.ViewportTransform"},{"name":"Transform","qualifiedName":"box2d/box2d.Transform"},{"name":"Sweep","qualifiedName":"box2d/box2d.Sweep"},{"name":"Settings","qualifiedName":"box2d/box2d.Settings"},{"name":"MathBox","qualifiedName":"box2d/box2d.MathBox"},{"name":"Color3","qualifiedName":"box2d/box2d.Color3"},{"name":"ShapeType","qualifiedName":"box2d/box2d.ShapeType"},{"name":"Shape","qualifiedName":"box2d/box2d.Shape"},{"name":"PolygonShape","qualifiedName":"box2d/box2d.PolygonShape"},{"name":"MassData","qualifiedName":"box2d/box2d.MassData"},{"name":"CircleShape","qualifiedName":"box2d/box2d.CircleShape"},{"name":"Pair","qualifiedName":"box2d/box2d.Pair"},{"name":"DynamicTreeNode","qualifiedName":"box2d/box2d.DynamicTreeNode"},{"name":"DynamicTree","qualifiedName":"box2d/box2d.DynamicTree"},{"name":"BroadPhase","qualifiedName":"box2d/box2d.BroadPhase"},{"name":"WorldManifold","qualifiedName":"box2d/box2d.WorldManifold"},{"name":"SeparationType","qualifiedName":"box2d/box2d.SeparationType"},{"name":"TimeOfImpactOutput","qualifiedName":"box2d/box2d.TimeOfImpactOutput","preview":"<p>Output parameters for TimeOfImpact</p>"},{"name":"TimeOfImpactOutputState","qualifiedName":"box2d/box2d.TimeOfImpactOutputState","preview":"<p>Edouble for TimeOfImpact output.</p>"},{"name":"TimeOfImpactInput","qualifiedName":"box2d/box2d.TimeOfImpactInput","preview":"<p>Input parameters for TimeOfImpact.</p>"},{"name":"SeparationFunction","qualifiedName":"box2d/box2d.SeparationFunction"},{"name":"TimeOfImpact","qualifiedName":"box2d/box2d.TimeOfImpact"},{"name":"SimplexVertex","qualifiedName":"box2d/box2d.SimplexVertex"},{"name":"SimplexCache","qualifiedName":"box2d/box2d.SimplexCache"},{"name":"Simplex","qualifiedName":"box2d/box2d.Simplex"},{"name":"RayCastOutput","qualifiedName":"box2d/box2d.RayCastOutput"},{"name":"RayCastInput","qualifiedName":"box2d/box2d.RayCastInput"},{"name":"PointState","qualifiedName":"box2d/box2d.PointState"},{"name":"ManifoldType","qualifiedName":"box2d/box2d.ManifoldType"},{"name":"ManifoldPoint","qualifiedName":"box2d/box2d.ManifoldPoint"},{"name":"Manifold","qualifiedName":"box2d/box2d.Manifold"},{"name":"Features","qualifiedName":"box2d/box2d.Features"},{"name":"DistanceProxy","qualifiedName":"box2d/box2d.DistanceProxy"},{"name":"DistanceOutput","qualifiedName":"box2d/box2d.DistanceOutput"},{"name":"DistanceInput","qualifiedName":"box2d/box2d.DistanceInput"},{"name":"Distance","qualifiedName":"box2d/box2d.Distance"},{"name":"ContactID","qualifiedName":"box2d/box2d.ContactID"},{"name":"EdgeResults","qualifiedName":"box2d/box2d.EdgeResults","preview":"<p>Class for returning edge results</p>"},{"name":"ClipVertex","qualifiedName":"box2d/box2d.ClipVertex","preview":"<p>Used for computing contact manifolds.</p>"},{"name":"Collision","qualifiedName":"box2d/box2d.Collision"},{"name":"TreeCallback","qualifiedName":"box2d/box2d.TreeCallback"},{"name":"QueryCallback","qualifiedName":"box2d/box2d.QueryCallback"},{"name":"ContactListener","qualifiedName":"box2d/box2d.ContactListener"},{"name":"ContactImpulse","qualifiedName":"box2d/box2d.ContactImpulse"},{"name":"ContactFilter","qualifiedName":"box2d/box2d.ContactFilter"},{"name":"DebugDraw","qualifiedName":"box2d/box2d.DebugDraw"}],"typedef":{"PairCallback":{"name":"PairCallback","qualifiedName":"box2d/box2d.PairCallback","comment":"","return":"void","parameters":{"fixtureA":{"name":"fixtureA","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Fixture","inner":[]}],"value":"null","annotations":[]},"fixtureB":{"name":"fixtureB","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Fixture","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"JointDestructionListener":{"name":"JointDestructionListener","qualifiedName":"box2d/box2d.JointDestructionListener","comment":"","return":"void","parameters":{"joint":{"name":"joint","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Joint","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"FixtureDestructionListener":{"name":"FixtureDestructionListener","qualifiedName":"box2d/box2d.FixtureDestructionListener","comment":"","return":"void","parameters":{"fixture":{"name":"fixture","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Fixture","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}}},"error":[]},"packageName":"box2d","packageIntro":"<p>This is a Dart port of Daniel Murphy's JBox2D, which is itself a port of Erin\nCatto's Box2D. The JBox2D copyright notice is reproduced below and is also\npresent in the original source files.</p><ul><li>example/benchmarks/   Contains benchmark .dart files</li><li>example/demos/        Contains demo .dart files</li><li>lib/         \t        Contains the Dart-Box2d library .dart files</li></ul>\n<p><a href=\"http://dart-lang.github.io/dart-box2d/\">Library documentation</a></p>\n<p><a href=\"https://drone.io/github.com/dart-lang/dart-box2d/latest\">!<a href=\"https://drone.io/github.com/dart-lang/dart-box2d/status.png\"></a></a></p>\n<h1>Build instructions</h1>\n<p>Dart-Box2D now uses the <a href=\"https://github.com/dart-lang/hop\">Hop package</a>. To build, just try</p>\n<pre><code>$ dart tool/hop_runner.dart dart2js\n</code></pre>\n<h1>License</h1>\n<pre><code>Copyright (c) 2011, Daniel Murphy\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification are permitted provided that the following conditions are met:\n* Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>\n<pre><code>JBox2D - A Java Port of Erin Catto's Box2D\n\nJBox2D homepage: http://jbox2d.sourceforge.net/ \nBox2D homepage: http://www.box2d.org\n\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n</code></pre>"}