{"name":"ContactSolver","qualifiedName":"box2d/box2d.ContactSolver","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"INITIAL_NUM_CONSTRAINTS":{"name":"INITIAL_NUM_CONSTRAINTS","qualifiedName":"box2d/box2d.ContactSolver.INITIAL_NUM_CONSTRAINTS","comment":"<p>For each solver, this is the initial number of constraints\nin the array, which expands as needed.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"K_MAX_CONDITION_NUMBER":{"name":"K_MAX_CONDITION_NUMBER","qualifiedName":"box2d/box2d.ContactSolver.K_MAX_CONDITION_NUMBER","comment":"<p>Ensure a reasonable condition number. For the block solver</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"constraints":{"name":"constraints","qualifiedName":"box2d/box2d.ContactSolver.constraints","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.ContactConstraint","inner":[]}]}],"annotations":[]},"constraintCount":{"name":"constraintCount","qualifiedName":"box2d/box2d.ContactSolver.constraintCount","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"worldManifold":{"name":"worldManifold","qualifiedName":"box2d/box2d.ContactSolver.worldManifold","comment":"<p>Pooling</p>","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.WorldManifold","inner":[]}],"annotations":[]},"tangent":{"name":"tangent","qualifiedName":"box2d/box2d.ContactSolver.tangent","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"temp1":{"name":"temp1","qualifiedName":"box2d/box2d.ContactSolver.temp1","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"temp2":{"name":"temp2","qualifiedName":"box2d/box2d.ContactSolver.temp2","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"P":{"name":"P","qualifiedName":"box2d/box2d.ContactSolver.P","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"dv":{"name":"dv","qualifiedName":"box2d/box2d.ContactSolver.dv","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"dv1":{"name":"dv1","qualifiedName":"box2d/box2d.ContactSolver.dv1","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"dv2":{"name":"dv2","qualifiedName":"box2d/box2d.ContactSolver.dv2","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"x":{"name":"x","qualifiedName":"box2d/box2d.ContactSolver.x","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"d":{"name":"d","qualifiedName":"box2d/box2d.ContactSolver.d","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"P1":{"name":"P1","qualifiedName":"box2d/box2d.ContactSolver.P1","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"P2":{"name":"P2","qualifiedName":"box2d/box2d.ContactSolver.P2","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"psolver":{"name":"psolver","qualifiedName":"box2d/box2d.ContactSolver.psolver","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.PositionSolverManifold","inner":[]}],"annotations":[]},"rA":{"name":"rA","qualifiedName":"box2d/box2d.ContactSolver.rA","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"rB":{"name":"rB","qualifiedName":"box2d/box2d.ContactSolver.rB","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"box2d/box2d.ContactSolver.ContactSolver-","comment":"<p>Constructs a new ContactSolver.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"init":{"name":"init","qualifiedName":"box2d/box2d.ContactSolver.init","comment":"","commentFrom":"box2d.ContactSolver.init","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"contacts":{"name":"contacts","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.Contact","inner":[]}]}],"value":"null","annotations":[]},"contactCount":{"name":"contactCount","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"impulseRatio":{"name":"impulseRatio","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"warmStart":{"name":"warmStart","qualifiedName":"box2d/box2d.ContactSolver.warmStart","comment":"","commentFrom":"box2d.ContactSolver.warmStart","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"solveVelocityConstraints":{"name":"solveVelocityConstraints","qualifiedName":"box2d/box2d.ContactSolver.solveVelocityConstraints","comment":"","commentFrom":"box2d.ContactSolver.solveVelocityConstraints","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"storeImpulses":{"name":"storeImpulses","qualifiedName":"box2d/box2d.ContactSolver.storeImpulses","comment":"","commentFrom":"box2d.ContactSolver.storeImpulses","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"solvePositionConstraints":{"name":"solvePositionConstraints","qualifiedName":"box2d/box2d.ContactSolver.solvePositionConstraints","comment":"<p>Sequential solver.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"baumgarte":{"name":"baumgarte","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d.ContactSolver.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d.ContactSolver.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d.ContactSolver.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d.ContactSolver.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d.ContactSolver.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d.ContactSolver.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d.ContactSolver.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d.ContactSolver.noSuchMethod","comment":"<p><a>box2d/box2d.ContactSolver.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d.ContactSolver.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d.ContactSolver.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d.ContactSolver.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}