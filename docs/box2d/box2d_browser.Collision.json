{"name":"Collision","qualifiedName":"box2d/box2d_browser.Collision","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"NULL_FEATURE":{"name":"NULL_FEATURE","qualifiedName":"box2d/box2d.Collision.NULL_FEATURE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"cache":{"name":"cache","qualifiedName":"box2d/box2d.Collision.cache","comment":"<p>Cache used to help warmstart distance.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.SimplexCache","inner":[]}],"annotations":[]},"input":{"name":"input","qualifiedName":"box2d/box2d.Collision.input","comment":"<p>Distance input and output.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.DistanceInput","inner":[]}],"annotations":[]},"output":{"name":"output","qualifiedName":"box2d/box2d.Collision.output","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.DistanceOutput","inner":[]}],"annotations":[]},"results1":{"name":"results1","qualifiedName":"box2d/box2d.Collision.results1","comment":"<p>A pool of already constructed objects.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.EdgeResults","inner":[]}],"annotations":[]},"results2":{"name":"results2","qualifiedName":"box2d/box2d.Collision.results2","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.EdgeResults","inner":[]}],"annotations":[]},"incidentEdge":{"name":"incidentEdge","qualifiedName":"box2d/box2d.Collision.incidentEdge","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.ClipVertex","inner":[]}]}],"annotations":[]},"localTangent":{"name":"localTangent","qualifiedName":"box2d/box2d.Collision.localTangent","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"localNormal":{"name":"localNormal","qualifiedName":"box2d/box2d.Collision.localNormal","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"planePoint":{"name":"planePoint","qualifiedName":"box2d/box2d.Collision.planePoint","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"tangent":{"name":"tangent","qualifiedName":"box2d/box2d.Collision.tangent","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"normal":{"name":"normal","qualifiedName":"box2d/box2d.Collision.normal","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"normal1":{"name":"normal1","qualifiedName":"box2d/box2d.Collision.normal1","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"v11":{"name":"v11","qualifiedName":"box2d/box2d.Collision.v11","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"v12":{"name":"v12","qualifiedName":"box2d/box2d.Collision.v12","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"clipPoints1":{"name":"clipPoints1","qualifiedName":"box2d/box2d.Collision.clipPoints1","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.ClipVertex","inner":[]}]}],"annotations":[]},"clipPoints2":{"name":"clipPoints2","qualifiedName":"box2d/box2d.Collision.clipPoints2","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.ClipVertex","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"testOverlap":{"name":"testOverlap","qualifiedName":"box2d/box2d_browser.Collision.testOverlap","comment":"<p>Returns true if the two given shapes overlap.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"shapeA":{"name":"shapeA","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Shape","inner":[]}],"value":"null","annotations":[]},"shapeB":{"name":"shapeB","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Shape","inner":[]}],"value":"null","annotations":[]},"transformA":{"name":"transformA","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]},"transformB":{"name":"transformB","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getPointStates":{"name":"getPointStates","qualifiedName":"box2d/box2d_browser.Collision.getPointStates","comment":"<p>Compute the point states given two manifolds. The states pertain to the\ntransition from manifold1 to manifold2. So state1 is either persist or\nremove while state2 is either add or persist.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"state1":{"name":"state1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"state2":{"name":"state2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"manifold1":{"name":"manifold1","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Manifold","inner":[]}],"value":"null","annotations":[]},"manifold2":{"name":"manifold2","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Manifold","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"clipSegmentToLine":{"name":"clipSegmentToLine","qualifiedName":"box2d/box2d_browser.Collision.clipSegmentToLine","comment":"<p>Clipping for contact manifolds.\nSutherland-Hodgman clipping.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"vOut":{"name":"vOut","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d_browser.ClipVertex","inner":[]}]}],"value":"null","annotations":[]},"vIn":{"name":"vIn","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d_browser.ClipVertex","inner":[]}]}],"value":"null","annotations":[]},"norm":{"name":"norm","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"collideCircles":{"name":"collideCircles","qualifiedName":"box2d/box2d_browser.Collision.collideCircles","comment":"<p>Compute the collision manifold between two circles.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"manifold":{"name":"manifold","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Manifold","inner":[]}],"value":"null","annotations":[]},"circle1":{"name":"circle1","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.CircleShape","inner":[]}],"value":"null","annotations":[]},"xfA":{"name":"xfA","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]},"circle2":{"name":"circle2","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.CircleShape","inner":[]}],"value":"null","annotations":[]},"xfB":{"name":"xfB","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"collidePolygonAndCircle":{"name":"collidePolygonAndCircle","qualifiedName":"box2d/box2d_browser.Collision.collidePolygonAndCircle","comment":"<p>Compute the collision manifold between a polygon and a circle.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"manifold":{"name":"manifold","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Manifold","inner":[]}],"value":"null","annotations":[]},"polygon":{"name":"polygon","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.PolygonShape","inner":[]}],"value":"null","annotations":[]},"xfA":{"name":"xfA","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]},"circle":{"name":"circle","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.CircleShape","inner":[]}],"value":"null","annotations":[]},"xfB":{"name":"xfB","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"edgeSeparation":{"name":"edgeSeparation","qualifiedName":"box2d/box2d_browser.Collision.edgeSeparation","comment":"<p>Find the separation between poly1 and poly2 for a given edge normal on\npoly1.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"poly1":{"name":"poly1","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.PolygonShape","inner":[]}],"value":"null","annotations":[]},"xf1":{"name":"xf1","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]},"edge1":{"name":"edge1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"poly2":{"name":"poly2","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.PolygonShape","inner":[]}],"value":"null","annotations":[]},"xf2":{"name":"xf2","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"findMaxSeparation":{"name":"findMaxSeparation","qualifiedName":"box2d/box2d_browser.Collision.findMaxSeparation","comment":"<p>Find the max separation between poly1 and poly2 using edge normals from\npoly1.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"results":{"name":"results","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.EdgeResults","inner":[]}],"value":"null","annotations":[]},"poly1":{"name":"poly1","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.PolygonShape","inner":[]}],"value":"null","annotations":[]},"xf1":{"name":"xf1","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]},"poly2":{"name":"poly2","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.PolygonShape","inner":[]}],"value":"null","annotations":[]},"xf2":{"name":"xf2","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"findIncidentEdge":{"name":"findIncidentEdge","qualifiedName":"box2d/box2d_browser.Collision.findIncidentEdge","comment":"","commentFrom":"box2d.Collision.findIncidentEdge","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"c":{"name":"c","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d_browser.ClipVertex","inner":[]}]}],"value":"null","annotations":[]},"poly1":{"name":"poly1","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.PolygonShape","inner":[]}],"value":"null","annotations":[]},"xf1":{"name":"xf1","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]},"edge1":{"name":"edge1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"poly2":{"name":"poly2","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.PolygonShape","inner":[]}],"value":"null","annotations":[]},"xf2":{"name":"xf2","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"collidePolygons":{"name":"collidePolygons","qualifiedName":"box2d/box2d_browser.Collision.collidePolygons","comment":"<p>Compute the collision manifold between two polygons.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"manifold":{"name":"manifold","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Manifold","inner":[]}],"value":"null","annotations":[]},"polyA":{"name":"polyA","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.PolygonShape","inner":[]}],"value":"null","annotations":[]},"xfA":{"name":"xfA","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]},"polyB":{"name":"polyB","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.PolygonShape","inner":[]}],"value":"null","annotations":[]},"xfB":{"name":"xfB","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d_browser.Collision.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d_browser.Collision.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d_browser.Collision.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d_browser.Collision.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d_browser.Collision.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d_browser.Collision.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d_browser.Collision.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d_browser.Collision.noSuchMethod","comment":"<p><a>box2d/box2d_browser.Collision.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d_browser.Collision.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d_browser.Collision.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d_browser.Collision.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}