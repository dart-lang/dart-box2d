{"name":"Plane","qualifiedName":"box2d/box2d.Plane","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"constant=":{"name":"constant=","qualifiedName":"box2d/box2d.Plane.constant=","comment":"","commentFrom":"box2d.Plane.constant=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"normal":{"name":"normal","qualifiedName":"box2d/box2d.Plane.normal","comment":"","commentFrom":"box2d.Plane.normal","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Vector3","inner":[]}],"parameters":{},"annotations":[]},"constant":{"name":"constant","qualifiedName":"box2d/box2d.Plane.constant","comment":"","commentFrom":"box2d.Plane.constant","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"box2d/box2d.Plane.Plane-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"copy":{"name":"copy","qualifiedName":"box2d/box2d.Plane.Plane-copy","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Plane","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"components":{"name":"components","qualifiedName":"box2d/box2d.Plane.Plane-components","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"z":{"name":"z","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"w":{"name":"w","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"normalconstant":{"name":"normalconstant","qualifiedName":"box2d/box2d.Plane.Plane-normalconstant","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"normal_":{"name":"normal_","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]},"constant_":{"name":"constant_","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"intersection":{"name":"intersection","qualifiedName":"box2d/box2d.Plane.intersection","comment":"<p>Find the intersection point between the three planes <a>box2d/box2d.Plane.intersection.a</a>, <a>box2d/box2d.Plane.intersection.b</a> and <a>box2d/box2d.Plane.intersection.c</a> and\ncopy it into <a>box2d/box2d.Plane.intersection.result</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Plane","inner":[]}],"value":"null","annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Plane","inner":[]}],"value":"null","annotations":[]},"c":{"name":"c","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Plane","inner":[]}],"value":"null","annotations":[]},"result":{"name":"result","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"copyFrom":{"name":"copyFrom","qualifiedName":"box2d/box2d.Plane.copyFrom","comment":"","commentFrom":"box2d.Plane.copyFrom","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"o":{"name":"o","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Plane","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setFromComponents":{"name":"setFromComponents","qualifiedName":"box2d/box2d.Plane.setFromComponents","comment":"","commentFrom":"box2d.Plane.setFromComponents","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"z":{"name":"z","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"w":{"name":"w","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"normalize":{"name":"normalize","qualifiedName":"box2d/box2d.Plane.normalize","comment":"","commentFrom":"box2d.Plane.normalize","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"distanceToVector3":{"name":"distanceToVector3","qualifiedName":"box2d/box2d.Plane.distanceToVector3","comment":"","commentFrom":"box2d.Plane.distanceToVector3","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"point":{"name":"point","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d.Plane.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d.Plane.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d.Plane.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d.Plane.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d.Plane.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d.Plane.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d.Plane.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d.Plane.noSuchMethod","comment":"<p><a>box2d/box2d.Plane.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d.Plane.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d.Plane.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d.Plane.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}