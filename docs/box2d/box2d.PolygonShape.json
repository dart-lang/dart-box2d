{"name":"PolygonShape","qualifiedName":"box2d/box2d.PolygonShape","comment":"","isAbstract":false,"superclass":"box2d/box2d.Shape","implements":[],"subclass":[],"variables":{"centroid":{"name":"centroid","qualifiedName":"box2d/box2d.PolygonShape.centroid","comment":"<p>Local position of the shape centroid in parent body frame.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"vertices":{"name":"vertices","qualifiedName":"box2d/box2d.PolygonShape.vertices","comment":"<p>The vertices of the shape. Note: Use getVertexCount() rather than\nvertices.length to get the number of active vertices.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.Vector2","inner":[]}]}],"annotations":[]},"normals":{"name":"normals","qualifiedName":"box2d/box2d.PolygonShape.normals","comment":"<p>The normals of the shape. Note: Use getVertexCount() rather than\nnormals.length to get the number of active normals.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.Vector2","inner":[]}]}],"annotations":[]},"vertexCount":{"name":"vertexCount","qualifiedName":"box2d/box2d.PolygonShape.vertexCount","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{"type":{"name":"type","qualifiedName":"box2d/box2d.Shape.type","comment":"<p>The type of shape. Either circle or polygon.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"radius":{"name":"radius","qualifiedName":"box2d/box2d.Shape.radius","comment":"<p>Shape radius.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"box2d/box2d.PolygonShape.PolygonShape-","comment":"<p>Constructs a new PolygonShape.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"copy":{"name":"copy","qualifiedName":"box2d/box2d.PolygonShape.PolygonShape-copy","comment":"<p>Constructs a new PolygonShape equal to the given shape.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.PolygonShape","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"getSupport":{"name":"getSupport","qualifiedName":"box2d/box2d.PolygonShape.getSupport","comment":"<p>Get the supporting vertex index in the given direction.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"d":{"name":"d","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"clone":{"name":"clone","qualifiedName":"box2d/box2d.PolygonShape.clone","comment":"<p>Returns a clone of this shape.</p>","commentFrom":"box2d.Shape.clone","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Shape","inner":[]}],"parameters":{},"annotations":[]},"getSupportVertex":{"name":"getSupportVertex","qualifiedName":"box2d/box2d.PolygonShape.getSupportVertex","comment":"<p>Get the supporting vertex in the given direction.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Vector2","inner":[]}],"parameters":{"d":{"name":"d","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setFrom":{"name":"setFrom","qualifiedName":"box2d/box2d.PolygonShape.setFrom","comment":"<p>Copy vertices. This assumes the vertices define a convex polygon.\nIt is assumed that the exterior is the the right of each edge.\nTODO(dominich): Consider removing <a>box2d/box2d.PolygonShape.setFrom.count</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"otherVertices":{"name":"otherVertices","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.Vector2","inner":[]}]}],"value":"null","annotations":[]},"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setAsBox":{"name":"setAsBox","qualifiedName":"box2d/box2d.PolygonShape.setAsBox","comment":"<p>Build vertices to represent an axis-aligned box.\nhx is the half-width of the body and hy is the half height.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"hx":{"name":"hx","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"hy":{"name":"hy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setAsBoxWithCenterAndAngle":{"name":"setAsBoxWithCenterAndAngle","qualifiedName":"box2d/box2d.PolygonShape.setAsBoxWithCenterAndAngle","comment":"<p>Build vertices to represent an oriented box. hx is the halfwidth, hy the\nhalf-height, center is the center of the box in local coordinates and angle\nis the rotation of the box in local coordinates.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"hx":{"name":"hx","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"hy":{"name":"hy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"center":{"name":"center","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]},"angle":{"name":"angle","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setAsEdge":{"name":"setAsEdge","qualifiedName":"box2d/box2d.PolygonShape.setAsEdge","comment":"<p>Set this as a single edge.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"v1":{"name":"v1","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]},"v2":{"name":"v2","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"testPoint":{"name":"testPoint","qualifiedName":"box2d/box2d.PolygonShape.testPoint","comment":"<p>See Shape.testPoint(Transform, Vector).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"xf":{"name":"xf","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"p":{"name":"p","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"raycast":{"name":"raycast","qualifiedName":"box2d/box2d.PolygonShape.raycast","comment":"<p>Cast a ray against a child shape</p>\n<p>output: the raycast results.\ninput: the raycast input parameters.\ntransform: the transform to be applied to the shape.\nchildIndex: the child shape index.</p>","commentFrom":"box2d.Shape.raycast","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"output":{"name":"output","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.RayCastOutput","inner":[]}],"value":"null","annotations":[]},"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.RayCastInput","inner":[]}],"value":"null","annotations":[]},"xf":{"name":"xf","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"childIndex":{"name":"childIndex","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"computeAxisAlignedBox":{"name":"computeAxisAlignedBox","qualifiedName":"box2d/box2d.PolygonShape.computeAxisAlignedBox","comment":"<p>See Shape.computeAxisAlignedBox(AABB, Transform).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"argAabb":{"name":"argAabb","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Aabb2","inner":[]}],"value":"null","annotations":[]},"argXf":{"name":"argXf","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getVertex":{"name":"getVertex","qualifiedName":"box2d/box2d.PolygonShape.getVertex","comment":"<p>Get a vertex by index.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Vector2","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"computeCentroidToOut":{"name":"computeCentroidToOut","qualifiedName":"box2d/box2d.PolygonShape.computeCentroidToOut","comment":"<p>Compute the centroid and store the value in the given out parameter.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"vs":{"name":"vs","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"box2d/box2d.Vector2","inner":[]}]}],"value":"null","annotations":[]},"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"computeMass":{"name":"computeMass","qualifiedName":"box2d/box2d.PolygonShape.computeMass","comment":"<p>See Shape.computeMass(MassData)</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"massData":{"name":"massData","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.MassData","inner":[]}],"value":"null","annotations":[]},"density":{"name":"density","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"applyTransformToCentroid":{"name":"applyTransformToCentroid","qualifiedName":"box2d/box2d.PolygonShape.applyTransformToCentroid","comment":"<p>Get the centroid and apply the supplied transform.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Vector2","inner":[]}],"parameters":{"xf":{"name":"xf","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"centroidToOut":{"name":"centroidToOut","qualifiedName":"box2d/box2d.PolygonShape.centroidToOut","comment":"<p>Get the centroid and apply the supplied transform. Return the result\nthrough the return parameter out.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Vector2","inner":[]}],"parameters":{"xf":{"name":"xf","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"out":{"name":"out","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d.PolygonShape.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d.PolygonShape.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d.PolygonShape.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d.PolygonShape.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d.PolygonShape.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d.PolygonShape.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d.PolygonShape.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d.PolygonShape.noSuchMethod","comment":"<p><a>box2d/box2d.PolygonShape.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d.PolygonShape.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d.PolygonShape.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d.PolygonShape.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"testPoint":{"name":"testPoint","qualifiedName":"box2d/box2d.PolygonShape.testPoint","comment":"<p>Test a point for containment in this shape. This only works for convex\nshapes.\ntransform:  the shape world transform.\npoint: a point in world coordinates.</p>","commentFrom":"","inheritedFrom":"box2d.Shape.testPoint","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"transform":{"name":"transform","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"point":{"name":"point","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"raycast":{"name":"raycast","qualifiedName":"box2d/box2d.PolygonShape.raycast","comment":"<p>Cast a ray against a child shape</p>\n<p>output: the raycast results.\ninput: the raycast input parameters.\ntransform: the transform to be applied to the shape.\nchildIndex: the child shape index.</p>","commentFrom":"","inheritedFrom":"box2d.Shape.raycast","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"output":{"name":"output","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.RayCastOutput","inner":[]}],"value":"null","annotations":[]},"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.RayCastInput","inner":[]}],"value":"null","annotations":[]},"transform":{"name":"transform","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"childIndex":{"name":"childIndex","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"computeAxisAlignedBox":{"name":"computeAxisAlignedBox","qualifiedName":"box2d/box2d.PolygonShape.computeAxisAlignedBox","comment":"<p>Computes the associated axis aligned bounding box for a child shape\ngiven a transform. Returns through the given out paramater.</p>","commentFrom":"","inheritedFrom":"box2d.Shape.computeAxisAlignedBox","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"box":{"name":"box","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Aabb2","inner":[]}],"value":"null","annotations":[]},"transform":{"name":"transform","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"computeMass":{"name":"computeMass","qualifiedName":"box2d/box2d.PolygonShape.computeMass","comment":"<p>Computes (and returns through the given out parameter massData) the mass\nproperties of this shape using its dimensions and the\ngiven density. The inertia tensor is computed about the local origin.</p>","commentFrom":"","inheritedFrom":"box2d.Shape.computeMass","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"massData":{"name":"massData","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.MassData","inner":[]}],"value":"null","annotations":[]},"density":{"name":"density","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"clone":{"name":"clone","qualifiedName":"box2d/box2d.PolygonShape.clone","comment":"<p>Returns a clone of this shape.</p>","commentFrom":"","inheritedFrom":"box2d.Shape.clone","static":false,"abstract":true,"constant":false,"return":[{"outer":"box2d/box2d.Shape","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}