{"name":"CircleShape","qualifiedName":"box2d/box2d.CircleShape","comment":"","isAbstract":false,"superclass":"box2d/box2d.Shape","implements":[],"subclass":[],"variables":{"position":{"name":"position","qualifiedName":"box2d/box2d.CircleShape.position","comment":"<p>The current position of the center of this circle.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]}},"inheritedVariables":{"type":{"name":"type","qualifiedName":"box2d/box2d.Shape.type","comment":"<p>The type of shape. Either circle or polygon.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"radius":{"name":"radius","qualifiedName":"box2d/box2d.Shape.radius","comment":"<p>Shape radius.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"box2d/box2d.CircleShape.CircleShape-","comment":"<p>A constructor for internal use only. Instead use Body.createShape with a\nCircleDef.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"copy":{"name":"copy","qualifiedName":"box2d/box2d.CircleShape.CircleShape-copy","comment":"<p>Constructs a new CircleShape equal to the given CircleShape.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.CircleShape","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"testPoint":{"name":"testPoint","qualifiedName":"box2d/box2d.CircleShape.testPoint","comment":"<p>Returns true if the point is contained in the given shape when the given\nrotation transform is applied. Implements superclass abstract method of\nthe same name.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"transform":{"name":"transform","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"point":{"name":"point","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"raycast":{"name":"raycast","qualifiedName":"box2d/box2d.CircleShape.raycast","comment":"<p>Cast a ray against a child shape</p>\n<p>output: the raycast results.\ninput: the raycast input parameters.\ntransform: the transform to be applied to the shape.\nchildIndex: the child shape index.</p>","commentFrom":"box2d.Shape.raycast","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"output":{"name":"output","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.RayCastOutput","inner":[]}],"value":"null","annotations":[]},"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.RayCastInput","inner":[]}],"value":"null","annotations":[]},"transform":{"name":"transform","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"childIndex":{"name":"childIndex","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"computeAxisAlignedBox":{"name":"computeAxisAlignedBox","qualifiedName":"box2d/box2d.CircleShape.computeAxisAlignedBox","comment":"<p>Compute the axis aligned box for this Shape when the given transform is\napplied. Stores the result in the given box.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"argBox":{"name":"argBox","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Aabb2","inner":[]}],"value":"null","annotations":[]},"argTransform":{"name":"argTransform","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"clone":{"name":"clone","qualifiedName":"box2d/box2d.CircleShape.clone","comment":"<p>Returns a clone of this circle.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d.Shape","inner":[]}],"parameters":{},"annotations":[]},"computeMass":{"name":"computeMass","qualifiedName":"box2d/box2d.CircleShape.computeMass","comment":"<p>Computes the mass properties of this Circle at the given density and stores\nthe result in the given MassData object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"massData":{"name":"massData","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.MassData","inner":[]}],"value":"null","annotations":[]},"density":{"name":"density","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d.CircleShape.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d.CircleShape.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d.CircleShape.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d.CircleShape.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d.CircleShape.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d.CircleShape.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d.CircleShape.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d.CircleShape.noSuchMethod","comment":"<p><a>box2d/box2d.CircleShape.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d.CircleShape.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d.CircleShape.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d.CircleShape.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"testPoint":{"name":"testPoint","qualifiedName":"box2d/box2d.CircleShape.testPoint","comment":"<p>Test a point for containment in this shape. This only works for convex\nshapes.\ntransform:  the shape world transform.\npoint: a point in world coordinates.</p>","commentFrom":"","inheritedFrom":"box2d.Shape.testPoint","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"transform":{"name":"transform","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"point":{"name":"point","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"raycast":{"name":"raycast","qualifiedName":"box2d/box2d.CircleShape.raycast","comment":"<p>Cast a ray against a child shape</p>\n<p>output: the raycast results.\ninput: the raycast input parameters.\ntransform: the transform to be applied to the shape.\nchildIndex: the child shape index.</p>","commentFrom":"","inheritedFrom":"box2d.Shape.raycast","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"output":{"name":"output","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.RayCastOutput","inner":[]}],"value":"null","annotations":[]},"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.RayCastInput","inner":[]}],"value":"null","annotations":[]},"transform":{"name":"transform","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]},"childIndex":{"name":"childIndex","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"computeAxisAlignedBox":{"name":"computeAxisAlignedBox","qualifiedName":"box2d/box2d.CircleShape.computeAxisAlignedBox","comment":"<p>Computes the associated axis aligned bounding box for a child shape\ngiven a transform. Returns through the given out paramater.</p>","commentFrom":"","inheritedFrom":"box2d.Shape.computeAxisAlignedBox","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"box":{"name":"box","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Aabb2","inner":[]}],"value":"null","annotations":[]},"transform":{"name":"transform","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.Transform","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"computeMass":{"name":"computeMass","qualifiedName":"box2d/box2d.CircleShape.computeMass","comment":"<p>Computes (and returns through the given out parameter massData) the mass\nproperties of this shape using its dimensions and the\ngiven density. The inertia tensor is computed about the local origin.</p>","commentFrom":"","inheritedFrom":"box2d.Shape.computeMass","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"massData":{"name":"massData","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d.MassData","inner":[]}],"value":"null","annotations":[]},"density":{"name":"density","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"clone":{"name":"clone","qualifiedName":"box2d/box2d.CircleShape.clone","comment":"<p>Returns a clone of this shape.</p>","commentFrom":"","inheritedFrom":"box2d.Shape.clone","static":false,"abstract":true,"constant":false,"return":[{"outer":"box2d/box2d.Shape","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}