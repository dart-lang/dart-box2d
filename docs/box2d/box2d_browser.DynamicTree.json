{"name":"DynamicTree","qualifiedName":"box2d/box2d_browser.DynamicTree","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"MAX_STACK_SIZE":{"name":"MAX_STACK_SIZE","qualifiedName":"box2d/box2d.DynamicTree.MAX_STACK_SIZE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"center":{"name":"center","qualifiedName":"box2d/box2d.DynamicTree.center","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"deltaOne":{"name":"deltaOne","qualifiedName":"box2d/box2d.DynamicTree.deltaOne","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"deltaTwo":{"name":"deltaTwo","qualifiedName":"box2d/box2d.DynamicTree.deltaTwo","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"box2d/box2d_browser.DynamicTree.DynamicTree-","comment":"<p>Constructs a new DynamicTree.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"createProxy":{"name":"createProxy","qualifiedName":"box2d/box2d_browser.DynamicTree.createProxy","comment":"<p>Create a proxy. Provides a tight fitting axis aligned box\nand a userData pointer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"box2d/box2d_browser.DynamicTreeNode","inner":[]}],"parameters":{"box":{"name":"box","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Aabb2","inner":[]}],"value":"null","annotations":[]},"userData":{"name":"userData","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"destroyProxy":{"name":"destroyProxy","qualifiedName":"box2d/box2d_browser.DynamicTree.destroyProxy","comment":"<p>Destroys the given proxy.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"toDestroy":{"name":"toDestroy","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.DynamicTreeNode","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"moveProxy":{"name":"moveProxy","qualifiedName":"box2d/box2d_browser.DynamicTree.moveProxy","comment":"<p>Move a proxy with a swept AABB. If the proxy has moved outside of its\nfattened AABB, then the proxy is removed from the tree and re-inserted.\nOtherwise, the function returns immediately.</p>\n<p>Returns true if the given proxy was re-inserted.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"argProxy":{"name":"argProxy","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.DynamicTreeNode","inner":[]}],"value":"null","annotations":[]},"argBox":{"name":"argBox","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Aabb2","inner":[]}],"value":"null","annotations":[]},"displacement":{"name":"displacement","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Vector2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"query":{"name":"query","qualifiedName":"box2d/box2d_browser.DynamicTree.query","comment":"<p>Queries a bounding box for overlapping proxies. The callback class is\ncalled for each proxy that overlaps the given bounding box.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"box2d/box2d_browser.TreeCallback","inner":[]}],"value":"null","annotations":[]},"argBox":{"name":"argBox","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math_64.Aabb2","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"computeHeightFromRoot":{"name":"computeHeightFromRoot","qualifiedName":"box2d/box2d_browser.DynamicTree.computeHeightFromRoot","comment":"<p>Computes the height of the overall tree.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"rebalance":{"name":"rebalance","qualifiedName":"box2d/box2d_browser.DynamicTree.rebalance","comment":"<p>Rebalances the tree for the given number of iterations. Does a post-order\ntraversal of the tree. If given enough iterations it will hit all nodes of\nthe tree. Starts at the last reinserted leaf.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"iterations":{"name":"iterations","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d_browser.DynamicTree.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d_browser.DynamicTree.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d_browser.DynamicTree.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d_browser.DynamicTree.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d_browser.DynamicTree.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d_browser.DynamicTree.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d_browser.DynamicTree.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d_browser.DynamicTree.noSuchMethod","comment":"<p><a>box2d/box2d_browser.DynamicTree.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d_browser.DynamicTree.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d_browser.DynamicTree.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d_browser.DynamicTree.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}