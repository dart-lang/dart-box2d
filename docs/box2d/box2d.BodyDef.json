{"name":"BodyDef","qualifiedName":"box2d/box2d.BodyDef","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"type":{"name":"type","qualifiedName":"box2d/box2d.BodyDef.type","comment":"<p>The body type: static, kinematic, or dynamic.\nNote: if a dynamic body would have zero mass, the mass is set to one.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"angle":{"name":"angle","qualifiedName":"box2d/box2d.BodyDef.angle","comment":"<p>The world angle of the body in radians.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"userData":{"name":"userData","qualifiedName":"box2d/box2d.BodyDef.userData","comment":"<p>User can store whatever they wish in here.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Object","inner":[]}],"annotations":[]},"position":{"name":"position","qualifiedName":"box2d/box2d.BodyDef.position","comment":"<p>The world position of the body.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"linearVelocity":{"name":"linearVelocity","qualifiedName":"box2d/box2d.BodyDef.linearVelocity","comment":"<p>Linear velocity of the body in world coordinates.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"box2d/box2d.Vector2","inner":[]}],"annotations":[]},"angularVelocity":{"name":"angularVelocity","qualifiedName":"box2d/box2d.BodyDef.angularVelocity","comment":"<p>Angular velocity of the body.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"fixedRotation":{"name":"fixedRotation","qualifiedName":"box2d/box2d.BodyDef.fixedRotation","comment":"<p>If true, the body will be allowed to rotate. Otherwise, its rotation will\nbe fixed.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"isSleeping":{"name":"isSleeping","qualifiedName":"box2d/box2d.BodyDef.isSleeping","comment":"<p>If true, this body is initially sleeping.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"bullet":{"name":"bullet","qualifiedName":"box2d/box2d.BodyDef.bullet","comment":"<p>Is this a fast moving body that should be prevented from tunneling\nthrough other moving bodies? Note that all bodies are prevented from\ntunneling through kinematic and static bodies. This setting is only\nconsidered on dynamic bodies.</p>\n<p>You should use this flag sparingly since it increases processing time.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"allowSleep":{"name":"allowSleep","qualifiedName":"box2d/box2d.BodyDef.allowSleep","comment":"<p>Set to false to prevent a body from ever falling asleep.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"linearDamping":{"name":"linearDamping","qualifiedName":"box2d/box2d.BodyDef.linearDamping","comment":"<p>Linear damping is used to reduce the linear velocity. The damping\nparameter can be larger than 1.0 but the damping effect becomes\nsensitive to the time step when the damping parameter is large.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"angularDamping":{"name":"angularDamping","qualifiedName":"box2d/box2d.BodyDef.angularDamping","comment":"<p>Angular damping is used to reduce the angular velocity. The\ndamping parameter can be larger than 1.0 but the damping effect\nbecomes sensitive to time step when the damping parameter is large.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"awake":{"name":"awake","qualifiedName":"box2d/box2d.BodyDef.awake","comment":"<p>Is this body initially awake or asleep?</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"active":{"name":"active","qualifiedName":"box2d/box2d.BodyDef.active","comment":"<p>If true, this body starts out active.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"box2d/box2d.BodyDef.BodyDef-","comment":"<p>Constructs a new BodyDef with default values.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"box2d/box2d.BodyDef.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>box2d/box2d.BodyDef.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"box2d/box2d.BodyDef.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"box2d/box2d.BodyDef.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>box2d/box2d.BodyDef.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>box2d/box2d.BodyDef.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"box2d/box2d.BodyDef.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"box2d/box2d.BodyDef.noSuchMethod","comment":"<p><a>box2d/box2d.BodyDef.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>box2d/box2d.BodyDef.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>box2d/box2d.BodyDef.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>box2d/box2d.BodyDef.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}